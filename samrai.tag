<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>main</name>
    <title>SAMRAI Source Code Documentation</title>
    <filename>main</filename>
    <docanchor file="main">using_samrai_dox</docanchor>
  </compound>
  <compound kind="file">
    <name>manual_femutils.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/dox/</path>
    <filename>manual__femutils_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>manual_hyperbolic.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/dox/</path>
    <filename>manual__hyperbolic_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>manual_implicit.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/dox/</path>
    <filename>manual__implicit_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>manual_method_of_lines.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/dox/</path>
    <filename>manual__method__of__lines_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>manual_time_refinement.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/dox/</path>
    <filename>manual__time__refinement_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>HyperbolicLevelIntegrator.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>HyperbolicLevelIntegrator_8C</filename>
    <includes id="HyperbolicLevelIntegrator_8h" name="HyperbolicLevelIntegrator.h" local="yes" imported="no">SAMRAI/algs/HyperbolicLevelIntegrator.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="FaceDataFactory_8h" name="FaceDataFactory.h" local="yes" imported="no">SAMRAI/pdat/FaceDataFactory.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">SAMRAI/pdat/FaceVariable.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceVariable.h</includes>
    <includes id="OutersideData_8h" name="OutersideData.h" local="yes" imported="no">SAMRAI/pdat/OutersideData.h</includes>
    <includes id="OutersideVariable_8h" name="OutersideVariable.h" local="yes" imported="no">SAMRAI/pdat/OutersideVariable.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="SideDataFactory_8h" name="SideDataFactory.h" local="yes" imported="no">SAMRAI/pdat/SideDataFactory.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <includes id="CoarsenSchedule_8h" name="CoarsenSchedule.h" local="yes" imported="no">SAMRAI/xfer/CoarsenSchedule.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="PatchDataRestartManager_8h" name="PatchDataRestartManager.h" local="yes" imported="no">SAMRAI/hier/PatchDataRestartManager.h</includes>
    <includes id="OverlapConnectorAlgorithm_8h" name="OverlapConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/OverlapConnectorAlgorithm.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="RestartManager_8h" name="RestartManager.h" local="yes" imported="no">SAMRAI/tbox/RestartManager.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>HyperbolicLevelIntegrator_8C.html</anchorfile>
      <anchor>a3ecd6d993efeef2d15c9317da600fcec</anchor>
      <arglist>(upfluxsum1d, UPFLUXSUM1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HyperbolicLevelIntegrator.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>HyperbolicLevelIntegrator_8h</filename>
    <includes id="HyperbolicPatchStrategy_8h" name="HyperbolicPatchStrategy.h" local="yes" imported="no">SAMRAI/algs/HyperbolicPatchStrategy.h</includes>
    <includes id="TimeRefinementLevelStrategy_8h" name="TimeRefinementLevelStrategy.h" local="yes" imported="no">SAMRAI/algs/TimeRefinementLevelStrategy.h</includes>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">SAMRAI/hier/ComponentSelector.h</includes>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="VariableContext_8h" name="VariableContext.h" local="yes" imported="no">SAMRAI/hier/VariableContext.h</includes>
    <includes id="GriddingAlgorithm_8h" name="GriddingAlgorithm.h" local="yes" imported="no">SAMRAI/mesh/GriddingAlgorithm.h</includes>
    <includes id="StandardTagAndInitStrategy_8h" name="StandardTagAndInitStrategy.h" local="yes" imported="no">SAMRAI/mesh/StandardTagAndInitStrategy.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Serializable_8h" name="Serializable.h" local="yes" imported="no">SAMRAI/tbox/Serializable.h</includes>
    <includes id="CoarsenAlgorithm_8h" name="CoarsenAlgorithm.h" local="yes" imported="no">SAMRAI/xfer/CoarsenAlgorithm.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">SAMRAI/xfer/RefineAlgorithm.h</includes>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">SAMRAI/xfer/RefineSchedule.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="Statistic_8h" name="Statistic.h" local="yes" imported="no">SAMRAI/tbox/Statistic.h</includes>
    <includes id="Statistician_8h" name="Statistician.h" local="yes" imported="no">SAMRAI/tbox/Statistician.h</includes>
    <class kind="class">SAMRAI::algs::HyperbolicLevelIntegrator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
    <member kind="define">
      <type>#define</type>
      <name>HLI_RECORD_STATS</name>
      <anchorfile>HyperbolicLevelIntegrator_8h.html</anchorfile>
      <anchor>aa3718894095cb82b78296124afd690d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HyperbolicPatchStrategy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>HyperbolicPatchStrategy_8C</filename>
    <includes id="HyperbolicPatchStrategy_8h" name="HyperbolicPatchStrategy.h" local="yes" imported="no">SAMRAI/algs/HyperbolicPatchStrategy.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>HyperbolicPatchStrategy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>HyperbolicPatchStrategy_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="VariableContext_8h" name="VariableContext.h" local="yes" imported="no">SAMRAI/hier/VariableContext.h</includes>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">SAMRAI/xfer/RefinePatchStrategy.h</includes>
    <includes id="CoarsenPatchStrategy_8h" name="CoarsenPatchStrategy.h" local="yes" imported="no">SAMRAI/xfer/CoarsenPatchStrategy.h</includes>
    <includes id="GriddingAlgorithm_8h" name="GriddingAlgorithm.h" local="yes" imported="no">SAMRAI/mesh/GriddingAlgorithm.h</includes>
    <class kind="class">SAMRAI::algs::HyperbolicPatchStrategy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>ImplicitEquationStrategy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>ImplicitEquationStrategy_8C</filename>
    <includes id="ImplicitEquationStrategy_8h" name="ImplicitEquationStrategy.h" local="yes" imported="no">SAMRAI/algs/ImplicitEquationStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>ImplicitEquationStrategy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>ImplicitEquationStrategy_8h</filename>
    <includes id="SAMRAIVectorReal_8h" name="SAMRAIVectorReal.h" local="yes" imported="no">SAMRAI/solv/SAMRAIVectorReal.h</includes>
    <class kind="class">SAMRAI::algs::ImplicitEquationStrategy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>ImplicitIntegrator.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>ImplicitIntegrator_8C</filename>
    <includes id="ImplicitIntegrator_8h" name="ImplicitIntegrator.h" local="yes" imported="no">SAMRAI/algs/ImplicitIntegrator.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="RestartManager_8h" name="RestartManager.h" local="yes" imported="no">SAMRAI/tbox/RestartManager.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>ImplicitIntegrator.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>ImplicitIntegrator_8h</filename>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Serializable_8h" name="Serializable.h" local="yes" imported="no">SAMRAI/tbox/Serializable.h</includes>
    <includes id="ImplicitEquationStrategy_8h" name="ImplicitEquationStrategy.h" local="yes" imported="no">SAMRAI/algs/ImplicitEquationStrategy.h</includes>
    <includes id="NonlinearSolverStrategy_8h" name="NonlinearSolverStrategy.h" local="yes" imported="no">SAMRAI/solv/NonlinearSolverStrategy.h</includes>
    <includes id="SAMRAIVectorReal_8h" name="SAMRAIVectorReal.h" local="yes" imported="no">SAMRAI/solv/SAMRAIVectorReal.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="InputDatabase_8h" name="InputDatabase.h" local="yes" imported="no">SAMRAI/tbox/InputDatabase.h</includes>
    <class kind="class">SAMRAI::algs::ImplicitIntegrator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>MethodOfLinesIntegrator.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>MethodOfLinesIntegrator_8C</filename>
    <includes id="MethodOfLinesIntegrator_8h" name="MethodOfLinesIntegrator.h" local="yes" imported="no">SAMRAI/algs/MethodOfLinesIntegrator.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="PatchDataRestartManager_8h" name="PatchDataRestartManager.h" local="yes" imported="no">SAMRAI/hier/PatchDataRestartManager.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="RestartManager_8h" name="RestartManager.h" local="yes" imported="no">SAMRAI/tbox/RestartManager.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>MethodOfLinesIntegrator.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>MethodOfLinesIntegrator_8h</filename>
    <includes id="CoarsenAlgorithm_8h" name="CoarsenAlgorithm.h" local="yes" imported="no">SAMRAI/xfer/CoarsenAlgorithm.h</includes>
    <includes id="CoarsenSchedule_8h" name="CoarsenSchedule.h" local="yes" imported="no">SAMRAI/xfer/CoarsenSchedule.h</includes>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">SAMRAI/hier/ComponentSelector.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="GriddingAlgorithm_8h" name="GriddingAlgorithm.h" local="yes" imported="no">SAMRAI/mesh/GriddingAlgorithm.h</includes>
    <includes id="MethodOfLinesPatchStrategy_8h" name="MethodOfLinesPatchStrategy.h" local="yes" imported="no">SAMRAI/algs/MethodOfLinesPatchStrategy.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">SAMRAI/xfer/RefineAlgorithm.h</includes>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">SAMRAI/xfer/RefineSchedule.h</includes>
    <includes id="Serializable_8h" name="Serializable.h" local="yes" imported="no">SAMRAI/tbox/Serializable.h</includes>
    <includes id="StandardTagAndInitStrategy_8h" name="StandardTagAndInitStrategy.h" local="yes" imported="no">SAMRAI/mesh/StandardTagAndInitStrategy.h</includes>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="VariableContext_8h" name="VariableContext.h" local="yes" imported="no">SAMRAI/hier/VariableContext.h</includes>
    <class kind="class">SAMRAI::algs::MethodOfLinesIntegrator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>MethodOfLinesPatchStrategy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>MethodOfLinesPatchStrategy_8C</filename>
    <includes id="MethodOfLinesPatchStrategy_8h" name="MethodOfLinesPatchStrategy.h" local="yes" imported="no">SAMRAI/algs/MethodOfLinesPatchStrategy.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>MethodOfLinesPatchStrategy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>MethodOfLinesPatchStrategy_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="VariableContext_8h" name="VariableContext.h" local="yes" imported="no">SAMRAI/hier/VariableContext.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="CoarsenPatchStrategy_8h" name="CoarsenPatchStrategy.h" local="yes" imported="no">SAMRAI/xfer/CoarsenPatchStrategy.h</includes>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">SAMRAI/xfer/RefinePatchStrategy.h</includes>
    <class kind="class">SAMRAI::algs::MethodOfLinesPatchStrategy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeSumTransaction.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>OuteredgeSumTransaction_8C</filename>
    <includes id="OuteredgeSumTransaction_8h" name="OuteredgeSumTransaction.h" local="yes" imported="no">SAMRAI/algs/OuteredgeSumTransaction.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">SAMRAI/math/ArrayDataBasicOps.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">SAMRAI/pdat/EdgeGeometry.h</includes>
    <includes id="OuteredgeData_8h" name="OuteredgeData.h" local="yes" imported="no">SAMRAI/pdat/OuteredgeData.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeSumTransaction.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>OuteredgeSumTransaction_8h</filename>
    <includes id="Transaction_8h" name="Transaction.h" local="yes" imported="no">SAMRAI/tbox/Transaction.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">SAMRAI/xfer/RefineClasses.h</includes>
    <class kind="class">SAMRAI::algs::OuteredgeSumTransaction</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeSumTransactionFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>OuteredgeSumTransactionFactory_8C</filename>
    <includes id="OuteredgeSumTransactionFactory_8h" name="OuteredgeSumTransactionFactory.h" local="yes" imported="no">SAMRAI/algs/OuteredgeSumTransactionFactory.h</includes>
    <includes id="OuteredgeData_8h" name="OuteredgeData.h" local="yes" imported="no">SAMRAI/pdat/OuteredgeData.h</includes>
    <includes id="OuteredgeSumTransaction_8h" name="OuteredgeSumTransaction.h" local="yes" imported="no">SAMRAI/algs/OuteredgeSumTransaction.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeSumTransactionFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>OuteredgeSumTransactionFactory_8h</filename>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">SAMRAI/hier/ComponentSelector.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">SAMRAI/xfer/RefineClasses.h</includes>
    <includes id="RefineTransactionFactory_8h" name="RefineTransactionFactory.h" local="yes" imported="no">SAMRAI/xfer/RefineTransactionFactory.h</includes>
    <class kind="class">SAMRAI::algs::OuteredgeSumTransactionFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeSumTransaction.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>OuternodeSumTransaction_8C</filename>
    <includes id="OuternodeSumTransaction_8h" name="OuternodeSumTransaction.h" local="yes" imported="no">SAMRAI/algs/OuternodeSumTransaction.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">SAMRAI/math/ArrayDataBasicOps.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/NodeGeometry.h</includes>
    <includes id="OuternodeData_8h" name="OuternodeData.h" local="yes" imported="no">SAMRAI/pdat/OuternodeData.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeSumTransaction.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>OuternodeSumTransaction_8h</filename>
    <includes id="Transaction_8h" name="Transaction.h" local="yes" imported="no">SAMRAI/tbox/Transaction.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">SAMRAI/xfer/RefineClasses.h</includes>
    <class kind="class">SAMRAI::algs::OuternodeSumTransaction</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeSumTransactionFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>OuternodeSumTransactionFactory_8C</filename>
    <includes id="OuternodeSumTransactionFactory_8h" name="OuternodeSumTransactionFactory.h" local="yes" imported="no">SAMRAI/algs/OuternodeSumTransactionFactory.h</includes>
    <includes id="OuternodeData_8h" name="OuternodeData.h" local="yes" imported="no">SAMRAI/pdat/OuternodeData.h</includes>
    <includes id="OuternodeSumTransaction_8h" name="OuternodeSumTransaction.h" local="yes" imported="no">SAMRAI/algs/OuternodeSumTransaction.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeSumTransactionFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>OuternodeSumTransactionFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">SAMRAI/hier/ComponentSelector.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">SAMRAI/xfer/RefineClasses.h</includes>
    <includes id="RefineTransactionFactory_8h" name="RefineTransactionFactory.h" local="yes" imported="no">SAMRAI/xfer/RefineTransactionFactory.h</includes>
    <class kind="class">SAMRAI::algs::OuternodeSumTransactionFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>PatchBoundaryEdgeSum.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>PatchBoundaryEdgeSum_8C</filename>
    <includes id="PatchBoundaryEdgeSum_8h" name="PatchBoundaryEdgeSum.h" local="yes" imported="no">SAMRAI/algs/PatchBoundaryEdgeSum.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="EdgeDataFactory_8h" name="EdgeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/EdgeDataFactory.h</includes>
    <includes id="OuteredgeData_8h" name="OuteredgeData.h" local="yes" imported="no">SAMRAI/pdat/OuteredgeData.h</includes>
    <includes id="OuteredgeSumTransactionFactory_8h" name="OuteredgeSumTransactionFactory.h" local="yes" imported="no">SAMRAI/algs/OuteredgeSumTransactionFactory.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">SAMRAI/xfer/RefineAlgorithm.h</includes>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">SAMRAI/xfer/RefinePatchStrategy.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>PatchBoundaryEdgeSum.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>PatchBoundaryEdgeSum_8h</filename>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">SAMRAI/pdat/EdgeVariable.h</includes>
    <includes id="OuteredgeVariable_8h" name="OuteredgeVariable.h" local="yes" imported="no">SAMRAI/pdat/OuteredgeVariable.h</includes>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">SAMRAI/xfer/RefineSchedule.h</includes>
    <includes id="RefineTransactionFactory_8h" name="RefineTransactionFactory.h" local="yes" imported="no">SAMRAI/xfer/RefineTransactionFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::algs::PatchBoundaryEdgeSum</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>PatchBoundaryNodeSum.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>PatchBoundaryNodeSum_8C</filename>
    <includes id="PatchBoundaryNodeSum_8h" name="PatchBoundaryNodeSum.h" local="yes" imported="no">SAMRAI/algs/PatchBoundaryNodeSum.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="NodeDataFactory_8h" name="NodeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/NodeDataFactory.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/NodeGeometry.h</includes>
    <includes id="OuternodeData_8h" name="OuternodeData.h" local="yes" imported="no">SAMRAI/pdat/OuternodeData.h</includes>
    <includes id="OuternodeDoubleInjection_8h" name="OuternodeDoubleInjection.h" local="yes" imported="no">SAMRAI/pdat/OuternodeDoubleInjection.h</includes>
    <includes id="OuternodeSumTransactionFactory_8h" name="OuternodeSumTransactionFactory.h" local="yes" imported="no">SAMRAI/algs/OuternodeSumTransactionFactory.h</includes>
    <includes id="CoarsenAlgorithm_8h" name="CoarsenAlgorithm.h" local="yes" imported="no">SAMRAI/xfer/CoarsenAlgorithm.h</includes>
    <includes id="OverlapConnectorAlgorithm_8h" name="OverlapConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/OverlapConnectorAlgorithm.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">SAMRAI/xfer/RefineAlgorithm.h</includes>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">SAMRAI/xfer/RefinePatchStrategy.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>PatchBoundaryNodeSum_8C.html</anchorfile>
      <anchor>af00786203a31fe18ed84001947111e02</anchor>
      <arglist>(nodeouternodesum2d, NODEOUTERNODESUM2D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchBoundaryNodeSum.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>PatchBoundaryNodeSum_8h</filename>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">SAMRAI/hier/ComponentSelector.h</includes>
    <includes id="CoarseFineBoundary_8h" name="CoarseFineBoundary.h" local="yes" imported="no">SAMRAI/hier/CoarseFineBoundary.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">SAMRAI/pdat/NodeVariable.h</includes>
    <includes id="OuternodeVariable_8h" name="OuternodeVariable.h" local="yes" imported="no">SAMRAI/pdat/OuternodeVariable.h</includes>
    <includes id="CoarsenSchedule_8h" name="CoarsenSchedule.h" local="yes" imported="no">SAMRAI/xfer/CoarsenSchedule.h</includes>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">SAMRAI/xfer/RefineSchedule.h</includes>
    <includes id="RefineTransactionFactory_8h" name="RefineTransactionFactory.h" local="yes" imported="no">SAMRAI/xfer/RefineTransactionFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::algs::PatchBoundaryNodeSum</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>TimeRefinementIntegrator.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>TimeRefinementIntegrator_8C</filename>
    <includes id="TimeRefinementIntegrator_8h" name="TimeRefinementIntegrator.h" local="yes" imported="no">SAMRAI/algs/TimeRefinementIntegrator.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="RestartManager_8h" name="RestartManager.h" local="yes" imported="no">SAMRAI/tbox/RestartManager.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>TimeRefinementIntegrator.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>TimeRefinementIntegrator_8h</filename>
    <includes id="TimeRefinementLevelStrategy_8h" name="TimeRefinementLevelStrategy.h" local="yes" imported="no">SAMRAI/algs/TimeRefinementLevelStrategy.h</includes>
    <includes id="TimeRefinementIntegratorConnectorWidthRequestor_8h" name="TimeRefinementIntegratorConnectorWidthRequestor.h" local="yes" imported="no">SAMRAI/algs/TimeRefinementIntegratorConnectorWidthRequestor.h</includes>
    <includes id="GriddingAlgorithmStrategy_8h" name="GriddingAlgorithmStrategy.h" local="yes" imported="no">SAMRAI/mesh/GriddingAlgorithmStrategy.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Serializable_8h" name="Serializable.h" local="yes" imported="no">SAMRAI/tbox/Serializable.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::algs::TimeRefinementIntegrator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>TimeRefinementIntegratorConnectorWidthRequestor.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>TimeRefinementIntegratorConnectorWidthRequestor_8C</filename>
    <includes id="TimeRefinementIntegratorConnectorWidthRequestor_8h" name="TimeRefinementIntegratorConnectorWidthRequestor.h" local="yes" imported="no">SAMRAI/algs/TimeRefinementIntegratorConnectorWidthRequestor.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>TimeRefinementIntegratorConnectorWidthRequestor.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>TimeRefinementIntegratorConnectorWidthRequestor_8h</filename>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <class kind="class">SAMRAI::algs::TimeRefinementIntegratorConnectorWidthRequestor</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>TimeRefinementLevelStrategy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>TimeRefinementLevelStrategy_8C</filename>
    <includes id="TimeRefinementLevelStrategy_8h" name="TimeRefinementLevelStrategy.h" local="yes" imported="no">SAMRAI/algs/TimeRefinementLevelStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>TimeRefinementLevelStrategy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/</path>
    <filename>TimeRefinementLevelStrategy_8h</filename>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="GriddingAlgorithmStrategy_8h" name="GriddingAlgorithmStrategy.h" local="yes" imported="no">SAMRAI/mesh/GriddingAlgorithmStrategy.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::algs::TimeRefinementLevelStrategy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>BoundaryUtilityStrategy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/appu/</path>
    <filename>BoundaryUtilityStrategy_8C</filename>
    <includes id="BoundaryUtilityStrategy_8h" name="BoundaryUtilityStrategy.h" local="yes" imported="no">SAMRAI/appu/BoundaryUtilityStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>BoundaryUtilityStrategy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/appu/</path>
    <filename>BoundaryUtilityStrategy_8h</filename>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::appu::BoundaryUtilityStrategy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianBoundaryDefines.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/appu/</path>
    <filename>CartesianBoundaryDefines_8h</filename>
    <namespace>Bdry</namespace>
    <namespace>BdryLoc</namespace>
    <namespace>NodeBdyLoc2D</namespace>
    <namespace>EdgeBdyLoc3D</namespace>
    <namespace>NodeBdyLoc3D</namespace>
    <namespace>BdryCond</namespace>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>namespaceBdry.html</anchorfile>
      <anchor>aad3d96e8fb5584ece448f695bc5055ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNDEFINED</name>
      <anchorfile>namespaceBdry.html</anchorfile>
      <anchor>aad3d96e8fb5584ece448f695bc5055aba362b1042988dd6dd7484015b76e39260</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FACE3D</name>
      <anchorfile>namespaceBdry.html</anchorfile>
      <anchor>aad3d96e8fb5584ece448f695bc5055abaeb57b9d5db99985835df377908fcb076</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EDGE3D</name>
      <anchorfile>namespaceBdry.html</anchorfile>
      <anchor>aad3d96e8fb5584ece448f695bc5055aba545ab7e250abb928202f2203c20b96fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NODE3D</name>
      <anchorfile>namespaceBdry.html</anchorfile>
      <anchor>aad3d96e8fb5584ece448f695bc5055aba54acdd9dff31c51ee6a89081fc11ab0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EDGE2D</name>
      <anchorfile>namespaceBdry.html</anchorfile>
      <anchor>aad3d96e8fb5584ece448f695bc5055abaa919a6a832c4e925fb55a83c4f108d44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NODE2D</name>
      <anchorfile>namespaceBdry.html</anchorfile>
      <anchor>aad3d96e8fb5584ece448f695bc5055aba7d837cb077a66a4f6ffc7931f4ac3c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NODE1D</name>
      <anchorfile>namespaceBdry.html</anchorfile>
      <anchor>aad3d96e8fb5584ece448f695bc5055abad8671dc28866256b7bfb8ed9c42bf0f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>namespaceBdryLoc.html</anchorfile>
      <anchor>a49b41c770aad9ea0ce36dd9cf80b731f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO</name>
      <anchorfile>namespaceBdryLoc.html</anchorfile>
      <anchor>a49b41c770aad9ea0ce36dd9cf80b731faa78c4eaddbc1c42cb57180bd33e048a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI</name>
      <anchorfile>namespaceBdryLoc.html</anchorfile>
      <anchor>a49b41c770aad9ea0ce36dd9cf80b731fae71c4036ad2a69d854d5c69d6d0b8cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YLO</name>
      <anchorfile>namespaceBdryLoc.html</anchorfile>
      <anchor>a49b41c770aad9ea0ce36dd9cf80b731fa34ce3786af9c194354211381ca79a0eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YHI</name>
      <anchorfile>namespaceBdryLoc.html</anchorfile>
      <anchor>a49b41c770aad9ea0ce36dd9cf80b731fa6d1cbd4a9fef56ddf7d82c7a749e6b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZLO</name>
      <anchorfile>namespaceBdryLoc.html</anchorfile>
      <anchor>a49b41c770aad9ea0ce36dd9cf80b731fa6081b2b1d87a6250c4693eca7100e8d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZHI</name>
      <anchorfile>namespaceBdryLoc.html</anchorfile>
      <anchor>a49b41c770aad9ea0ce36dd9cf80b731fa11ed4a34f280d1d9e81a06ceb15b6bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>namespaceNodeBdyLoc2D.html</anchorfile>
      <anchor>a18111e3e772b98125a27dea94cbe7c1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO_YLO</name>
      <anchorfile>namespaceNodeBdyLoc2D.html</anchorfile>
      <anchor>a18111e3e772b98125a27dea94cbe7c1da33c87e68716c8d89ae377eba6cb58179</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI_YLO</name>
      <anchorfile>namespaceNodeBdyLoc2D.html</anchorfile>
      <anchor>a18111e3e772b98125a27dea94cbe7c1daa7a834b68f8fb1237b83fed3880dfa1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO_YHI</name>
      <anchorfile>namespaceNodeBdyLoc2D.html</anchorfile>
      <anchor>a18111e3e772b98125a27dea94cbe7c1da143473cf6922f5f1b8cf8efc3ea1dd33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI_YHI</name>
      <anchorfile>namespaceNodeBdyLoc2D.html</anchorfile>
      <anchor>a18111e3e772b98125a27dea94cbe7c1da799b7ea5bf0215fbeafd8e1179d1f120</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO_YLO</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98ad9841d711e67c982c9d18530a686c439</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI_YLO</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98aa7a2d53657ebc05af365a574f52e47bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO_YHI</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98a858bc2de524df6a256ad3d64c3a95f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI_YHI</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98ab6702ca85e79ec8879da70919b5a38ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO_ZLO</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98a4139c928a385ce281d020885217bf443</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI_ZLO</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98ae015c7751e93ef251b01a9403bd6c521</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO_ZHI</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98a0f73a91e1adfc6797fb8adfe2d065dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI_ZHI</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98a84c46f5de24d7b4dc66bd0e63cfc87fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YLO_ZLO</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98a642290223bc0d5e361365a3d7effe29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YHI_ZLO</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98a1dfd0fa1c55d360c2825adfbd7ad0333</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YLO_ZHI</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98a983023c0858deed6eb4510adf3c2e2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YHI_ZHI</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98a0f4b1b16a167f59be6f654171c40f8a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>namespaceNodeBdyLoc3D.html</anchorfile>
      <anchor>a1710e3668d50a4c92a46747f4298d430</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO_YLO_ZLO</name>
      <anchorfile>namespaceNodeBdyLoc3D.html</anchorfile>
      <anchor>a1710e3668d50a4c92a46747f4298d430adb7f44f4bb8c521da9a5a57b9701e649</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI_YLO_ZLO</name>
      <anchorfile>namespaceNodeBdyLoc3D.html</anchorfile>
      <anchor>a1710e3668d50a4c92a46747f4298d430a4f9ae62a85ca17abdfc916214be2f24b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO_YHI_ZLO</name>
      <anchorfile>namespaceNodeBdyLoc3D.html</anchorfile>
      <anchor>a1710e3668d50a4c92a46747f4298d430ad5a9f71ab5d4af29b0f37b0e5a93e418</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI_YHI_ZLO</name>
      <anchorfile>namespaceNodeBdyLoc3D.html</anchorfile>
      <anchor>a1710e3668d50a4c92a46747f4298d430a52bc542db4af07afd75c7f009d8d87fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO_YLO_ZHI</name>
      <anchorfile>namespaceNodeBdyLoc3D.html</anchorfile>
      <anchor>a1710e3668d50a4c92a46747f4298d430af9a57422ac02726cc49c4db9ad050811</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI_YLO_ZHI</name>
      <anchorfile>namespaceNodeBdyLoc3D.html</anchorfile>
      <anchor>a1710e3668d50a4c92a46747f4298d430ae389544f5613b8034259f6f5304119c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO_YHI_ZHI</name>
      <anchorfile>namespaceNodeBdyLoc3D.html</anchorfile>
      <anchor>a1710e3668d50a4c92a46747f4298d430acf1c2882e773ecc4d2aca9b3524cb18a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI_YHI_ZHI</name>
      <anchorfile>namespaceNodeBdyLoc3D.html</anchorfile>
      <anchor>a1710e3668d50a4c92a46747f4298d430aef851cf60880b04f3e8c4195cac1c395</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLOW</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaada6508d34ee94eaac0aeec4dc93b670224</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REFLECT</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaada3377087764e427bbf84bcf05490fe5c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIRICHLET</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaadabcfde2b2403594f3acc9c523b3ccc844</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEUMANN</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaada78ba35a6bdfd280ae3127b910e5778ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XFLOW</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaadacf88d17396a28569091ece804b21c567</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YFLOW</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaadad1a3e6984bb1f841ee584d9df40cbf3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZFLOW</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaadaae2daa9e6bafe5e1cc7dcc81f80680a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XREFLECT</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaada150739d2a78130a2f916b16de9a4f608</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YREFLECT</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaada4ccdecd70cf8dd1eb41ff052c58acc12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZREFLECT</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaada14321946cc48a1fc327391914b81b638</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XDIRICHLET</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaada3c9e860dd167dcad173a79acb7dc2262</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YDIRICHLET</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaadadc65a39ac25197e61295cd71afb73e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZDIRICHLET</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaadab46918087847e9a62a2ef539ed9b0f57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XNEUMANN</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaada792dfc264a6250ecd84af96348355b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YNEUMANN</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaada74353458cfc99547da62f64c8a49aff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZNEUMANN</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaada3313306e80b3b14d6a333a33bd71e145</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>NUM_1D_NODES</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>aa6e2e2dd38461bab754a144bf3266da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>NUM_2D_EDGES</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>aa3d46b8d7f705c23675178634612d782</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>NUM_2D_NODES</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a9ea7ffea38330954e8aee0d78c17f688</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>NUM_3D_FACES</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a1c949d9e348c4a18ddfbac3204ac5639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>NUM_3D_EDGES</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a948c1fbc87301dd95e866f5a745300fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>NUM_3D_NODES</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>abb9c7c11c3a12b2d06963ffaebcd3db1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianBoundaryUtilities2.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/appu/</path>
    <filename>CartesianBoundaryUtilities2_8C</filename>
    <includes id="CartesianBoundaryUtilities2_8h" name="CartesianBoundaryUtilities2.h" local="yes" imported="no">SAMRAI/appu/CartesianBoundaryUtilities2.h</includes>
    <includes id="CartesianBoundaryDefines_8h" name="CartesianBoundaryDefines.h" local="yes" imported="no">SAMRAI/appu/CartesianBoundaryDefines.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">SAMRAI/hier/BoundaryBox.h</includes>
    <includes id="CellIndex_8h" name="CellIndex.h" local="yes" imported="no">SAMRAI/pdat/CellIndex.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianBoundaryUtilities2_8C.html</anchorfile>
      <anchor>aa888444fe00e547f520887debb14afd3</anchor>
      <arglist>(stufcartbdryloc2d, STUFCARTBDRYLOC2D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianBoundaryUtilities2.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/appu/</path>
    <filename>CartesianBoundaryUtilities2_8h</filename>
    <includes id="BoundaryUtilityStrategy_8h" name="BoundaryUtilityStrategy.h" local="yes" imported="no">SAMRAI/appu/BoundaryUtilityStrategy.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">SAMRAI/hier/BoundaryBox.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <class kind="struct">SAMRAI::appu::CartesianBoundaryUtilities2</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianBoundaryUtilities3.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/appu/</path>
    <filename>CartesianBoundaryUtilities3_8C</filename>
    <includes id="CartesianBoundaryUtilities3_8h" name="CartesianBoundaryUtilities3.h" local="yes" imported="no">SAMRAI/appu/CartesianBoundaryUtilities3.h</includes>
    <includes id="CartesianBoundaryDefines_8h" name="CartesianBoundaryDefines.h" local="yes" imported="no">SAMRAI/appu/CartesianBoundaryDefines.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">SAMRAI/hier/BoundaryBox.h</includes>
    <includes id="CellIndex_8h" name="CellIndex.h" local="yes" imported="no">SAMRAI/pdat/CellIndex.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianBoundaryUtilities3_8C.html</anchorfile>
      <anchor>a15afc53d734d8a6f64c4c3fec27d252b</anchor>
      <arglist>(stufcartbdryloc3d, STUFCARTBDRYLOC3D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianBoundaryUtilities3.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/appu/</path>
    <filename>CartesianBoundaryUtilities3_8h</filename>
    <includes id="BoundaryUtilityStrategy_8h" name="BoundaryUtilityStrategy.h" local="yes" imported="no">SAMRAI/appu/BoundaryUtilityStrategy.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">SAMRAI/hier/BoundaryBox.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <class kind="struct">SAMRAI::appu::CartesianBoundaryUtilities3</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>manual_boundary.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/appu/dox/</path>
    <filename>manual__boundary_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>manual_plotting.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/appu/dox/</path>
    <filename>manual__plotting_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>VisDerivedDataStrategy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/appu/</path>
    <filename>VisDerivedDataStrategy_8C</filename>
    <includes id="VisDerivedDataStrategy_8h" name="VisDerivedDataStrategy.h" local="yes" imported="no">SAMRAI/appu/VisDerivedDataStrategy.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>VisDerivedDataStrategy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/appu/</path>
    <filename>VisDerivedDataStrategy_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::appu::VisDerivedDataStrategy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>VisItDataWriter.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/appu/</path>
    <filename>VisItDataWriter_8C</filename>
    <includes id="VisItDataWriter_8h" name="VisItDataWriter.h" local="yes" imported="no">SAMRAI/appu/VisItDataWriter.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <includes id="BoxLevelConnectorUtils_8h" name="BoxLevelConnectorUtils.h" local="yes" imported="no">SAMRAI/hier/BoxLevelConnectorUtils.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="CellDataFactory_8h" name="CellDataFactory.h" local="yes" imported="no">SAMRAI/pdat/CellDataFactory.h</includes>
    <includes id="NodeDataFactory_8h" name="NodeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/NodeDataFactory.h</includes>
    <includes id="CartesianGridGeometry_8h" name="CartesianGridGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianGridGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>VisItDataWriter_8C.html</anchorfile>
      <anchor>a07ce9d8e9d868374d85c10f83176dbb0</anchor>
      <arglist>(cpfdat2buf3d, CPFDAT2BUF3D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VisItDataWriter.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/appu/</path>
    <filename>VisItDataWriter_8h</filename>
    <includes id="VisDerivedDataStrategy_8h" name="VisDerivedDataStrategy.h" local="yes" imported="no">SAMRAI/appu/VisDerivedDataStrategy.h</includes>
    <includes id="VisMaterialsDataStrategy_8h" name="VisMaterialsDataStrategy.h" local="yes" imported="no">SAMRAI/appu/VisMaterialsDataStrategy.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="IOStream_8h" name="IOStream.h" local="yes" imported="no">SAMRAI/tbox/IOStream.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="HDFDatabase_8h" name="HDFDatabase.h" local="yes" imported="no">SAMRAI/tbox/HDFDatabase.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <class kind="class">SAMRAI::appu::VisItDataWriter</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>VisMaterialsDataStrategy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/appu/</path>
    <filename>VisMaterialsDataStrategy_8C</filename>
    <includes id="VisMaterialsDataStrategy_8h" name="VisMaterialsDataStrategy.h" local="yes" imported="no">SAMRAI/appu/VisMaterialsDataStrategy.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>VisMaterialsDataStrategy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/appu/</path>
    <filename>VisMaterialsDataStrategy_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::appu::VisMaterialsDataStrategy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianCellComplexConservativeLinearRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianCellComplexConservativeLinearRefine_8C</filename>
    <includes id="CartesianCellComplexConservativeLinearRefine_8h" name="CartesianCellComplexConservativeLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianCellComplexConservativeLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianCellComplexConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a183bd09167125b7dd8782939b6ff87d6</anchor>
      <arglist>(cartclinrefcellcplx1d, CARTCLINREFCELLCPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianCellComplexConservativeLinearRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianCellComplexConservativeLinearRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianCellComplexConservativeLinearRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianCellComplexLinearRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianCellComplexLinearRefine_8C</filename>
    <includes id="CartesianCellComplexLinearRefine_8h" name="CartesianCellComplexLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianCellComplexLinearRefine.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianCellComplexLinearRefine_8C.html</anchorfile>
      <anchor>ab51eadeee840e68fbe6b3a58220c8aa8</anchor>
      <arglist>(cartlinrefcellcplx1d, CARTLINREFCELLCPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianCellComplexLinearRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianCellComplexLinearRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianCellComplexLinearRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianCellComplexWeightedAverage.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianCellComplexWeightedAverage_8C</filename>
    <includes id="CartesianCellComplexWeightedAverage_8h" name="CartesianCellComplexWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianCellComplexWeightedAverage.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianCellComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a5f64e7fdf56d07b26a9b5daa8485eab7</anchor>
      <arglist>(cartwgtavgcellcplx1d, CARTWGTAVGCELLCPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianCellComplexWeightedAverage.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianCellComplexWeightedAverage_8h</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianCellComplexWeightedAverage</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianCellDoubleConservativeLinearRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianCellDoubleConservativeLinearRefine_8C</filename>
    <includes id="CartesianCellDoubleConservativeLinearRefine_8h" name="CartesianCellDoubleConservativeLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianCellDoubleConservativeLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianCellDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>adff550c8d321d40feb3338cb1947f382</anchor>
      <arglist>(cartclinrefcelldoub1d, CARTCLINREFCELLDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianCellDoubleConservativeLinearRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianCellDoubleConservativeLinearRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianCellDoubleConservativeLinearRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianCellDoubleLinearRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianCellDoubleLinearRefine_8C</filename>
    <includes id="CartesianCellDoubleLinearRefine_8h" name="CartesianCellDoubleLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianCellDoubleLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianCellDoubleLinearRefine_8C.html</anchorfile>
      <anchor>a233e7e4a06f13421a10e3ef985cff22e</anchor>
      <arglist>(cartlinrefcelldoub1d, CARTLINREFCELLDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianCellDoubleLinearRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianCellDoubleLinearRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianCellDoubleLinearRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianCellDoubleWeightedAverage.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianCellDoubleWeightedAverage_8C</filename>
    <includes id="CartesianCellDoubleWeightedAverage_8h" name="CartesianCellDoubleWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianCellDoubleWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianCellDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>aada9033430857f9562c084732c295087</anchor>
      <arglist>(cartwgtavgcelldoub1d, CARTWGTAVGCELLDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianCellDoubleWeightedAverage.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianCellDoubleWeightedAverage_8h</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianCellDoubleWeightedAverage</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianCellFloatConservativeLinearRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianCellFloatConservativeLinearRefine_8C</filename>
    <includes id="CartesianCellFloatConservativeLinearRefine_8h" name="CartesianCellFloatConservativeLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianCellFloatConservativeLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianCellFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>ae6a567dcfae86ffafb50713c83390717</anchor>
      <arglist>(cartclinrefcellflot1d, CARTCLINREFCELLFLOT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianCellFloatConservativeLinearRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianCellFloatConservativeLinearRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianCellFloatConservativeLinearRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianCellFloatLinearRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianCellFloatLinearRefine_8C</filename>
    <includes id="CartesianCellFloatLinearRefine_8h" name="CartesianCellFloatLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianCellFloatLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianCellFloatLinearRefine_8C.html</anchorfile>
      <anchor>aa241946a4f65847e63bc0b2215b2f0cf</anchor>
      <arglist>(cartlinrefcellflot1d, CARTLINREFCELLFLOT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianCellFloatLinearRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianCellFloatLinearRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianCellFloatLinearRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianCellFloatWeightedAverage.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianCellFloatWeightedAverage_8C</filename>
    <includes id="CartesianCellFloatWeightedAverage_8h" name="CartesianCellFloatWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianCellFloatWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianCellFloatWeightedAverage_8C.html</anchorfile>
      <anchor>abd1d3963ee9a8ec8edc0d8a29d777f87</anchor>
      <arglist>(cartwgtavgcellflot1d, CARTWGTAVGCELLFLOT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianCellFloatWeightedAverage.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianCellFloatWeightedAverage_8h</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianCellFloatWeightedAverage</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianEdgeComplexWeightedAverage.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianEdgeComplexWeightedAverage_8C</filename>
    <includes id="CartesianEdgeComplexWeightedAverage_8h" name="CartesianEdgeComplexWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianEdgeComplexWeightedAverage.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">SAMRAI/pdat/EdgeVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianEdgeComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a6911a90cf06f50175b72d92308ec4b82</anchor>
      <arglist>(cartwgtavgedgecplx1d, CARTWGTAVGEDGECPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianEdgeComplexWeightedAverage.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianEdgeComplexWeightedAverage_8h</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianEdgeComplexWeightedAverage</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianEdgeDoubleConservativeLinearRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianEdgeDoubleConservativeLinearRefine_8C</filename>
    <includes id="CartesianEdgeDoubleConservativeLinearRefine_8h" name="CartesianEdgeDoubleConservativeLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianEdgeDoubleConservativeLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">SAMRAI/pdat/EdgeVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianEdgeDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a82890ad5ec3c0404aa982e7d771dab77</anchor>
      <arglist>(cartclinrefedgedoub1d, CARTCLINREFEDGEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianEdgeDoubleConservativeLinearRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianEdgeDoubleConservativeLinearRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianEdgeDoubleConservativeLinearRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianEdgeDoubleWeightedAverage.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianEdgeDoubleWeightedAverage_8C</filename>
    <includes id="CartesianEdgeDoubleWeightedAverage_8h" name="CartesianEdgeDoubleWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianEdgeDoubleWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">SAMRAI/pdat/EdgeVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianEdgeDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a9e343b488477075a31dd507ae803e5c2</anchor>
      <arglist>(cartwgtavgedgedoub1d, CARTWGTAVGEDGEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianEdgeDoubleWeightedAverage.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianEdgeDoubleWeightedAverage_8h</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianEdgeDoubleWeightedAverage</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianEdgeFloatConservativeLinearRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianEdgeFloatConservativeLinearRefine_8C</filename>
    <includes id="CartesianEdgeFloatConservativeLinearRefine_8h" name="CartesianEdgeFloatConservativeLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianEdgeFloatConservativeLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">SAMRAI/pdat/EdgeVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianEdgeFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a4777f5f5d84d5c02cbb27691c664a761</anchor>
      <arglist>(cartclinrefedgeflot1d, CARTCLINREFEDGEFLOT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianEdgeFloatConservativeLinearRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianEdgeFloatConservativeLinearRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianEdgeFloatConservativeLinearRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianEdgeFloatWeightedAverage.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianEdgeFloatWeightedAverage_8C</filename>
    <includes id="CartesianEdgeFloatWeightedAverage_8h" name="CartesianEdgeFloatWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianEdgeFloatWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">SAMRAI/pdat/EdgeVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianEdgeFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a26d4c156f4872d6c9a78efca3c12073b</anchor>
      <arglist>(cartwgtavgedgeflot1d, CARTWGTAVGEDGEFLOT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianEdgeFloatWeightedAverage.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianEdgeFloatWeightedAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <class kind="class">SAMRAI::geom::CartesianEdgeFloatWeightedAverage</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianFaceComplexWeightedAverage.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianFaceComplexWeightedAverage_8C</filename>
    <includes id="CartesianFaceComplexWeightedAverage_8h" name="CartesianFaceComplexWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianFaceComplexWeightedAverage.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">SAMRAI/pdat/FaceVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianFaceComplexWeightedAverage_8C.html</anchorfile>
      <anchor>abe0d4a4af7885d99b297885c184341a5</anchor>
      <arglist>(cartwgtavgfacecplx1d, CARTWGTAVGFACECPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianFaceComplexWeightedAverage.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianFaceComplexWeightedAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <class kind="class">SAMRAI::geom::CartesianFaceComplexWeightedAverage</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianFaceDoubleConservativeLinearRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianFaceDoubleConservativeLinearRefine_8C</filename>
    <includes id="CartesianFaceDoubleConservativeLinearRefine_8h" name="CartesianFaceDoubleConservativeLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianFaceDoubleConservativeLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">SAMRAI/pdat/FaceVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianFaceDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a5a63a915ec86510ea888a7a85856c1c1</anchor>
      <arglist>(cartclinreffacedoub1d, CARTCLINREFFACEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianFaceDoubleConservativeLinearRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianFaceDoubleConservativeLinearRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianFaceDoubleConservativeLinearRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianFaceDoubleWeightedAverage.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianFaceDoubleWeightedAverage_8C</filename>
    <includes id="CartesianFaceDoubleWeightedAverage_8h" name="CartesianFaceDoubleWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianFaceDoubleWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">SAMRAI/pdat/FaceVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianFaceDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>aa320b35a8fa073f6c494ee75669cb651</anchor>
      <arglist>(cartwgtavgfacedoub1d, CARTWGTAVGFACEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianFaceDoubleWeightedAverage.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianFaceDoubleWeightedAverage_8h</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianFaceDoubleWeightedAverage</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianFaceFloatConservativeLinearRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianFaceFloatConservativeLinearRefine_8C</filename>
    <includes id="CartesianFaceFloatConservativeLinearRefine_8h" name="CartesianFaceFloatConservativeLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianFaceFloatConservativeLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">SAMRAI/pdat/FaceVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianFaceFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a88e049f13151485d2ffb881cf8d4291a</anchor>
      <arglist>(cartclinreffaceflot1d, CARTCLINREFFACEFLOT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianFaceFloatConservativeLinearRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianFaceFloatConservativeLinearRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianFaceFloatConservativeLinearRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianFaceFloatWeightedAverage.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianFaceFloatWeightedAverage_8C</filename>
    <includes id="CartesianFaceFloatWeightedAverage_8h" name="CartesianFaceFloatWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianFaceFloatWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">SAMRAI/pdat/FaceVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianFaceFloatWeightedAverage_8C.html</anchorfile>
      <anchor>aa82133c2dd1848e64cc8ac7f3d0d1947</anchor>
      <arglist>(cartwgtavgfaceflot1d, CARTWGTAVGFACEFLOT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianFaceFloatWeightedAverage.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianFaceFloatWeightedAverage_8h</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianFaceFloatWeightedAverage</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianGridGeometry.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianGridGeometry_8C</filename>
    <includes id="CartesianGridGeometry_8h" name="CartesianGridGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianGridGeometry.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="CartesianCellComplexWeightedAverage_8h" name="CartesianCellComplexWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianCellComplexWeightedAverage.h</includes>
    <includes id="CartesianCellDoubleWeightedAverage_8h" name="CartesianCellDoubleWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianCellDoubleWeightedAverage.h</includes>
    <includes id="CartesianCellFloatWeightedAverage_8h" name="CartesianCellFloatWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianCellFloatWeightedAverage.h</includes>
    <includes id="CartesianCellComplexConservativeLinearRefine_8h" name="CartesianCellComplexConservativeLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianCellComplexConservativeLinearRefine.h</includes>
    <includes id="CartesianCellComplexLinearRefine_8h" name="CartesianCellComplexLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianCellComplexLinearRefine.h</includes>
    <includes id="CartesianCellDoubleConservativeLinearRefine_8h" name="CartesianCellDoubleConservativeLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianCellDoubleConservativeLinearRefine.h</includes>
    <includes id="CartesianCellDoubleLinearRefine_8h" name="CartesianCellDoubleLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianCellDoubleLinearRefine.h</includes>
    <includes id="CartesianCellFloatConservativeLinearRefine_8h" name="CartesianCellFloatConservativeLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianCellFloatConservativeLinearRefine.h</includes>
    <includes id="CartesianCellFloatLinearRefine_8h" name="CartesianCellFloatLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianCellFloatLinearRefine.h</includes>
    <includes id="CartesianEdgeComplexWeightedAverage_8h" name="CartesianEdgeComplexWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianEdgeComplexWeightedAverage.h</includes>
    <includes id="CartesianEdgeDoubleWeightedAverage_8h" name="CartesianEdgeDoubleWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianEdgeDoubleWeightedAverage.h</includes>
    <includes id="CartesianEdgeFloatWeightedAverage_8h" name="CartesianEdgeFloatWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianEdgeFloatWeightedAverage.h</includes>
    <includes id="CartesianEdgeDoubleConservativeLinearRefine_8h" name="CartesianEdgeDoubleConservativeLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianEdgeDoubleConservativeLinearRefine.h</includes>
    <includes id="CartesianEdgeFloatConservativeLinearRefine_8h" name="CartesianEdgeFloatConservativeLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianEdgeFloatConservativeLinearRefine.h</includes>
    <includes id="CartesianFaceComplexWeightedAverage_8h" name="CartesianFaceComplexWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianFaceComplexWeightedAverage.h</includes>
    <includes id="CartesianFaceDoubleWeightedAverage_8h" name="CartesianFaceDoubleWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianFaceDoubleWeightedAverage.h</includes>
    <includes id="CartesianFaceFloatWeightedAverage_8h" name="CartesianFaceFloatWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianFaceFloatWeightedAverage.h</includes>
    <includes id="CartesianFaceDoubleConservativeLinearRefine_8h" name="CartesianFaceDoubleConservativeLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianFaceDoubleConservativeLinearRefine.h</includes>
    <includes id="CartesianFaceFloatConservativeLinearRefine_8h" name="CartesianFaceFloatConservativeLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianFaceFloatConservativeLinearRefine.h</includes>
    <includes id="CartesianNodeComplexLinearRefine_8h" name="CartesianNodeComplexLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianNodeComplexLinearRefine.h</includes>
    <includes id="CartesianNodeDoubleLinearRefine_8h" name="CartesianNodeDoubleLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianNodeDoubleLinearRefine.h</includes>
    <includes id="CartesianNodeFloatLinearRefine_8h" name="CartesianNodeFloatLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianNodeFloatLinearRefine.h</includes>
    <includes id="CartesianOuterfaceComplexWeightedAverage_8h" name="CartesianOuterfaceComplexWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianOuterfaceComplexWeightedAverage.h</includes>
    <includes id="CartesianOuterfaceDoubleWeightedAverage_8h" name="CartesianOuterfaceDoubleWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianOuterfaceDoubleWeightedAverage.h</includes>
    <includes id="CartesianOuterfaceFloatWeightedAverage_8h" name="CartesianOuterfaceFloatWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianOuterfaceFloatWeightedAverage.h</includes>
    <includes id="CartesianOutersideDoubleWeightedAverage_8h" name="CartesianOutersideDoubleWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianOutersideDoubleWeightedAverage.h</includes>
    <includes id="CartesianSideComplexWeightedAverage_8h" name="CartesianSideComplexWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianSideComplexWeightedAverage.h</includes>
    <includes id="CartesianSideDoubleWeightedAverage_8h" name="CartesianSideDoubleWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianSideDoubleWeightedAverage.h</includes>
    <includes id="CartesianSideFloatWeightedAverage_8h" name="CartesianSideFloatWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianSideFloatWeightedAverage.h</includes>
    <includes id="CartesianSideDoubleConservativeLinearRefine_8h" name="CartesianSideDoubleConservativeLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianSideDoubleConservativeLinearRefine.h</includes>
    <includes id="CartesianSideFloatConservativeLinearRefine_8h" name="CartesianSideFloatConservativeLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianSideFloatConservativeLinearRefine.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">SAMRAI/pdat/EdgeVariable.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">SAMRAI/pdat/FaceVariable.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">SAMRAI/pdat/NodeVariable.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceVariable.h</includes>
    <includes id="OutersideVariable_8h" name="OutersideVariable.h" local="yes" imported="no">SAMRAI/pdat/OutersideVariable.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <includes id="BoundaryLookupTable_8h" name="BoundaryLookupTable.h" local="yes" imported="no">SAMRAI/hier/BoundaryLookupTable.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="RestartManager_8h" name="RestartManager.h" local="yes" imported="no">SAMRAI/tbox/RestartManager.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianGridGeometry.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianGridGeometry_8h</filename>
    <includes id="GridGeometry_8h" name="GridGeometry.h" local="yes" imported="no">SAMRAI/geom/GridGeometry.h</includes>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">SAMRAI/hier/BoundaryBox.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Serializable_8h" name="Serializable.h" local="yes" imported="no">SAMRAI/tbox/Serializable.h</includes>
    <class kind="class">SAMRAI::geom::CartesianGridGeometry</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianNodeComplexLinearRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianNodeComplexLinearRefine_8C</filename>
    <includes id="CartesianNodeComplexLinearRefine_8h" name="CartesianNodeComplexLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianNodeComplexLinearRefine.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">SAMRAI/pdat/NodeVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianNodeComplexLinearRefine_8C.html</anchorfile>
      <anchor>a2313b03bf5d8c6807b5c2d309e4da441</anchor>
      <arglist>(cartlinrefnodecplx1d, CARTLINREFNODECPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianNodeComplexLinearRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianNodeComplexLinearRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianNodeComplexLinearRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianNodeDoubleLinearRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianNodeDoubleLinearRefine_8C</filename>
    <includes id="CartesianNodeDoubleLinearRefine_8h" name="CartesianNodeDoubleLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianNodeDoubleLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">SAMRAI/pdat/NodeVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianNodeDoubleLinearRefine_8C.html</anchorfile>
      <anchor>ad21ee699a435f8fbb4277a2caf9e0cd9</anchor>
      <arglist>(cartlinrefnodedoub1d, CARTLINREFNODEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianNodeDoubleLinearRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianNodeDoubleLinearRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianNodeDoubleLinearRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianNodeFloatLinearRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianNodeFloatLinearRefine_8C</filename>
    <includes id="CartesianNodeFloatLinearRefine_8h" name="CartesianNodeFloatLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianNodeFloatLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">SAMRAI/pdat/NodeVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianNodeFloatLinearRefine_8C.html</anchorfile>
      <anchor>a572f163bf21269c8dd3819c565b7fd9b</anchor>
      <arglist>(cartlinrefnodeflot1d, CARTLINREFNODEFLOT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianNodeFloatLinearRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianNodeFloatLinearRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianNodeFloatLinearRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianOuterfaceComplexWeightedAverage.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianOuterfaceComplexWeightedAverage_8C</filename>
    <includes id="CartesianOuterfaceComplexWeightedAverage_8h" name="CartesianOuterfaceComplexWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianOuterfaceComplexWeightedAverage.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianOuterfaceComplexWeightedAverage_8C.html</anchorfile>
      <anchor>ae90d1e10afc3dab6601c724044e4b9f2</anchor>
      <arglist>(cartwgtavgoutfacecplx1d, CARTWGTAVGOUTFACECPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianOuterfaceComplexWeightedAverage.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianOuterfaceComplexWeightedAverage_8h</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianOuterfaceComplexWeightedAverage</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianOuterfaceDoubleWeightedAverage.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianOuterfaceDoubleWeightedAverage_8C</filename>
    <includes id="CartesianOuterfaceDoubleWeightedAverage_8h" name="CartesianOuterfaceDoubleWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianOuterfaceDoubleWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianOuterfaceDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a57f89eba898daca3b694d237a6da0d28</anchor>
      <arglist>(cartwgtavgoutfacedoub1d, CARTWGTAVGOUTFACEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianOuterfaceDoubleWeightedAverage.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianOuterfaceDoubleWeightedAverage_8h</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianOuterfaceDoubleWeightedAverage</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianOuterfaceFloatWeightedAverage.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianOuterfaceFloatWeightedAverage_8C</filename>
    <includes id="CartesianOuterfaceFloatWeightedAverage_8h" name="CartesianOuterfaceFloatWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianOuterfaceFloatWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianOuterfaceFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a77c211bdbc05da8a5ce4d9654143719f</anchor>
      <arglist>(cartwgtavgoutfaceflot1d, CARTWGTAVGOUTFACEFLOT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianOuterfaceFloatWeightedAverage.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianOuterfaceFloatWeightedAverage_8h</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianOuterfaceFloatWeightedAverage</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianOutersideDoubleWeightedAverage.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianOutersideDoubleWeightedAverage_8C</filename>
    <includes id="CartesianOutersideDoubleWeightedAverage_8h" name="CartesianOutersideDoubleWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianOutersideDoubleWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="OutersideData_8h" name="OutersideData.h" local="yes" imported="no">SAMRAI/pdat/OutersideData.h</includes>
    <includes id="OutersideVariable_8h" name="OutersideVariable.h" local="yes" imported="no">SAMRAI/pdat/OutersideVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianOutersideDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a81b3f6c44cb7adcb97ffc340224b4030</anchor>
      <arglist>(cartwgtavgoutsidedoub1d, CARTWGTAVGOUTSIDEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianOutersideDoubleWeightedAverage.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianOutersideDoubleWeightedAverage_8h</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianOutersideDoubleWeightedAverage</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianPatchGeometry.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianPatchGeometry_8C</filename>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianPatchGeometry.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianPatchGeometry_8h</filename>
    <includes id="PatchGeometry_8h" name="PatchGeometry.h" local="yes" imported="no">SAMRAI/hier/PatchGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <class kind="class">SAMRAI::geom::CartesianPatchGeometry</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianSideComplexWeightedAverage.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianSideComplexWeightedAverage_8C</filename>
    <includes id="CartesianSideComplexWeightedAverage_8h" name="CartesianSideComplexWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianSideComplexWeightedAverage.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianSideComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a25af4c1414838460f140656b8974f0f1</anchor>
      <arglist>(cartwgtavgsidecplx1d, CARTWGTAVGSIDECPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianSideComplexWeightedAverage.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianSideComplexWeightedAverage_8h</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianSideComplexWeightedAverage</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianSideDoubleConservativeLinearRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianSideDoubleConservativeLinearRefine_8C</filename>
    <includes id="CartesianSideDoubleConservativeLinearRefine_8h" name="CartesianSideDoubleConservativeLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianSideDoubleConservativeLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianSideDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a5a5d18e79a7b4b45499ff5f2dca021eb</anchor>
      <arglist>(cartclinrefsidedoub1d, CARTCLINREFSIDEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianSideDoubleConservativeLinearRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianSideDoubleConservativeLinearRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianSideDoubleConservativeLinearRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianSideDoubleWeightedAverage.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianSideDoubleWeightedAverage_8C</filename>
    <includes id="CartesianSideDoubleWeightedAverage_8h" name="CartesianSideDoubleWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianSideDoubleWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianSideDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a870210e337d21d6c59578b3277d22745</anchor>
      <arglist>(cartwgtavgsidedoub1d, CARTWGTAVGSIDEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianSideDoubleWeightedAverage.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianSideDoubleWeightedAverage_8h</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianSideDoubleWeightedAverage</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianSideFloatConservativeLinearRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianSideFloatConservativeLinearRefine_8C</filename>
    <includes id="CartesianSideFloatConservativeLinearRefine_8h" name="CartesianSideFloatConservativeLinearRefine.h" local="yes" imported="no">SAMRAI/geom/CartesianSideFloatConservativeLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianSideFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>ab0bbaabdf266e0fa0046c65665b195b0</anchor>
      <arglist>(cartclinrefsideflot1d, CARTCLINREFSIDEFLOT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianSideFloatConservativeLinearRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianSideFloatConservativeLinearRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianSideFloatConservativeLinearRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianSideFloatWeightedAverage.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianSideFloatWeightedAverage_8C</filename>
    <includes id="CartesianSideFloatWeightedAverage_8h" name="CartesianSideFloatWeightedAverage.h" local="yes" imported="no">SAMRAI/geom/CartesianSideFloatWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianSideFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a8c9243b24b1c70f506399e5a6cb06e4b</anchor>
      <arglist>(cartwgtavgsideflot1d, CARTWGTAVGSIDEFLOT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianSideFloatWeightedAverage.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>CartesianSideFloatWeightedAverage_8h</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::geom::CartesianSideFloatWeightedAverage</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>manual_cartesian.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/dox/</path>
    <filename>manual__cartesian_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>manual_cartesian_grid_geom.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/dox/</path>
    <filename>manual__cartesian__grid__geom_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>manual_cartesian_operators_cell.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/dox/</path>
    <filename>manual__cartesian__operators__cell_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>manual_cartesian_operators_fortran.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/dox/</path>
    <filename>manual__cartesian__operators__fortran_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>manual_cartesian_patch_geom.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/dox/</path>
    <filename>manual__cartesian__patch__geom_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>manual_generic.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/dox/</path>
    <filename>manual__generic_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>GridGeometry.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>GridGeometry_8C</filename>
    <includes id="GridGeometry_8h" name="GridGeometry.h" local="yes" imported="no">SAMRAI/geom/GridGeometry.h</includes>
    <includes id="NodeComplexInjection_8h" name="NodeComplexInjection.h" local="yes" imported="no">SAMRAI/pdat/NodeComplexInjection.h</includes>
    <includes id="NodeDoubleInjection_8h" name="NodeDoubleInjection.h" local="yes" imported="no">SAMRAI/pdat/NodeDoubleInjection.h</includes>
    <includes id="NodeFloatInjection_8h" name="NodeFloatInjection.h" local="yes" imported="no">SAMRAI/pdat/NodeFloatInjection.h</includes>
    <includes id="NodeIntegerInjection_8h" name="NodeIntegerInjection.h" local="yes" imported="no">SAMRAI/pdat/NodeIntegerInjection.h</includes>
    <includes id="OuternodeDoubleInjection_8h" name="OuternodeDoubleInjection.h" local="yes" imported="no">SAMRAI/pdat/OuternodeDoubleInjection.h</includes>
    <includes id="CellComplexConstantRefine_8h" name="CellComplexConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/CellComplexConstantRefine.h</includes>
    <includes id="CellDoubleConstantRefine_8h" name="CellDoubleConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/CellDoubleConstantRefine.h</includes>
    <includes id="CellFloatConstantRefine_8h" name="CellFloatConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/CellFloatConstantRefine.h</includes>
    <includes id="CellIntegerConstantRefine_8h" name="CellIntegerConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/CellIntegerConstantRefine.h</includes>
    <includes id="EdgeComplexConstantRefine_8h" name="EdgeComplexConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/EdgeComplexConstantRefine.h</includes>
    <includes id="EdgeDoubleConstantRefine_8h" name="EdgeDoubleConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/EdgeDoubleConstantRefine.h</includes>
    <includes id="EdgeFloatConstantRefine_8h" name="EdgeFloatConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/EdgeFloatConstantRefine.h</includes>
    <includes id="EdgeIntegerConstantRefine_8h" name="EdgeIntegerConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/EdgeIntegerConstantRefine.h</includes>
    <includes id="FaceComplexConstantRefine_8h" name="FaceComplexConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/FaceComplexConstantRefine.h</includes>
    <includes id="FaceDoubleConstantRefine_8h" name="FaceDoubleConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/FaceDoubleConstantRefine.h</includes>
    <includes id="FaceFloatConstantRefine_8h" name="FaceFloatConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/FaceFloatConstantRefine.h</includes>
    <includes id="FaceIntegerConstantRefine_8h" name="FaceIntegerConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/FaceIntegerConstantRefine.h</includes>
    <includes id="OuterfaceComplexConstantRefine_8h" name="OuterfaceComplexConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceComplexConstantRefine.h</includes>
    <includes id="OuterfaceDoubleConstantRefine_8h" name="OuterfaceDoubleConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceDoubleConstantRefine.h</includes>
    <includes id="OuterfaceFloatConstantRefine_8h" name="OuterfaceFloatConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceFloatConstantRefine.h</includes>
    <includes id="OuterfaceIntegerConstantRefine_8h" name="OuterfaceIntegerConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceIntegerConstantRefine.h</includes>
    <includes id="SideComplexConstantRefine_8h" name="SideComplexConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/SideComplexConstantRefine.h</includes>
    <includes id="SideDoubleConstantRefine_8h" name="SideDoubleConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/SideDoubleConstantRefine.h</includes>
    <includes id="SideFloatConstantRefine_8h" name="SideFloatConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/SideFloatConstantRefine.h</includes>
    <includes id="SideIntegerConstantRefine_8h" name="SideIntegerConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/SideIntegerConstantRefine.h</includes>
    <includes id="CellComplexLinearTimeInterpolateOp_8h" name="CellComplexLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/CellComplexLinearTimeInterpolateOp.h</includes>
    <includes id="CellDoubleLinearTimeInterpolateOp_8h" name="CellDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/CellDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="CellFloatLinearTimeInterpolateOp_8h" name="CellFloatLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/CellFloatLinearTimeInterpolateOp.h</includes>
    <includes id="EdgeComplexLinearTimeInterpolateOp_8h" name="EdgeComplexLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/EdgeComplexLinearTimeInterpolateOp.h</includes>
    <includes id="EdgeDoubleLinearTimeInterpolateOp_8h" name="EdgeDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/EdgeDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="EdgeFloatLinearTimeInterpolateOp_8h" name="EdgeFloatLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/EdgeFloatLinearTimeInterpolateOp.h</includes>
    <includes id="FaceComplexLinearTimeInterpolateOp_8h" name="FaceComplexLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/FaceComplexLinearTimeInterpolateOp.h</includes>
    <includes id="FaceDoubleLinearTimeInterpolateOp_8h" name="FaceDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/FaceDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="FaceFloatLinearTimeInterpolateOp_8h" name="FaceFloatLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/FaceFloatLinearTimeInterpolateOp.h</includes>
    <includes id="NodeComplexLinearTimeInterpolateOp_8h" name="NodeComplexLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/NodeComplexLinearTimeInterpolateOp.h</includes>
    <includes id="NodeDoubleLinearTimeInterpolateOp_8h" name="NodeDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/NodeDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="NodeFloatLinearTimeInterpolateOp_8h" name="NodeFloatLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/NodeFloatLinearTimeInterpolateOp.h</includes>
    <includes id="OuterfaceComplexLinearTimeInterpolateOp_8h" name="OuterfaceComplexLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceComplexLinearTimeInterpolateOp.h</includes>
    <includes id="OuterfaceDoubleLinearTimeInterpolateOp_8h" name="OuterfaceDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="OuterfaceFloatLinearTimeInterpolateOp_8h" name="OuterfaceFloatLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceFloatLinearTimeInterpolateOp.h</includes>
    <includes id="OutersideComplexLinearTimeInterpolateOp_8h" name="OutersideComplexLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/OutersideComplexLinearTimeInterpolateOp.h</includes>
    <includes id="OutersideDoubleLinearTimeInterpolateOp_8h" name="OutersideDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/OutersideDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="OutersideFloatLinearTimeInterpolateOp_8h" name="OutersideFloatLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/OutersideFloatLinearTimeInterpolateOp.h</includes>
    <includes id="SideComplexLinearTimeInterpolateOp_8h" name="SideComplexLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/SideComplexLinearTimeInterpolateOp.h</includes>
    <includes id="SideDoubleLinearTimeInterpolateOp_8h" name="SideDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/SideDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="SideFloatLinearTimeInterpolateOp_8h" name="SideFloatLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/SideFloatLinearTimeInterpolateOp.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">SAMRAI/pdat/EdgeVariable.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">SAMRAI/pdat/FaceVariable.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">SAMRAI/pdat/NodeVariable.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceVariable.h</includes>
    <includes id="OuternodeVariable_8h" name="OuternodeVariable.h" local="yes" imported="no">SAMRAI/pdat/OuternodeVariable.h</includes>
    <includes id="OutersideVariable_8h" name="OutersideVariable.h" local="yes" imported="no">SAMRAI/pdat/OutersideVariable.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GEOM_BLOCK_GRID_GEOMETRY_VERSION</name>
      <anchorfile>GridGeometry_8C.html</anchorfile>
      <anchor>a37efdf4aa0ec9b21f461fd4bc298f4c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GridGeometry.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/</path>
    <filename>GridGeometry_8h</filename>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <includes id="Dimension_8h" name="Dimension.h" local="yes" imported="no">SAMRAI/tbox/Dimension.h</includes>
    <class kind="class">SAMRAI::geom::GridGeometry</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>AssumedPartition.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>AssumedPartition_8C</filename>
    <includes id="AssumedPartition_8h" name="AssumedPartition.h" local="yes" imported="no">SAMRAI/hier/AssumedPartition.h</includes>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>AssumedPartition.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>AssumedPartition_8h</filename>
    <includes id="AssumedPartitionBox_8h" name="AssumedPartitionBox.h" local="yes" imported="no">SAMRAI/hier/AssumedPartitionBox.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <class kind="class">SAMRAI::hier::AssumedPartition</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>AssumedPartitionBox.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>AssumedPartitionBox_8C</filename>
    <includes id="AssumedPartitionBox_8h" name="AssumedPartitionBox.h" local="yes" imported="no">SAMRAI/hier/AssumedPartitionBox.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>AssumedPartitionBox.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>AssumedPartitionBox_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <class kind="class">SAMRAI::hier::AssumedPartitionBox</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BaseConnectorAlgorithm.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BaseConnectorAlgorithm_8C</filename>
    <includes id="BaseConnectorAlgorithm_8h" name="BaseConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/BaseConnectorAlgorithm.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BaseConnectorAlgorithm.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BaseConnectorAlgorithm_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxLevel_8h" name="BoxLevel.h" local="yes" imported="no">SAMRAI/hier/BoxLevel.h</includes>
    <includes id="Connector_8h" name="Connector.h" local="yes" imported="no">SAMRAI/hier/Connector.h</includes>
    <includes id="AsyncCommPeer_8h" name="AsyncCommPeer.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommPeer.h</includes>
    <class kind="class">SAMRAI::hier::BaseConnectorAlgorithm</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BaseGridGeometry.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BaseGridGeometry_8C</filename>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <includes id="BoundaryLookupTable_8h" name="BoundaryLookupTable.h" local="yes" imported="no">SAMRAI/hier/BoundaryLookupTable.h</includes>
    <includes id="BoxTree_8h" name="BoxTree.h" local="yes" imported="no">SAMRAI/hier/BoxTree.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="PeriodicShiftCatalog_8h" name="PeriodicShiftCatalog.h" local="yes" imported="no">SAMRAI/hier/PeriodicShiftCatalog.h</includes>
    <includes id="SingularityFinder_8h" name="SingularityFinder.h" local="yes" imported="no">SAMRAI/hier/SingularityFinder.h</includes>
    <includes id="RestartManager_8h" name="RestartManager.h" local="yes" imported="no">SAMRAI/tbox/RestartManager.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="define">
      <type>#define</type>
      <name>HIER_GRID_GEOMETRY_VERSION</name>
      <anchorfile>BaseGridGeometry_8C.html</anchorfile>
      <anchor>a31f3aeda745df40455c8d1c89b82fbc8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BaseGridGeometry.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BaseGridGeometry_8h</filename>
    <includes id="Serializable_8h" name="Serializable.h" local="yes" imported="no">SAMRAI/tbox/Serializable.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PatchGeometry_8h" name="PatchGeometry.h" local="yes" imported="no">SAMRAI/hier/PatchGeometry.h</includes>
    <includes id="PeriodicShiftCatalog_8h" name="PeriodicShiftCatalog.h" local="yes" imported="no">SAMRAI/hier/PeriodicShiftCatalog.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <includes id="TransferOperatorRegistry_8h" name="TransferOperatorRegistry.h" local="yes" imported="no">SAMRAI/hier/TransferOperatorRegistry.h</includes>
    <includes id="Transformation_8h" name="Transformation.h" local="yes" imported="no">SAMRAI/hier/Transformation.h</includes>
    <class kind="class">SAMRAI::hier::BaseGridGeometry</class>
    <class kind="class">SAMRAI::hier::BaseGridGeometry::Neighbor</class>
    <class kind="class">SAMRAI::hier::BaseGridGeometry::NeighborIterator</class>
    <class kind="class">SAMRAI::hier::BaseGridGeometry::ConstNeighborIterator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BlockId.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BlockId_8C</filename>
    <includes id="BlockId_8h" name="BlockId.h" local="yes" imported="no">SAMRAI/hier/BlockId.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BlockId.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BlockId_8h</filename>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::hier::BlockId</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoundaryBox.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoundaryBox_8C</filename>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">SAMRAI/hier/BoundaryBox.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="BoundaryLookupTable_8h" name="BoundaryLookupTable.h" local="yes" imported="no">SAMRAI/hier/BoundaryLookupTable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoundaryBox.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoundaryBox_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <class kind="class">SAMRAI::hier::BoundaryBox</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoundaryBoxUtils.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoundaryBoxUtils_8C</filename>
    <includes id="BoundaryBoxUtils_8h" name="BoundaryBoxUtils.h" local="yes" imported="no">SAMRAI/hier/BoundaryBoxUtils.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoundaryBoxUtils.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoundaryBoxUtils_8h</filename>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">SAMRAI/hier/BoundaryBox.h</includes>
    <class kind="class">SAMRAI::hier::BoundaryBoxUtils</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoundaryLookupTable.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoundaryLookupTable_8C</filename>
    <includes id="BoundaryLookupTable_8h" name="BoundaryLookupTable.h" local="yes" imported="no">SAMRAI/hier/BoundaryLookupTable.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoundaryLookupTable.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoundaryLookupTable_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <class kind="class">SAMRAI::hier::BoundaryLookupTable</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>Box.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>Box_8C</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PeriodicShiftCatalog_8h" name="PeriodicShiftCatalog.h" local="yes" imported="no">SAMRAI/hier/PeriodicShiftCatalog.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a96908bbe9494aa74292d13972ee0d4f9</anchor>
      <arglist>(std::istream &amp;s, Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a94bbae049793f3f0097e00d74888dd83</anchor>
      <arglist>(std::ostream &amp;s, const Box &amp;box)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Box.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>Box_8h</filename>
    <includes id="BoxId_8h" name="BoxId.h" local="yes" imported="no">SAMRAI/hier/BoxId.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="PeriodicShiftCatalog_8h" name="PeriodicShiftCatalog.h" local="yes" imported="no">SAMRAI/hier/PeriodicShiftCatalog.h</includes>
    <includes id="Transformation_8h" name="Transformation.h" local="yes" imported="no">SAMRAI/hier/Transformation.h</includes>
    <includes id="Dimension_8h" name="Dimension.h" local="yes" imported="no">SAMRAI/tbox/Dimension.h</includes>
    <includes id="DatabaseBox_8h" name="DatabaseBox.h" local="yes" imported="no">SAMRAI/tbox/DatabaseBox.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="MessageStream_8h" name="MessageStream.h" local="yes" imported="no">SAMRAI/tbox/MessageStream.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::hier::Box</class>
    <class kind="struct">SAMRAI::hier::Box::id_equal</class>
    <class kind="struct">SAMRAI::hier::Box::id_less</class>
    <class kind="struct">SAMRAI::hier::Box::box_equality</class>
    <class kind="class">SAMRAI::hier::BoxIterator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxContainer.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxContainer_8C</filename>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxContainerSingleBlockIterator_8h" name="BoxContainerSingleBlockIterator.h" local="yes" imported="no">SAMRAI/hier/BoxContainerSingleBlockIterator.h</includes>
    <includes id="BoxContainerSingleOwnerIterator_8h" name="BoxContainerSingleOwnerIterator.h" local="yes" imported="no">SAMRAI/hier/BoxContainerSingleOwnerIterator.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <includes id="PeriodicShiftCatalog_8h" name="PeriodicShiftCatalog.h" local="yes" imported="no">SAMRAI/hier/PeriodicShiftCatalog.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="function">
      <type></type>
      <name>BoxContainer::operator std::vector&lt; tbox::DatabaseBox &gt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a1abbf9580bd60c01ff4a222cd45c9dee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a86317125df6c2eb65553d25794c3b9d4</anchor>
      <arglist>(std::ostream &amp;s, const BoxContainer::Outputter &amp;format)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoxContainer.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxContainer_8h</filename>
    <includes id="BlockId_8h" name="BlockId.h" local="yes" imported="no">SAMRAI/hier/BlockId.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="MultiblockBoxTree_8h" name="MultiblockBoxTree.h" local="yes" imported="no">SAMRAI/hier/MultiblockBoxTree.h</includes>
    <includes id="PeriodicShiftCatalog_8h" name="PeriodicShiftCatalog.h" local="yes" imported="no">SAMRAI/hier/PeriodicShiftCatalog.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::hier::BoxContainer</class>
    <class kind="class">SAMRAI::hier::BoxContainer::BoxContainerConstIterator</class>
    <class kind="class">SAMRAI::hier::BoxContainer::BoxContainerIterator</class>
    <class kind="class">SAMRAI::hier::BoxContainer::Outputter</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxContainerSingleBlockIterator.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxContainerSingleBlockIterator_8C</filename>
    <includes id="BoxContainerSingleBlockIterator_8h" name="BoxContainerSingleBlockIterator.h" local="yes" imported="no">SAMRAI/hier/BoxContainerSingleBlockIterator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxContainerSingleBlockIterator.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxContainerSingleBlockIterator_8h</filename>
    <includes id="BlockId_8h" name="BlockId.h" local="yes" imported="no">SAMRAI/hier/BlockId.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <class kind="class">SAMRAI::hier::BoxContainerSingleBlockIterator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxContainerSingleOwnerIterator.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxContainerSingleOwnerIterator_8C</filename>
    <includes id="BoxContainerSingleOwnerIterator_8h" name="BoxContainerSingleOwnerIterator.h" local="yes" imported="no">SAMRAI/hier/BoxContainerSingleOwnerIterator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxContainerSingleOwnerIterator.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxContainerSingleOwnerIterator_8h</filename>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <class kind="class">SAMRAI::hier::BoxContainerSingleOwnerIterator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxContainerUtils.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxContainerUtils_8C</filename>
    <includes id="BoxContainerUtils_8h" name="BoxContainerUtils.h" local="yes" imported="no">SAMRAI/hier/BoxContainerUtils.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxContainerUtils.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxContainerUtils_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <class kind="class">SAMRAI::hier::BoxContainerUtils</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxGeometry.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxGeometry_8C</filename>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxGeometry.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxGeometry_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <class kind="class">SAMRAI::hier::BoxGeometry</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxId.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxId_8C</filename>
    <includes id="BoxId_8h" name="BoxId.h" local="yes" imported="no">SAMRAI/hier/BoxId.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a7c43cd076078a23374298b48a3f5a520</anchor>
      <arglist>(std::ostream &amp;co, const BoxId &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoxId.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxId_8h</filename>
    <includes id="GlobalId_8h" name="GlobalId.h" local="yes" imported="no">SAMRAI/hier/GlobalId.h</includes>
    <includes id="PeriodicId_8h" name="PeriodicId.h" local="yes" imported="no">SAMRAI/hier/PeriodicId.h</includes>
    <includes id="MessageStream_8h" name="MessageStream.h" local="yes" imported="no">SAMRAI/tbox/MessageStream.h</includes>
    <class kind="class">SAMRAI::hier::BoxId</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxLevel.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxLevel_8C</filename>
    <includes id="BoxLevel_8h" name="BoxLevel.h" local="yes" imported="no">SAMRAI/hier/BoxLevel.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxContainerSingleBlockIterator_8h" name="BoxContainerSingleBlockIterator.h" local="yes" imported="no">SAMRAI/hier/BoxContainerSingleBlockIterator.h</includes>
    <includes id="BoxContainerSingleOwnerIterator_8h" name="BoxContainerSingleOwnerIterator.h" local="yes" imported="no">SAMRAI/hier/BoxContainerSingleOwnerIterator.h</includes>
    <includes id="BoxLevelStatistics_8h" name="BoxLevelStatistics.h" local="yes" imported="no">SAMRAI/hier/BoxLevelStatistics.h</includes>
    <includes id="PeriodicShiftCatalog_8h" name="PeriodicShiftCatalog.h" local="yes" imported="no">SAMRAI/hier/PeriodicShiftCatalog.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>afb52c7cb40bb763aa515f75b49db60dc</anchor>
      <arglist>(std::ostream &amp;s, const BoxLevel::Outputter &amp;format)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoxLevel.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxLevel_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxLevelHandle_8h" name="BoxLevelHandle.h" local="yes" imported="no">SAMRAI/hier/BoxLevelHandle.h</includes>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <includes id="PersistentOverlapConnectors_8h" name="PersistentOverlapConnectors.h" local="yes" imported="no">SAMRAI/hier/PersistentOverlapConnectors.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <class kind="class">SAMRAI::hier::BoxLevel</class>
    <class kind="class">SAMRAI::hier::BoxLevel::Outputter</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxLevelConnectorUtils.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxLevelConnectorUtils_8C</filename>
    <includes id="BoxLevelConnectorUtils_8h" name="BoxLevelConnectorUtils.h" local="yes" imported="no">SAMRAI/hier/BoxLevelConnectorUtils.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="MappingConnectorAlgorithm_8h" name="MappingConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/MappingConnectorAlgorithm.h</includes>
    <includes id="OverlapConnectorAlgorithm_8h" name="OverlapConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/OverlapConnectorAlgorithm.h</includes>
    <includes id="PeriodicShiftCatalog_8h" name="PeriodicShiftCatalog.h" local="yes" imported="no">SAMRAI/hier/PeriodicShiftCatalog.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="InputManager_8h" name="InputManager.h" local="yes" imported="no">SAMRAI/tbox/InputManager.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxLevelConnectorUtils.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxLevelConnectorUtils_8h</filename>
    <includes id="MappingConnector_8h" name="MappingConnector.h" local="yes" imported="no">SAMRAI/hier/MappingConnector.h</includes>
    <includes id="BoxLevel_8h" name="BoxLevel.h" local="yes" imported="no">SAMRAI/hier/BoxLevel.h</includes>
    <class kind="class">SAMRAI::hier::BoxLevelConnectorUtils</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxLevelHandle.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxLevelHandle_8C</filename>
    <includes id="BoxLevelHandle_8h" name="BoxLevelHandle.h" local="yes" imported="no">SAMRAI/hier/BoxLevelHandle.h</includes>
    <includes id="BoxLevel_8h" name="BoxLevel.h" local="yes" imported="no">SAMRAI/hier/BoxLevel.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxLevelHandle.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxLevelHandle_8h</filename>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::hier::BoxLevelHandle</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxLevelStatistics.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxLevelStatistics_8C</filename>
    <includes id="BoxLevelStatistics_8h" name="BoxLevelStatistics.h" local="yes" imported="no">SAMRAI/hier/BoxLevelStatistics.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxLevelStatistics.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxLevelStatistics_8h</filename>
    <includes id="BoxLevel_8h" name="BoxLevel.h" local="yes" imported="no">SAMRAI/hier/BoxLevel.h</includes>
    <class kind="class">SAMRAI::hier::BoxLevelStatistics</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxNeighborhoodCollection.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxNeighborhoodCollection_8C</filename>
    <includes id="BoxNeighborhoodCollection_8h" name="BoxNeighborhoodCollection.h" local="yes" imported="no">SAMRAI/hier/BoxNeighborhoodCollection.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxNeighborhoodCollection.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxNeighborhoodCollection_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxId_8h" name="BoxId.h" local="yes" imported="no">SAMRAI/hier/BoxId.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Dimension_8h" name="Dimension.h" local="yes" imported="no">SAMRAI/tbox/Dimension.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::hier::BoxNeighborhoodCollection</class>
    <class kind="class">SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator</class>
    <class kind="class">SAMRAI::hier::BoxNeighborhoodCollection::Iterator</class>
    <class kind="class">SAMRAI::hier::BoxNeighborhoodCollection::ConstNeighborIterator</class>
    <class kind="class">SAMRAI::hier::BoxNeighborhoodCollection::NeighborIterator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxOverlap.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxOverlap_8C</filename>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxOverlap.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxOverlap_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Transformation_8h" name="Transformation.h" local="yes" imported="no">SAMRAI/hier/Transformation.h</includes>
    <class kind="class">SAMRAI::hier::BoxOverlap</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxTree.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxTree_8C</filename>
    <includes id="BoxTree_8h" name="BoxTree.h" local="yes" imported="no">SAMRAI/hier/BoxTree.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Statistician_8h" name="Statistician.h" local="yes" imported="no">SAMRAI/tbox/Statistician.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxTree.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxTree_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <class kind="class">SAMRAI::hier::BoxTree</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxUtilities.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxUtilities_8C</filename>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxUtilities.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>BoxUtilities_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <class kind="struct">SAMRAI::hier::BoxUtilities</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>CoarseFineBoundary.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>CoarseFineBoundary_8C</filename>
    <includes id="CoarseFineBoundary_8h" name="CoarseFineBoundary.h" local="yes" imported="no">SAMRAI/hier/CoarseFineBoundary.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="Connector_8h" name="Connector.h" local="yes" imported="no">SAMRAI/hier/Connector.h</includes>
    <includes id="BoxContainerSingleBlockIterator_8h" name="BoxContainerSingleBlockIterator.h" local="yes" imported="no">SAMRAI/hier/BoxContainerSingleBlockIterator.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>CoarseFineBoundary.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>CoarseFineBoundary_8h</filename>
    <includes id="Dimension_8h" name="Dimension.h" local="yes" imported="no">SAMRAI/tbox/Dimension.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="BoxLevel_8h" name="BoxLevel.h" local="yes" imported="no">SAMRAI/hier/BoxLevel.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <class kind="class">SAMRAI::hier::CoarseFineBoundary</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenOperator.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>CoarsenOperator_8C</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="OpenMPUtilities_8h" name="OpenMPUtilities.h" local="yes" imported="no">SAMRAI/tbox/OpenMPUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenOperator.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>CoarsenOperator_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="OpenMPUtilities_8h" name="OpenMPUtilities.h" local="yes" imported="no">SAMRAI/tbox/OpenMPUtilities.h</includes>
    <class kind="class">SAMRAI::hier::CoarsenOperator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>ComponentSelector.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>ComponentSelector_8C</filename>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">SAMRAI/hier/ComponentSelector.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>ComponentSelector.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>ComponentSelector_8h</filename>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::hier::ComponentSelector</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>Connector.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>Connector_8C</filename>
    <includes id="Connector_8h" name="Connector.h" local="yes" imported="no">SAMRAI/hier/Connector.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="ConnectorStatistics_8h" name="ConnectorStatistics.h" local="yes" imported="no">SAMRAI/hier/ConnectorStatistics.h</includes>
    <includes id="PeriodicShiftCatalog_8h" name="PeriodicShiftCatalog.h" local="yes" imported="no">SAMRAI/hier/PeriodicShiftCatalog.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <includes id="CenteredRankTree_8h" name="CenteredRankTree.h" local="yes" imported="no">SAMRAI/tbox/CenteredRankTree.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>ac751e548574bfef193d039e55d29d7b8</anchor>
      <arglist>(std::ostream &amp;os, const Connector::Outputter &amp;format)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Connector.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>Connector_8h</filename>
    <includes id="BoxLevel_8h" name="BoxLevel.h" local="yes" imported="no">SAMRAI/hier/BoxLevel.h</includes>
    <includes id="BoxLevelHandle_8h" name="BoxLevelHandle.h" local="yes" imported="no">SAMRAI/hier/BoxLevelHandle.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxNeighborhoodCollection_8h" name="BoxNeighborhoodCollection.h" local="yes" imported="no">SAMRAI/hier/BoxNeighborhoodCollection.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <class kind="class">SAMRAI::hier::Connector</class>
    <class kind="class">SAMRAI::hier::Connector::Outputter</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>ConnectorStatistics.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>ConnectorStatistics_8C</filename>
    <includes id="ConnectorStatistics_8h" name="ConnectorStatistics.h" local="yes" imported="no">SAMRAI/hier/ConnectorStatistics.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>ConnectorStatistics.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>ConnectorStatistics_8h</filename>
    <includes id="Connector_8h" name="Connector.h" local="yes" imported="no">SAMRAI/hier/Connector.h</includes>
    <class kind="class">SAMRAI::hier::ConnectorStatistics</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>manual_boxes.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/dox/</path>
    <filename>manual__boxes_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>manual_dlbg.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/dox/</path>
    <filename>manual__dlbg_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>manual_patches.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/dox/</path>
    <filename>manual__patches_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>manual_transfer_interfaces.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/dox/</path>
    <filename>manual__transfer__interfaces_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>manual_variables.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/dox/</path>
    <filename>manual__variables_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>FlattenedHierarchy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>FlattenedHierarchy_8C</filename>
    <includes id="FlattenedHierarchy_8h" name="FlattenedHierarchy.h" local="yes" imported="no">SAMRAI/hier/FlattenedHierarchy.h</includes>
    <includes id="Connector_8h" name="Connector.h" local="yes" imported="no">SAMRAI/hier/Connector.h</includes>
    <includes id="HierarchyNeighbors_8h" name="HierarchyNeighbors.h" local="yes" imported="no">SAMRAI/hier/HierarchyNeighbors.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>FlattenedHierarchy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>FlattenedHierarchy_8h</filename>
    <includes id="HierarchyNeighbors_8h" name="HierarchyNeighbors.h" local="yes" imported="no">SAMRAI/hier/HierarchyNeighbors.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <class kind="class">SAMRAI::hier::FlattenedHierarchy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>GlobalId.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>GlobalId_8C</filename>
    <includes id="GlobalId_8h" name="GlobalId.h" local="yes" imported="no">SAMRAI/hier/GlobalId.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>aa00c2b7e87fbeb350b37dc5ff7421008</anchor>
      <arglist>(std::ostream &amp;co, const GlobalId &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlobalId.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>GlobalId_8h</filename>
    <includes id="LocalId_8h" name="LocalId.h" local="yes" imported="no">SAMRAI/hier/LocalId.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::hier::GlobalId</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyNeighbors.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>HierarchyNeighbors_8C</filename>
    <includes id="HierarchyNeighbors_8h" name="HierarchyNeighbors.h" local="yes" imported="no">SAMRAI/hier/HierarchyNeighbors.h</includes>
    <includes id="Connector_8h" name="Connector.h" local="yes" imported="no">SAMRAI/hier/Connector.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyNeighbors.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>HierarchyNeighbors_8h</filename>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <class kind="class">SAMRAI::hier::HierarchyNeighbors</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>Index.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>Index_8C</filename>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a70f8031b2e9a7945dc8903b7d796a106</anchor>
      <arglist>(std::istream &amp;s, Index &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>ab3b5173d4ce8e24eedb882b292fd6a58</anchor>
      <arglist>(std::ostream &amp;s, const Index &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Index.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>Index_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Dimension_8h" name="Dimension.h" local="yes" imported="no">SAMRAI/tbox/Dimension.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::hier::Index</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>IntVector.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>IntVector_8C</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a161b01d3d8a05603f40678e2d95e25bb</anchor>
      <arglist>(std::istream &amp;s, IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>aa309443486df112fdfac155615a9c180</anchor>
      <arglist>(std::ostream &amp;s, const IntVector &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IntVector.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>IntVector_8h</filename>
    <includes id="BlockId_8h" name="BlockId.h" local="yes" imported="no">SAMRAI/hier/BlockId.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Dimension_8h" name="Dimension.h" local="yes" imported="no">SAMRAI/tbox/Dimension.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::hier::IntVector</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>LocalId.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>LocalId_8C</filename>
    <includes id="LocalId_8h" name="LocalId.h" local="yes" imported="no">SAMRAI/hier/LocalId.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a3da43f9884e66e17a08572f15e3d235c</anchor>
      <arglist>(std::ostream &amp;co, const LocalId &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LocalId.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>LocalId_8h</filename>
    <class kind="class">SAMRAI::hier::LocalId</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>MappingConnector.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>MappingConnector_8C</filename>
    <includes id="MappingConnector_8h" name="MappingConnector.h" local="yes" imported="no">SAMRAI/hier/MappingConnector.h</includes>
    <includes id="BoxLevelConnectorUtils_8h" name="BoxLevelConnectorUtils.h" local="yes" imported="no">SAMRAI/hier/BoxLevelConnectorUtils.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="variable" static="yes">
      <type>static const std::string</type>
      <name>dbgbord</name>
      <anchorfile>MappingConnector_8C.html</anchorfile>
      <anchor>a10cf21c27a9dc8f68e51acf656f3ab5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MappingConnector.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>MappingConnector_8h</filename>
    <includes id="Connector_8h" name="Connector.h" local="yes" imported="no">SAMRAI/hier/Connector.h</includes>
    <class kind="class">SAMRAI::hier::MappingConnector</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>MappingConnectorAlgorithm.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>MappingConnectorAlgorithm_8C</filename>
    <includes id="BoxContainerUtils_8h" name="BoxContainerUtils.h" local="yes" imported="no">SAMRAI/hier/BoxContainerUtils.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="MappingConnectorAlgorithm_8h" name="MappingConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/MappingConnectorAlgorithm.h</includes>
    <includes id="InputManager_8h" name="InputManager.h" local="yes" imported="no">SAMRAI/tbox/InputManager.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <includes id="AsyncCommStage_8h" name="AsyncCommStage.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommStage.h</includes>
    <includes id="AsyncCommPeer_8h" name="AsyncCommPeer.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommPeer.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>MappingConnectorAlgorithm.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>MappingConnectorAlgorithm_8h</filename>
    <includes id="BaseConnectorAlgorithm_8h" name="BaseConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/BaseConnectorAlgorithm.h</includes>
    <includes id="MappingConnector_8h" name="MappingConnector.h" local="yes" imported="no">SAMRAI/hier/MappingConnector.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <class kind="class">SAMRAI::hier::MappingConnectorAlgorithm</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>MultiblockBoxTree.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>MultiblockBoxTree_8C</filename>
    <includes id="MultiblockBoxTree_8h" name="MultiblockBoxTree.h" local="yes" imported="no">SAMRAI/hier/MultiblockBoxTree.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>MultiblockBoxTree.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>MultiblockBoxTree_8h</filename>
    <includes id="BoxTree_8h" name="BoxTree.h" local="yes" imported="no">SAMRAI/hier/BoxTree.h</includes>
    <class kind="class">SAMRAI::hier::MultiblockBoxTree</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>OverlapConnectorAlgorithm.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>OverlapConnectorAlgorithm_8C</filename>
    <includes id="OverlapConnectorAlgorithm_8h" name="OverlapConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/OverlapConnectorAlgorithm.h</includes>
    <includes id="AssumedPartition_8h" name="AssumedPartition.h" local="yes" imported="no">SAMRAI/hier/AssumedPartition.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxContainerUtils_8h" name="BoxContainerUtils.h" local="yes" imported="no">SAMRAI/hier/BoxContainerUtils.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="PeriodicShiftCatalog_8h" name="PeriodicShiftCatalog.h" local="yes" imported="no">SAMRAI/hier/PeriodicShiftCatalog.h</includes>
    <includes id="AsyncCommStage_8h" name="AsyncCommStage.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommStage.h</includes>
    <includes id="AsyncCommPeer_8h" name="AsyncCommPeer.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommPeer.h</includes>
    <includes id="InputManager_8h" name="InputManager.h" local="yes" imported="no">SAMRAI/tbox/InputManager.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>OverlapConnectorAlgorithm.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>OverlapConnectorAlgorithm_8h</filename>
    <includes id="BaseConnectorAlgorithm_8h" name="BaseConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/BaseConnectorAlgorithm.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <class kind="class">SAMRAI::hier::OverlapConnectorAlgorithm</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>Patch.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>Patch_8C</filename>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PatchDataRestartManager_8h" name="PatchDataRestartManager.h" local="yes" imported="no">SAMRAI/hier/PatchDataRestartManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a8bb707f5fc3860628bc35e33403fba1e</anchor>
      <arglist>(std::ostream &amp;s, const Patch &amp;patch)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Patch.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>Patch_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">SAMRAI/hier/ComponentSelector.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="PatchGeometry_8h" name="PatchGeometry.h" local="yes" imported="no">SAMRAI/hier/PatchGeometry.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="VariableContext_8h" name="VariableContext.h" local="yes" imported="no">SAMRAI/hier/VariableContext.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::hier::Patch</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchBoundaries.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PatchBoundaries_8C</filename>
    <includes id="PatchBoundaries_8h" name="PatchBoundaries.h" local="yes" imported="no">SAMRAI/hier/PatchBoundaries.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchBoundaries.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PatchBoundaries_8h</filename>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">SAMRAI/hier/BoundaryBox.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::hier::PatchBoundaries</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchData.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PatchData_8C</filename>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchData.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PatchData_8h</filename>
    <includes id="MessageStream_8h" name="MessageStream.h" local="yes" imported="no">SAMRAI/tbox/MessageStream.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::hier::PatchData</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchDataFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PatchDataFactory_8C</filename>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchDataFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PatchDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <class kind="class">SAMRAI::hier::PatchDataFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchDataRestartManager.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PatchDataRestartManager_8C</filename>
    <includes id="PatchDataRestartManager_8h" name="PatchDataRestartManager.h" local="yes" imported="no">SAMRAI/hier/PatchDataRestartManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchDataRestartManager.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PatchDataRestartManager_8h</filename>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">SAMRAI/hier/ComponentSelector.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <class kind="class">SAMRAI::hier::PatchDataRestartManager</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchDescriptor.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PatchDescriptor_8C</filename>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchDescriptor.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PatchDescriptor_8h</filename>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::hier::PatchDescriptor</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PatchFactory_8C</filename>
    <includes id="PatchFactory_8h" name="PatchFactory.h" local="yes" imported="no">SAMRAI/hier/PatchFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PatchFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <class kind="class">SAMRAI::hier::PatchFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchGeometry.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PatchGeometry_8C</filename>
    <includes id="PatchGeometry_8h" name="PatchGeometry.h" local="yes" imported="no">SAMRAI/hier/PatchGeometry.h</includes>
    <includes id="BoundaryLookupTable_8h" name="BoundaryLookupTable.h" local="yes" imported="no">SAMRAI/hier/BoundaryLookupTable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchGeometry.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PatchGeometry_8h</filename>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">SAMRAI/hier/BoundaryBox.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="LocalId_8h" name="LocalId.h" local="yes" imported="no">SAMRAI/hier/LocalId.h</includes>
    <includes id="PatchBoundaries_8h" name="PatchBoundaries.h" local="yes" imported="no">SAMRAI/hier/PatchBoundaries.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::hier::PatchGeometry</class>
    <class kind="class">SAMRAI::hier::PatchGeometry::TwoDimBool</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchHierarchy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PatchHierarchy_8C</filename>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="OverlapConnectorAlgorithm_8h" name="OverlapConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/OverlapConnectorAlgorithm.h</includes>
    <includes id="PeriodicShiftCatalog_8h" name="PeriodicShiftCatalog.h" local="yes" imported="no">SAMRAI/hier/PeriodicShiftCatalog.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="RestartManager_8h" name="RestartManager.h" local="yes" imported="no">SAMRAI/tbox/RestartManager.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchHierarchy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PatchHierarchy_8h</filename>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">SAMRAI/hier/ComponentSelector.h</includes>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <includes id="BoxLevel_8h" name="BoxLevel.h" local="yes" imported="no">SAMRAI/hier/BoxLevel.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="PatchFactory_8h" name="PatchFactory.h" local="yes" imported="no">SAMRAI/hier/PatchFactory.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="PatchLevelFactory_8h" name="PatchLevelFactory.h" local="yes" imported="no">SAMRAI/hier/PatchLevelFactory.h</includes>
    <includes id="PersistentOverlapConnectors_8h" name="PersistentOverlapConnectors.h" local="yes" imported="no">SAMRAI/hier/PersistentOverlapConnectors.h</includes>
    <includes id="UncoveredBoxIterator_8h" name="UncoveredBoxIterator.h" local="yes" imported="no">SAMRAI/hier/UncoveredBoxIterator.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Serializable_8h" name="Serializable.h" local="yes" imported="no">SAMRAI/tbox/Serializable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::hier::PatchHierarchy</class>
    <class kind="class">SAMRAI::hier::PatchHierarchy::ConnectorWidthRequestorStrategy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevel.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PatchLevel_8C</filename>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevel.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PatchLevel_8h</filename>
    <includes id="BoxContainerSingleBlockIterator_8h" name="BoxContainerSingleBlockIterator.h" local="yes" imported="no">SAMRAI/hier/BoxContainerSingleBlockIterator.h</includes>
    <includes id="BoxLevel_8h" name="BoxLevel.h" local="yes" imported="no">SAMRAI/hier/BoxLevel.h</includes>
    <includes id="PatchFactory_8h" name="PatchFactory.h" local="yes" imported="no">SAMRAI/hier/PatchFactory.h</includes>
    <includes id="ProcessorMapping_8h" name="ProcessorMapping.h" local="yes" imported="no">SAMRAI/hier/ProcessorMapping.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::hier::PatchLevel</class>
    <class kind="class">SAMRAI::hier::PatchLevel::Iterator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevelFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PatchLevelFactory_8C</filename>
    <includes id="PatchLevelFactory_8h" name="PatchLevelFactory.h" local="yes" imported="no">SAMRAI/hier/PatchLevelFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevelFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PatchLevelFactory_8h</filename>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <includes id="BoxLevel_8h" name="BoxLevel.h" local="yes" imported="no">SAMRAI/hier/BoxLevel.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="PatchFactory_8h" name="PatchFactory.h" local="yes" imported="no">SAMRAI/hier/PatchFactory.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <class kind="class">SAMRAI::hier::PatchLevelFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PeriodicId.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PeriodicId_8C</filename>
    <includes id="PeriodicId_8h" name="PeriodicId.h" local="yes" imported="no">SAMRAI/hier/PeriodicId.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>aa138e9f0a250b1688eb3f7ca667993c5</anchor>
      <arglist>(std::ostream &amp;co, const PeriodicId &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PeriodicId.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PeriodicId_8h</filename>
    <class kind="class">SAMRAI::hier::PeriodicId</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PeriodicShiftCatalog.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PeriodicShiftCatalog_8C</filename>
    <includes id="PeriodicShiftCatalog_8h" name="PeriodicShiftCatalog.h" local="yes" imported="no">SAMRAI/hier/PeriodicShiftCatalog.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PeriodicShiftCatalog.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PeriodicShiftCatalog_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="PeriodicId_8h" name="PeriodicId.h" local="yes" imported="no">SAMRAI/hier/PeriodicId.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::hier::PeriodicShiftCatalog</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PersistentOverlapConnectors.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PersistentOverlapConnectors_8C</filename>
    <includes id="PersistentOverlapConnectors_8h" name="PersistentOverlapConnectors.h" local="yes" imported="no">SAMRAI/hier/PersistentOverlapConnectors.h</includes>
    <includes id="Connector_8h" name="Connector.h" local="yes" imported="no">SAMRAI/hier/Connector.h</includes>
    <includes id="BoxLevel_8h" name="BoxLevel.h" local="yes" imported="no">SAMRAI/hier/BoxLevel.h</includes>
    <includes id="OverlapConnectorAlgorithm_8h" name="OverlapConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/OverlapConnectorAlgorithm.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <includes id="InputManager_8h" name="InputManager.h" local="yes" imported="no">SAMRAI/tbox/InputManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PersistentOverlapConnectors.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>PersistentOverlapConnectors_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <class kind="class">SAMRAI::hier::PersistentOverlapConnectors</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="enumeration">
      <name>ConnectorNotFoundAction</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a256cef944748f7494c84017f5829101a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTOR_ERROR</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a256cef944748f7494c84017f5829101aaad2ce1ba6d0e0a3fd6877ba7f45ce983</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTOR_CREATE</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a256cef944748f7494c84017f5829101aa544fdb3dc8b290ea8fbe0f5b3bcfc598</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTOR_IMPLICIT_CREATION_RULE</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a256cef944748f7494c84017f5829101aa358709ce9182ffe89b933f5b6bcd8870</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ProcessorMapping.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>ProcessorMapping_8C</filename>
    <includes id="ProcessorMapping_8h" name="ProcessorMapping.h" local="yes" imported="no">SAMRAI/hier/ProcessorMapping.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>ProcessorMapping.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>ProcessorMapping_8h</filename>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::hier::ProcessorMapping</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>RealBoxConstIterator.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>RealBoxConstIterator_8C</filename>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>RealBoxConstIterator.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>RealBoxConstIterator_8h</filename>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <class kind="class">SAMRAI::hier::RealBoxConstIterator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>RefineOperator.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>RefineOperator_8C</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="OpenMPUtilities_8h" name="OpenMPUtilities.h" local="yes" imported="no">SAMRAI/tbox/OpenMPUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>RefineOperator.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>RefineOperator_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="OpenMPUtilities_8h" name="OpenMPUtilities.h" local="yes" imported="no">SAMRAI/tbox/OpenMPUtilities.h</includes>
    <class kind="class">SAMRAI::hier::RefineOperator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>SequentialLocalIdGenerator.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>SequentialLocalIdGenerator_8h</filename>
    <includes id="MessageStream_8h" name="MessageStream.h" local="yes" imported="no">SAMRAI/tbox/MessageStream.h</includes>
    <class kind="class">SAMRAI::hier::SequentialLocalIdGenerator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>SingularityFinder.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>SingularityFinder_8C</filename>
    <includes id="SingularityFinder_8h" name="SingularityFinder.h" local="yes" imported="no">SAMRAI/hier/SingularityFinder.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>SingularityFinder.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>SingularityFinder_8h</filename>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <class kind="class">SAMRAI::hier::SingularityFinder</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>TimeInterpolateOperator.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>TimeInterpolateOperator_8C</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>TimeInterpolateOperator.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>TimeInterpolateOperator_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <class kind="class">SAMRAI::hier::TimeInterpolateOperator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>TransferOperatorRegistry.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>TransferOperatorRegistry_8C</filename>
    <includes id="TransferOperatorRegistry_8h" name="TransferOperatorRegistry.h" local="yes" imported="no">SAMRAI/hier/TransferOperatorRegistry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>TransferOperatorRegistry.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>TransferOperatorRegistry_8h</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="Boost_8h" name="Boost.h" local="yes" imported="no">SAMRAI/tbox/Boost.h</includes>
    <includes id="Dimension_8h" name="Dimension.h" local="yes" imported="no">SAMRAI/tbox/Dimension.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::hier::TransferOperatorRegistry</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>Transformation.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>Transformation_8C</filename>
    <includes id="Transformation_8h" name="Transformation.h" local="yes" imported="no">SAMRAI/hier/Transformation.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>Transformation.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>Transformation_8h</filename>
    <includes id="BlockId_8h" name="BlockId.h" local="yes" imported="no">SAMRAI/hier/BlockId.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="Dimension_8h" name="Dimension.h" local="yes" imported="no">SAMRAI/tbox/Dimension.h</includes>
    <class kind="class">SAMRAI::hier::Transformation</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>UncoveredBoxIterator.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>UncoveredBoxIterator_8C</filename>
    <includes id="UncoveredBoxIterator_8h" name="UncoveredBoxIterator.h" local="yes" imported="no">SAMRAI/hier/UncoveredBoxIterator.h</includes>
    <includes id="Connector_8h" name="Connector.h" local="yes" imported="no">SAMRAI/hier/Connector.h</includes>
    <includes id="FlattenedHierarchy_8h" name="FlattenedHierarchy.h" local="yes" imported="no">SAMRAI/hier/FlattenedHierarchy.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>UncoveredBoxIterator.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>UncoveredBoxIterator_8h</filename>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <class kind="class">SAMRAI::hier::UncoveredBoxIterator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>Variable.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>Variable_8C</filename>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>Variable.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>Variable_8h</filename>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::hier::Variable</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>VariableContext.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>VariableContext_8C</filename>
    <includes id="VariableContext_8h" name="VariableContext.h" local="yes" imported="no">SAMRAI/hier/VariableContext.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>VariableContext.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>VariableContext_8h</filename>
    <class kind="class">SAMRAI::hier::VariableContext</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>VariableDatabase.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>VariableDatabase_8C</filename>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>VariableDatabase.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/</path>
    <filename>VariableDatabase_8h</filename>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">SAMRAI/hier/ComponentSelector.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="VariableContext_8h" name="VariableContext.h" local="yes" imported="no">SAMRAI/hier/VariableContext.h</includes>
    <class kind="class">SAMRAI::hier::VariableDatabase</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>mainpage.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/</path>
    <filename>mainpage_8dox</filename>
  </compound>
  <compound kind="file">
    <name>ArrayDataBasicOps.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>ArrayDataBasicOps_8C</filename>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">SAMRAI/math/ArrayDataBasicOps.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataBasicOps.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>ArrayDataBasicOps_8h</filename>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="ArrayDataBasicOps_8C" name="ArrayDataBasicOps.C" local="yes" imported="no">SAMRAI/math/ArrayDataBasicOps.C</includes>
    <class kind="class">SAMRAI::math::ArrayDataBasicOps</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataMiscellaneousOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>ArrayDataMiscellaneousOpsReal_8C</filename>
    <includes id="ArrayDataMiscellaneousOpsReal_8h" name="ArrayDataMiscellaneousOpsReal.h" local="yes" imported="no">SAMRAI/math/ArrayDataMiscellaneousOpsReal.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataMiscellaneousOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>ArrayDataMiscellaneousOpsReal_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="ArrayDataMiscellaneousOpsReal_8C" name="ArrayDataMiscellaneousOpsReal.C" local="yes" imported="no">SAMRAI/math/ArrayDataMiscellaneousOpsReal.C</includes>
    <class kind="class">SAMRAI::math::ArrayDataMiscellaneousOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataNormOpsComplex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>ArrayDataNormOpsComplex_8C</filename>
    <includes id="ArrayDataNormOpsComplex_8h" name="ArrayDataNormOpsComplex.h" local="yes" imported="no">SAMRAI/math/ArrayDataNormOpsComplex.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataNormOpsComplex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>ArrayDataNormOpsComplex_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::math::ArrayDataNormOpsComplex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataNormOpsInteger.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>ArrayDataNormOpsInteger_8C</filename>
    <includes id="ArrayDataNormOpsInteger_8h" name="ArrayDataNormOpsInteger.h" local="yes" imported="no">SAMRAI/math/ArrayDataNormOpsInteger.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataNormOpsInteger.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>ArrayDataNormOpsInteger_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <class kind="class">SAMRAI::math::ArrayDataNormOpsInteger</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataNormOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>ArrayDataNormOpsReal_8C</filename>
    <includes id="ArrayDataNormOpsReal_8h" name="ArrayDataNormOpsReal.h" local="yes" imported="no">SAMRAI/math/ArrayDataNormOpsReal.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataNormOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>ArrayDataNormOpsReal_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="ArrayDataNormOpsReal_8C" name="ArrayDataNormOpsReal.C" local="yes" imported="no">SAMRAI/math/ArrayDataNormOpsReal.C</includes>
    <class kind="class">SAMRAI::math::ArrayDataNormOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>manual_hierarchy.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/dox/</path>
    <filename>manual__hierarchy_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyCellDataOpsComplex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyCellDataOpsComplex_8C</filename>
    <includes id="HierarchyCellDataOpsComplex_8h" name="HierarchyCellDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/HierarchyCellDataOpsComplex.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="CellDataFactory_8h" name="CellDataFactory.h" local="yes" imported="no">SAMRAI/pdat/CellDataFactory.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyCellDataOpsComplex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyCellDataOpsComplex_8h</filename>
    <includes id="HierarchyDataOpsComplex_8h" name="HierarchyDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsComplex.h</includes>
    <includes id="PatchCellDataOpsComplex_8h" name="PatchCellDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/PatchCellDataOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <class kind="class">SAMRAI::math::HierarchyCellDataOpsComplex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyCellDataOpsInteger.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyCellDataOpsInteger_8C</filename>
    <includes id="HierarchyCellDataOpsInteger_8h" name="HierarchyCellDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/HierarchyCellDataOpsInteger.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="CellDataFactory_8h" name="CellDataFactory.h" local="yes" imported="no">SAMRAI/pdat/CellDataFactory.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyCellDataOpsInteger.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyCellDataOpsInteger_8h</filename>
    <includes id="HierarchyDataOpsInteger_8h" name="HierarchyDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsInteger.h</includes>
    <includes id="PatchCellDataOpsInteger_8h" name="PatchCellDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/PatchCellDataOpsInteger.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <class kind="class">SAMRAI::math::HierarchyCellDataOpsInteger</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyCellDataOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyCellDataOpsReal_8C</filename>
    <includes id="HierarchyCellDataOpsReal_8h" name="HierarchyCellDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyCellDataOpsReal.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="CellDataFactory_8h" name="CellDataFactory.h" local="yes" imported="no">SAMRAI/pdat/CellDataFactory.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyCellDataOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyCellDataOpsReal_8h</filename>
    <includes id="HierarchyDataOpsReal_8h" name="HierarchyDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsReal.h</includes>
    <includes id="PatchCellDataOpsReal_8h" name="PatchCellDataOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchCellDataOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="HierarchyCellDataOpsReal_8C" name="HierarchyCellDataOpsReal.C" local="yes" imported="no">SAMRAI/math/HierarchyCellDataOpsReal.C</includes>
    <class kind="class">SAMRAI::math::HierarchyCellDataOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyDataOpsComplex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyDataOpsComplex_8C</filename>
    <includes id="HierarchyDataOpsComplex_8h" name="HierarchyDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsComplex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyDataOpsComplex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyDataOpsComplex_8h</filename>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <class kind="class">SAMRAI::math::HierarchyDataOpsComplex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyDataOpsInteger.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyDataOpsInteger_8C</filename>
    <includes id="HierarchyDataOpsInteger_8h" name="HierarchyDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsInteger.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyDataOpsInteger.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyDataOpsInteger_8h</filename>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <class kind="class">SAMRAI::math::HierarchyDataOpsInteger</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyDataOpsManager.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyDataOpsManager_8C</filename>
    <includes id="HierarchyDataOpsManager_8h" name="HierarchyDataOpsManager.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsManager.h</includes>
    <includes id="HierarchyCellDataOpsReal_8h" name="HierarchyCellDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyCellDataOpsReal.h</includes>
    <includes id="HierarchyFaceDataOpsReal_8h" name="HierarchyFaceDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyFaceDataOpsReal.h</includes>
    <includes id="HierarchyNodeDataOpsReal_8h" name="HierarchyNodeDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyNodeDataOpsReal.h</includes>
    <includes id="HierarchySideDataOpsReal_8h" name="HierarchySideDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchySideDataOpsReal.h</includes>
    <includes id="HierarchyEdgeDataOpsReal_8h" name="HierarchyEdgeDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyEdgeDataOpsReal.h</includes>
    <includes id="HierarchyCellDataOpsComplex_8h" name="HierarchyCellDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/HierarchyCellDataOpsComplex.h</includes>
    <includes id="HierarchyFaceDataOpsComplex_8h" name="HierarchyFaceDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/HierarchyFaceDataOpsComplex.h</includes>
    <includes id="HierarchyNodeDataOpsComplex_8h" name="HierarchyNodeDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/HierarchyNodeDataOpsComplex.h</includes>
    <includes id="HierarchySideDataOpsComplex_8h" name="HierarchySideDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/HierarchySideDataOpsComplex.h</includes>
    <includes id="HierarchyEdgeDataOpsComplex_8h" name="HierarchyEdgeDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/HierarchyEdgeDataOpsComplex.h</includes>
    <includes id="HierarchyCellDataOpsInteger_8h" name="HierarchyCellDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/HierarchyCellDataOpsInteger.h</includes>
    <includes id="HierarchyFaceDataOpsInteger_8h" name="HierarchyFaceDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/HierarchyFaceDataOpsInteger.h</includes>
    <includes id="HierarchyNodeDataOpsInteger_8h" name="HierarchyNodeDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/HierarchyNodeDataOpsInteger.h</includes>
    <includes id="HierarchySideDataOpsInteger_8h" name="HierarchySideDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/HierarchySideDataOpsInteger.h</includes>
    <includes id="HierarchyEdgeDataOpsInteger_8h" name="HierarchyEdgeDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/HierarchyEdgeDataOpsInteger.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">SAMRAI/pdat/FaceVariable.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">SAMRAI/pdat/NodeVariable.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">SAMRAI/pdat/EdgeVariable.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyDataOpsManager.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyDataOpsManager_8h</filename>
    <includes id="HierarchyDataOpsComplex_8h" name="HierarchyDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsComplex.h</includes>
    <includes id="HierarchyDataOpsInteger_8h" name="HierarchyDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsInteger.h</includes>
    <includes id="HierarchyDataOpsReal_8h" name="HierarchyDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsReal.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::math::HierarchyDataOpsManager</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyDataOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyDataOpsReal_8C</filename>
    <includes id="HierarchyDataOpsReal_8h" name="HierarchyDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsReal.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyDataOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyDataOpsReal_8h</filename>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="HierarchyDataOpsReal_8C" name="HierarchyDataOpsReal.C" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsReal.C</includes>
    <class kind="class">SAMRAI::math::HierarchyDataOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyEdgeDataOpsComplex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyEdgeDataOpsComplex_8C</filename>
    <includes id="HierarchyEdgeDataOpsComplex_8h" name="HierarchyEdgeDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/HierarchyEdgeDataOpsComplex.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="EdgeDataFactory_8h" name="EdgeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/EdgeDataFactory.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyEdgeDataOpsComplex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyEdgeDataOpsComplex_8h</filename>
    <includes id="HierarchyDataOpsComplex_8h" name="HierarchyDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsComplex.h</includes>
    <includes id="PatchEdgeDataOpsComplex_8h" name="PatchEdgeDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/PatchEdgeDataOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <class kind="class">SAMRAI::math::HierarchyEdgeDataOpsComplex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyEdgeDataOpsInteger.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyEdgeDataOpsInteger_8C</filename>
    <includes id="HierarchyEdgeDataOpsInteger_8h" name="HierarchyEdgeDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/HierarchyEdgeDataOpsInteger.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="EdgeDataFactory_8h" name="EdgeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/EdgeDataFactory.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyEdgeDataOpsInteger.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyEdgeDataOpsInteger_8h</filename>
    <includes id="HierarchyDataOpsInteger_8h" name="HierarchyDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsInteger.h</includes>
    <includes id="PatchEdgeDataOpsInteger_8h" name="PatchEdgeDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/PatchEdgeDataOpsInteger.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <class kind="class">SAMRAI::math::HierarchyEdgeDataOpsInteger</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyEdgeDataOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyEdgeDataOpsReal_8C</filename>
    <includes id="HierarchyEdgeDataOpsReal_8h" name="HierarchyEdgeDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyEdgeDataOpsReal.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="EdgeDataFactory_8h" name="EdgeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/EdgeDataFactory.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyEdgeDataOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyEdgeDataOpsReal_8h</filename>
    <includes id="HierarchyDataOpsReal_8h" name="HierarchyDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsReal.h</includes>
    <includes id="PatchEdgeDataOpsReal_8h" name="PatchEdgeDataOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchEdgeDataOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="HierarchyEdgeDataOpsReal_8C" name="HierarchyEdgeDataOpsReal.C" local="yes" imported="no">SAMRAI/math/HierarchyEdgeDataOpsReal.C</includes>
    <class kind="class">SAMRAI::math::HierarchyEdgeDataOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyFaceDataOpsComplex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyFaceDataOpsComplex_8C</filename>
    <includes id="HierarchyFaceDataOpsComplex_8h" name="HierarchyFaceDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/HierarchyFaceDataOpsComplex.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="FaceDataFactory_8h" name="FaceDataFactory.h" local="yes" imported="no">SAMRAI/pdat/FaceDataFactory.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyFaceDataOpsComplex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyFaceDataOpsComplex_8h</filename>
    <includes id="HierarchyDataOpsComplex_8h" name="HierarchyDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsComplex.h</includes>
    <includes id="PatchFaceDataOpsComplex_8h" name="PatchFaceDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/PatchFaceDataOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <class kind="class">SAMRAI::math::HierarchyFaceDataOpsComplex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyFaceDataOpsInteger.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyFaceDataOpsInteger_8C</filename>
    <includes id="HierarchyFaceDataOpsInteger_8h" name="HierarchyFaceDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/HierarchyFaceDataOpsInteger.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="FaceDataFactory_8h" name="FaceDataFactory.h" local="yes" imported="no">SAMRAI/pdat/FaceDataFactory.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyFaceDataOpsInteger.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyFaceDataOpsInteger_8h</filename>
    <includes id="HierarchyDataOpsInteger_8h" name="HierarchyDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsInteger.h</includes>
    <includes id="PatchFaceDataOpsInteger_8h" name="PatchFaceDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/PatchFaceDataOpsInteger.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <class kind="class">SAMRAI::math::HierarchyFaceDataOpsInteger</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyFaceDataOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyFaceDataOpsReal_8C</filename>
    <includes id="HierarchyFaceDataOpsReal_8h" name="HierarchyFaceDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyFaceDataOpsReal.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="FaceDataFactory_8h" name="FaceDataFactory.h" local="yes" imported="no">SAMRAI/pdat/FaceDataFactory.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyFaceDataOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyFaceDataOpsReal_8h</filename>
    <includes id="HierarchyDataOpsReal_8h" name="HierarchyDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsReal.h</includes>
    <includes id="PatchFaceDataOpsReal_8h" name="PatchFaceDataOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchFaceDataOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="HierarchyFaceDataOpsReal_8C" name="HierarchyFaceDataOpsReal.C" local="yes" imported="no">SAMRAI/math/HierarchyFaceDataOpsReal.C</includes>
    <class kind="class">SAMRAI::math::HierarchyFaceDataOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyNodeDataOpsComplex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyNodeDataOpsComplex_8C</filename>
    <includes id="HierarchyNodeDataOpsComplex_8h" name="HierarchyNodeDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/HierarchyNodeDataOpsComplex.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="NodeDataFactory_8h" name="NodeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/NodeDataFactory.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyNodeDataOpsComplex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyNodeDataOpsComplex_8h</filename>
    <includes id="HierarchyDataOpsComplex_8h" name="HierarchyDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsComplex.h</includes>
    <includes id="PatchNodeDataOpsComplex_8h" name="PatchNodeDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/PatchNodeDataOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <class kind="class">SAMRAI::math::HierarchyNodeDataOpsComplex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyNodeDataOpsInteger.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyNodeDataOpsInteger_8C</filename>
    <includes id="HierarchyNodeDataOpsInteger_8h" name="HierarchyNodeDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/HierarchyNodeDataOpsInteger.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="NodeDataFactory_8h" name="NodeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/NodeDataFactory.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyNodeDataOpsInteger.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyNodeDataOpsInteger_8h</filename>
    <includes id="HierarchyDataOpsInteger_8h" name="HierarchyDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsInteger.h</includes>
    <includes id="PatchNodeDataOpsInteger_8h" name="PatchNodeDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/PatchNodeDataOpsInteger.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <class kind="class">SAMRAI::math::HierarchyNodeDataOpsInteger</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyNodeDataOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyNodeDataOpsReal_8C</filename>
    <includes id="HierarchyNodeDataOpsReal_8h" name="HierarchyNodeDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyNodeDataOpsReal.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="NodeDataFactory_8h" name="NodeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/NodeDataFactory.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/NodeGeometry.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyNodeDataOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchyNodeDataOpsReal_8h</filename>
    <includes id="HierarchyDataOpsReal_8h" name="HierarchyDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsReal.h</includes>
    <includes id="PatchNodeDataOpsReal_8h" name="PatchNodeDataOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchNodeDataOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="HierarchyNodeDataOpsReal_8C" name="HierarchyNodeDataOpsReal.C" local="yes" imported="no">SAMRAI/math/HierarchyNodeDataOpsReal.C</includes>
    <class kind="class">SAMRAI::math::HierarchyNodeDataOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchySideDataOpsComplex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchySideDataOpsComplex_8C</filename>
    <includes id="HierarchySideDataOpsComplex_8h" name="HierarchySideDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/HierarchySideDataOpsComplex.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="SideDataFactory_8h" name="SideDataFactory.h" local="yes" imported="no">SAMRAI/pdat/SideDataFactory.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchySideDataOpsComplex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchySideDataOpsComplex_8h</filename>
    <includes id="HierarchyDataOpsComplex_8h" name="HierarchyDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsComplex.h</includes>
    <includes id="PatchSideDataOpsComplex_8h" name="PatchSideDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/PatchSideDataOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <class kind="class">SAMRAI::math::HierarchySideDataOpsComplex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchySideDataOpsInteger.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchySideDataOpsInteger_8C</filename>
    <includes id="HierarchySideDataOpsInteger_8h" name="HierarchySideDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/HierarchySideDataOpsInteger.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="SideDataFactory_8h" name="SideDataFactory.h" local="yes" imported="no">SAMRAI/pdat/SideDataFactory.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchySideDataOpsInteger.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchySideDataOpsInteger_8h</filename>
    <includes id="HierarchyDataOpsInteger_8h" name="HierarchyDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsInteger.h</includes>
    <includes id="PatchSideDataOpsInteger_8h" name="PatchSideDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/PatchSideDataOpsInteger.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <class kind="class">SAMRAI::math::HierarchySideDataOpsInteger</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchySideDataOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchySideDataOpsReal_8C</filename>
    <includes id="HierarchySideDataOpsReal_8h" name="HierarchySideDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchySideDataOpsReal.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="SideDataFactory_8h" name="SideDataFactory.h" local="yes" imported="no">SAMRAI/pdat/SideDataFactory.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchySideDataOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>HierarchySideDataOpsReal_8h</filename>
    <includes id="HierarchyDataOpsReal_8h" name="HierarchyDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsReal.h</includes>
    <includes id="PatchSideDataOpsReal_8h" name="PatchSideDataOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchSideDataOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="HierarchySideDataOpsReal_8C" name="HierarchySideDataOpsReal.C" local="yes" imported="no">SAMRAI/math/HierarchySideDataOpsReal.C</includes>
    <class kind="class">SAMRAI::math::HierarchySideDataOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataBasicOps.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchCellDataBasicOps_8C</filename>
    <includes id="PatchCellDataBasicOps_8h" name="PatchCellDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchCellDataBasicOps.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataBasicOps.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchCellDataBasicOps_8h</filename>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">SAMRAI/math/ArrayDataBasicOps.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="PatchCellDataBasicOps_8C" name="PatchCellDataBasicOps.C" local="yes" imported="no">SAMRAI/math/PatchCellDataBasicOps.C</includes>
    <class kind="class">SAMRAI::math::PatchCellDataBasicOps</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataMiscellaneousOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchCellDataMiscellaneousOpsReal_8C</filename>
    <includes id="PatchCellDataMiscellaneousOpsReal_8h" name="PatchCellDataMiscellaneousOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchCellDataMiscellaneousOpsReal.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataMiscellaneousOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchCellDataMiscellaneousOpsReal_8h</filename>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="ArrayDataMiscellaneousOpsReal_8h" name="ArrayDataMiscellaneousOpsReal.h" local="yes" imported="no">SAMRAI/math/ArrayDataMiscellaneousOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchCellDataMiscellaneousOpsReal_8C" name="PatchCellDataMiscellaneousOpsReal.C" local="yes" imported="no">SAMRAI/math/PatchCellDataMiscellaneousOpsReal.C</includes>
    <class kind="class">SAMRAI::math::PatchCellDataMiscellaneousOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataNormOpsComplex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchCellDataNormOpsComplex_8C</filename>
    <includes id="PatchCellDataNormOpsComplex_8h" name="PatchCellDataNormOpsComplex.h" local="yes" imported="no">SAMRAI/math/PatchCellDataNormOpsComplex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataNormOpsComplex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchCellDataNormOpsComplex_8h</filename>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="ArrayDataNormOpsComplex_8h" name="ArrayDataNormOpsComplex.h" local="yes" imported="no">SAMRAI/math/ArrayDataNormOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::math::PatchCellDataNormOpsComplex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataNormOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchCellDataNormOpsReal_8C</filename>
    <includes id="PatchCellDataNormOpsReal_8h" name="PatchCellDataNormOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchCellDataNormOpsReal.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataNormOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchCellDataNormOpsReal_8h</filename>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="ArrayDataNormOpsReal_8h" name="ArrayDataNormOpsReal.h" local="yes" imported="no">SAMRAI/math/ArrayDataNormOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchCellDataNormOpsReal_8C" name="PatchCellDataNormOpsReal.C" local="yes" imported="no">SAMRAI/math/PatchCellDataNormOpsReal.C</includes>
    <class kind="class">SAMRAI::math::PatchCellDataNormOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataOpsComplex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchCellDataOpsComplex_8C</filename>
    <includes id="PatchCellDataOpsComplex_8h" name="PatchCellDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/PatchCellDataOpsComplex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataOpsComplex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchCellDataOpsComplex_8h</filename>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="PatchCellDataBasicOps_8h" name="PatchCellDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchCellDataBasicOps.h</includes>
    <includes id="PatchCellDataNormOpsComplex_8h" name="PatchCellDataNormOpsComplex.h" local="yes" imported="no">SAMRAI/math/PatchCellDataNormOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::math::PatchCellDataOpsComplex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataOpsInteger.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchCellDataOpsInteger_8C</filename>
    <includes id="PatchCellDataOpsInteger_8h" name="PatchCellDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/PatchCellDataOpsInteger.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataOpsInteger.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchCellDataOpsInteger_8h</filename>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="PatchCellDataBasicOps_8h" name="PatchCellDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchCellDataBasicOps.h</includes>
    <includes id="ArrayDataNormOpsInteger_8h" name="ArrayDataNormOpsInteger.h" local="yes" imported="no">SAMRAI/math/ArrayDataNormOpsInteger.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::math::PatchCellDataOpsInteger</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchCellDataOpsReal_8C</filename>
    <includes id="PatchCellDataOpsReal_8h" name="PatchCellDataOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchCellDataOpsReal.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchCellDataOpsReal_8h</filename>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="PatchCellDataBasicOps_8h" name="PatchCellDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchCellDataBasicOps.h</includes>
    <includes id="PatchCellDataMiscellaneousOpsReal_8h" name="PatchCellDataMiscellaneousOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchCellDataMiscellaneousOpsReal.h</includes>
    <includes id="PatchCellDataNormOpsReal_8h" name="PatchCellDataNormOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchCellDataNormOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="PatchCellDataOpsReal_8C" name="PatchCellDataOpsReal.C" local="yes" imported="no">SAMRAI/math/PatchCellDataOpsReal.C</includes>
    <class kind="class">SAMRAI::math::PatchCellDataOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataBasicOps.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchEdgeDataBasicOps_8C</filename>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="PatchEdgeDataBasicOps_8h" name="PatchEdgeDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchEdgeDataBasicOps.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">SAMRAI/pdat/EdgeGeometry.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataBasicOps.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchEdgeDataBasicOps_8h</filename>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">SAMRAI/math/ArrayDataBasicOps.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchEdgeDataBasicOps_8C" name="PatchEdgeDataBasicOps.C" local="yes" imported="no">SAMRAI/math/PatchEdgeDataBasicOps.C</includes>
    <class kind="class">SAMRAI::math::PatchEdgeDataBasicOps</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataMiscellaneousOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchEdgeDataMiscellaneousOpsReal_8C</filename>
    <includes id="PatchEdgeDataMiscellaneousOpsReal_8h" name="PatchEdgeDataMiscellaneousOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchEdgeDataMiscellaneousOpsReal.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">SAMRAI/pdat/EdgeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataMiscellaneousOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchEdgeDataMiscellaneousOpsReal_8h</filename>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="ArrayDataMiscellaneousOpsReal_8h" name="ArrayDataMiscellaneousOpsReal.h" local="yes" imported="no">SAMRAI/math/ArrayDataMiscellaneousOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchEdgeDataMiscellaneousOpsReal_8C" name="PatchEdgeDataMiscellaneousOpsReal.C" local="yes" imported="no">SAMRAI/math/PatchEdgeDataMiscellaneousOpsReal.C</includes>
    <class kind="class">SAMRAI::math::PatchEdgeDataMiscellaneousOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataNormOpsComplex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchEdgeDataNormOpsComplex_8C</filename>
    <includes id="PatchEdgeDataNormOpsComplex_8h" name="PatchEdgeDataNormOpsComplex.h" local="yes" imported="no">SAMRAI/math/PatchEdgeDataNormOpsComplex.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">SAMRAI/pdat/EdgeGeometry.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataNormOpsComplex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchEdgeDataNormOpsComplex_8h</filename>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="ArrayDataNormOpsComplex_8h" name="ArrayDataNormOpsComplex.h" local="yes" imported="no">SAMRAI/math/ArrayDataNormOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::math::PatchEdgeDataNormOpsComplex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataNormOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchEdgeDataNormOpsReal_8C</filename>
    <includes id="PatchEdgeDataNormOpsReal_8h" name="PatchEdgeDataNormOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchEdgeDataNormOpsReal.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">SAMRAI/pdat/EdgeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataNormOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchEdgeDataNormOpsReal_8h</filename>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="ArrayDataNormOpsReal_8h" name="ArrayDataNormOpsReal.h" local="yes" imported="no">SAMRAI/math/ArrayDataNormOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchEdgeDataNormOpsReal_8C" name="PatchEdgeDataNormOpsReal.C" local="yes" imported="no">SAMRAI/math/PatchEdgeDataNormOpsReal.C</includes>
    <class kind="class">SAMRAI::math::PatchEdgeDataNormOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataOpsComplex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchEdgeDataOpsComplex_8C</filename>
    <includes id="PatchEdgeDataOpsComplex_8h" name="PatchEdgeDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/PatchEdgeDataOpsComplex.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">SAMRAI/pdat/EdgeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataOpsComplex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchEdgeDataOpsComplex_8h</filename>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="PatchEdgeDataBasicOps_8h" name="PatchEdgeDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchEdgeDataBasicOps.h</includes>
    <includes id="PatchEdgeDataNormOpsComplex_8h" name="PatchEdgeDataNormOpsComplex.h" local="yes" imported="no">SAMRAI/math/PatchEdgeDataNormOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::math::PatchEdgeDataOpsComplex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataOpsInteger.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchEdgeDataOpsInteger_8C</filename>
    <includes id="PatchEdgeDataOpsInteger_8h" name="PatchEdgeDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/PatchEdgeDataOpsInteger.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">SAMRAI/pdat/EdgeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataOpsInteger.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchEdgeDataOpsInteger_8h</filename>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="PatchEdgeDataBasicOps_8h" name="PatchEdgeDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchEdgeDataBasicOps.h</includes>
    <includes id="ArrayDataNormOpsInteger_8h" name="ArrayDataNormOpsInteger.h" local="yes" imported="no">SAMRAI/math/ArrayDataNormOpsInteger.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::math::PatchEdgeDataOpsInteger</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchEdgeDataOpsReal_8C</filename>
    <includes id="PatchEdgeDataOpsReal_8h" name="PatchEdgeDataOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchEdgeDataOpsReal.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">SAMRAI/pdat/EdgeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchEdgeDataOpsReal_8h</filename>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="PatchEdgeDataBasicOps_8h" name="PatchEdgeDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchEdgeDataBasicOps.h</includes>
    <includes id="PatchEdgeDataMiscellaneousOpsReal_8h" name="PatchEdgeDataMiscellaneousOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchEdgeDataMiscellaneousOpsReal.h</includes>
    <includes id="PatchEdgeDataNormOpsReal_8h" name="PatchEdgeDataNormOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchEdgeDataNormOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="PatchEdgeDataOpsReal_8C" name="PatchEdgeDataOpsReal.C" local="yes" imported="no">SAMRAI/math/PatchEdgeDataOpsReal.C</includes>
    <class kind="class">SAMRAI::math::PatchEdgeDataOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataBasicOps.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchFaceDataBasicOps_8C</filename>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="PatchFaceDataBasicOps_8h" name="PatchFaceDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchFaceDataBasicOps.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">SAMRAI/pdat/FaceGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataBasicOps.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchFaceDataBasicOps_8h</filename>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">SAMRAI/math/ArrayDataBasicOps.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="PatchFaceDataBasicOps_8C" name="PatchFaceDataBasicOps.C" local="yes" imported="no">SAMRAI/math/PatchFaceDataBasicOps.C</includes>
    <class kind="class">SAMRAI::math::PatchFaceDataBasicOps</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataMiscellaneousOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchFaceDataMiscellaneousOpsReal_8C</filename>
    <includes id="PatchFaceDataMiscellaneousOpsReal_8h" name="PatchFaceDataMiscellaneousOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchFaceDataMiscellaneousOpsReal.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">SAMRAI/pdat/FaceGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataMiscellaneousOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchFaceDataMiscellaneousOpsReal_8h</filename>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="ArrayDataMiscellaneousOpsReal_8h" name="ArrayDataMiscellaneousOpsReal.h" local="yes" imported="no">SAMRAI/math/ArrayDataMiscellaneousOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchFaceDataMiscellaneousOpsReal_8C" name="PatchFaceDataMiscellaneousOpsReal.C" local="yes" imported="no">SAMRAI/math/PatchFaceDataMiscellaneousOpsReal.C</includes>
    <class kind="class">SAMRAI::math::PatchFaceDataMiscellaneousOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataNormOpsComplex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchFaceDataNormOpsComplex_8C</filename>
    <includes id="PatchFaceDataNormOpsComplex_8h" name="PatchFaceDataNormOpsComplex.h" local="yes" imported="no">SAMRAI/math/PatchFaceDataNormOpsComplex.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">SAMRAI/pdat/FaceGeometry.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataNormOpsComplex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchFaceDataNormOpsComplex_8h</filename>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="ArrayDataNormOpsComplex_8h" name="ArrayDataNormOpsComplex.h" local="yes" imported="no">SAMRAI/math/ArrayDataNormOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::math::PatchFaceDataNormOpsComplex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataNormOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchFaceDataNormOpsReal_8C</filename>
    <includes id="PatchFaceDataNormOpsReal_8h" name="PatchFaceDataNormOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchFaceDataNormOpsReal.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">SAMRAI/pdat/FaceGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataNormOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchFaceDataNormOpsReal_8h</filename>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="ArrayDataNormOpsReal_8h" name="ArrayDataNormOpsReal.h" local="yes" imported="no">SAMRAI/math/ArrayDataNormOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchFaceDataNormOpsReal_8C" name="PatchFaceDataNormOpsReal.C" local="yes" imported="no">SAMRAI/math/PatchFaceDataNormOpsReal.C</includes>
    <class kind="class">SAMRAI::math::PatchFaceDataNormOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataOpsComplex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchFaceDataOpsComplex_8C</filename>
    <includes id="PatchFaceDataOpsComplex_8h" name="PatchFaceDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/PatchFaceDataOpsComplex.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">SAMRAI/pdat/FaceGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataOpsComplex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchFaceDataOpsComplex_8h</filename>
    <includes id="PatchFaceDataBasicOps_8h" name="PatchFaceDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchFaceDataBasicOps.h</includes>
    <includes id="PatchFaceDataNormOpsComplex_8h" name="PatchFaceDataNormOpsComplex.h" local="yes" imported="no">SAMRAI/math/PatchFaceDataNormOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::math::PatchFaceDataOpsComplex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataOpsInteger.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchFaceDataOpsInteger_8C</filename>
    <includes id="PatchFaceDataOpsInteger_8h" name="PatchFaceDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/PatchFaceDataOpsInteger.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">SAMRAI/pdat/FaceGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataOpsInteger.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchFaceDataOpsInteger_8h</filename>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="PatchFaceDataBasicOps_8h" name="PatchFaceDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchFaceDataBasicOps.h</includes>
    <includes id="ArrayDataNormOpsInteger_8h" name="ArrayDataNormOpsInteger.h" local="yes" imported="no">SAMRAI/math/ArrayDataNormOpsInteger.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::math::PatchFaceDataOpsInteger</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchFaceDataOpsReal_8C</filename>
    <includes id="PatchFaceDataOpsReal_8h" name="PatchFaceDataOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchFaceDataOpsReal.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">SAMRAI/pdat/FaceGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchFaceDataOpsReal_8h</filename>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="PatchFaceDataBasicOps_8h" name="PatchFaceDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchFaceDataBasicOps.h</includes>
    <includes id="PatchFaceDataMiscellaneousOpsReal_8h" name="PatchFaceDataMiscellaneousOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchFaceDataMiscellaneousOpsReal.h</includes>
    <includes id="PatchFaceDataNormOpsReal_8h" name="PatchFaceDataNormOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchFaceDataNormOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="PatchFaceDataOpsReal_8C" name="PatchFaceDataOpsReal.C" local="yes" imported="no">SAMRAI/math/PatchFaceDataOpsReal.C</includes>
    <class kind="class">SAMRAI::math::PatchFaceDataOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataBasicOps.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchNodeDataBasicOps_8C</filename>
    <includes id="PatchNodeDataBasicOps_8h" name="PatchNodeDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchNodeDataBasicOps.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/NodeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataBasicOps.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchNodeDataBasicOps_8h</filename>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">SAMRAI/math/ArrayDataBasicOps.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="PatchNodeDataBasicOps_8C" name="PatchNodeDataBasicOps.C" local="yes" imported="no">SAMRAI/math/PatchNodeDataBasicOps.C</includes>
    <class kind="class">SAMRAI::math::PatchNodeDataBasicOps</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataMiscellaneousOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchNodeDataMiscellaneousOpsReal_8C</filename>
    <includes id="PatchNodeDataMiscellaneousOpsReal_8h" name="PatchNodeDataMiscellaneousOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchNodeDataMiscellaneousOpsReal.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/NodeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataMiscellaneousOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchNodeDataMiscellaneousOpsReal_8h</filename>
    <includes id="ArrayDataMiscellaneousOpsReal_8h" name="ArrayDataMiscellaneousOpsReal.h" local="yes" imported="no">SAMRAI/math/ArrayDataMiscellaneousOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="PatchNodeDataMiscellaneousOpsReal_8C" name="PatchNodeDataMiscellaneousOpsReal.C" local="yes" imported="no">SAMRAI/math/PatchNodeDataMiscellaneousOpsReal.C</includes>
    <class kind="class">SAMRAI::math::PatchNodeDataMiscellaneousOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataNormOpsComplex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchNodeDataNormOpsComplex_8C</filename>
    <includes id="PatchNodeDataNormOpsComplex_8h" name="PatchNodeDataNormOpsComplex.h" local="yes" imported="no">SAMRAI/math/PatchNodeDataNormOpsComplex.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/NodeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataNormOpsComplex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchNodeDataNormOpsComplex_8h</filename>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="ArrayDataNormOpsComplex_8h" name="ArrayDataNormOpsComplex.h" local="yes" imported="no">SAMRAI/math/ArrayDataNormOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::math::PatchNodeDataNormOpsComplex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataNormOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchNodeDataNormOpsReal_8C</filename>
    <includes id="PatchNodeDataNormOpsReal_8h" name="PatchNodeDataNormOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchNodeDataNormOpsReal.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/NodeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataNormOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchNodeDataNormOpsReal_8h</filename>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="ArrayDataNormOpsReal_8h" name="ArrayDataNormOpsReal.h" local="yes" imported="no">SAMRAI/math/ArrayDataNormOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchNodeDataNormOpsReal_8C" name="PatchNodeDataNormOpsReal.C" local="yes" imported="no">SAMRAI/math/PatchNodeDataNormOpsReal.C</includes>
    <class kind="class">SAMRAI::math::PatchNodeDataNormOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataOpsComplex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchNodeDataOpsComplex_8C</filename>
    <includes id="PatchNodeDataOpsComplex_8h" name="PatchNodeDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/PatchNodeDataOpsComplex.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/NodeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataOpsComplex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchNodeDataOpsComplex_8h</filename>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="PatchNodeDataBasicOps_8h" name="PatchNodeDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchNodeDataBasicOps.h</includes>
    <includes id="PatchNodeDataNormOpsComplex_8h" name="PatchNodeDataNormOpsComplex.h" local="yes" imported="no">SAMRAI/math/PatchNodeDataNormOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::math::PatchNodeDataOpsComplex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataOpsInteger.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchNodeDataOpsInteger_8C</filename>
    <includes id="PatchNodeDataOpsInteger_8h" name="PatchNodeDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/PatchNodeDataOpsInteger.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/NodeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataOpsInteger.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchNodeDataOpsInteger_8h</filename>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="PatchNodeDataBasicOps_8h" name="PatchNodeDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchNodeDataBasicOps.h</includes>
    <includes id="ArrayDataNormOpsInteger_8h" name="ArrayDataNormOpsInteger.h" local="yes" imported="no">SAMRAI/math/ArrayDataNormOpsInteger.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::math::PatchNodeDataOpsInteger</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchNodeDataOpsReal_8C</filename>
    <includes id="PatchNodeDataOpsReal_8h" name="PatchNodeDataOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchNodeDataOpsReal.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/NodeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchNodeDataOpsReal_8h</filename>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="PatchNodeDataBasicOps_8h" name="PatchNodeDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchNodeDataBasicOps.h</includes>
    <includes id="PatchNodeDataMiscellaneousOpsReal_8h" name="PatchNodeDataMiscellaneousOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchNodeDataMiscellaneousOpsReal.h</includes>
    <includes id="PatchNodeDataNormOpsReal_8h" name="PatchNodeDataNormOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchNodeDataNormOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="PatchNodeDataOpsReal_8C" name="PatchNodeDataOpsReal.C" local="yes" imported="no">SAMRAI/math/PatchNodeDataOpsReal.C</includes>
    <class kind="class">SAMRAI::math::PatchNodeDataOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataBasicOps.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchSideDataBasicOps_8C</filename>
    <includes id="PatchSideDataBasicOps_8h" name="PatchSideDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchSideDataBasicOps.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SAMRAI/pdat/SideGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataBasicOps.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchSideDataBasicOps_8h</filename>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">SAMRAI/math/ArrayDataBasicOps.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="PatchSideDataBasicOps_8C" name="PatchSideDataBasicOps.C" local="yes" imported="no">SAMRAI/math/PatchSideDataBasicOps.C</includes>
    <class kind="class">SAMRAI::math::PatchSideDataBasicOps</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataMiscellaneousOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchSideDataMiscellaneousOpsReal_8C</filename>
    <includes id="PatchSideDataMiscellaneousOpsReal_8h" name="PatchSideDataMiscellaneousOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchSideDataMiscellaneousOpsReal.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SAMRAI/pdat/SideGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataMiscellaneousOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchSideDataMiscellaneousOpsReal_8h</filename>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="ArrayDataMiscellaneousOpsReal_8h" name="ArrayDataMiscellaneousOpsReal.h" local="yes" imported="no">SAMRAI/math/ArrayDataMiscellaneousOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchSideDataMiscellaneousOpsReal_8C" name="PatchSideDataMiscellaneousOpsReal.C" local="yes" imported="no">SAMRAI/math/PatchSideDataMiscellaneousOpsReal.C</includes>
    <class kind="class">SAMRAI::math::PatchSideDataMiscellaneousOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataNormOpsComplex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchSideDataNormOpsComplex_8C</filename>
    <includes id="PatchSideDataNormOpsComplex_8h" name="PatchSideDataNormOpsComplex.h" local="yes" imported="no">SAMRAI/math/PatchSideDataNormOpsComplex.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SAMRAI/pdat/SideGeometry.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataNormOpsComplex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchSideDataNormOpsComplex_8h</filename>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="ArrayDataNormOpsComplex_8h" name="ArrayDataNormOpsComplex.h" local="yes" imported="no">SAMRAI/math/ArrayDataNormOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::math::PatchSideDataNormOpsComplex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataNormOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchSideDataNormOpsReal_8C</filename>
    <includes id="PatchSideDataNormOpsReal_8h" name="PatchSideDataNormOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchSideDataNormOpsReal.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SAMRAI/pdat/SideGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataNormOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchSideDataNormOpsReal_8h</filename>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="ArrayDataNormOpsReal_8h" name="ArrayDataNormOpsReal.h" local="yes" imported="no">SAMRAI/math/ArrayDataNormOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchSideDataNormOpsReal_8C" name="PatchSideDataNormOpsReal.C" local="yes" imported="no">SAMRAI/math/PatchSideDataNormOpsReal.C</includes>
    <class kind="class">SAMRAI::math::PatchSideDataNormOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataOpsComplex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchSideDataOpsComplex_8C</filename>
    <includes id="PatchSideDataOpsComplex_8h" name="PatchSideDataOpsComplex.h" local="yes" imported="no">SAMRAI/math/PatchSideDataOpsComplex.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SAMRAI/pdat/SideGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataOpsComplex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchSideDataOpsComplex_8h</filename>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="PatchSideDataBasicOps_8h" name="PatchSideDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchSideDataBasicOps.h</includes>
    <includes id="PatchSideDataNormOpsComplex_8h" name="PatchSideDataNormOpsComplex.h" local="yes" imported="no">SAMRAI/math/PatchSideDataNormOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::math::PatchSideDataOpsComplex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataOpsInteger.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchSideDataOpsInteger_8C</filename>
    <includes id="PatchSideDataOpsInteger_8h" name="PatchSideDataOpsInteger.h" local="yes" imported="no">SAMRAI/math/PatchSideDataOpsInteger.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SAMRAI/pdat/SideGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataOpsInteger.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchSideDataOpsInteger_8h</filename>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="PatchSideDataBasicOps_8h" name="PatchSideDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchSideDataBasicOps.h</includes>
    <includes id="ArrayDataNormOpsInteger_8h" name="ArrayDataNormOpsInteger.h" local="yes" imported="no">SAMRAI/math/ArrayDataNormOpsInteger.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::math::PatchSideDataOpsInteger</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataOpsReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchSideDataOpsReal_8C</filename>
    <includes id="PatchSideDataOpsReal_8h" name="PatchSideDataOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchSideDataOpsReal.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SAMRAI/pdat/SideGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataOpsReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/</path>
    <filename>PatchSideDataOpsReal_8h</filename>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="PatchSideDataBasicOps_8h" name="PatchSideDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchSideDataBasicOps.h</includes>
    <includes id="PatchSideDataMiscellaneousOpsReal_8h" name="PatchSideDataMiscellaneousOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchSideDataMiscellaneousOpsReal.h</includes>
    <includes id="PatchSideDataNormOpsReal_8h" name="PatchSideDataNormOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchSideDataNormOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="PatchSideDataOpsReal_8C" name="PatchSideDataOpsReal.C" local="yes" imported="no">SAMRAI/math/PatchSideDataOpsReal.C</includes>
    <class kind="class">SAMRAI::math::PatchSideDataOpsReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>BalanceBoxBreaker.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>BalanceBoxBreaker_8C</filename>
    <includes id="BalanceBoxBreaker_8h" name="BalanceBoxBreaker.h" local="yes" imported="no">SAMRAI/mesh/BalanceBoxBreaker.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="BalanceUtilities_8h" name="BalanceUtilities.h" local="yes" imported="no">SAMRAI/mesh/BalanceUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ROUND_TO_HI</name>
      <anchorfile>BalanceBoxBreaker_8C.html</anchorfile>
      <anchor>a98d9fa9e038dcab277aab748b68a208b</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ROUND_TO_LO</name>
      <anchorfile>BalanceBoxBreaker_8C.html</anchorfile>
      <anchor>a73f66857f91dd714a7e21197bf0cca84</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1mesh.html</anchorfile>
      <anchor>aa3c65f953eb2f054a992b170e51e2976</anchor>
      <arglist>(std::ostream &amp;co, const BalanceBoxBreaker::TrialBreak &amp;tb)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BalanceBoxBreaker.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>BalanceBoxBreaker_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="PartitioningParams_8h" name="PartitioningParams.h" local="yes" imported="no">SAMRAI/mesh/PartitioningParams.h</includes>
    <class kind="class">SAMRAI::mesh::BalanceBoxBreaker</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>BalanceUtilities.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>BalanceUtilities_8C</filename>
    <includes id="BalanceUtilities_8h" name="BalanceUtilities.h" local="yes" imported="no">SAMRAI/mesh/BalanceUtilities.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="MappingConnector_8h" name="MappingConnector.h" local="yes" imported="no">SAMRAI/hier/MappingConnector.h</includes>
    <includes id="MappingConnectorAlgorithm_8h" name="MappingConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/MappingConnectorAlgorithm.h</includes>
    <includes id="OverlapConnectorAlgorithm_8h" name="OverlapConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/OverlapConnectorAlgorithm.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>BalanceUtilities.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>BalanceUtilities_8h</filename>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <includes id="Connector_8h" name="Connector.h" local="yes" imported="no">SAMRAI/hier/Connector.h</includes>
    <includes id="MappingConnector_8h" name="MappingConnector.h" local="yes" imported="no">SAMRAI/hier/MappingConnector.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="ProcessorMapping_8h" name="ProcessorMapping.h" local="yes" imported="no">SAMRAI/hier/ProcessorMapping.h</includes>
    <includes id="PatchCellDataNormOpsReal_8h" name="PatchCellDataNormOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchCellDataNormOpsReal.h</includes>
    <includes id="PartitioningParams_8h" name="PartitioningParams.h" local="yes" imported="no">SAMRAI/mesh/PartitioningParams.h</includes>
    <includes id="SpatialKey_8h" name="SpatialKey.h" local="yes" imported="no">SAMRAI/mesh/SpatialKey.h</includes>
    <includes id="RankGroup_8h" name="RankGroup.h" local="yes" imported="no">SAMRAI/tbox/RankGroup.h</includes>
    <class kind="struct">SAMRAI::mesh::BalanceUtilities</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>BergerRigoutsos.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>BergerRigoutsos_8C</filename>
    <includes id="BergerRigoutsos_8h" name="BergerRigoutsos.h" local="yes" imported="no">SAMRAI/mesh/BergerRigoutsos.h</includes>
    <includes id="BergerRigoutsosNode_8h" name="BergerRigoutsosNode.h" local="yes" imported="no">SAMRAI/mesh/BergerRigoutsosNode.h</includes>
    <includes id="MappingConnectorAlgorithm_8h" name="MappingConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/MappingConnectorAlgorithm.h</includes>
    <includes id="BoxLevelConnectorUtils_8h" name="BoxLevelConnectorUtils.h" local="yes" imported="no">SAMRAI/hier/BoxLevelConnectorUtils.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>BergerRigoutsos.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>BergerRigoutsos_8h</filename>
    <includes id="BoxGeneratorStrategy_8h" name="BoxGeneratorStrategy.h" local="yes" imported="no">SAMRAI/mesh/BoxGeneratorStrategy.h</includes>
    <includes id="Connector_8h" name="Connector.h" local="yes" imported="no">SAMRAI/hier/Connector.h</includes>
    <includes id="BoxLevel_8h" name="BoxLevel.h" local="yes" imported="no">SAMRAI/hier/BoxLevel.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="AsyncCommStage_8h" name="AsyncCommStage.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommStage.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="OpenMPUtilities_8h" name="OpenMPUtilities.h" local="yes" imported="no">SAMRAI/tbox/OpenMPUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::mesh::BergerRigoutsos</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>BergerRigoutsosNode.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>BergerRigoutsosNode_8C</filename>
    <includes id="BergerRigoutsosNode_8h" name="BergerRigoutsosNode.h" local="yes" imported="no">SAMRAI/mesh/BergerRigoutsosNode.h</includes>
    <includes id="BergerRigoutsos_8h" name="BergerRigoutsos.h" local="yes" imported="no">SAMRAI/mesh/BergerRigoutsos.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="OpenMPUtilities_8h" name="OpenMPUtilities.h" local="yes" imported="no">SAMRAI/tbox/OpenMPUtilities.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>BergerRigoutsosNode.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>BergerRigoutsosNode_8h</filename>
    <includes id="BergerRigoutsos_8h" name="BergerRigoutsos.h" local="yes" imported="no">SAMRAI/mesh/BergerRigoutsos.h</includes>
    <includes id="AsyncCommGroup_8h" name="AsyncCommGroup.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommGroup.h</includes>
    <includes id="BlockId_8h" name="BlockId.h" local="yes" imported="no">SAMRAI/hier/BlockId.h</includes>
    <includes id="BoxLevel_8h" name="BoxLevel.h" local="yes" imported="no">SAMRAI/hier/BoxLevel.h</includes>
    <includes id="Connector_8h" name="Connector.h" local="yes" imported="no">SAMRAI/hier/Connector.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <class kind="class">SAMRAI::mesh::BergerRigoutsosNode</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>BoxGeneratorStrategy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>BoxGeneratorStrategy_8C</filename>
    <includes id="BoxGeneratorStrategy_8h" name="BoxGeneratorStrategy.h" local="yes" imported="no">SAMRAI/mesh/BoxGeneratorStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>BoxGeneratorStrategy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>BoxGeneratorStrategy_8h</filename>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <includes id="BoxLevel_8h" name="BoxLevel.h" local="yes" imported="no">SAMRAI/hier/BoxLevel.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <class kind="class">SAMRAI::mesh::BoxGeneratorStrategy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>BoxInTransit.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>BoxInTransit_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="TransitLoad_8h" name="TransitLoad.h" local="yes" imported="no">SAMRAI/mesh/TransitLoad.h</includes>
    <includes id="Dimension_8h" name="Dimension.h" local="yes" imported="no">SAMRAI/tbox/Dimension.h</includes>
    <includes id="MessageStream_8h" name="MessageStream.h" local="yes" imported="no">SAMRAI/tbox/MessageStream.h</includes>
    <class kind="struct">SAMRAI::mesh::BoxInTransit</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>BoxTransitSet.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>BoxTransitSet_8C</filename>
    <includes id="BoxTransitSet_8h" name="BoxTransitSet.h" local="yes" imported="no">SAMRAI/mesh/BoxTransitSet.h</includes>
    <includes id="BalanceUtilities_8h" name="BalanceUtilities.h" local="yes" imported="no">SAMRAI/mesh/BalanceUtilities.h</includes>
    <includes id="InputManager_8h" name="InputManager.h" local="yes" imported="no">SAMRAI/tbox/InputManager.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <includes id="AsyncCommPeer_8h" name="AsyncCommPeer.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommPeer.h</includes>
    <includes id="AsyncCommStage_8h" name="AsyncCommStage.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommStage.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>BoxTransitSet.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>BoxTransitSet_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="MappingConnector_8h" name="MappingConnector.h" local="yes" imported="no">SAMRAI/hier/MappingConnector.h</includes>
    <includes id="SequentialLocalIdGenerator_8h" name="SequentialLocalIdGenerator.h" local="yes" imported="no">SAMRAI/hier/SequentialLocalIdGenerator.h</includes>
    <includes id="BalanceBoxBreaker_8h" name="BalanceBoxBreaker.h" local="yes" imported="no">SAMRAI/mesh/BalanceBoxBreaker.h</includes>
    <includes id="BoxInTransit_8h" name="BoxInTransit.h" local="yes" imported="no">SAMRAI/mesh/BoxInTransit.h</includes>
    <includes id="PartitioningParams_8h" name="PartitioningParams.h" local="yes" imported="no">SAMRAI/mesh/PartitioningParams.h</includes>
    <includes id="TransitLoad_8h" name="TransitLoad.h" local="yes" imported="no">SAMRAI/mesh/TransitLoad.h</includes>
    <includes id="Dimension_8h" name="Dimension.h" local="yes" imported="no">SAMRAI/tbox/Dimension.h</includes>
    <includes id="MessageStream_8h" name="MessageStream.h" local="yes" imported="no">SAMRAI/tbox/MessageStream.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <class kind="class">SAMRAI::mesh::BoxTransitSet</class>
    <class kind="class">SAMRAI::mesh::BoxTransitSet::Outputter</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>CascadePartitioner.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>CascadePartitioner_8C</filename>
    <includes id="CascadePartitioner_8h" name="CascadePartitioner.h" local="yes" imported="no">SAMRAI/mesh/CascadePartitioner.h</includes>
    <includes id="BoxTransitSet_8h" name="BoxTransitSet.h" local="yes" imported="no">SAMRAI/mesh/BoxTransitSet.h</includes>
    <includes id="VoucherTransitLoad_8h" name="VoucherTransitLoad.h" local="yes" imported="no">SAMRAI/mesh/VoucherTransitLoad.h</includes>
    <includes id="BalanceUtilities_8h" name="BalanceUtilities.h" local="yes" imported="no">SAMRAI/mesh/BalanceUtilities.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellDataFactory_8h" name="CellDataFactory.h" local="yes" imported="no">SAMRAI/pdat/CellDataFactory.h</includes>
    <includes id="InputManager_8h" name="InputManager.h" local="yes" imported="no">SAMRAI/tbox/InputManager.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="AsyncCommStage_8h" name="AsyncCommStage.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommStage.h</includes>
    <includes id="AsyncCommGroup_8h" name="AsyncCommGroup.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommGroup.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>CascadePartitioner.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>CascadePartitioner_8h</filename>
    <includes id="CascadePartitionerTree_8h" name="CascadePartitionerTree.h" local="yes" imported="no">SAMRAI/mesh/CascadePartitionerTree.h</includes>
    <includes id="MappingConnectorAlgorithm_8h" name="MappingConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/MappingConnectorAlgorithm.h</includes>
    <includes id="LoadBalanceStrategy_8h" name="LoadBalanceStrategy.h" local="yes" imported="no">SAMRAI/mesh/LoadBalanceStrategy.h</includes>
    <includes id="PartitioningParams_8h" name="PartitioningParams.h" local="yes" imported="no">SAMRAI/mesh/PartitioningParams.h</includes>
    <includes id="TransitLoad_8h" name="TransitLoad.h" local="yes" imported="no">SAMRAI/mesh/TransitLoad.h</includes>
    <includes id="AsyncCommPeer_8h" name="AsyncCommPeer.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommPeer.h</includes>
    <includes id="AsyncCommStage_8h" name="AsyncCommStage.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommStage.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="RankGroup_8h" name="RankGroup.h" local="yes" imported="no">SAMRAI/tbox/RankGroup.h</includes>
    <includes id="RankTreeStrategy_8h" name="RankTreeStrategy.h" local="yes" imported="no">SAMRAI/tbox/RankTreeStrategy.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::mesh::CascadePartitioner</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>CascadePartitionerTree.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>CascadePartitionerTree_8C</filename>
    <includes id="CascadePartitionerTree_8h" name="CascadePartitionerTree.h" local="yes" imported="no">SAMRAI/mesh/CascadePartitionerTree.h</includes>
    <includes id="CascadePartitioner_8h" name="CascadePartitioner.h" local="yes" imported="no">SAMRAI/mesh/CascadePartitioner.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>CascadePartitionerTree.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>CascadePartitionerTree_8h</filename>
    <includes id="PartitioningParams_8h" name="PartitioningParams.h" local="yes" imported="no">SAMRAI/mesh/PartitioningParams.h</includes>
    <includes id="TransitLoad_8h" name="TransitLoad.h" local="yes" imported="no">SAMRAI/mesh/TransitLoad.h</includes>
    <includes id="AsyncCommPeer_8h" name="AsyncCommPeer.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommPeer.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::mesh::CascadePartitionerTree</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>ChopAndPackLoadBalancer.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>ChopAndPackLoadBalancer_8C</filename>
    <includes id="ChopAndPackLoadBalancer_8h" name="ChopAndPackLoadBalancer.h" local="yes" imported="no">SAMRAI/mesh/ChopAndPackLoadBalancer.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="BalanceUtilities_8h" name="BalanceUtilities.h" local="yes" imported="no">SAMRAI/mesh/BalanceUtilities.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellDataFactory_8h" name="CellDataFactory.h" local="yes" imported="no">SAMRAI/pdat/CellDataFactory.h</includes>
    <includes id="CellDoubleConstantRefine_8h" name="CellDoubleConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/CellDoubleConstantRefine.h</includes>
    <includes id="OverlapConnectorAlgorithm_8h" name="OverlapConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/OverlapConnectorAlgorithm.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">SAMRAI/xfer/RefineAlgorithm.h</includes>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">SAMRAI/xfer/RefineSchedule.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ChopAndPackLoadBalancer_MARKLOADFORPOSTPROCESSING</name>
      <anchorfile>ChopAndPackLoadBalancer_8C.html</anchorfile>
      <anchor>abc74ea13264aa312a554d793d0408720</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChopAndPackLoadBalancer.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>ChopAndPackLoadBalancer_8h</filename>
    <includes id="ProcessorMapping_8h" name="ProcessorMapping.h" local="yes" imported="no">SAMRAI/hier/ProcessorMapping.h</includes>
    <includes id="LoadBalanceStrategy_8h" name="LoadBalanceStrategy.h" local="yes" imported="no">SAMRAI/mesh/LoadBalanceStrategy.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::mesh::ChopAndPackLoadBalancer</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>manual_clustering.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/dox/</path>
    <filename>manual__clustering_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>manual_gridding.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/dox/</path>
    <filename>manual__gridding_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>manual_load_balance.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/dox/</path>
    <filename>manual__load__balance_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>GraphLoadBalancer.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>GraphLoadBalancer_8C</filename>
    <includes id="GraphLoadBalancer_8h" name="GraphLoadBalancer.h" local="yes" imported="no">SAMRAI/mesh/GraphLoadBalancer.h</includes>
    <includes id="BoxLevelConnectorUtils_8h" name="BoxLevelConnectorUtils.h" local="yes" imported="no">SAMRAI/hier/BoxLevelConnectorUtils.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="MappingConnectorAlgorithm_8h" name="MappingConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/MappingConnectorAlgorithm.h</includes>
    <includes id="OverlapConnectorAlgorithm_8h" name="OverlapConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/OverlapConnectorAlgorithm.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>GraphLoadBalancer.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>GraphLoadBalancer_8h</filename>
    <includes id="BalanceUtilities_8h" name="BalanceUtilities.h" local="yes" imported="no">SAMRAI/mesh/BalanceUtilities.h</includes>
    <includes id="LoadBalanceStrategy_8h" name="LoadBalanceStrategy.h" local="yes" imported="no">SAMRAI/mesh/LoadBalanceStrategy.h</includes>
    <includes id="MappingConnector_8h" name="MappingConnector.h" local="yes" imported="no">SAMRAI/hier/MappingConnector.h</includes>
    <includes id="MappingConnectorAlgorithm_8h" name="MappingConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/MappingConnectorAlgorithm.h</includes>
    <includes id="AsyncCommPeer_8h" name="AsyncCommPeer.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommPeer.h</includes>
    <includes id="AsyncCommStage_8h" name="AsyncCommStage.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommStage.h</includes>
    <includes id="CommGraphWriter_8h" name="CommGraphWriter.h" local="yes" imported="no">SAMRAI/tbox/CommGraphWriter.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="RankGroup_8h" name="RankGroup.h" local="yes" imported="no">SAMRAI/tbox/RankGroup.h</includes>
    <includes id="Statistic_8h" name="Statistic.h" local="yes" imported="no">SAMRAI/tbox/Statistic.h</includes>
    <includes id="Statistician_8h" name="Statistician.h" local="yes" imported="no">SAMRAI/tbox/Statistician.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::mesh::GraphLoadBalancer</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>GriddingAlgorithm.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>GriddingAlgorithm_8C</filename>
    <includes id="GriddingAlgorithm_8h" name="GriddingAlgorithm.h" local="yes" imported="no">SAMRAI/mesh/GriddingAlgorithm.h</includes>
    <includes id="IEEE_8h" name="IEEE.h" local="yes" imported="no">SAMRAI/tbox/IEEE.h</includes>
    <includes id="RestartManager_8h" name="RestartManager.h" local="yes" imported="no">SAMRAI/tbox/RestartManager.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="PeriodicShiftCatalog_8h" name="PeriodicShiftCatalog.h" local="yes" imported="no">SAMRAI/hier/PeriodicShiftCatalog.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="PatchCellDataBasicOps_8h" name="PatchCellDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchCellDataBasicOps.h</includes>
    <includes id="StandardTagAndInitialize_8h" name="StandardTagAndInitialize.h" local="yes" imported="no">SAMRAI/mesh/StandardTagAndInitialize.h</includes>
    <includes id="CellIntegerConstantRefine_8h" name="CellIntegerConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/CellIntegerConstantRefine.h</includes>
    <includes id="PatchInteriorVariableFillPattern_8h" name="PatchInteriorVariableFillPattern.h" local="yes" imported="no">SAMRAI/xfer/PatchInteriorVariableFillPattern.h</includes>
    <includes id="PatchLevelInteriorFillPattern_8h" name="PatchLevelInteriorFillPattern.h" local="yes" imported="no">SAMRAI/xfer/PatchLevelInteriorFillPattern.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>GriddingAlgorithm.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>GriddingAlgorithm_8h</filename>
    <includes id="GriddingAlgorithmStrategy_8h" name="GriddingAlgorithmStrategy.h" local="yes" imported="no">SAMRAI/mesh/GriddingAlgorithmStrategy.h</includes>
    <includes id="BoxGeneratorStrategy_8h" name="BoxGeneratorStrategy.h" local="yes" imported="no">SAMRAI/mesh/BoxGeneratorStrategy.h</includes>
    <includes id="LoadBalanceStrategy_8h" name="LoadBalanceStrategy.h" local="yes" imported="no">SAMRAI/mesh/LoadBalanceStrategy.h</includes>
    <includes id="GriddingAlgorithmConnectorWidthRequestor_8h" name="GriddingAlgorithmConnectorWidthRequestor.h" local="yes" imported="no">SAMRAI/mesh/GriddingAlgorithmConnectorWidthRequestor.h</includes>
    <includes id="MultiblockGriddingTagger_8h" name="MultiblockGriddingTagger.h" local="yes" imported="no">SAMRAI/mesh/MultiblockGriddingTagger.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="Connector_8h" name="Connector.h" local="yes" imported="no">SAMRAI/hier/Connector.h</includes>
    <includes id="MappingConnectorAlgorithm_8h" name="MappingConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/MappingConnectorAlgorithm.h</includes>
    <includes id="OverlapConnectorAlgorithm_8h" name="OverlapConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/OverlapConnectorAlgorithm.h</includes>
    <includes id="BoxLevelConnectorUtils_8h" name="BoxLevelConnectorUtils.h" local="yes" imported="no">SAMRAI/hier/BoxLevelConnectorUtils.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">SAMRAI/xfer/RefineAlgorithm.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Statistic_8h" name="Statistic.h" local="yes" imported="no">SAMRAI/tbox/Statistic.h</includes>
    <includes id="Statistician_8h" name="Statistician.h" local="yes" imported="no">SAMRAI/tbox/Statistician.h</includes>
    <class kind="class">SAMRAI::mesh::GriddingAlgorithm</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GA_RECORD_STATS</name>
      <anchorfile>GriddingAlgorithm_8h.html</anchorfile>
      <anchor>ab73a998b33d552f9100fafdbb5bdb5ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GriddingAlgorithmConnectorWidthRequestor.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>GriddingAlgorithmConnectorWidthRequestor_8C</filename>
    <includes id="GriddingAlgorithmConnectorWidthRequestor_8h" name="GriddingAlgorithmConnectorWidthRequestor.h" local="yes" imported="no">SAMRAI/mesh/GriddingAlgorithmConnectorWidthRequestor.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>GriddingAlgorithmConnectorWidthRequestor.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>GriddingAlgorithmConnectorWidthRequestor_8h</filename>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <class kind="class">SAMRAI::mesh::GriddingAlgorithmConnectorWidthRequestor</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>GriddingAlgorithmStrategy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>GriddingAlgorithmStrategy_8C</filename>
    <includes id="GriddingAlgorithmStrategy_8h" name="GriddingAlgorithmStrategy.h" local="yes" imported="no">SAMRAI/mesh/GriddingAlgorithmStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>GriddingAlgorithmStrategy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>GriddingAlgorithmStrategy_8h</filename>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="TagAndInitializeStrategy_8h" name="TagAndInitializeStrategy.h" local="yes" imported="no">SAMRAI/mesh/TagAndInitializeStrategy.h</includes>
    <includes id="Serializable_8h" name="Serializable.h" local="yes" imported="no">SAMRAI/tbox/Serializable.h</includes>
    <class kind="class">SAMRAI::mesh::GriddingAlgorithmStrategy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>LoadBalanceStrategy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>LoadBalanceStrategy_8C</filename>
    <includes id="LoadBalanceStrategy_8h" name="LoadBalanceStrategy.h" local="yes" imported="no">SAMRAI/mesh/LoadBalanceStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>LoadBalanceStrategy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>LoadBalanceStrategy_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="RankGroup_8h" name="RankGroup.h" local="yes" imported="no">SAMRAI/tbox/RankGroup.h</includes>
    <class kind="class">SAMRAI::mesh::LoadBalanceStrategy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>MultiblockGriddingTagger.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>MultiblockGriddingTagger_8C</filename>
    <includes id="MultiblockGriddingTagger_8h" name="MultiblockGriddingTagger.h" local="yes" imported="no">SAMRAI/mesh/MultiblockGriddingTagger.h</includes>
    <includes id="Connector_8h" name="Connector.h" local="yes" imported="no">SAMRAI/hier/Connector.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>MultiblockGriddingTagger.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>MultiblockGriddingTagger_8h</filename>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">SAMRAI/xfer/RefinePatchStrategy.h</includes>
    <includes id="SingularityPatchStrategy_8h" name="SingularityPatchStrategy.h" local="yes" imported="no">SAMRAI/xfer/SingularityPatchStrategy.h</includes>
    <class kind="class">SAMRAI::mesh::MultiblockGriddingTagger</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>PartitioningParams.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>PartitioningParams_8C</filename>
    <includes id="PartitioningParams_8h" name="PartitioningParams.h" local="yes" imported="no">SAMRAI/mesh/PartitioningParams.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1mesh.html</anchorfile>
      <anchor>a9ac62d0c6188a1e6103cae1e8979ffc8</anchor>
      <arglist>(std::ostream &amp;os, const PartitioningParams &amp;pp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PartitioningParams.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>PartitioningParams_8h</filename>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <class kind="class">SAMRAI::mesh::PartitioningParams</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>SpatialKey.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>SpatialKey_8C</filename>
    <includes id="SpatialKey_8h" name="SpatialKey.h" local="yes" imported="no">SAMRAI/mesh/SpatialKey.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1mesh.html</anchorfile>
      <anchor>a9c82905b5f96e24b85545ce47c3e18ff</anchor>
      <arglist>(std::ostream &amp;s, const SpatialKey &amp;spatial_key)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SpatialKey.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>SpatialKey_8h</filename>
    <class kind="class">SAMRAI::mesh::SpatialKey</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>StandardTagAndInitialize.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>StandardTagAndInitialize_8C</filename>
    <includes id="StandardTagAndInitialize_8h" name="StandardTagAndInitialize.h" local="yes" imported="no">SAMRAI/mesh/StandardTagAndInitialize.h</includes>
    <includes id="CellIntegerConstantRefine_8h" name="CellIntegerConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/CellIntegerConstantRefine.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="OverlapConnectorAlgorithm_8h" name="OverlapConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/OverlapConnectorAlgorithm.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_TIMES</name>
      <anchorfile>StandardTagAndInitialize_8C.html</anchorfile>
      <anchor>a6783bd9082ec870ad21966f4cfbabaad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>StandardTagAndInitialize_8C.html</anchorfile>
      <anchor>a273c2185312ea4c6860cba802e462120</anchor>
      <arglist>(coarsentags1d, COARSENTAGS1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StandardTagAndInitialize.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>StandardTagAndInitialize_8h</filename>
    <includes id="StandardTagAndInitStrategy_8h" name="StandardTagAndInitStrategy.h" local="yes" imported="no">SAMRAI/mesh/StandardTagAndInitStrategy.h</includes>
    <includes id="StandardTagAndInitializeConnectorWidthRequestor_8h" name="StandardTagAndInitializeConnectorWidthRequestor.h" local="yes" imported="no">SAMRAI/mesh/StandardTagAndInitializeConnectorWidthRequestor.h</includes>
    <includes id="TagAndInitializeStrategy_8h" name="TagAndInitializeStrategy.h" local="yes" imported="no">SAMRAI/mesh/TagAndInitializeStrategy.h</includes>
    <class kind="class">SAMRAI::mesh::StandardTagAndInitialize</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>StandardTagAndInitializeConnectorWidthRequestor.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>StandardTagAndInitializeConnectorWidthRequestor_8C</filename>
    <includes id="StandardTagAndInitializeConnectorWidthRequestor_8h" name="StandardTagAndInitializeConnectorWidthRequestor.h" local="yes" imported="no">SAMRAI/mesh/StandardTagAndInitializeConnectorWidthRequestor.h</includes>
    <includes id="RefineScheduleConnectorWidthRequestor_8h" name="RefineScheduleConnectorWidthRequestor.h" local="yes" imported="no">SAMRAI/xfer/RefineScheduleConnectorWidthRequestor.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GCD</name>
      <anchorfile>namespaceSAMRAI_1_1mesh.html</anchorfile>
      <anchor>ae1fa4be093def34c110b92efdd8da30d</anchor>
      <arglist>(const int a, const int b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StandardTagAndInitializeConnectorWidthRequestor.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>StandardTagAndInitializeConnectorWidthRequestor_8h</filename>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <class kind="class">SAMRAI::mesh::StandardTagAndInitializeConnectorWidthRequestor</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>StandardTagAndInitStrategy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>StandardTagAndInitStrategy_8C</filename>
    <includes id="StandardTagAndInitStrategy_8h" name="StandardTagAndInitStrategy.h" local="yes" imported="no">SAMRAI/mesh/StandardTagAndInitStrategy.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>StandardTagAndInitStrategy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>StandardTagAndInitStrategy_8h</filename>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <class kind="class">SAMRAI::mesh::StandardTagAndInitStrategy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>TagAndInitializeStrategy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>TagAndInitializeStrategy_8C</filename>
    <includes id="TagAndInitializeStrategy_8h" name="TagAndInitializeStrategy.h" local="yes" imported="no">SAMRAI/mesh/TagAndInitializeStrategy.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>TagAndInitializeStrategy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>TagAndInitializeStrategy_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="BoxLevel_8h" name="BoxLevel.h" local="yes" imported="no">SAMRAI/hier/BoxLevel.h</includes>
    <class kind="class">SAMRAI::mesh::TagAndInitializeStrategy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>TileClustering.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>TileClustering_8C</filename>
    <includes id="TileClustering_8h" name="TileClustering.h" local="yes" imported="no">SAMRAI/mesh/TileClustering.h</includes>
    <includes id="SequentialLocalIdGenerator_8h" name="SequentialLocalIdGenerator.h" local="yes" imported="no">SAMRAI/hier/SequentialLocalIdGenerator.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="OpenMPUtilities_8h" name="OpenMPUtilities.h" local="yes" imported="no">SAMRAI/tbox/OpenMPUtilities.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>TileClustering.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>TileClustering_8h</filename>
    <includes id="OverlapConnectorAlgorithm_8h" name="OverlapConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/OverlapConnectorAlgorithm.h</includes>
    <includes id="MappingConnectorAlgorithm_8h" name="MappingConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/MappingConnectorAlgorithm.h</includes>
    <includes id="BoxGeneratorStrategy_8h" name="BoxGeneratorStrategy.h" local="yes" imported="no">SAMRAI/mesh/BoxGeneratorStrategy.h</includes>
    <includes id="Connector_8h" name="Connector.h" local="yes" imported="no">SAMRAI/hier/Connector.h</includes>
    <includes id="BoxLevel_8h" name="BoxLevel.h" local="yes" imported="no">SAMRAI/hier/BoxLevel.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="OpenMPUtilities_8h" name="OpenMPUtilities.h" local="yes" imported="no">SAMRAI/tbox/OpenMPUtilities.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <class kind="class">SAMRAI::mesh::TileClustering</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>TransitLoad.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>TransitLoad_8C</filename>
    <includes id="TransitLoad_8h" name="TransitLoad.h" local="yes" imported="no">SAMRAI/mesh/TransitLoad.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>TransitLoad.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>TransitLoad_8h</filename>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxLevel_8h" name="BoxLevel.h" local="yes" imported="no">SAMRAI/hier/BoxLevel.h</includes>
    <includes id="MappingConnector_8h" name="MappingConnector.h" local="yes" imported="no">SAMRAI/hier/MappingConnector.h</includes>
    <includes id="MessageStream_8h" name="MessageStream.h" local="yes" imported="no">SAMRAI/tbox/MessageStream.h</includes>
    <class kind="class">SAMRAI::mesh::TransitLoad</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>TreeLoadBalancer.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>TreeLoadBalancer_8C</filename>
    <includes id="TreeLoadBalancer_8h" name="TreeLoadBalancer.h" local="yes" imported="no">SAMRAI/mesh/TreeLoadBalancer.h</includes>
    <includes id="BoxTransitSet_8h" name="BoxTransitSet.h" local="yes" imported="no">SAMRAI/mesh/BoxTransitSet.h</includes>
    <includes id="VoucherTransitLoad_8h" name="VoucherTransitLoad.h" local="yes" imported="no">SAMRAI/mesh/VoucherTransitLoad.h</includes>
    <includes id="BalanceUtilities_8h" name="BalanceUtilities.h" local="yes" imported="no">SAMRAI/mesh/BalanceUtilities.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellDataFactory_8h" name="CellDataFactory.h" local="yes" imported="no">SAMRAI/pdat/CellDataFactory.h</includes>
    <includes id="CenteredRankTree_8h" name="CenteredRankTree.h" local="yes" imported="no">SAMRAI/tbox/CenteredRankTree.h</includes>
    <includes id="InputManager_8h" name="InputManager.h" local="yes" imported="no">SAMRAI/tbox/InputManager.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="AsyncCommStage_8h" name="AsyncCommStage.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommStage.h</includes>
    <includes id="AsyncCommGroup_8h" name="AsyncCommGroup.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommGroup.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>TreeLoadBalancer.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>TreeLoadBalancer_8h</filename>
    <includes id="MappingConnectorAlgorithm_8h" name="MappingConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/MappingConnectorAlgorithm.h</includes>
    <includes id="LoadBalanceStrategy_8h" name="LoadBalanceStrategy.h" local="yes" imported="no">SAMRAI/mesh/LoadBalanceStrategy.h</includes>
    <includes id="PartitioningParams_8h" name="PartitioningParams.h" local="yes" imported="no">SAMRAI/mesh/PartitioningParams.h</includes>
    <includes id="TransitLoad_8h" name="TransitLoad.h" local="yes" imported="no">SAMRAI/mesh/TransitLoad.h</includes>
    <includes id="AsyncCommPeer_8h" name="AsyncCommPeer.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommPeer.h</includes>
    <includes id="AsyncCommStage_8h" name="AsyncCommStage.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommStage.h</includes>
    <includes id="CommGraphWriter_8h" name="CommGraphWriter.h" local="yes" imported="no">SAMRAI/tbox/CommGraphWriter.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="RankGroup_8h" name="RankGroup.h" local="yes" imported="no">SAMRAI/tbox/RankGroup.h</includes>
    <includes id="RankTreeStrategy_8h" name="RankTreeStrategy.h" local="yes" imported="no">SAMRAI/tbox/RankTreeStrategy.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::mesh::TreeLoadBalancer</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>VoucherTransitLoad.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>VoucherTransitLoad_8C</filename>
    <includes id="VoucherTransitLoad_8h" name="VoucherTransitLoad.h" local="yes" imported="no">SAMRAI/mesh/VoucherTransitLoad.h</includes>
    <includes id="BalanceUtilities_8h" name="BalanceUtilities.h" local="yes" imported="no">SAMRAI/mesh/BalanceUtilities.h</includes>
    <includes id="BoxTransitSet_8h" name="BoxTransitSet.h" local="yes" imported="no">SAMRAI/mesh/BoxTransitSet.h</includes>
    <includes id="InputManager_8h" name="InputManager.h" local="yes" imported="no">SAMRAI/tbox/InputManager.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>VoucherTransitLoad.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/</path>
    <filename>VoucherTransitLoad_8h</filename>
    <includes id="MappingConnector_8h" name="MappingConnector.h" local="yes" imported="no">SAMRAI/hier/MappingConnector.h</includes>
    <includes id="SequentialLocalIdGenerator_8h" name="SequentialLocalIdGenerator.h" local="yes" imported="no">SAMRAI/hier/SequentialLocalIdGenerator.h</includes>
    <includes id="PartitioningParams_8h" name="PartitioningParams.h" local="yes" imported="no">SAMRAI/mesh/PartitioningParams.h</includes>
    <includes id="TransitLoad_8h" name="TransitLoad.h" local="yes" imported="no">SAMRAI/mesh/TransitLoad.h</includes>
    <includes id="BoxTransitSet_8h" name="BoxTransitSet.h" local="yes" imported="no">SAMRAI/mesh/BoxTransitSet.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <class kind="class">SAMRAI::mesh::VoucherTransitLoad</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayData.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>ArrayData_8C</filename>
    <includes id="MessageStream_8h" name="MessageStream.h" local="yes" imported="no">SAMRAI/tbox/MessageStream.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="ArrayDataOperationUtilities_8h" name="ArrayDataOperationUtilities.h" local="yes" imported="no">SAMRAI/pdat/ArrayDataOperationUtilities.h</includes>
    <includes id="CopyOperation_8h" name="CopyOperation.h" local="yes" imported="no">SAMRAI/pdat/CopyOperation.h</includes>
    <includes id="SumOperation_8h" name="SumOperation.h" local="yes" imported="no">SAMRAI/pdat/SumOperation.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayData.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>ArrayData_8h</filename>
    <includes id="ArrayDataIterator_8h" name="ArrayDataIterator.h" local="yes" imported="no">SAMRAI/pdat/ArrayDataIterator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="MemoryUtilities_8h" name="MemoryUtilities.h" local="yes" imported="no">SAMRAI/tbox/MemoryUtilities.h</includes>
    <includes id="MessageStream_8h" name="MessageStream.h" local="yes" imported="no">SAMRAI/tbox/MessageStream.h</includes>
    <includes id="ArrayData_8C" name="ArrayData.C" local="yes" imported="no">SAMRAI/pdat/ArrayData.C</includes>
    <class kind="class">SAMRAI::pdat::ArrayData</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataAccess.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>ArrayDataAccess_8C</filename>
    <includes id="ArrayDataAccess_8h" name="ArrayDataAccess.h" local="yes" imported="no">SAMRAI/pdat/ArrayDataAccess.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>MDA_Access&lt; double, DIM, MDA_OrderColMajor&lt; DIM &gt; &gt;</type>
      <name>access</name>
      <anchorfile>namespaceSAMRAI_1_1pdat.html</anchorfile>
      <anchor>a4a10592b19e2f94d5f96161949d7c9c0</anchor>
      <arglist>(ArrayData&lt; double &gt; &amp;array_data, int depth)</arglist>
    </member>
    <member kind="function">
      <type>const MDA_AccessConst&lt; double, DIM, MDA_OrderColMajor&lt; DIM &gt; &gt;</type>
      <name>access</name>
      <anchorfile>namespaceSAMRAI_1_1pdat.html</anchorfile>
      <anchor>a7ed8404e816c1c2cf404d772a870af9b</anchor>
      <arglist>(const ArrayData&lt; double &gt; &amp;array_data, int depth)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ArrayDataAccess.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>ArrayDataAccess_8h</filename>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="MDA__Access_8h" name="MDA_Access.h" local="yes" imported="no">SAMRAI/pdat/MDA_Access.h</includes>
    <includes id="ArrayDataAccess_8C" name="ArrayDataAccess.C" local="yes" imported="no">SAMRAI/pdat/ArrayDataAccess.C</includes>
    <class kind="class">SAMRAI::pdat::ArrayDataAccess</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataIterator.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>ArrayDataIterator_8C</filename>
    <includes id="ArrayDataIterator_8h" name="ArrayDataIterator.h" local="yes" imported="no">SAMRAI/pdat/ArrayDataIterator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataIterator.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>ArrayDataIterator_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <class kind="class">SAMRAI::pdat::ArrayDataIterator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataOperationUtilities.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>ArrayDataOperationUtilities_8C</filename>
    <includes id="ArrayDataOperationUtilities_8h" name="ArrayDataOperationUtilities.h" local="yes" imported="no">SAMRAI/pdat/ArrayDataOperationUtilities.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataOperationUtilities.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>ArrayDataOperationUtilities_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="ArrayDataOperationUtilities_8C" name="ArrayDataOperationUtilities.C" local="yes" imported="no">SAMRAI/pdat/ArrayDataOperationUtilities.C</includes>
    <class kind="class">SAMRAI::pdat::ArrayDataOperationUtilities</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellComplexConstantRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellComplexConstantRefine_8C</filename>
    <includes id="CellComplexConstantRefine_8h" name="CellComplexConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/CellComplexConstantRefine.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CellComplexConstantRefine_8C.html</anchorfile>
      <anchor>a47ea3229605a0dca54c10a4c005a6da1</anchor>
      <arglist>(conrefcellcplx1d, CONREFCELLCPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellComplexConstantRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellComplexConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <class kind="class">SAMRAI::pdat::CellComplexConstantRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellComplexLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellComplexLinearTimeInterpolateOp_8C</filename>
    <includes id="CellComplexLinearTimeInterpolateOp_8h" name="CellComplexLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/CellComplexLinearTimeInterpolateOp.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CellComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a34bc457a80ca7cfbf9ea3a85ab87fe62</anchor>
      <arglist>(lintimeintcellcmplx1d, LINTIMEINTCELLCMPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellComplexLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellComplexLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::CellComplexLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellData.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellData_8C</filename>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="CellGeometry_8h" name="CellGeometry.h" local="yes" imported="no">SAMRAI/pdat/CellGeometry.h</includes>
    <includes id="CellOverlap_8h" name="CellOverlap.h" local="yes" imported="no">SAMRAI/pdat/CellOverlap.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellData.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellData_8h</filename>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="CellIndex_8h" name="CellIndex.h" local="yes" imported="no">SAMRAI/pdat/CellIndex.h</includes>
    <includes id="CellIterator_8h" name="CellIterator.h" local="yes" imported="no">SAMRAI/pdat/CellIterator.h</includes>
    <includes id="CellOverlap_8h" name="CellOverlap.h" local="yes" imported="no">SAMRAI/pdat/CellOverlap.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="CellData_8C" name="CellData.C" local="yes" imported="no">SAMRAI/pdat/CellData.C</includes>
    <class kind="class">SAMRAI::pdat::CellData</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellDataFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellDataFactory_8C</filename>
    <includes id="CellDataFactory_8h" name="CellDataFactory.h" local="yes" imported="no">SAMRAI/pdat/CellDataFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellGeometry_8h" name="CellGeometry.h" local="yes" imported="no">SAMRAI/pdat/CellGeometry.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellDataFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="CellDataFactory_8C" name="CellDataFactory.C" local="yes" imported="no">SAMRAI/pdat/CellDataFactory.C</includes>
    <class kind="class">SAMRAI::pdat::CellDataFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellDoubleConstantRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellDoubleConstantRefine_8C</filename>
    <includes id="CellDoubleConstantRefine_8h" name="CellDoubleConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/CellDoubleConstantRefine.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CellDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a7d57bc411add0fddc7500bbb1f7f7484</anchor>
      <arglist>(conrefcelldoub1d, CONREFCELLDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellDoubleConstantRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellDoubleConstantRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::pdat::CellDoubleConstantRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellDoubleLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellDoubleLinearTimeInterpolateOp_8C</filename>
    <includes id="CellDoubleLinearTimeInterpolateOp_8h" name="CellDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/CellDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CellDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>abc46bb2c84fd99b24c8f6260f997fadd</anchor>
      <arglist>(lintimeintcelldoub1d, LINTIMEINTCELLDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellDoubleLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellDoubleLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::CellDoubleLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellFloatConstantRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellFloatConstantRefine_8C</filename>
    <includes id="CellFloatConstantRefine_8h" name="CellFloatConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/CellFloatConstantRefine.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CellFloatConstantRefine_8C.html</anchorfile>
      <anchor>acdebdd7d6953872b2729624a0fa17f2e</anchor>
      <arglist>(conrefcellflot1d, CONREFCELLFLOT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellFloatConstantRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellFloatConstantRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::pdat::CellFloatConstantRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellFloatLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellFloatLinearTimeInterpolateOp_8C</filename>
    <includes id="CellFloatLinearTimeInterpolateOp_8h" name="CellFloatLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/CellFloatLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CellFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2ebebb42239fe86f66d11ac9582a8fc8</anchor>
      <arglist>(lintimeintcellfloat1d, LINTIMEINTCELLFLOAT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellFloatLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellFloatLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::CellFloatLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellGeometry.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellGeometry_8C</filename>
    <includes id="CellGeometry_8h" name="CellGeometry.h" local="yes" imported="no">SAMRAI/pdat/CellGeometry.h</includes>
    <includes id="CellIterator_8h" name="CellIterator.h" local="yes" imported="no">SAMRAI/pdat/CellIterator.h</includes>
    <includes id="CellOverlap_8h" name="CellOverlap.h" local="yes" imported="no">SAMRAI/pdat/CellOverlap.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellGeometry.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellGeometry_8h</filename>
    <includes id="CellIndex_8h" name="CellIndex.h" local="yes" imported="no">SAMRAI/pdat/CellIndex.h</includes>
    <includes id="CellOverlap_8h" name="CellOverlap.h" local="yes" imported="no">SAMRAI/pdat/CellOverlap.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <class kind="class">SAMRAI::pdat::CellGeometry</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellIndex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellIndex_8C</filename>
    <includes id="CellIndex_8h" name="CellIndex.h" local="yes" imported="no">SAMRAI/pdat/CellIndex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellIndex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellIndex_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::pdat::CellIndex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellIntegerConstantRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellIntegerConstantRefine_8C</filename>
    <includes id="CellIntegerConstantRefine_8h" name="CellIntegerConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/CellIntegerConstantRefine.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CellIntegerConstantRefine_8C.html</anchorfile>
      <anchor>ab132d475210d9c1591622e3c0a4f7bbd</anchor>
      <arglist>(conrefcellintg1d, CONREFCELLINTG1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellIntegerConstantRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellIntegerConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <class kind="class">SAMRAI::pdat::CellIntegerConstantRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellIterator.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellIterator_8C</filename>
    <includes id="CellIterator_8h" name="CellIterator.h" local="yes" imported="no">SAMRAI/pdat/CellIterator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellIterator.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellIterator_8h</filename>
    <includes id="CellGeometry_8h" name="CellGeometry.h" local="yes" imported="no">SAMRAI/pdat/CellGeometry.h</includes>
    <includes id="CellIndex_8h" name="CellIndex.h" local="yes" imported="no">SAMRAI/pdat/CellIndex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <class kind="class">SAMRAI::pdat::CellIterator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellOverlap.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellOverlap_8C</filename>
    <includes id="CellOverlap_8h" name="CellOverlap.h" local="yes" imported="no">SAMRAI/pdat/CellOverlap.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellOverlap.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellOverlap_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <class kind="class">SAMRAI::pdat::CellOverlap</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellVariable.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellVariable_8C</filename>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="CellDataFactory_8h" name="CellDataFactory.h" local="yes" imported="no">SAMRAI/pdat/CellDataFactory.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellVariable.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CellVariable_8h</filename>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="CellVariable_8C" name="CellVariable.C" local="yes" imported="no">SAMRAI/pdat/CellVariable.C</includes>
    <class kind="class">SAMRAI::pdat::CellVariable</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CopyOperation.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CopyOperation_8C</filename>
    <includes id="CopyOperation_8h" name="CopyOperation.h" local="yes" imported="no">SAMRAI/pdat/CopyOperation.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CopyOperation.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>CopyOperation_8h</filename>
    <includes id="CopyOperation_8C" name="CopyOperation.C" local="yes" imported="no">SAMRAI/pdat/CopyOperation.C</includes>
    <class kind="class">SAMRAI::pdat::CopyOperation</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>DoubleAttributeId.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>DoubleAttributeId_8C</filename>
    <includes id="DoubleAttributeId_8h" name="DoubleAttributeId.h" local="yes" imported="no">SAMRAI/pdat/DoubleAttributeId.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>DoubleAttributeId.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>DoubleAttributeId_8h</filename>
    <class kind="class">SAMRAI::pdat::DoubleAttributeId</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual_array.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>pdat_2dox_2manual__array_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual_array.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/dox/</path>
    <filename>math_2dox_2manual__array_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>manual_boxgeometry.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>manual__boxgeometry_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual_cell.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>pdat_2dox_2manual__cell_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual_cell.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/dox/</path>
    <filename>math_2dox_2manual__cell_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>manual_edge.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>manual__edge_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual_face.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>manual__face_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual_fortran.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>manual__fortran_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual_index.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>manual__index_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual_multiblock.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>pdat_2dox_2manual__multiblock_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual_multiblock.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/dox/</path>
    <filename>mesh_2dox_2manual__multiblock_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>manual_node.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>manual__node_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual_operators_constant_cell.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>manual__operators__constant__cell_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual_operators_constant_outernode.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>manual__operators__constant__outernode_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual_operators_time_interpolate.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>manual__operators__time__interpolate_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual_operators_time_interpolate_cell.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>manual__operators__time__interpolate__cell_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual_operators_time_interpolate_fortran.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>manual__operators__time__interpolate__fortran_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual_outeredge.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>manual__outeredge_8dox</filename>
    <namespace>SAMRAI</namespace>
  </compound>
  <compound kind="file">
    <name>manual_outerface.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>manual__outerface_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual_outernode.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>manual__outernode_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual_outerside.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>manual__outerside_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual_side.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>manual__side_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeComplexConstantRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeComplexConstantRefine_8C</filename>
    <includes id="EdgeComplexConstantRefine_8h" name="EdgeComplexConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/EdgeComplexConstantRefine.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">SAMRAI/pdat/EdgeVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>EdgeComplexConstantRefine_8C.html</anchorfile>
      <anchor>a5398e1a68aff03fb1b8eda2319b9688e</anchor>
      <arglist>(conrefedgecplx1d, CONREFEDGECPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeComplexConstantRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeComplexConstantRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::pdat::EdgeComplexConstantRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeComplexLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeComplexLinearTimeInterpolateOp_8C</filename>
    <includes id="EdgeComplexLinearTimeInterpolateOp_8h" name="EdgeComplexLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/EdgeComplexLinearTimeInterpolateOp.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">SAMRAI/pdat/EdgeVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>EdgeComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a50f98c35641d8af958b85e6b922471d0</anchor>
      <arglist>(lintimeintedgecmplx1d, LINTIMEINTEDGECMPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeComplexLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeComplexLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::EdgeComplexLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeData.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeData_8C</filename>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">SAMRAI/pdat/EdgeGeometry.h</includes>
    <includes id="EdgeOverlap_8h" name="EdgeOverlap.h" local="yes" imported="no">SAMRAI/pdat/EdgeOverlap.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeData.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeData_8h</filename>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="EdgeIndex_8h" name="EdgeIndex.h" local="yes" imported="no">SAMRAI/pdat/EdgeIndex.h</includes>
    <includes id="EdgeIterator_8h" name="EdgeIterator.h" local="yes" imported="no">SAMRAI/pdat/EdgeIterator.h</includes>
    <includes id="EdgeOverlap_8h" name="EdgeOverlap.h" local="yes" imported="no">SAMRAI/pdat/EdgeOverlap.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="EdgeData_8C" name="EdgeData.C" local="yes" imported="no">SAMRAI/pdat/EdgeData.C</includes>
    <class kind="class">SAMRAI::pdat::EdgeData</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeDataFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeDataFactory_8C</filename>
    <includes id="EdgeDataFactory_8h" name="EdgeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/EdgeDataFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">SAMRAI/pdat/EdgeGeometry.h</includes>
    <includes id="OuteredgeDataFactory_8h" name="OuteredgeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/OuteredgeDataFactory.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="MemoryUtilities_8h" name="MemoryUtilities.h" local="yes" imported="no">SAMRAI/tbox/MemoryUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeDataFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="EdgeDataFactory_8C" name="EdgeDataFactory.C" local="yes" imported="no">SAMRAI/pdat/EdgeDataFactory.C</includes>
    <class kind="class">SAMRAI::pdat::EdgeDataFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeDoubleConstantRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeDoubleConstantRefine_8C</filename>
    <includes id="EdgeDoubleConstantRefine_8h" name="EdgeDoubleConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/EdgeDoubleConstantRefine.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">SAMRAI/pdat/EdgeVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>EdgeDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a75306f95de5f660de9bf409e2deb31ab</anchor>
      <arglist>(conrefedgedoub1d, CONREFEDGEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeDoubleConstantRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeDoubleConstantRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::pdat::EdgeDoubleConstantRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeDoubleLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeDoubleLinearTimeInterpolateOp_8C</filename>
    <includes id="EdgeDoubleLinearTimeInterpolateOp_8h" name="EdgeDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/EdgeDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">SAMRAI/pdat/EdgeVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>EdgeDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>af56acb8f8e37edabcdcc4ec02d5134b5</anchor>
      <arglist>(lintimeintedgedoub1d, LINTIMEINTEDGEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeDoubleLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeDoubleLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::EdgeDoubleLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeFloatConstantRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeFloatConstantRefine_8C</filename>
    <includes id="EdgeFloatConstantRefine_8h" name="EdgeFloatConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/EdgeFloatConstantRefine.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">SAMRAI/pdat/EdgeVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>EdgeFloatConstantRefine_8C.html</anchorfile>
      <anchor>af374b1c8371e59733cb8be3e78301d61</anchor>
      <arglist>(conrefedgeflot1d, CONREFEDGEFLOT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeFloatConstantRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeFloatConstantRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::pdat::EdgeFloatConstantRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeFloatLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeFloatLinearTimeInterpolateOp_8C</filename>
    <includes id="EdgeFloatLinearTimeInterpolateOp_8h" name="EdgeFloatLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/EdgeFloatLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">SAMRAI/pdat/EdgeVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>EdgeFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>ae24a2b29e0125bded6dea13de5475f94</anchor>
      <arglist>(lintimeintedgefloat1d, LINTIMEINTEDGEFLOAT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeFloatLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeFloatLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::EdgeFloatLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeGeometry.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeGeometry_8C</filename>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">SAMRAI/pdat/EdgeGeometry.h</includes>
    <includes id="EdgeIterator_8h" name="EdgeIterator.h" local="yes" imported="no">SAMRAI/pdat/EdgeIterator.h</includes>
    <includes id="EdgeOverlap_8h" name="EdgeOverlap.h" local="yes" imported="no">SAMRAI/pdat/EdgeOverlap.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeGeometry.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeGeometry_8h</filename>
    <includes id="EdgeIndex_8h" name="EdgeIndex.h" local="yes" imported="no">SAMRAI/pdat/EdgeIndex.h</includes>
    <includes id="EdgeOverlap_8h" name="EdgeOverlap.h" local="yes" imported="no">SAMRAI/pdat/EdgeOverlap.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <class kind="class">SAMRAI::pdat::EdgeGeometry</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeIndex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeIndex_8C</filename>
    <includes id="EdgeIndex_8h" name="EdgeIndex.h" local="yes" imported="no">SAMRAI/pdat/EdgeIndex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeIndex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeIndex_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::pdat::EdgeIndex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeIntegerConstantRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeIntegerConstantRefine_8C</filename>
    <includes id="EdgeIntegerConstantRefine_8h" name="EdgeIntegerConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/EdgeIntegerConstantRefine.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">SAMRAI/pdat/EdgeVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>EdgeIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a2f6f3ad056cf5c96f8d3bae1709b919a</anchor>
      <arglist>(conrefedgeintg1d, CONREFEDGEINTG1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeIntegerConstantRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeIntegerConstantRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::pdat::EdgeIntegerConstantRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeIterator.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeIterator_8C</filename>
    <includes id="EdgeIterator_8h" name="EdgeIterator.h" local="yes" imported="no">SAMRAI/pdat/EdgeIterator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeIterator.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeIterator_8h</filename>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">SAMRAI/pdat/EdgeGeometry.h</includes>
    <includes id="EdgeIndex_8h" name="EdgeIndex.h" local="yes" imported="no">SAMRAI/pdat/EdgeIndex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <class kind="class">SAMRAI::pdat::EdgeIterator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeOverlap.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeOverlap_8C</filename>
    <includes id="EdgeOverlap_8h" name="EdgeOverlap.h" local="yes" imported="no">SAMRAI/pdat/EdgeOverlap.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">SAMRAI/pdat/EdgeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeOverlap.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeOverlap_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <class kind="class">SAMRAI::pdat::EdgeOverlap</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeVariable.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeVariable_8C</filename>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">SAMRAI/pdat/EdgeVariable.h</includes>
    <includes id="EdgeDataFactory_8h" name="EdgeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/EdgeDataFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeVariable.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>EdgeVariable_8h</filename>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="EdgeVariable_8C" name="EdgeVariable.C" local="yes" imported="no">SAMRAI/pdat/EdgeVariable.C</includes>
    <class kind="class">SAMRAI::pdat::EdgeVariable</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceComplexConstantRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceComplexConstantRefine_8C</filename>
    <includes id="FaceComplexConstantRefine_8h" name="FaceComplexConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/FaceComplexConstantRefine.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">SAMRAI/pdat/FaceVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>FaceComplexConstantRefine_8C.html</anchorfile>
      <anchor>a24f752b919a29237f24f6707565e5624</anchor>
      <arglist>(conreffacecplx1d, CONREFFACECPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FaceComplexConstantRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceComplexConstantRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::pdat::FaceComplexConstantRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceComplexLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceComplexLinearTimeInterpolateOp_8C</filename>
    <includes id="FaceComplexLinearTimeInterpolateOp_8h" name="FaceComplexLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/FaceComplexLinearTimeInterpolateOp.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">SAMRAI/pdat/FaceVariable.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>FaceComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>ab42d734286587425f774773917610fb9</anchor>
      <arglist>(lintimeintfacecmplx1d, LINTIMEINTFACECMPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FaceComplexLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceComplexLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::FaceComplexLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceData.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceData_8C</filename>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">SAMRAI/pdat/FaceGeometry.h</includes>
    <includes id="FaceOverlap_8h" name="FaceOverlap.h" local="yes" imported="no">SAMRAI/pdat/FaceOverlap.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceData.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceData_8h</filename>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="FaceIndex_8h" name="FaceIndex.h" local="yes" imported="no">SAMRAI/pdat/FaceIndex.h</includes>
    <includes id="FaceIterator_8h" name="FaceIterator.h" local="yes" imported="no">SAMRAI/pdat/FaceIterator.h</includes>
    <includes id="FaceOverlap_8h" name="FaceOverlap.h" local="yes" imported="no">SAMRAI/pdat/FaceOverlap.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="FaceData_8C" name="FaceData.C" local="yes" imported="no">SAMRAI/pdat/FaceData.C</includes>
    <class kind="class">SAMRAI::pdat::FaceData</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceDataFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceDataFactory_8C</filename>
    <includes id="FaceDataFactory_8h" name="FaceDataFactory.h" local="yes" imported="no">SAMRAI/pdat/FaceDataFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">SAMRAI/pdat/FaceGeometry.h</includes>
    <includes id="OuterfaceDataFactory_8h" name="OuterfaceDataFactory.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceDataFactory.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceDataFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="FaceDataFactory_8C" name="FaceDataFactory.C" local="yes" imported="no">SAMRAI/pdat/FaceDataFactory.C</includes>
    <class kind="class">SAMRAI::pdat::FaceDataFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceDoubleConstantRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceDoubleConstantRefine_8C</filename>
    <includes id="FaceDoubleConstantRefine_8h" name="FaceDoubleConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/FaceDoubleConstantRefine.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">SAMRAI/pdat/FaceVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>FaceDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a3692f6ea0a0732841379c6b4caf5d8ea</anchor>
      <arglist>(conreffacedoub1d, CONREFFACEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FaceDoubleConstantRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceDoubleConstantRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::pdat::FaceDoubleConstantRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceDoubleLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceDoubleLinearTimeInterpolateOp_8C</filename>
    <includes id="FaceDoubleLinearTimeInterpolateOp_8h" name="FaceDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/FaceDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">SAMRAI/pdat/FaceVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>FaceDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a94351ac1ffdd21619cb3b3e00cf9a3d5</anchor>
      <arglist>(lintimeintfacedoub1d, LINTIMEINTFACEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FaceDoubleLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceDoubleLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::FaceDoubleLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceFloatConstantRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceFloatConstantRefine_8C</filename>
    <includes id="FaceFloatConstantRefine_8h" name="FaceFloatConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/FaceFloatConstantRefine.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">SAMRAI/pdat/FaceVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>FaceFloatConstantRefine_8C.html</anchorfile>
      <anchor>addb8db83c7ef6e7b2340de3f83cce7ea</anchor>
      <arglist>(conreffaceflot1d, CONREFFACEFLOT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FaceFloatConstantRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceFloatConstantRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::pdat::FaceFloatConstantRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceFloatLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceFloatLinearTimeInterpolateOp_8C</filename>
    <includes id="FaceFloatLinearTimeInterpolateOp_8h" name="FaceFloatLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/FaceFloatLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">SAMRAI/pdat/FaceVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>FaceFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a5eb1f700c009915a7ee9e406a3487833</anchor>
      <arglist>(lintimeintfacefloat1d, LINTIMEINTFACEFLOAT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FaceFloatLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceFloatLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::FaceFloatLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceGeometry.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceGeometry_8C</filename>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">SAMRAI/pdat/FaceGeometry.h</includes>
    <includes id="FaceIterator_8h" name="FaceIterator.h" local="yes" imported="no">SAMRAI/pdat/FaceIterator.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceGeometry.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceGeometry_8h</filename>
    <includes id="FaceIndex_8h" name="FaceIndex.h" local="yes" imported="no">SAMRAI/pdat/FaceIndex.h</includes>
    <includes id="FaceOverlap_8h" name="FaceOverlap.h" local="yes" imported="no">SAMRAI/pdat/FaceOverlap.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <class kind="class">SAMRAI::pdat::FaceGeometry</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceIndex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceIndex_8C</filename>
    <includes id="FaceIndex_8h" name="FaceIndex.h" local="yes" imported="no">SAMRAI/pdat/FaceIndex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceIndex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceIndex_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::pdat::FaceIndex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceIntegerConstantRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceIntegerConstantRefine_8C</filename>
    <includes id="FaceIntegerConstantRefine_8h" name="FaceIntegerConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/FaceIntegerConstantRefine.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">SAMRAI/pdat/FaceVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>FaceIntegerConstantRefine_8C.html</anchorfile>
      <anchor>ad3cd431156bb0a2e7f6c1b2585a617c7</anchor>
      <arglist>(conreffaceintg1d, CONREFFACEINTG1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FaceIntegerConstantRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceIntegerConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <class kind="class">SAMRAI::pdat::FaceIntegerConstantRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceIterator.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceIterator_8C</filename>
    <includes id="FaceIterator_8h" name="FaceIterator.h" local="yes" imported="no">SAMRAI/pdat/FaceIterator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceIterator.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceIterator_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">SAMRAI/pdat/FaceGeometry.h</includes>
    <includes id="FaceIndex_8h" name="FaceIndex.h" local="yes" imported="no">SAMRAI/pdat/FaceIndex.h</includes>
    <class kind="class">SAMRAI::pdat::FaceIterator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceOverlap.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceOverlap_8C</filename>
    <includes id="FaceOverlap_8h" name="FaceOverlap.h" local="yes" imported="no">SAMRAI/pdat/FaceOverlap.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">SAMRAI/pdat/FaceGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceOverlap.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceOverlap_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <class kind="class">SAMRAI::pdat::FaceOverlap</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceVariable.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceVariable_8C</filename>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">SAMRAI/pdat/FaceVariable.h</includes>
    <includes id="FaceDataFactory_8h" name="FaceDataFactory.h" local="yes" imported="no">SAMRAI/pdat/FaceDataFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceVariable.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FaceVariable_8h</filename>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="FaceVariable_8C" name="FaceVariable.C" local="yes" imported="no">SAMRAI/pdat/FaceVariable.C</includes>
    <class kind="class">SAMRAI::pdat::FaceVariable</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FirstLayerCellNoCornersVariableFillPattern.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FirstLayerCellNoCornersVariableFillPattern_8C</filename>
    <includes id="FirstLayerCellNoCornersVariableFillPattern_8h" name="FirstLayerCellNoCornersVariableFillPattern.h" local="yes" imported="no">SAMRAI/pdat/FirstLayerCellNoCornersVariableFillPattern.h</includes>
    <includes id="CellGeometry_8h" name="CellGeometry.h" local="yes" imported="no">SAMRAI/pdat/CellGeometry.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FirstLayerCellNoCornersVariableFillPattern.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FirstLayerCellNoCornersVariableFillPattern_8h</filename>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="VariableFillPattern_8h" name="VariableFillPattern.h" local="yes" imported="no">SAMRAI/xfer/VariableFillPattern.h</includes>
    <class kind="class">SAMRAI::pdat::FirstLayerCellNoCornersVariableFillPattern</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FirstLayerCellVariableFillPattern.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FirstLayerCellVariableFillPattern_8C</filename>
    <includes id="FirstLayerCellVariableFillPattern_8h" name="FirstLayerCellVariableFillPattern.h" local="yes" imported="no">SAMRAI/pdat/FirstLayerCellVariableFillPattern.h</includes>
    <includes id="CellGeometry_8h" name="CellGeometry.h" local="yes" imported="no">SAMRAI/pdat/CellGeometry.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FirstLayerCellVariableFillPattern.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FirstLayerCellVariableFillPattern_8h</filename>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="VariableFillPattern_8h" name="VariableFillPattern.h" local="yes" imported="no">SAMRAI/xfer/VariableFillPattern.h</includes>
    <class kind="class">SAMRAI::pdat::FirstLayerCellVariableFillPattern</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FirstLayerEdgeVariableFillPattern.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FirstLayerEdgeVariableFillPattern_8C</filename>
    <includes id="FirstLayerEdgeVariableFillPattern_8h" name="FirstLayerEdgeVariableFillPattern.h" local="yes" imported="no">SAMRAI/pdat/FirstLayerEdgeVariableFillPattern.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">SAMRAI/pdat/EdgeGeometry.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FirstLayerEdgeVariableFillPattern.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FirstLayerEdgeVariableFillPattern_8h</filename>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="VariableFillPattern_8h" name="VariableFillPattern.h" local="yes" imported="no">SAMRAI/xfer/VariableFillPattern.h</includes>
    <class kind="class">SAMRAI::pdat::FirstLayerEdgeVariableFillPattern</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FirstLayerNodeVariableFillPattern.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FirstLayerNodeVariableFillPattern_8C</filename>
    <includes id="FirstLayerNodeVariableFillPattern_8h" name="FirstLayerNodeVariableFillPattern.h" local="yes" imported="no">SAMRAI/pdat/FirstLayerNodeVariableFillPattern.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/NodeGeometry.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FirstLayerNodeVariableFillPattern.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FirstLayerNodeVariableFillPattern_8h</filename>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="VariableFillPattern_8h" name="VariableFillPattern.h" local="yes" imported="no">SAMRAI/xfer/VariableFillPattern.h</includes>
    <class kind="class">SAMRAI::pdat::FirstLayerNodeVariableFillPattern</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FirstLayerSideVariableFillPattern.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FirstLayerSideVariableFillPattern_8C</filename>
    <includes id="FirstLayerSideVariableFillPattern_8h" name="FirstLayerSideVariableFillPattern.h" local="yes" imported="no">SAMRAI/pdat/FirstLayerSideVariableFillPattern.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SAMRAI/pdat/SideGeometry.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FirstLayerSideVariableFillPattern.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>FirstLayerSideVariableFillPattern_8h</filename>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="VariableFillPattern_8h" name="VariableFillPattern.h" local="yes" imported="no">SAMRAI/xfer/VariableFillPattern.h</includes>
    <class kind="class">SAMRAI::pdat::FirstLayerSideVariableFillPattern</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>IndexData.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>IndexData_8C</filename>
    <includes id="IndexData_8h" name="IndexData.h" local="yes" imported="no">SAMRAI/pdat/IndexData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="IOStream_8h" name="IOStream.h" local="yes" imported="no">SAMRAI/tbox/IOStream.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>IndexData.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>IndexData_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="IndexData_8C" name="IndexData.C" local="yes" imported="no">SAMRAI/pdat/IndexData.C</includes>
    <class kind="class">SAMRAI::pdat::IndexData</class>
    <class kind="class">SAMRAI::pdat::IndexDataNode</class>
    <class kind="class">SAMRAI::pdat::IndexIterator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>IndexDataFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>IndexDataFactory_8C</filename>
    <includes id="IndexDataFactory_8h" name="IndexDataFactory.h" local="yes" imported="no">SAMRAI/pdat/IndexDataFactory.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IndexData_8h" name="IndexData.h" local="yes" imported="no">SAMRAI/pdat/IndexData.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MemoryUtilities_8h" name="MemoryUtilities.h" local="yes" imported="no">SAMRAI/tbox/MemoryUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>IndexDataFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>IndexDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="IndexDataFactory_8C" name="IndexDataFactory.C" local="yes" imported="no">SAMRAI/pdat/IndexDataFactory.C</includes>
    <class kind="class">SAMRAI::pdat::IndexDataFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>IndexVariable.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>IndexVariable_8C</filename>
    <includes id="IndexVariable_8h" name="IndexVariable.h" local="yes" imported="no">SAMRAI/pdat/IndexVariable.h</includes>
    <includes id="IndexDataFactory_8h" name="IndexDataFactory.h" local="yes" imported="no">SAMRAI/pdat/IndexDataFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>IndexVariable.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>IndexVariable_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="IndexVariable_8C" name="IndexVariable.C" local="yes" imported="no">SAMRAI/pdat/IndexVariable.C</includes>
    <class kind="class">SAMRAI::pdat::IndexVariable</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>IntegerAttributeId.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>IntegerAttributeId_8C</filename>
    <includes id="IntegerAttributeId_8h" name="IntegerAttributeId.h" local="yes" imported="no">SAMRAI/pdat/IntegerAttributeId.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>IntegerAttributeId.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>IntegerAttributeId_8h</filename>
    <class kind="class">SAMRAI::pdat::IntegerAttributeId</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>MDA_Access.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>MDA__Access_8h</filename>
    <class kind="class">MDA_IndexRange</class>
    <class kind="class">MDA_OrderRowMajor</class>
    <class kind="class">MDA_OrderColMajor</class>
    <class kind="class">MDA_Access</class>
    <class kind="class">MDA_AccessConst</class>
  </compound>
  <compound kind="file">
    <name>NodeComplexInjection.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeComplexInjection_8C</filename>
    <includes id="NodeComplexInjection_8h" name="NodeComplexInjection.h" local="yes" imported="no">SAMRAI/pdat/NodeComplexInjection.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">SAMRAI/pdat/NodeVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>NodeComplexInjection_8C.html</anchorfile>
      <anchor>a7db1dcb23527614de3b7a00562d09d22</anchor>
      <arglist>(conavgnodecplx1d, CONAVGNODECPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeComplexInjection.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeComplexInjection_8h</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::pdat::NodeComplexInjection</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeComplexLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeComplexLinearTimeInterpolateOp_8C</filename>
    <includes id="NodeComplexLinearTimeInterpolateOp_8h" name="NodeComplexLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/NodeComplexLinearTimeInterpolateOp.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">SAMRAI/pdat/NodeVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>NodeComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>ad17eb9f004a4364942ee3e83f77b975a</anchor>
      <arglist>(lintimeintnodecmplx1d, LINTIMEINTNODECMPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeComplexLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeComplexLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::NodeComplexLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeData.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeData_8C</filename>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/NodeGeometry.h</includes>
    <includes id="NodeOverlap_8h" name="NodeOverlap.h" local="yes" imported="no">SAMRAI/pdat/NodeOverlap.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeData.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeData_8h</filename>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="NodeIndex_8h" name="NodeIndex.h" local="yes" imported="no">SAMRAI/pdat/NodeIndex.h</includes>
    <includes id="NodeIterator_8h" name="NodeIterator.h" local="yes" imported="no">SAMRAI/pdat/NodeIterator.h</includes>
    <includes id="NodeOverlap_8h" name="NodeOverlap.h" local="yes" imported="no">SAMRAI/pdat/NodeOverlap.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="NodeData_8C" name="NodeData.C" local="yes" imported="no">SAMRAI/pdat/NodeData.C</includes>
    <class kind="class">SAMRAI::pdat::NodeData</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeDataFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeDataFactory_8C</filename>
    <includes id="NodeDataFactory_8h" name="NodeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/NodeDataFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/NodeGeometry.h</includes>
    <includes id="OuternodeDataFactory_8h" name="OuternodeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/OuternodeDataFactory.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeDataFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="NodeDataFactory_8C" name="NodeDataFactory.C" local="yes" imported="no">SAMRAI/pdat/NodeDataFactory.C</includes>
    <class kind="class">SAMRAI::pdat::NodeDataFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeDoubleInjection.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeDoubleInjection_8C</filename>
    <includes id="NodeDoubleInjection_8h" name="NodeDoubleInjection.h" local="yes" imported="no">SAMRAI/pdat/NodeDoubleInjection.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">SAMRAI/pdat/NodeVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>NodeDoubleInjection_8C.html</anchorfile>
      <anchor>a78a4529cbd7935c9fd85836eb2df1c89</anchor>
      <arglist>(conavgnodedoub1d, CONAVGNODEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeDoubleInjection.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeDoubleInjection_8h</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::pdat::NodeDoubleInjection</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeDoubleLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeDoubleLinearTimeInterpolateOp_8C</filename>
    <includes id="NodeDoubleLinearTimeInterpolateOp_8h" name="NodeDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/NodeDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">SAMRAI/pdat/NodeVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>NodeDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a162b8b2afae2bfebb79ec6fe4859dec1</anchor>
      <arglist>(lintimeintnodedoub1d, LINTIMEINTNODEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeDoubleLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeDoubleLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::NodeDoubleLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeFloatInjection.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeFloatInjection_8C</filename>
    <includes id="NodeFloatInjection_8h" name="NodeFloatInjection.h" local="yes" imported="no">SAMRAI/pdat/NodeFloatInjection.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">SAMRAI/pdat/NodeVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>NodeFloatInjection_8C.html</anchorfile>
      <anchor>aed706c57d4cc593a4970266752f02ced</anchor>
      <arglist>(conavgnodeflot1d, CONAVGNODEFLOT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeFloatInjection.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeFloatInjection_8h</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::pdat::NodeFloatInjection</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeFloatLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeFloatLinearTimeInterpolateOp_8C</filename>
    <includes id="NodeFloatLinearTimeInterpolateOp_8h" name="NodeFloatLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/NodeFloatLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">SAMRAI/pdat/NodeVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>NodeFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a7be724a778a58c386adbde4d8d6b7c37</anchor>
      <arglist>(lintimeintnodefloat1d, LINTIMEINTNODEFLOAT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeFloatLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeFloatLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::NodeFloatLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeGeometry.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeGeometry_8C</filename>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/NodeGeometry.h</includes>
    <includes id="NodeIterator_8h" name="NodeIterator.h" local="yes" imported="no">SAMRAI/pdat/NodeIterator.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeGeometry.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeGeometry_8h</filename>
    <includes id="NodeIndex_8h" name="NodeIndex.h" local="yes" imported="no">SAMRAI/pdat/NodeIndex.h</includes>
    <includes id="NodeOverlap_8h" name="NodeOverlap.h" local="yes" imported="no">SAMRAI/pdat/NodeOverlap.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <class kind="class">SAMRAI::pdat::NodeGeometry</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeIndex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeIndex_8C</filename>
    <includes id="NodeIndex_8h" name="NodeIndex.h" local="yes" imported="no">SAMRAI/pdat/NodeIndex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeIndex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeIndex_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::pdat::NodeIndex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeIntegerInjection.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeIntegerInjection_8C</filename>
    <includes id="NodeIntegerInjection_8h" name="NodeIntegerInjection.h" local="yes" imported="no">SAMRAI/pdat/NodeIntegerInjection.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">SAMRAI/pdat/NodeVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>NodeIntegerInjection_8C.html</anchorfile>
      <anchor>a716ae4fcb44bb8394e7c24425c5340f3</anchor>
      <arglist>(conavgnodeintg1d, CONAVGNODEINTG1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeIntegerInjection.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeIntegerInjection_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <class kind="class">SAMRAI::pdat::NodeIntegerInjection</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeIterator.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeIterator_8C</filename>
    <includes id="NodeIterator_8h" name="NodeIterator.h" local="yes" imported="no">SAMRAI/pdat/NodeIterator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeIterator.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeIterator_8h</filename>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/NodeGeometry.h</includes>
    <includes id="NodeIndex_8h" name="NodeIndex.h" local="yes" imported="no">SAMRAI/pdat/NodeIndex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <class kind="class">SAMRAI::pdat::NodeIterator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeOverlap.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeOverlap_8C</filename>
    <includes id="NodeOverlap_8h" name="NodeOverlap.h" local="yes" imported="no">SAMRAI/pdat/NodeOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeOverlap.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeOverlap_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <class kind="class">SAMRAI::pdat::NodeOverlap</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeVariable.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeVariable_8C</filename>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">SAMRAI/pdat/NodeVariable.h</includes>
    <includes id="NodeDataFactory_8h" name="NodeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/NodeDataFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeVariable.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>NodeVariable_8h</filename>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="NodeVariable_8C" name="NodeVariable.C" local="yes" imported="no">SAMRAI/pdat/NodeVariable.C</includes>
    <class kind="class">SAMRAI::pdat::NodeVariable</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeData.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuteredgeData_8C</filename>
    <includes id="OuteredgeData_8h" name="OuteredgeData.h" local="yes" imported="no">SAMRAI/pdat/OuteredgeData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">SAMRAI/pdat/EdgeGeometry.h</includes>
    <includes id="EdgeOverlap_8h" name="EdgeOverlap.h" local="yes" imported="no">SAMRAI/pdat/EdgeOverlap.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeData.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuteredgeData_8h</filename>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">SAMRAI/pdat/EdgeData.h</includes>
    <includes id="EdgeIndex_8h" name="EdgeIndex.h" local="yes" imported="no">SAMRAI/pdat/EdgeIndex.h</includes>
    <includes id="EdgeOverlap_8h" name="EdgeOverlap.h" local="yes" imported="no">SAMRAI/pdat/EdgeOverlap.h</includes>
    <includes id="OuteredgeGeometry_8h" name="OuteredgeGeometry.h" local="yes" imported="no">SAMRAI/pdat/OuteredgeGeometry.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="OuteredgeData_8C" name="OuteredgeData.C" local="yes" imported="no">SAMRAI/pdat/OuteredgeData.C</includes>
    <class kind="class">SAMRAI::pdat::OuteredgeData</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeDataFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuteredgeDataFactory_8C</filename>
    <includes id="EdgeDataFactory_8h" name="EdgeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/EdgeDataFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="OuteredgeData_8h" name="OuteredgeData.h" local="yes" imported="no">SAMRAI/pdat/OuteredgeData.h</includes>
    <includes id="OuteredgeDataFactory_8h" name="OuteredgeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/OuteredgeDataFactory.h</includes>
    <includes id="OuteredgeGeometry_8h" name="OuteredgeGeometry.h" local="yes" imported="no">SAMRAI/pdat/OuteredgeGeometry.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeDataFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuteredgeDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="OuteredgeDataFactory_8C" name="OuteredgeDataFactory.C" local="yes" imported="no">SAMRAI/pdat/OuteredgeDataFactory.C</includes>
    <class kind="class">SAMRAI::pdat::OuteredgeDataFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeGeometry.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuteredgeGeometry_8C</filename>
    <includes id="OuteredgeGeometry_8h" name="OuteredgeGeometry.h" local="yes" imported="no">SAMRAI/pdat/OuteredgeGeometry.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">SAMRAI/pdat/EdgeGeometry.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeGeometry.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuteredgeGeometry_8h</filename>
    <includes id="EdgeOverlap_8h" name="EdgeOverlap.h" local="yes" imported="no">SAMRAI/pdat/EdgeOverlap.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <class kind="class">SAMRAI::pdat::OuteredgeGeometry</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeVariable.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuteredgeVariable_8C</filename>
    <includes id="OuteredgeVariable_8h" name="OuteredgeVariable.h" local="yes" imported="no">SAMRAI/pdat/OuteredgeVariable.h</includes>
    <includes id="OuteredgeDataFactory_8h" name="OuteredgeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/OuteredgeDataFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeVariable.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuteredgeVariable_8h</filename>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="OuteredgeVariable_8C" name="OuteredgeVariable.C" local="yes" imported="no">SAMRAI/pdat/OuteredgeVariable.C</includes>
    <class kind="class">SAMRAI::pdat::OuteredgeVariable</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceComplexConstantRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceComplexConstantRefine_8C</filename>
    <includes id="OuterfaceComplexConstantRefine_8h" name="OuterfaceComplexConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceComplexConstantRefine.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>OuterfaceComplexConstantRefine_8C.html</anchorfile>
      <anchor>a27dd2204bd2026a69e1c722710f527f2</anchor>
      <arglist>(conrefoutfacecplx1d, CONREFOUTFACECPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuterfaceComplexConstantRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceComplexConstantRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::pdat::OuterfaceComplexConstantRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceComplexLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceComplexLinearTimeInterpolateOp_8C</filename>
    <includes id="OuterfaceComplexLinearTimeInterpolateOp_8h" name="OuterfaceComplexLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceComplexLinearTimeInterpolateOp.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>OuterfaceComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a8fc88346c2d65d49227cfbff86d7ebda</anchor>
      <arglist>(lintimeintoutfacecmplx1d, LINTIMEINTOUTFACECMPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuterfaceComplexLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceComplexLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::OuterfaceComplexLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceData.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceData_8C</filename>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">SAMRAI/pdat/FaceGeometry.h</includes>
    <includes id="FaceOverlap_8h" name="FaceOverlap.h" local="yes" imported="no">SAMRAI/pdat/FaceOverlap.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceData.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceData_8h</filename>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="FaceIndex_8h" name="FaceIndex.h" local="yes" imported="no">SAMRAI/pdat/FaceIndex.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">SAMRAI/pdat/FaceData.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="OuterfaceData_8C" name="OuterfaceData.C" local="yes" imported="no">SAMRAI/pdat/OuterfaceData.C</includes>
    <class kind="class">SAMRAI::pdat::OuterfaceData</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceDataFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceDataFactory_8C</filename>
    <includes id="OuterfaceDataFactory_8h" name="OuterfaceDataFactory.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceDataFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceData.h</includes>
    <includes id="OuterfaceGeometry_8h" name="OuterfaceGeometry.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceGeometry.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="FaceDataFactory_8h" name="FaceDataFactory.h" local="yes" imported="no">SAMRAI/pdat/FaceDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceDataFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="OuterfaceDataFactory_8C" name="OuterfaceDataFactory.C" local="yes" imported="no">SAMRAI/pdat/OuterfaceDataFactory.C</includes>
    <class kind="class">SAMRAI::pdat::OuterfaceDataFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceDoubleConstantRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceDoubleConstantRefine_8C</filename>
    <includes id="OuterfaceDoubleConstantRefine_8h" name="OuterfaceDoubleConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceDoubleConstantRefine.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>OuterfaceDoubleConstantRefine_8C.html</anchorfile>
      <anchor>ae5e3478e69466eaa0cdd2d647e7bd3d7</anchor>
      <arglist>(conrefoutfacedoub1d, CONREFOUTFACEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuterfaceDoubleConstantRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceDoubleConstantRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::pdat::OuterfaceDoubleConstantRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceDoubleLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceDoubleLinearTimeInterpolateOp_8C</filename>
    <includes id="OuterfaceDoubleLinearTimeInterpolateOp_8h" name="OuterfaceDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceVariable.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>OuterfaceDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a7976d743473ace88ffdcbb20513f2ad2</anchor>
      <arglist>(lintimeintoutfacedoub1d, LINTIMEINTOUTFACEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuterfaceDoubleLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceDoubleLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::OuterfaceDoubleLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceFloatConstantRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceFloatConstantRefine_8C</filename>
    <includes id="OuterfaceFloatConstantRefine_8h" name="OuterfaceFloatConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceFloatConstantRefine.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>OuterfaceFloatConstantRefine_8C.html</anchorfile>
      <anchor>a43075d55095d6107a96b112e3abe1fd8</anchor>
      <arglist>(conrefoutfaceflot1d, CONREFOUTFACEFLOT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuterfaceFloatConstantRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceFloatConstantRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::pdat::OuterfaceFloatConstantRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceFloatLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceFloatLinearTimeInterpolateOp_8C</filename>
    <includes id="OuterfaceFloatLinearTimeInterpolateOp_8h" name="OuterfaceFloatLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceFloatLinearTimeInterpolateOp.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceVariable.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>OuterfaceFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>aa4ea82923daa487651093d048cca9f33</anchor>
      <arglist>(lintimeintoutfacefloat1d, LINTIMEINTOUTFACEFLOAT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuterfaceFloatLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceFloatLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::OuterfaceFloatLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceGeometry.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceGeometry_8C</filename>
    <includes id="OuterfaceGeometry_8h" name="OuterfaceGeometry.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceGeometry.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">SAMRAI/pdat/FaceGeometry.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceGeometry.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceGeometry_8h</filename>
    <includes id="FaceOverlap_8h" name="FaceOverlap.h" local="yes" imported="no">SAMRAI/pdat/FaceOverlap.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <class kind="class">SAMRAI::pdat::OuterfaceGeometry</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceIntegerConstantRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceIntegerConstantRefine_8C</filename>
    <includes id="OuterfaceIntegerConstantRefine_8h" name="OuterfaceIntegerConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceIntegerConstantRefine.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>OuterfaceIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a6c2c349d33d6d5c4cab408c1ca84e97c</anchor>
      <arglist>(conrefoutfaceintg1d, CONREFOUTFACEINTG1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuterfaceIntegerConstantRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceIntegerConstantRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::pdat::OuterfaceIntegerConstantRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceVariable.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceVariable_8C</filename>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceVariable.h</includes>
    <includes id="OuterfaceDataFactory_8h" name="OuterfaceDataFactory.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceDataFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceVariable.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuterfaceVariable_8h</filename>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="OuterfaceVariable_8C" name="OuterfaceVariable.C" local="yes" imported="no">SAMRAI/pdat/OuterfaceVariable.C</includes>
    <class kind="class">SAMRAI::pdat::OuterfaceVariable</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeData.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuternodeData_8C</filename>
    <includes id="OuternodeData_8h" name="OuternodeData.h" local="yes" imported="no">SAMRAI/pdat/OuternodeData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/NodeGeometry.h</includes>
    <includes id="NodeOverlap_8h" name="NodeOverlap.h" local="yes" imported="no">SAMRAI/pdat/NodeOverlap.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeData.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuternodeData_8h</filename>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="NodeIndex_8h" name="NodeIndex.h" local="yes" imported="no">SAMRAI/pdat/NodeIndex.h</includes>
    <includes id="NodeOverlap_8h" name="NodeOverlap.h" local="yes" imported="no">SAMRAI/pdat/NodeOverlap.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="OuternodeData_8C" name="OuternodeData.C" local="yes" imported="no">SAMRAI/pdat/OuternodeData.C</includes>
    <class kind="class">SAMRAI::pdat::OuternodeData</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeDataFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuternodeDataFactory_8C</filename>
    <includes id="OuternodeDataFactory_8h" name="OuternodeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/OuternodeDataFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="NodeDataFactory_8h" name="NodeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/NodeDataFactory.h</includes>
    <includes id="OuternodeData_8h" name="OuternodeData.h" local="yes" imported="no">SAMRAI/pdat/OuternodeData.h</includes>
    <includes id="OuternodeGeometry_8h" name="OuternodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/OuternodeGeometry.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeDataFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuternodeDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="OuternodeDataFactory_8C" name="OuternodeDataFactory.C" local="yes" imported="no">SAMRAI/pdat/OuternodeDataFactory.C</includes>
    <class kind="class">SAMRAI::pdat::OuternodeDataFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeDoubleInjection.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuternodeDoubleInjection_8C</filename>
    <includes id="OuternodeDoubleInjection_8h" name="OuternodeDoubleInjection.h" local="yes" imported="no">SAMRAI/pdat/OuternodeDoubleInjection.h</includes>
    <includes id="OuternodeData_8h" name="OuternodeData.h" local="yes" imported="no">SAMRAI/pdat/OuternodeData.h</includes>
    <includes id="OuternodeVariable_8h" name="OuternodeVariable.h" local="yes" imported="no">SAMRAI/pdat/OuternodeVariable.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>OuternodeDoubleInjection_8C.html</anchorfile>
      <anchor>a237e9f0109b8217776b47b269144cb45</anchor>
      <arglist>(conavgouternodedoub1d, CONAVGOUTERNODEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuternodeDoubleInjection.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuternodeDoubleInjection_8h</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::pdat::OuternodeDoubleInjection</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeGeometry.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuternodeGeometry_8C</filename>
    <includes id="OuternodeGeometry_8h" name="OuternodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/OuternodeGeometry.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/NodeGeometry.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeGeometry.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuternodeGeometry_8h</filename>
    <includes id="NodeOverlap_8h" name="NodeOverlap.h" local="yes" imported="no">SAMRAI/pdat/NodeOverlap.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <class kind="class">SAMRAI::pdat::OuternodeGeometry</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeVariable.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuternodeVariable_8C</filename>
    <includes id="OuternodeVariable_8h" name="OuternodeVariable.h" local="yes" imported="no">SAMRAI/pdat/OuternodeVariable.h</includes>
    <includes id="OuternodeDataFactory_8h" name="OuternodeDataFactory.h" local="yes" imported="no">SAMRAI/pdat/OuternodeDataFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeVariable.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OuternodeVariable_8h</filename>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="OuternodeVariable_8C" name="OuternodeVariable.C" local="yes" imported="no">SAMRAI/pdat/OuternodeVariable.C</includes>
    <class kind="class">SAMRAI::pdat::OuternodeVariable</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideComplexLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OutersideComplexLinearTimeInterpolateOp_8C</filename>
    <includes id="OutersideComplexLinearTimeInterpolateOp_8h" name="OutersideComplexLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/OutersideComplexLinearTimeInterpolateOp.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="OutersideData_8h" name="OutersideData.h" local="yes" imported="no">SAMRAI/pdat/OutersideData.h</includes>
    <includes id="OutersideVariable_8h" name="OutersideVariable.h" local="yes" imported="no">SAMRAI/pdat/OutersideVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>OutersideComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a9ce6e294bdc4950965243fce9a9de150</anchor>
      <arglist>(lintimeintoutsidecmplx1d, LINTIMEINTOUTSIDECMPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OutersideComplexLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OutersideComplexLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::OutersideComplexLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideData.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OutersideData_8C</filename>
    <includes id="OutersideData_8h" name="OutersideData.h" local="yes" imported="no">SAMRAI/pdat/OutersideData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SAMRAI/pdat/SideGeometry.h</includes>
    <includes id="SideOverlap_8h" name="SideOverlap.h" local="yes" imported="no">SAMRAI/pdat/SideOverlap.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideData.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OutersideData_8h</filename>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="SideIndex_8h" name="SideIndex.h" local="yes" imported="no">SAMRAI/pdat/SideIndex.h</includes>
    <includes id="SideIterator_8h" name="SideIterator.h" local="yes" imported="no">SAMRAI/pdat/SideIterator.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="OutersideData_8C" name="OutersideData.C" local="yes" imported="no">SAMRAI/pdat/OutersideData.C</includes>
    <class kind="class">SAMRAI::pdat::OutersideData</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideDataFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OutersideDataFactory_8C</filename>
    <includes id="OutersideDataFactory_8h" name="OutersideDataFactory.h" local="yes" imported="no">SAMRAI/pdat/OutersideDataFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="OutersideData_8h" name="OutersideData.h" local="yes" imported="no">SAMRAI/pdat/OutersideData.h</includes>
    <includes id="OutersideGeometry_8h" name="OutersideGeometry.h" local="yes" imported="no">SAMRAI/pdat/OutersideGeometry.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="SideDataFactory_8h" name="SideDataFactory.h" local="yes" imported="no">SAMRAI/pdat/SideDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideDataFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OutersideDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="OutersideDataFactory_8C" name="OutersideDataFactory.C" local="yes" imported="no">SAMRAI/pdat/OutersideDataFactory.C</includes>
    <class kind="class">SAMRAI::pdat::OutersideDataFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideDoubleLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OutersideDoubleLinearTimeInterpolateOp_8C</filename>
    <includes id="OutersideDoubleLinearTimeInterpolateOp_8h" name="OutersideDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/OutersideDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="OutersideData_8h" name="OutersideData.h" local="yes" imported="no">SAMRAI/pdat/OutersideData.h</includes>
    <includes id="OutersideVariable_8h" name="OutersideVariable.h" local="yes" imported="no">SAMRAI/pdat/OutersideVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>OutersideDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>afcd5b0a540cce0249537e0e905de68e2</anchor>
      <arglist>(lintimeintoutsidedoub1d, LINTIMEINTOUTSIDEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OutersideDoubleLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OutersideDoubleLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::OutersideDoubleLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideFloatLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OutersideFloatLinearTimeInterpolateOp_8C</filename>
    <includes id="OutersideFloatLinearTimeInterpolateOp_8h" name="OutersideFloatLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/OutersideFloatLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="OutersideData_8h" name="OutersideData.h" local="yes" imported="no">SAMRAI/pdat/OutersideData.h</includes>
    <includes id="OutersideVariable_8h" name="OutersideVariable.h" local="yes" imported="no">SAMRAI/pdat/OutersideVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>OutersideFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a5ff5389aee5525866ac6a6e48c9aafee</anchor>
      <arglist>(lintimeintoutsidefloat1d, LINTIMEINTOUTSIDEFLOAT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OutersideFloatLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OutersideFloatLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::OutersideFloatLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideGeometry.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OutersideGeometry_8C</filename>
    <includes id="OutersideGeometry_8h" name="OutersideGeometry.h" local="yes" imported="no">SAMRAI/pdat/OutersideGeometry.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SAMRAI/pdat/SideGeometry.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideGeometry.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OutersideGeometry_8h</filename>
    <includes id="SideOverlap_8h" name="SideOverlap.h" local="yes" imported="no">SAMRAI/pdat/SideOverlap.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <class kind="class">SAMRAI::pdat::OutersideGeometry</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideVariable.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OutersideVariable_8C</filename>
    <includes id="OutersideVariable_8h" name="OutersideVariable.h" local="yes" imported="no">SAMRAI/pdat/OutersideVariable.h</includes>
    <includes id="OutersideDataFactory_8h" name="OutersideDataFactory.h" local="yes" imported="no">SAMRAI/pdat/OutersideDataFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideVariable.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>OutersideVariable_8h</filename>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="OutersideVariable_8C" name="OutersideVariable.C" local="yes" imported="no">SAMRAI/pdat/OutersideVariable.C</includes>
    <class kind="class">SAMRAI::pdat::OutersideVariable</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SecondLayerNodeNoCornersVariableFillPattern.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SecondLayerNodeNoCornersVariableFillPattern_8C</filename>
    <includes id="SecondLayerNodeNoCornersVariableFillPattern_8h" name="SecondLayerNodeNoCornersVariableFillPattern.h" local="yes" imported="no">SAMRAI/pdat/SecondLayerNodeNoCornersVariableFillPattern.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/NodeGeometry.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SecondLayerNodeNoCornersVariableFillPattern.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SecondLayerNodeNoCornersVariableFillPattern_8h</filename>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="VariableFillPattern_8h" name="VariableFillPattern.h" local="yes" imported="no">SAMRAI/xfer/VariableFillPattern.h</includes>
    <class kind="class">SAMRAI::pdat::SecondLayerNodeNoCornersVariableFillPattern</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SecondLayerNodeVariableFillPattern.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SecondLayerNodeVariableFillPattern_8C</filename>
    <includes id="SecondLayerNodeVariableFillPattern_8h" name="SecondLayerNodeVariableFillPattern.h" local="yes" imported="no">SAMRAI/pdat/SecondLayerNodeVariableFillPattern.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">SAMRAI/pdat/NodeGeometry.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SecondLayerNodeVariableFillPattern.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SecondLayerNodeVariableFillPattern_8h</filename>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="VariableFillPattern_8h" name="VariableFillPattern.h" local="yes" imported="no">SAMRAI/xfer/VariableFillPattern.h</includes>
    <class kind="class">SAMRAI::pdat::SecondLayerNodeVariableFillPattern</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideComplexConstantRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideComplexConstantRefine_8C</filename>
    <includes id="SideComplexConstantRefine_8h" name="SideComplexConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/SideComplexConstantRefine.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>SideComplexConstantRefine_8C.html</anchorfile>
      <anchor>a31bca43206823257477822656b7db496</anchor>
      <arglist>(conrefsidecplx1d, CONREFSIDECPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SideComplexConstantRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideComplexConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <class kind="class">SAMRAI::pdat::SideComplexConstantRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideComplexLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideComplexLinearTimeInterpolateOp_8C</filename>
    <includes id="SideComplexLinearTimeInterpolateOp_8h" name="SideComplexLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/SideComplexLinearTimeInterpolateOp.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>SideComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>aa58437ae59db4ab0c3a329acbc60780d</anchor>
      <arglist>(lintimeintsidecmplx1d, LINTIMEINTSIDECMPLX1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SideComplexLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideComplexLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::SideComplexLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideData.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideData_8C</filename>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SAMRAI/pdat/SideGeometry.h</includes>
    <includes id="SideOverlap_8h" name="SideOverlap.h" local="yes" imported="no">SAMRAI/pdat/SideOverlap.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideData.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideData_8h</filename>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="SideIndex_8h" name="SideIndex.h" local="yes" imported="no">SAMRAI/pdat/SideIndex.h</includes>
    <includes id="SideIterator_8h" name="SideIterator.h" local="yes" imported="no">SAMRAI/pdat/SideIterator.h</includes>
    <includes id="SideOverlap_8h" name="SideOverlap.h" local="yes" imported="no">SAMRAI/pdat/SideOverlap.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="SideData_8C" name="SideData.C" local="yes" imported="no">SAMRAI/pdat/SideData.C</includes>
    <class kind="class">SAMRAI::pdat::SideData</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideDataFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideDataFactory_8C</filename>
    <includes id="SideDataFactory_8h" name="SideDataFactory.h" local="yes" imported="no">SAMRAI/pdat/SideDataFactory.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SAMRAI/pdat/SideGeometry.h</includes>
    <includes id="OutersideDataFactory_8h" name="OutersideDataFactory.h" local="yes" imported="no">SAMRAI/pdat/OutersideDataFactory.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideDataFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="SideDataFactory_8C" name="SideDataFactory.C" local="yes" imported="no">SAMRAI/pdat/SideDataFactory.C</includes>
    <class kind="class">SAMRAI::pdat::SideDataFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideDoubleConstantRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideDoubleConstantRefine_8C</filename>
    <includes id="SideDoubleConstantRefine_8h" name="SideDoubleConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/SideDoubleConstantRefine.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>SideDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a77d76f2515a6c6667805979061d9108a</anchor>
      <arglist>(conrefsidedoub1d, CONREFSIDEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SideDoubleConstantRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideDoubleConstantRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::pdat::SideDoubleConstantRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideDoubleLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideDoubleLinearTimeInterpolateOp_8C</filename>
    <includes id="SideDoubleLinearTimeInterpolateOp_8h" name="SideDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/SideDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>SideDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>ad35b750ba7647f345dbdef1b72943511</anchor>
      <arglist>(lintimeintsidedoub1d, LINTIMEINTSIDEDOUB1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SideDoubleLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideDoubleLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::SideDoubleLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideFloatConstantRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideFloatConstantRefine_8C</filename>
    <includes id="SideFloatConstantRefine_8h" name="SideFloatConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/SideFloatConstantRefine.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>SideFloatConstantRefine_8C.html</anchorfile>
      <anchor>a136f74f3f13c014682a00f3bc82b64f0</anchor>
      <arglist>(conrefsideflot1d, CONREFSIDEFLOT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SideFloatConstantRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideFloatConstantRefine_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::pdat::SideFloatConstantRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideFloatLinearTimeInterpolateOp.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideFloatLinearTimeInterpolateOp_8C</filename>
    <includes id="SideFloatLinearTimeInterpolateOp_8h" name="SideFloatLinearTimeInterpolateOp.h" local="yes" imported="no">SAMRAI/pdat/SideFloatLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>SideFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a3a5afd86bcd9d271ff796dce7a645c87</anchor>
      <arglist>(lintimeintsidefloat1d, LINTIMEINTSIDEFLOAT1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SideFloatLinearTimeInterpolateOp.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideFloatLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <class kind="class">SAMRAI::pdat::SideFloatLinearTimeInterpolateOp</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideGeometry.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideGeometry_8C</filename>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SAMRAI/pdat/SideGeometry.h</includes>
    <includes id="SideIterator_8h" name="SideIterator.h" local="yes" imported="no">SAMRAI/pdat/SideIterator.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideGeometry.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideGeometry_8h</filename>
    <includes id="SideIndex_8h" name="SideIndex.h" local="yes" imported="no">SAMRAI/pdat/SideIndex.h</includes>
    <includes id="SideOverlap_8h" name="SideOverlap.h" local="yes" imported="no">SAMRAI/pdat/SideOverlap.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <class kind="class">SAMRAI::pdat::SideGeometry</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideIndex.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideIndex_8C</filename>
    <includes id="SideIndex_8h" name="SideIndex.h" local="yes" imported="no">SAMRAI/pdat/SideIndex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideIndex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideIndex_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::pdat::SideIndex</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideIntegerConstantRefine.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideIntegerConstantRefine_8C</filename>
    <includes id="SideIntegerConstantRefine_8h" name="SideIntegerConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/SideIntegerConstantRefine.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>SideIntegerConstantRefine_8C.html</anchorfile>
      <anchor>aefca0380fa81e54010fd8aae11c05650</anchor>
      <arglist>(conrefsideintg1d, CONREFSIDEINTG1D) const</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SideIntegerConstantRefine.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideIntegerConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <class kind="class">SAMRAI::pdat::SideIntegerConstantRefine</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideIterator.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideIterator_8C</filename>
    <includes id="SideIterator_8h" name="SideIterator.h" local="yes" imported="no">SAMRAI/pdat/SideIterator.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SAMRAI/pdat/SideGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideIterator.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideIterator_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SAMRAI/pdat/SideGeometry.h</includes>
    <includes id="SideIndex_8h" name="SideIndex.h" local="yes" imported="no">SAMRAI/pdat/SideIndex.h</includes>
    <class kind="class">SAMRAI::pdat::SideIterator</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideOverlap.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideOverlap_8C</filename>
    <includes id="SideOverlap_8h" name="SideOverlap.h" local="yes" imported="no">SAMRAI/pdat/SideOverlap.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SAMRAI/pdat/SideGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideOverlap.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideOverlap_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <class kind="class">SAMRAI::pdat::SideOverlap</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideVariable.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideVariable_8C</filename>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <includes id="SideDataFactory_8h" name="SideDataFactory.h" local="yes" imported="no">SAMRAI/pdat/SideDataFactory.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideVariable.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SideVariable_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="SideVariable_8C" name="SideVariable.C" local="yes" imported="no">SAMRAI/pdat/SideVariable.C</includes>
    <class kind="class">SAMRAI::pdat::SideVariable</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SparseData.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SparseData_8C</filename>
    <includes id="SparseData_8h" name="SparseData.h" local="yes" imported="no">SAMRAI/pdat/SparseData.h</includes>
  </compound>
  <compound kind="file">
    <name>SparseData.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SparseData_8h</filename>
  </compound>
  <compound kind="file">
    <name>SparseDataFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SparseDataFactory_8C</filename>
    <includes id="SparseDataFactory_8h" name="SparseDataFactory.h" local="yes" imported="no">SAMRAI/pdat/SparseDataFactory.h</includes>
  </compound>
  <compound kind="file">
    <name>SparseDataFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SparseDataFactory_8h</filename>
  </compound>
  <compound kind="file">
    <name>SparseDataVariable.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SparseDataVariable_8C</filename>
    <includes id="SparseDataVariable_8h" name="SparseDataVariable.h" local="yes" imported="no">SAMRAI/pdat/SparseDataVariable.h</includes>
  </compound>
  <compound kind="file">
    <name>SparseDataVariable.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SparseDataVariable_8h</filename>
  </compound>
  <compound kind="file">
    <name>SumOperation.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SumOperation_8C</filename>
    <includes id="SumOperation_8h" name="SumOperation.h" local="yes" imported="no">SAMRAI/pdat/SumOperation.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SumOperation.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/</path>
    <filename>SumOperation_8h</filename>
    <includes id="SumOperation_8C" name="SumOperation.C" local="yes" imported="no">SAMRAI/pdat/SumOperation.C</includes>
    <class kind="class">SAMRAI::pdat::SumOperation</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianRobinBcHelper.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>CartesianRobinBcHelper_8C</filename>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="PatchCellDataOpsReal_8h" name="PatchCellDataOpsReal.h" local="yes" imported="no">SAMRAI/math/PatchCellDataOpsReal.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <includes id="CartesianRobinBcHelper_8h" name="CartesianRobinBcHelper.h" local="yes" imported="no">SAMRAI/solv/CartesianRobinBcHelper.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CartesianRobinBcHelper_8C.html</anchorfile>
      <anchor>a9de13b3a13bebc5b43e4826f41c39f7b</anchor>
      <arglist>(settype1cells2d, SETTYPE1CELLS2D)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianRobinBcHelper.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>CartesianRobinBcHelper_8h</filename>
    <includes id="RobinBcCoefStrategy_8h" name="RobinBcCoefStrategy.h" local="yes" imported="no">SAMRAI/solv/RobinBcCoefStrategy.h</includes>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">SAMRAI/xfer/RefinePatchStrategy.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">SAMRAI/pdat/NodeData.h</includes>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">SAMRAI/hier/BoundaryBox.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::solv::CartesianRobinBcHelper</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>CellPoissonFACOps.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>CellPoissonFACOps_8C</filename>
    <includes id="CellPoissonFACOps_8h" name="CellPoissonFACOps.h" local="yes" imported="no">SAMRAI/solv/CellPoissonFACOps.h</includes>
    <includes id="BoundaryBoxUtils_8h" name="BoundaryBoxUtils.h" local="yes" imported="no">SAMRAI/hier/BoundaryBoxUtils.h</includes>
    <includes id="CartesianGridGeometry_8h" name="CartesianGridGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianGridGeometry.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="CellDoubleConstantRefine_8h" name="CellDoubleConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/CellDoubleConstantRefine.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="OutersideData_8h" name="OutersideData.h" local="yes" imported="no">SAMRAI/pdat/OutersideData.h</includes>
    <includes id="OutersideVariable_8h" name="OutersideVariable.h" local="yes" imported="no">SAMRAI/pdat/OutersideVariable.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <includes id="FACPreconditioner_8h" name="FACPreconditioner.h" local="yes" imported="no">SAMRAI/solv/FACPreconditioner.h</includes>
    <includes id="CellPoissonHypreSolver_8h" name="CellPoissonHypreSolver.h" local="yes" imported="no">SAMRAI/solv/CellPoissonHypreSolver.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <includes id="CoarsenAlgorithm_8h" name="CoarsenAlgorithm.h" local="yes" imported="no">SAMRAI/xfer/CoarsenAlgorithm.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="CoarsenSchedule_8h" name="CoarsenSchedule.h" local="yes" imported="no">SAMRAI/xfer/CoarsenSchedule.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">SAMRAI/xfer/RefineAlgorithm.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">SAMRAI/xfer/RefineSchedule.h</includes>
    <includes id="PatchLevelFullFillPattern_8h" name="PatchLevelFullFillPattern.h" local="yes" imported="no">SAMRAI/xfer/PatchLevelFullFillPattern.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a054ba1f1e8f88b457d80eaec9e0d6743</anchor>
      <arglist>(compfluxvardc2d, COMPFLUXVARDC2D)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellPoissonFACOps.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>CellPoissonFACOps_8h</filename>
    <includes id="CartesianRobinBcHelper_8h" name="CartesianRobinBcHelper.h" local="yes" imported="no">SAMRAI/solv/CartesianRobinBcHelper.h</includes>
    <includes id="FACPreconditioner_8h" name="FACPreconditioner.h" local="yes" imported="no">SAMRAI/solv/FACPreconditioner.h</includes>
    <includes id="FACOperatorStrategy_8h" name="FACOperatorStrategy.h" local="yes" imported="no">SAMRAI/solv/FACOperatorStrategy.h</includes>
    <includes id="RobinBcCoefStrategy_8h" name="RobinBcCoefStrategy.h" local="yes" imported="no">SAMRAI/solv/RobinBcCoefStrategy.h</includes>
    <includes id="CellPoissonHypreSolver_8h" name="CellPoissonHypreSolver.h" local="yes" imported="no">SAMRAI/solv/CellPoissonHypreSolver.h</includes>
    <includes id="SAMRAIVectorReal_8h" name="SAMRAIVectorReal.h" local="yes" imported="no">SAMRAI/solv/SAMRAIVectorReal.h</includes>
    <includes id="PoissonSpecifications_8h" name="PoissonSpecifications.h" local="yes" imported="no">SAMRAI/solv/PoissonSpecifications.h</includes>
    <includes id="HierarchyCellDataOpsReal_8h" name="HierarchyCellDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyCellDataOpsReal.h</includes>
    <includes id="HierarchySideDataOpsReal_8h" name="HierarchySideDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchySideDataOpsReal.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="CellDoubleConstantRefine_8h" name="CellDoubleConstantRefine.h" local="yes" imported="no">SAMRAI/pdat/CellDoubleConstantRefine.h</includes>
    <includes id="OutersideData_8h" name="OutersideData.h" local="yes" imported="no">SAMRAI/pdat/OutersideData.h</includes>
    <includes id="OutersideVariable_8h" name="OutersideVariable.h" local="yes" imported="no">SAMRAI/pdat/OutersideVariable.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <includes id="CoarsenSchedule_8h" name="CoarsenSchedule.h" local="yes" imported="no">SAMRAI/xfer/CoarsenSchedule.h</includes>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">SAMRAI/xfer/RefineSchedule.h</includes>
    <includes id="CoarsenAlgorithm_8h" name="CoarsenAlgorithm.h" local="yes" imported="no">SAMRAI/xfer/CoarsenAlgorithm.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">SAMRAI/xfer/RefineAlgorithm.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="CoarseFineBoundary_8h" name="CoarseFineBoundary.h" local="yes" imported="no">SAMRAI/hier/CoarseFineBoundary.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="VariableContext_8h" name="VariableContext.h" local="yes" imported="no">SAMRAI/hier/VariableContext.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::solv::CellPoissonFACOps</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>CellPoissonFACSolver.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>CellPoissonFACSolver_8C</filename>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="CellPoissonFACSolver_8h" name="CellPoissonFACSolver.h" local="yes" imported="no">SAMRAI/solv/CellPoissonFACSolver.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>CellPoissonFACSolver.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>CellPoissonFACSolver_8h</filename>
    <includes id="FACPreconditioner_8h" name="FACPreconditioner.h" local="yes" imported="no">SAMRAI/solv/FACPreconditioner.h</includes>
    <includes id="CellPoissonFACOps_8h" name="CellPoissonFACOps.h" local="yes" imported="no">SAMRAI/solv/CellPoissonFACOps.h</includes>
    <includes id="PoissonSpecifications_8h" name="PoissonSpecifications.h" local="yes" imported="no">SAMRAI/solv/PoissonSpecifications.h</includes>
    <includes id="SimpleCellRobinBcCoefs_8h" name="SimpleCellRobinBcCoefs.h" local="yes" imported="no">SAMRAI/solv/SimpleCellRobinBcCoefs.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::solv::CellPoissonFACSolver</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>CellPoissonHypreSolver.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>CellPoissonHypreSolver_8C</filename>
    <includes id="CellPoissonHypreSolver_8h" name="CellPoissonHypreSolver.h" local="yes" imported="no">SAMRAI/solv/CellPoissonHypreSolver.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="CartesianGridGeometry_8h" name="CartesianGridGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianGridGeometry.h</includes>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">SAMRAI/math/ArrayDataBasicOps.h</includes>
    <includes id="PatchSideDataBasicOps_8h" name="PatchSideDataBasicOps.h" local="yes" imported="no">SAMRAI/math/PatchSideDataBasicOps.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="CellIndex_8h" name="CellIndex.h" local="yes" imported="no">SAMRAI/pdat/CellIndex.h</includes>
    <includes id="CellIterator_8h" name="CellIterator.h" local="yes" imported="no">SAMRAI/pdat/CellIterator.h</includes>
    <includes id="FaceIndex_8h" name="FaceIndex.h" local="yes" imported="no">SAMRAI/pdat/FaceIndex.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="SideIndex_8h" name="SideIndex.h" local="yes" imported="no">SAMRAI/pdat/SideIndex.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceData.h</includes>
    <includes id="OutersideData_8h" name="OutersideData.h" local="yes" imported="no">SAMRAI/pdat/OutersideData.h</includes>
    <includes id="BoundaryBoxUtils_8h" name="BoundaryBoxUtils.h" local="yes" imported="no">SAMRAI/hier/BoundaryBoxUtils.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>CellPoissonHypreSolver_8C.html</anchorfile>
      <anchor>a01c025ce08acca2b5509e273970d5610</anchor>
      <arglist>(compdiagvariablec2d, COMPDIAGVARIABLEC2D)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellPoissonHypreSolver.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>CellPoissonHypreSolver_8h</filename>
    <includes id="GhostCellRobinBcCoefs_8h" name="GhostCellRobinBcCoefs.h" local="yes" imported="no">SAMRAI/solv/GhostCellRobinBcCoefs.h</includes>
    <includes id="RobinBcCoefStrategy_8h" name="RobinBcCoefStrategy.h" local="yes" imported="no">SAMRAI/solv/RobinBcCoefStrategy.h</includes>
    <includes id="PoissonSpecifications_8h" name="PoissonSpecifications.h" local="yes" imported="no">SAMRAI/solv/PoissonSpecifications.h</includes>
    <includes id="SimpleCellRobinBcCoefs_8h" name="SimpleCellRobinBcCoefs.h" local="yes" imported="no">SAMRAI/solv/SimpleCellRobinBcCoefs.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="OutersideVariable_8h" name="OutersideVariable.h" local="yes" imported="no">SAMRAI/pdat/OutersideVariable.h</includes>
    <includes id="CoarseFineBoundary_8h" name="CoarseFineBoundary.h" local="yes" imported="no">SAMRAI/hier/CoarseFineBoundary.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="VariableContext_8h" name="VariableContext.h" local="yes" imported="no">SAMRAI/hier/VariableContext.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::solv::CellPoissonHypreSolver</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="define">
      <type>#define</type>
      <name>included_HYPRE_struct_ls</name>
      <anchorfile>CellPoissonHypreSolver_8h.html</anchorfile>
      <anchor>afc694dff963e8ea2611ff6423fdbc2f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CVODEAbstractFunctions.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>CVODEAbstractFunctions_8C</filename>
    <includes id="CVODEAbstractFunctions_8h" name="CVODEAbstractFunctions.h" local="yes" imported="no">SAMRAI/solv/CVODEAbstractFunctions.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>CVODEAbstractFunctions.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>CVODEAbstractFunctions_8h</filename>
    <includes id="SundialsAbstractVector_8h" name="SundialsAbstractVector.h" local="yes" imported="no">SAMRAI/solv/SundialsAbstractVector.h</includes>
    <class kind="class">SAMRAI::solv::CVODEAbstractFunctions</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>CVODESolver.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>CVODESolver_8C</filename>
    <includes id="CVODESolver_8h" name="CVODESolver.h" local="yes" imported="no">SAMRAI/solv/CVODESolver.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>CVODESolver.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>CVODESolver_8h</filename>
    <includes id="CVODEAbstractFunctions_8h" name="CVODEAbstractFunctions.h" local="yes" imported="no">SAMRAI/solv/CVODEAbstractFunctions.h</includes>
    <includes id="SundialsAbstractVector_8h" name="SundialsAbstractVector.h" local="yes" imported="no">SAMRAI/solv/SundialsAbstractVector.h</includes>
    <includes id="IOStream_8h" name="IOStream.h" local="yes" imported="no">SAMRAI/tbox/IOStream.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::solv::CVODESolver</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="define">
      <type>#define</type>
      <name>CVODE_SAMRAI_ERROR</name>
      <anchorfile>CVODESolver_8h.html</anchorfile>
      <anchor>a648f49a7dd2ae5a6d149a5d1975b474d</anchor>
      <arglist>(ierr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SABSVEC_CAST</name>
      <anchorfile>CVODESolver_8h.html</anchorfile>
      <anchor>ad5d8128cf8f1eb372d5f4e5288822521</anchor>
      <arglist>(v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>manual_FAC.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/dox/</path>
    <filename>manual__FAC_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual_nonlinear.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/dox/</path>
    <filename>manual__nonlinear_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual_packages.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/dox/</path>
    <filename>manual__packages_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual_packages_petsc.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/dox/</path>
    <filename>manual__packages__petsc_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual_packages_sundials.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/dox/</path>
    <filename>manual__packages__sundials_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual_packages_sundials_cvode.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/dox/</path>
    <filename>manual__packages__sundials__cvode_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual_packages_sundials_kinsol.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/dox/</path>
    <filename>manual__packages__sundials__kinsol_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual_packages_sundials_vector.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/dox/</path>
    <filename>manual__packages__sundials__vector_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual_poisson.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/dox/</path>
    <filename>manual__poisson_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual_vectors.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/dox/</path>
    <filename>manual__vectors_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>FACOperatorStrategy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>FACOperatorStrategy_8C</filename>
    <includes id="FACOperatorStrategy_8h" name="FACOperatorStrategy.h" local="yes" imported="no">SAMRAI/solv/FACOperatorStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>FACOperatorStrategy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>FACOperatorStrategy_8h</filename>
    <includes id="SAMRAIVectorReal_8h" name="SAMRAIVectorReal.h" local="yes" imported="no">SAMRAI/solv/SAMRAIVectorReal.h</includes>
    <class kind="class">SAMRAI::solv::FACOperatorStrategy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>FACPreconditioner.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>FACPreconditioner_8C</filename>
    <includes id="HierarchyDataOpsManager_8h" name="HierarchyDataOpsManager.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsManager.h</includes>
    <includes id="FACPreconditioner_8h" name="FACPreconditioner.h" local="yes" imported="no">SAMRAI/solv/FACPreconditioner.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>FACPreconditioner.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>FACPreconditioner_8h</filename>
    <includes id="HierarchyDataOpsReal_8h" name="HierarchyDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsReal.h</includes>
    <includes id="FACOperatorStrategy_8h" name="FACOperatorStrategy.h" local="yes" imported="no">SAMRAI/solv/FACOperatorStrategy.h</includes>
    <includes id="SAMRAIVectorReal_8h" name="SAMRAIVectorReal.h" local="yes" imported="no">SAMRAI/solv/SAMRAIVectorReal.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::solv::FACPreconditioner</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>GhostCellRobinBcCoefs.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>GhostCellRobinBcCoefs_8C</filename>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">SAMRAI/math/ArrayDataBasicOps.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="GhostCellRobinBcCoefs_8h" name="GhostCellRobinBcCoefs.h" local="yes" imported="no">SAMRAI/solv/GhostCellRobinBcCoefs.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>GhostCellRobinBcCoefs.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>GhostCellRobinBcCoefs_8h</filename>
    <includes id="RobinBcCoefStrategy_8h" name="RobinBcCoefStrategy.h" local="yes" imported="no">SAMRAI/solv/RobinBcCoefStrategy.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">SAMRAI/hier/BoundaryBox.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <class kind="class">SAMRAI::solv::GhostCellRobinBcCoefs</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>KINSOL_SAMRAIContext.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>KINSOL__SAMRAIContext_8C</filename>
    <includes id="KINSOL__SAMRAIContext_8h" name="KINSOL_SAMRAIContext.h" local="yes" imported="no">SAMRAI/solv/KINSOL_SAMRAIContext.h</includes>
    <includes id="Sundials__SAMRAIVector_8h" name="Sundials_SAMRAIVector.h" local="yes" imported="no">SAMRAI/solv/Sundials_SAMRAIVector.h</includes>
    <includes id="RestartManager_8h" name="RestartManager.h" local="yes" imported="no">SAMRAI/tbox/RestartManager.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>KINSOL_SAMRAIContext.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>KINSOL__SAMRAIContext_8h</filename>
    <includes id="NonlinearSolverStrategy_8h" name="NonlinearSolverStrategy.h" local="yes" imported="no">SAMRAI/solv/NonlinearSolverStrategy.h</includes>
    <includes id="KINSOLSolver_8h" name="KINSOLSolver.h" local="yes" imported="no">SAMRAI/solv/KINSOLSolver.h</includes>
    <includes id="KINSOLAbstractFunctions_8h" name="KINSOLAbstractFunctions.h" local="yes" imported="no">SAMRAI/solv/KINSOLAbstractFunctions.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Serializable_8h" name="Serializable.h" local="yes" imported="no">SAMRAI/tbox/Serializable.h</includes>
    <class kind="class">SAMRAI::solv::KINSOL_SAMRAIContext</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>KINSOLAbstractFunctions.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>KINSOLAbstractFunctions_8C</filename>
    <includes id="KINSOLAbstractFunctions_8h" name="KINSOLAbstractFunctions.h" local="yes" imported="no">SAMRAI/solv/KINSOLAbstractFunctions.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>KINSOLAbstractFunctions.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>KINSOLAbstractFunctions_8h</filename>
    <includes id="SundialsAbstractVector_8h" name="SundialsAbstractVector.h" local="yes" imported="no">SAMRAI/solv/SundialsAbstractVector.h</includes>
    <class kind="class">SAMRAI::solv::KINSOLAbstractFunctions</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>KINSOLSolver.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>KINSOLSolver_8C</filename>
    <includes id="KINSOLSolver_8h" name="KINSOLSolver.h" local="yes" imported="no">SAMRAI/solv/KINSOLSolver.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>KINSOLSolver.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>KINSOLSolver_8h</filename>
    <includes id="SundialsAbstractVector_8h" name="SundialsAbstractVector.h" local="yes" imported="no">SAMRAI/solv/SundialsAbstractVector.h</includes>
    <includes id="KINSOLAbstractFunctions_8h" name="KINSOLAbstractFunctions.h" local="yes" imported="no">SAMRAI/solv/KINSOLAbstractFunctions.h</includes>
    <includes id="IOStream_8h" name="IOStream.h" local="yes" imported="no">SAMRAI/tbox/IOStream.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::solv::KINSOLSolver</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="define">
      <type>#define</type>
      <name>KINSOL_SAMRAI_ERROR</name>
      <anchorfile>KINSOLSolver_8h.html</anchorfile>
      <anchor>a4cd1c0396345b09e124730e2ea42e5bc</anchor>
      <arglist>(ierr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SABSVEC_CAST</name>
      <anchorfile>KINSOLSolver_8h.html</anchorfile>
      <anchor>ad5d8128cf8f1eb372d5f4e5288822521</anchor>
      <arglist>(v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LocationIndexRobinBcCoefs.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>LocationIndexRobinBcCoefs_8C</filename>
    <includes id="LocationIndexRobinBcCoefs_8h" name="LocationIndexRobinBcCoefs.h" local="yes" imported="no">SAMRAI/solv/LocationIndexRobinBcCoefs.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">SAMRAI/hier/Index.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>LocationIndexRobinBcCoefs.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>LocationIndexRobinBcCoefs_8h</filename>
    <includes id="RobinBcCoefStrategy_8h" name="RobinBcCoefStrategy.h" local="yes" imported="no">SAMRAI/solv/RobinBcCoefStrategy.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">SAMRAI/hier/BoundaryBox.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::solv::LocationIndexRobinBcCoefs</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearSolverStrategy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>NonlinearSolverStrategy_8C</filename>
    <includes id="NonlinearSolverStrategy_8h" name="NonlinearSolverStrategy.h" local="yes" imported="no">SAMRAI/solv/NonlinearSolverStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearSolverStrategy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>NonlinearSolverStrategy_8h</filename>
    <includes id="SAMRAIVectorReal_8h" name="SAMRAIVectorReal.h" local="yes" imported="no">SAMRAI/solv/SAMRAIVectorReal.h</includes>
    <class kind="class">SAMRAI::solv::NonlinearSolverStrategy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>nvector.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>nvector_8h</filename>
    <includes id="solv__NVector_8h" name="solv_NVector.h" local="yes" imported="no">SAMRAI/solv/solv_NVector.h</includes>
  </compound>
  <compound kind="file">
    <name>PETSc_SAMRAIVectorReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>PETSc__SAMRAIVectorReal_8C</filename>
    <includes id="PETSc__SAMRAIVectorReal_8h" name="PETSc_SAMRAIVectorReal.h" local="yes" imported="no">SAMRAI/solv/PETSc_SAMRAIVectorReal.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="IOStream_8h" name="IOStream.h" local="yes" imported="no">SAMRAI/tbox/IOStream.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="define">
      <type>#define</type>
      <name>C_PSVEC_CAST</name>
      <anchorfile>PETSc__SAMRAIVectorReal_8C.html</anchorfile>
      <anchor>a86f00c14fb40a275f69b98dfb592775d</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PETSc_SAMRAIVectorReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>PETSc__SAMRAIVectorReal_8h</filename>
    <includes id="PETScAbstractVectorReal_8h" name="PETScAbstractVectorReal.h" local="yes" imported="no">SAMRAI/solv/PETScAbstractVectorReal.h</includes>
    <includes id="SAMRAIVectorReal_8h" name="SAMRAIVectorReal.h" local="yes" imported="no">SAMRAI/solv/SAMRAIVectorReal.h</includes>
    <includes id="PETSc__SAMRAIVectorReal_8C" name="PETSc_SAMRAIVectorReal.C" local="yes" imported="no">SAMRAI/solv/PETSc_SAMRAIVectorReal.C</includes>
    <class kind="class">SAMRAI::solv::PETSc_SAMRAIVectorReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>PETScAbstractVectorReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>PETScAbstractVectorReal_8C</filename>
    <includes id="PETScAbstractVectorReal_8h" name="PETScAbstractVectorReal.h" local="yes" imported="no">SAMRAI/solv/PETScAbstractVectorReal.h</includes>
    <includes id="IOStream_8h" name="IOStream.h" local="yes" imported="no">SAMRAI/tbox/IOStream.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PABSVEC_CAST</name>
      <anchorfile>PETScAbstractVectorReal_8C.html</anchorfile>
      <anchor>ade57c6c603abb309848530cbce5e15c6</anchor>
      <arglist>(v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PETScAbstractVectorReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>PETScAbstractVectorReal_8h</filename>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="PETScAbstractVectorReal_8C" name="PETScAbstractVectorReal.C" local="yes" imported="no">SAMRAI/solv/PETScAbstractVectorReal.C</includes>
    <class kind="class">SAMRAI::solv::PETScAbstractVectorReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>PoissonSpecifications.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>PoissonSpecifications_8C</filename>
    <includes id="PoissonSpecifications_8h" name="PoissonSpecifications.h" local="yes" imported="no">SAMRAI/solv/PoissonSpecifications.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>PoissonSpecifications.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>PoissonSpecifications_8h</filename>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::solv::PoissonSpecifications</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>RobinBcCoefStrategy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>RobinBcCoefStrategy_8C</filename>
    <includes id="RobinBcCoefStrategy_8h" name="RobinBcCoefStrategy.h" local="yes" imported="no">SAMRAI/solv/RobinBcCoefStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>RobinBcCoefStrategy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>RobinBcCoefStrategy_8h</filename>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">SAMRAI/hier/BoundaryBox.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::solv::RobinBcCoefStrategy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>SAMRAIVectorReal.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>SAMRAIVectorReal_8C</filename>
    <includes id="SAMRAIVectorReal_8h" name="SAMRAIVectorReal.h" local="yes" imported="no">SAMRAI/solv/SAMRAIVectorReal.h</includes>
    <includes id="HierarchyCellDataOpsReal_8h" name="HierarchyCellDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyCellDataOpsReal.h</includes>
    <includes id="HierarchyEdgeDataOpsReal_8h" name="HierarchyEdgeDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyEdgeDataOpsReal.h</includes>
    <includes id="HierarchyFaceDataOpsReal_8h" name="HierarchyFaceDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyFaceDataOpsReal.h</includes>
    <includes id="HierarchyNodeDataOpsReal_8h" name="HierarchyNodeDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyNodeDataOpsReal.h</includes>
    <includes id="HierarchySideDataOpsReal_8h" name="HierarchySideDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchySideDataOpsReal.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">SAMRAI/pdat/CellVariable.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">SAMRAI/pdat/EdgeVariable.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">SAMRAI/pdat/FaceVariable.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">SAMRAI/pdat/NodeVariable.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SAMRAI/pdat/SideVariable.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>SAMRAIVectorReal.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>SAMRAIVectorReal_8h</filename>
    <includes id="HierarchyDataOpsReal_8h" name="HierarchyDataOpsReal.h" local="yes" imported="no">SAMRAI/math/HierarchyDataOpsReal.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">SAMRAI/hier/Variable.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="SAMRAIVectorReal_8C" name="SAMRAIVectorReal.C" local="yes" imported="no">SAMRAI/solv/SAMRAIVectorReal.C</includes>
    <class kind="class">SAMRAI::solv::SAMRAIVectorReal</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleCellRobinBcCoefs.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>SimpleCellRobinBcCoefs_8C</filename>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">SAMRAI/geom/CartesianPatchGeometry.h</includes>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">SAMRAI/math/ArrayDataBasicOps.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">SAMRAI/pdat/CellData.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">SAMRAI/pdat/OuterfaceData.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SAMRAI/pdat/SideData.h</includes>
    <includes id="SimpleCellRobinBcCoefs_8h" name="SimpleCellRobinBcCoefs.h" local="yes" imported="no">SAMRAI/solv/SimpleCellRobinBcCoefs.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleCellRobinBcCoefs.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>SimpleCellRobinBcCoefs_8h</filename>
    <includes id="RobinBcCoefStrategy_8h" name="RobinBcCoefStrategy.h" local="yes" imported="no">SAMRAI/solv/RobinBcCoefStrategy.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">SAMRAI/pdat/ArrayData.h</includes>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">SAMRAI/hier/BoundaryBox.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::solv::SimpleCellRobinBcCoefs</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>SNES_SAMRAIContext.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>SNES__SAMRAIContext_8C</filename>
    <includes id="SNES__SAMRAIContext_8h" name="SNES_SAMRAIContext.h" local="yes" imported="no">SAMRAI/solv/SNES_SAMRAIContext.h</includes>
    <includes id="PETSc__SAMRAIVectorReal_8h" name="PETSc_SAMRAIVectorReal.h" local="yes" imported="no">SAMRAI/solv/PETSc_SAMRAIVectorReal.h</includes>
    <includes id="SAMRAIVectorReal_8h" name="SAMRAIVectorReal.h" local="yes" imported="no">SAMRAI/solv/SAMRAIVectorReal.h</includes>
    <includes id="RestartManager_8h" name="RestartManager.h" local="yes" imported="no">SAMRAI/tbox/RestartManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>SNES_SAMRAIContext.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>SNES__SAMRAIContext_8h</filename>
    <includes id="NonlinearSolverStrategy_8h" name="NonlinearSolverStrategy.h" local="yes" imported="no">SAMRAI/solv/NonlinearSolverStrategy.h</includes>
    <includes id="SNESAbstractFunctions_8h" name="SNESAbstractFunctions.h" local="yes" imported="no">SAMRAI/solv/SNESAbstractFunctions.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Serializable_8h" name="Serializable.h" local="yes" imported="no">SAMRAI/tbox/Serializable.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::solv::SNES_SAMRAIContext</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>SNESAbstractFunctions.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>SNESAbstractFunctions_8C</filename>
    <includes id="SNESAbstractFunctions_8h" name="SNESAbstractFunctions.h" local="yes" imported="no">SAMRAI/solv/SNESAbstractFunctions.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>SNESAbstractFunctions.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>SNESAbstractFunctions_8h</filename>
    <class kind="class">SAMRAI::solv::SNESAbstractFunctions</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>solv_NVector.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>solv__NVector_8C</filename>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="solv__NVector_8h" name="solv_NVector.h" local="yes" imported="no">SAMRAI/solv/solv_NVector.h</includes>
    <includes id="SundialsAbstractVector_8h" name="SundialsAbstractVector.h" local="yes" imported="no">SAMRAI/solv/SundialsAbstractVector.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>SABSVEC_CAST</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>ad5d8128cf8f1eb372d5f4e5288822521</anchor>
      <arglist>(v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VPrint_SAMRAI</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a0c59ff774da547e5a08dfb813abb2c88</anchor>
      <arglist>(N_Vector v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>solv_NVector.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>solv__NVector_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>N_VPrint_SAMRAI</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a0c59ff774da547e5a08dfb813abb2c88</anchor>
      <arglist>(N_Vector v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sundials_SAMRAIVector.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>Sundials__SAMRAIVector_8C</filename>
    <includes id="Sundials__SAMRAIVector_8h" name="Sundials_SAMRAIVector.h" local="yes" imported="no">SAMRAI/solv/Sundials_SAMRAIVector.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SKVEC_CAST</name>
      <anchorfile>Sundials__SAMRAIVector_8C.html</anchorfile>
      <anchor>ac397a857ff737f614f49b2d3ed1a896a</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sundials_SAMRAIVector.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>Sundials__SAMRAIVector_8h</filename>
    <includes id="SundialsAbstractVector_8h" name="SundialsAbstractVector.h" local="yes" imported="no">SAMRAI/solv/SundialsAbstractVector.h</includes>
    <includes id="SAMRAIVectorReal_8h" name="SAMRAIVectorReal.h" local="yes" imported="no">SAMRAI/solv/SAMRAIVectorReal.h</includes>
    <class kind="class">SAMRAI::solv::Sundials_SAMRAIVector</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>SundialsAbstractVector.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>SundialsAbstractVector_8C</filename>
    <includes id="SundialsAbstractVector_8h" name="SundialsAbstractVector.h" local="yes" imported="no">SAMRAI/solv/SundialsAbstractVector.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>SundialsAbstractVector.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/</path>
    <filename>SundialsAbstractVector_8h</filename>
    <class kind="class">SAMRAI::solv::SundialsAbstractVector</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SABSVEC_CAST</name>
      <anchorfile>SundialsAbstractVector_8h.html</anchorfile>
      <anchor>ad5d8128cf8f1eb372d5f4e5288822521</anchor>
      <arglist>(v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Array.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Array_8C</filename>
    <includes id="Array_8h" name="Array.h" local="yes" imported="no">SAMRAI/tbox/Array.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Array.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Array_8h</filename>
    <includes id="ReferenceCounter_8h" name="ReferenceCounter.h" local="yes" imported="no">SAMRAI/tbox/ReferenceCounter.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="Array_8C" name="Array.C" local="yes" imported="no">SAMRAI/tbox/Array.C</includes>
    <class kind="class">SAMRAI::tbox::Array</class>
    <class kind="class">SAMRAI::tbox::Array::DoNotInitialize</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>ArraySpecial.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>ArraySpecial_8C</filename>
    <includes id="Array_8h" name="Array.h" local="yes" imported="no">SAMRAI/tbox/Array.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>AsyncCommGroup.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>AsyncCommGroup_8C</filename>
    <includes id="AsyncCommGroup_8h" name="AsyncCommGroup.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommGroup.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>AsyncCommGroup.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>AsyncCommGroup_8h</filename>
    <includes id="AsyncCommStage_8h" name="AsyncCommStage.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommStage.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <class kind="class">SAMRAI::tbox::AsyncCommGroup</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>AsyncCommPeer.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>AsyncCommPeer_8C</filename>
    <includes id="AsyncCommPeer_8h" name="AsyncCommPeer.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommPeer.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>AsyncCommPeer.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>AsyncCommPeer_8h</filename>
    <includes id="AsyncCommStage_8h" name="AsyncCommStage.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommStage.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="AsyncCommPeer_8C" name="AsyncCommPeer.C" local="yes" imported="no">SAMRAI/tbox/AsyncCommPeer.C</includes>
    <class kind="class">SAMRAI::tbox::AsyncCommPeer</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>AsyncCommStage.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>AsyncCommStage_8C</filename>
    <includes id="AsyncCommStage_8h" name="AsyncCommStage.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommStage.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>AsyncCommStage.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>AsyncCommStage_8h</filename>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <class kind="class">SAMRAI::tbox::AsyncCommStage</class>
    <class kind="struct">SAMRAI::tbox::AsyncCommStage::Handler</class>
    <class kind="struct">SAMRAI::tbox::AsyncCommStage::Member</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>BalancedDepthFirstTree.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>BalancedDepthFirstTree_8C</filename>
    <includes id="BalancedDepthFirstTree_8h" name="BalancedDepthFirstTree.h" local="yes" imported="no">SAMRAI/tbox/BalancedDepthFirstTree.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>BalancedDepthFirstTree.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>BalancedDepthFirstTree_8h</filename>
    <includes id="RankTreeStrategy_8h" name="RankTreeStrategy.h" local="yes" imported="no">SAMRAI/tbox/RankTreeStrategy.h</includes>
    <class kind="class">SAMRAI::tbox::BalancedDepthFirstTree</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Boost.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Boost_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>BEGIN_BOOST_WARNING_SUPPRESSION</name>
      <anchorfile>Boost_8h.html</anchorfile>
      <anchor>aa19d68dc42f96dc286b26624f326b86d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>END_BOOST_WARNING_SUPPRESSION</name>
      <anchorfile>Boost_8h.html</anchorfile>
      <anchor>a2508b339eb3892bb6560c987fd86ad34</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BreadthFirstRankTree.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>BreadthFirstRankTree_8C</filename>
    <includes id="BreadthFirstRankTree_8h" name="BreadthFirstRankTree.h" local="yes" imported="no">SAMRAI/tbox/BreadthFirstRankTree.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>BreadthFirstRankTree.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>BreadthFirstRankTree_8h</filename>
    <includes id="RankTreeStrategy_8h" name="RankTreeStrategy.h" local="yes" imported="no">SAMRAI/tbox/RankTreeStrategy.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::tbox::BreadthFirstRankTree</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>CenteredRankTree.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>CenteredRankTree_8C</filename>
    <includes id="CenteredRankTree_8h" name="CenteredRankTree.h" local="yes" imported="no">SAMRAI/tbox/CenteredRankTree.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>CenteredRankTree.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>CenteredRankTree_8h</filename>
    <includes id="RankTreeStrategy_8h" name="RankTreeStrategy.h" local="yes" imported="no">SAMRAI/tbox/RankTreeStrategy.h</includes>
    <class kind="class">SAMRAI::tbox::CenteredRankTree</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Clock.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Clock_8C</filename>
    <includes id="Clock_8h" name="Clock.h" local="yes" imported="no">SAMRAI/tbox/Clock.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Clock.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Clock_8h</filename>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <class kind="struct">SAMRAI::tbox::Clock</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>CommGraphWriter.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>CommGraphWriter_8C</filename>
    <includes id="CommGraphWriter_8h" name="CommGraphWriter.h" local="yes" imported="no">SAMRAI/tbox/CommGraphWriter.h</includes>
    <includes id="MessageStream_8h" name="MessageStream.h" local="yes" imported="no">SAMRAI/tbox/MessageStream.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>CommGraphWriter.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>CommGraphWriter_8h</filename>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <class kind="class">SAMRAI::tbox::CommGraphWriter</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Complex.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Complex_8h</filename>
    <member kind="typedef">
      <type>std::complex&lt; double &gt;</type>
      <name>dcomplex</name>
      <anchorfile>Complex_8h.html</anchorfile>
      <anchor>aa7b4cfa83fe868296abd1ba4d67d9563</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Database.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Database_8C</filename>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Database.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Database_8h</filename>
    <includes id="DatabaseBox_8h" name="DatabaseBox.h" local="yes" imported="no">SAMRAI/tbox/DatabaseBox.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::tbox::Database</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>INPUT_RANGE_ERROR</name>
      <anchorfile>Database_8h.html</anchorfile>
      <anchor>a3e1e2e6bab37c3011338ac498627aa7f</anchor>
      <arglist>(param_name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INPUT_VALUE_ERROR</name>
      <anchorfile>Database_8h.html</anchorfile>
      <anchor>a3af3f22cfa2fb9ec52083ca9147a04a8</anchor>
      <arglist>(param_name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DatabaseBox.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>DatabaseBox_8C</filename>
    <includes id="DatabaseBox_8h" name="DatabaseBox.h" local="yes" imported="no">SAMRAI/tbox/DatabaseBox.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>DatabaseBox.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>DatabaseBox_8h</filename>
    <includes id="Dimension_8h" name="Dimension.h" local="yes" imported="no">SAMRAI/tbox/Dimension.h</includes>
    <class kind="struct">SAMRAI::tbox::DatabaseBox_POD</class>
    <class kind="class">SAMRAI::tbox::DatabaseBox</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>DatabaseFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>DatabaseFactory_8C</filename>
    <includes id="DatabaseFactory_8h" name="DatabaseFactory.h" local="yes" imported="no">SAMRAI/tbox/DatabaseFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>DatabaseFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>DatabaseFactory_8h</filename>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <class kind="class">SAMRAI::tbox::DatabaseFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Dimension.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Dimension_8C</filename>
    <includes id="Dimension_8h" name="Dimension.h" local="yes" imported="no">SAMRAI/tbox/Dimension.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>afb643ccf275c7f30adceb8eb78b4159a</anchor>
      <arglist>(std::ostream &amp;s, const Dimension &amp;dim)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Dimension.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Dimension_8h</filename>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::tbox::Dimension</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/dox/</path>
    <filename>tbox_2dox_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/hier/dox/</path>
    <filename>hier_2dox_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/dox/</path>
    <filename>xfer_2dox_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>pdat_2dox_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/math/dox/</path>
    <filename>math_2dox_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/mesh/dox/</path>
    <filename>mesh_2dox_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/geom/dox/</path>
    <filename>geom_2dox_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/solv/dox/</path>
    <filename>solv_2dox_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/algs/dox/</path>
    <filename>algs_2dox_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/appu/dox/</path>
    <filename>appu_2dox_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>manual_base.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/dox/</path>
    <filename>manual__base_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>manual_database.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/dox/</path>
    <filename>manual__database_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>manual_inputdb.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/dox/</path>
    <filename>manual__inputdb_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>manual_memory.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/dox/</path>
    <filename>manual__memory_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>manual_parallel.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/dox/</path>
    <filename>manual__parallel_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>manual_restartdb.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/dox/</path>
    <filename>manual__restartdb_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>manual_stream.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/dox/</path>
    <filename>manual__stream_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>manual_timers.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/dox/</path>
    <filename>manual__timers_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Grammar.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Grammar_8C</filename>
    <includes id="Dimension_8h" name="Dimension.h" local="yes" imported="no">SAMRAI/tbox/Dimension.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Parser_8h" name="Parser.h" local="yes" imported="no">SAMRAI/tbox/Parser.h</includes>
    <class kind="struct">KeyData</class>
    <class kind="union">YYSTYPE</class>
    <class kind="union">yyalloc</class>
    <class kind="struct">arith_functions</class>
    <member kind="define">
      <type>#define</type>
      <name>YYBISON</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a9f092f5b1dca6a6249fb2c7c8065b031</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYBISON_VERSION</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a72ebd0ca5807efcc6a5ae4fb72dd1553</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSKELETON_NAME</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a50db5aef8c2b6f13961b2480b37f84c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYPURE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a9fa797a1f3c4fc9b12d1e4d569612767</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYLSP_NEEDED</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>abb3943553c2b5e911c89a3ea973d3079</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_AND</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ada3508d0d5e70b42b104a1e87d160a9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_ASSIGN</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>abb2ddc60c9de325340ae9a0e9338891c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_CHAR</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ae2381f297a8fbb736886d7d1b6b99b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_CLOSE_CURLY</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>aff53a47def3d299036bf7c298a490319</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_CLOSE_PAREN</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>acff7732b9de8b36f0278ef4443978ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_CLOSE_SQBKT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a0ef72076529a92a3b8e52fe5691e5342</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_COMMA</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>aaac9d99da0dc59197cb3f5e807a72a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_DIV</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a40dc75ac1d597229f4006df0211939ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_DOUBLE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a6e80924a839d0f80571bcd1d2b6ec084</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_ELSE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>aa12b64ad6852b23d9e8f7114bfdedfd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_EXP</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a458c449b08071991777e2ebc32aa8e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_EQUALS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>aa152633a83da426890c801b9930f650f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_GREATER_EQUALS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>aa313da8c1710b9cd86958cf278f3aef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_GREATER</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>af8ad113d0ebd559f591b7ab51cc1129a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_LESS_EQUALS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>aa0a59f4b5b2a13f13b90fa02a5b976ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_LESS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a820771e8572738c211732191bbfe0ba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_FALSE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a9ab816c37c9173898ff256b7be9e5ea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_INTEGER</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>afb71b00ae386dca61ecd09449a2eb956</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_KEYWORD</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>af462c7f74238450849431c331b86c9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_MINUS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>aab33ab20ff3b4b8354b8fc1b47a62281</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_MULT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a4d3b3f1c8d8fcc398f4dc6d7c8f5a768</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_NOT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a825c91d636ba331c98c75e70b46afbfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_NOT_EQUALS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ae1db4b46669881c57ec6724b6fd07998</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_OR</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a1162c0bf589783d36a671d3661126866</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_OPEN_CURLY</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>aec6bdfbf228f69fccc89f852678c1658</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_OPEN_PAREN</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a38fe42a8c140ee84aa4ec588b1265b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_OPEN_SQBKT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a6680e52a42683ab01870e08cb7971be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_PLUS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>aa0d70e9d37b4ca5f1421881aa584532e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_QUESTION</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ae29fad487492f03d459bc7cefe42842f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_SEMI</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ad4ca6422034cf5300fdd69f9ab083f01</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_STRING</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a22a8c2a4bbaae9b68f65c9bb92fd4e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_TRUE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a7fc7e09f45d0ef129ea29f3a5b0c32b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_NEGATION</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a80ee9e1cd12528def1f8023267e12f37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_COMPLEX</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a985d2a9dc008e38fc9c12622e13b1b12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_DOUBLE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a34caf7e733629ffc4484bbdd01cf49e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_INTEGER</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>abdbe3c09620c56673436429fb9540c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_BOOL</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a196e697a314e99a9b94e56bc35827ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_BOX</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a91523f7eabb45afa6579f4db1bde990a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_CHAR</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a26496b8c5fa1f306dcd3601b2e3e6f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_STRING</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>abb4c27eef3b9a087d8276ad8181e6107</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_NUMBER</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ac0564a1e18a3f7dd267e6f0aec7ee94e</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROMOTE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>aa234face701de16fd7530b6a52954c77</anchor>
      <arglist>(X, Y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYDEBUG</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a853b3bfad6d2b2ff693dce81182e0c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYERROR_VERBOSE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a0943f558a560b9b5fa0593d7e36496c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYTOKEN_TABLE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a3499e31aa832edc82b632ae811286a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yystype</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a4ccf5315e8f5c1cec48ec67ca1771e3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTYPE_IS_DECLARED</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>af0232d21120b2cfc5e5f82f0fbadab3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTYPE_IS_TRIVIAL</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a2e3dbf169c5ee24cf6af37c61cf3995d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSIZE_T</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a7d535939e93253736c6eeda569d24de5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSIZE_MAXIMUM</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ab4bb7ad82d4a7e2df49ff6a8fb484109</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a86f079016f11f0600f4259f3f03f8d43</anchor>
      <arglist>(msgid)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYUSE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ad7d1ef1bbc6adfe69894bc8221f557e1</anchor>
      <arglist>(e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYID</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a0a6ff515042340dd341cf6ca8dd05f2d</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTACK_ALLOC</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>af45042ce56e04d634420d76caeb2ee73</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTACK_FREE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a1a9dc526fd390d4808252bd631c4c2f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTACK_ALLOC_MAXIMUM</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a7e55d995c7458f2f4af94a426d0adde8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYMALLOC</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a573b05852d8f080c907dfba725773d7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYFREE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ac8adfd73c006c1926f387feb1eced3ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTACK_GAP_MAXIMUM</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>afcd15dd0fa87ffba0371c6d6a0cc9631</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTACK_BYTES</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a40beb355f2cf230a99e2e2bb54909a5a</anchor>
      <arglist>(N)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYCOPY</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ad6586b145b5cddce4eec46f35d59b1dd</anchor>
      <arglist>(To, From, Count)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTACK_RELOCATE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ac70c64089ec70937293b65ddbd083412</anchor>
      <arglist>(Stack)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYFINAL</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a6419f3fd69ecb6b7e063410fd4e73b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYLAST</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ae67923760a28e3b7ed3aa2cfaef7f9a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYNTOKENS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a75d260730a6c379a94ea28f63a7b9275</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYNNTS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>af54ae9e588f0ecc32eabbfdf1959df10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYNRULES</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>aceaba8997dc3867478ae3b816647eb7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYNSTATES</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a2c387ba2caaade8bf8f78ed30023f79f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYUNDEFTOK</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a926181abd06b6d1df27b6133971c24ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYMAXUTOK</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>af3f5ed4bc4517eff0ef1b17541192a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYTRANSLATE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>aad19ee88e33c02c4e720b28f78249bd7</anchor>
      <arglist>(YYX)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYPACT_NINF</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a62bf0ed0c4360b077071b5cf3177823b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYTABLE_NINF</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a504faa93b92f37fcc147f68e8d111a1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yyerrok</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a20bf055e53dc4fd5afddfd752a4d1adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yyclearin</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a5035d59933b3f5388c44f596145db047</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYEMPTY</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ae59196b3765411a06cf234cf9bcae2e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYEOF</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a3b1e3628411fabac03abe0a337322016</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYACCEPT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>aa6c7a65b580c214b2ea832fd7bdd472e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYABORT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a3bcde0b05b9aa4ec5169092d9d211dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYERROR</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>af1eef6197be78122699013d0784acc80</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYFAIL</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a383d9671b1abd97e4c6f3708d1ca32f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYRECOVERING</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ad860e18ca4b79fc589895b531bdb7948</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYBACKUP</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>adfcaf974b837e3efc130377e9837b4fd</anchor>
      <arglist>(Token, Value)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYTERROR</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ad2b58b1851184ddb3b60fede50bc7946</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYERRCODE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a552f295255821fa7dea11b0237e1d61a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYRHSLOC</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ab2b4f027a2b092ac14ca4464e7b3db60</anchor>
      <arglist>(Rhs, K)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYLLOC_DEFAULT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a485d38f93de30679900c9cad6e7f3446</anchor>
      <arglist>(Current, Rhs, N)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_LOCATION_PRINT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a52c7d936ca7e6c34687ff71f29b8cfd1</anchor>
      <arglist>(File, Loc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYLEX</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a0ea34e09602d1ede033f16ba669ef24b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYDPRINTF</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>af6d6ca80e87922f90264f1a4a802ea04</anchor>
      <arglist>(Args)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_SYMBOL_PRINT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a1c510d33cb388afc9411141ba3076a36</anchor>
      <arglist>(Title, Type, Value, Location)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_STACK_PRINT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a7a52157fbe194e3a347afc4ef750af77</anchor>
      <arglist>(Bottom, Top)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_REDUCE_PRINT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a49ad456240785266cadae498ddae9310</anchor>
      <arglist>(Rule)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYINITDEPTH</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>aeb1508a3a38ec5d64c27e8eca25330b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYMAXDEPTH</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a14ba2b263c446ffed1c888c4b42ae40c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYPOPSTACK</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ad2f9773cd9c031026b2ef4c1ee7be1be</anchor>
      <arglist>(N)</arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>yytype_uint8</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a79c09f9dcfd0f7a32f598ea3910d2206</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short int</type>
      <name>yytype_int8</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>afd56a33ef7e59189deccc83706e0becd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short int</type>
      <name>yytype_uint16</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a00c27c9da5ed06a830b216c8934e6b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short int</type>
      <name>yytype_int16</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ade5b97f0021a4f6c5922ead3744ab297</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>yytokentype</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_AND</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a09d3f67b151bc1e002a78de682fc1c8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_ASSIGN</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9abfcd8d771490f5e44b29e69cad5bf720</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_CHAR</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9afc1d9070a444ece92960119b8b6d71b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_CLOSE_CURLY</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9aae42e05cc414a81f9fd58e0073bcc16f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_CLOSE_PAREN</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a15655ee10cce71e52f4e9956352d6c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_CLOSE_SQBKT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a5da03dfd6a47ef2423f51f3b3839fd2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_COMMA</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9ae201ec41e309242dd482980cbf20fec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_DIV</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a4258358e78b8a083e17005efb73eac6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_DOUBLE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a875b555dccbb4f76c01f6d3b64cb23be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_ELSE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9aa3624108e89b325c2bc7b7fe968182b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_EXP</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a13decc3b00e3d8934a1a693f14f602e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_EQUALS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a15032d2373f146d828e947ff20dd7768</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_GREATER_EQUALS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9aa9c37344dac6ebefdebcc3be18a9165d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_GREATER</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9aae7d1ee5ed71c400ba55db04f16437a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_LESS_EQUALS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a485e7c46b63de949ebb3b0afa52342cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_LESS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9ada95264d25249b2a3d495210ba0914bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_FALSE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9ad04c6fedfc6e82b9cd961d926579f541</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_INTEGER</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a9e4181ad64c506080e27af1e0e2fff4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_KEYWORD</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9ab9eea88fa355999ea4acf5ac43e6622f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_MINUS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9aeabbf9419f82ec47ab35d6931784dfb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_MULT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a6f79423aaab078cd239e0992f2975c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_NOT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a36d22df926b610573f0870bcb5c896f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_NOT_EQUALS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9ab213f08b61c46b1e0e78356df9ee40ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_OR</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9aee13d53546c9358e6b15a455f1c81fb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_OPEN_CURLY</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a6878ebedeefce3e087cd34942990cef1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_OPEN_PAREN</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9aba8fffd66e7fec5a70b8cec38866b04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_OPEN_SQBKT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a627d888495b0154c3a309808f31a6d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_PLUS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9ad7d408f184b5312670748bbddf0077d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_QUESTION</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a14f7637fe9e94058ac70ab4f86fde81b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_SEMI</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a346b418eb2ed484e5f3216b78ee00f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_STRING</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a2b93aac4bda1ecc9cd242c671411c323</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_TRUE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a66901c4f0f0cf6cd9002834b1f8f2075</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_NEGATION</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9adcfa670a201b661c3c1f1059bd02075b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>yylex</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>aa40b27ae32d6d1ae7160bd6256e08eb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yyerror</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a663a59e97b2c3a56ab8ddcb47f665fc1</anchor>
      <arglist>(const char *const error)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>delete_list</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a575a314ea91d34b6499d5b37be60fc2e</anchor>
      <arglist>(KeyData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>to_boolean</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a96c9928e36af5e776dbc770b0373e7a8</anchor>
      <arglist>(KeyData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>to_integer</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a41e948b6c81c6a3bfd70d455f1fa29b2</anchor>
      <arglist>(KeyData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>to_double</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>aa6d2f8f4cbf1a26a07057928d50a3202</anchor>
      <arglist>(KeyData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>to_complex</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ad7c9898272316ba1cfac1b4939abe8bf</anchor>
      <arglist>(KeyData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KeyData *</type>
      <name>binary_op</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>affdc2a6c9359fee8c11bb46410943782</anchor>
      <arglist>(KeyData *, KeyData *, const int)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KeyData *</type>
      <name>compare_op</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a86bde7d8053c5d601a362ab6c4586a0d</anchor>
      <arglist>(KeyData *, KeyData *, const int)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KeyData *</type>
      <name>eval_function</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>aadbb83c5e0b8fe67e4f4bfda4cd0c3f6</anchor>
      <arglist>(KeyData *, const string &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KeyData *</type>
      <name>lookup_variable</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a32e623451d48f2d6e78e4e12fdccb383</anchor>
      <arglist>(const string &amp;, const size_t, const bool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>yydestruct</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ad9dfa6a565300b75edd5ca82923074e3</anchor>
      <arglist>(char *yymsg, int yytype, YYSTYPE *yyvaluep) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>yyparse</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>acd8617a8f2ac0de8bc1cc032cf449e19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>imag_thunk</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a5fbd54b1351382d7d1e4dc1c861f52bf</anchor>
      <arglist>(const dcomplex &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>real_thunk</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a583f3d9aa47b52600dfcb29e35a3d87c</anchor>
      <arglist>(const dcomplex &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parser_static_table_initialize</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a1576ce3f1b6bcb2560ef529bc6fd1517</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static string</type>
      <name>type_names</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a4276f2e30cc6003935a3280663c28f86</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const yytype_uint8</type>
      <name>yytranslate</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a384fb3797a340a5415c03719ebab9c67</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const yytype_uint8</type>
      <name>yyr1</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a0c34e3be3d497abf630697f406f3cc62</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const yytype_uint8</type>
      <name>yyr2</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>aa6be1bc256e649b3e922410e291bc7a5</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const yytype_uint8</type>
      <name>yydefact</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>af80f4a4ea9a69eb19837849cc7083c77</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const yytype_int8</type>
      <name>yydefgoto</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>add50b39c93bd000e59c735788074a427</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const yytype_int16</type>
      <name>yypact</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a52c12de9f634391f03b1680c3b680852</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const yytype_int8</type>
      <name>yypgoto</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>abb1d1e685ef953f65410be5d32544cfe</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const yytype_uint8</type>
      <name>yytable</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>aebb94255a7d4c72e6f9eea0a8e755c56</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const yytype_int8</type>
      <name>yycheck</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a40faef92d80fc0e07e3d399311c5ec88</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const yytype_uint8</type>
      <name>yystos</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>abc7e1225b6a8ee7619f19504cbefd97b</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>SAMRAI_yychar</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>aa95851a331618e1e82f24d4d61041698</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>YYSTYPE</type>
      <name>SAMRAI_yylval</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ae7cedc42c3f9812176a9a1622130e5f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>SAMRAI_yynerrs</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a1e5948201c1c631c3755430a07ac0813</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static arith_functions</type>
      <name>af</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>ae5a501b8d1cc2face582eb4cadf196ee</anchor>
      <arglist>[20]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Grammar.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Grammar_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>T_AND</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>ada3508d0d5e70b42b104a1e87d160a9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_ASSIGN</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>abb2ddc60c9de325340ae9a0e9338891c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_CHAR</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>ae2381f297a8fbb736886d7d1b6b99b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_CLOSE_CURLY</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>aff53a47def3d299036bf7c298a490319</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_CLOSE_PAREN</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>acff7732b9de8b36f0278ef4443978ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_CLOSE_SQBKT</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a0ef72076529a92a3b8e52fe5691e5342</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_COMMA</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>aaac9d99da0dc59197cb3f5e807a72a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_DIV</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a40dc75ac1d597229f4006df0211939ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_DOUBLE</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a6e80924a839d0f80571bcd1d2b6ec084</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_ELSE</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>aa12b64ad6852b23d9e8f7114bfdedfd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_EXP</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a458c449b08071991777e2ebc32aa8e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_EQUALS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>aa152633a83da426890c801b9930f650f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_GREATER_EQUALS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>aa313da8c1710b9cd86958cf278f3aef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_GREATER</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>af8ad113d0ebd559f591b7ab51cc1129a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_LESS_EQUALS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>aa0a59f4b5b2a13f13b90fa02a5b976ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_LESS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a820771e8572738c211732191bbfe0ba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_FALSE</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a9ab816c37c9173898ff256b7be9e5ea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_INTEGER</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>afb71b00ae386dca61ecd09449a2eb956</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_KEYWORD</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>af462c7f74238450849431c331b86c9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_MINUS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>aab33ab20ff3b4b8354b8fc1b47a62281</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_MULT</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a4d3b3f1c8d8fcc398f4dc6d7c8f5a768</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_NOT</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a825c91d636ba331c98c75e70b46afbfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_NOT_EQUALS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>ae1db4b46669881c57ec6724b6fd07998</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_OR</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a1162c0bf589783d36a671d3661126866</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_OPEN_CURLY</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>aec6bdfbf228f69fccc89f852678c1658</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_OPEN_PAREN</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a38fe42a8c140ee84aa4ec588b1265b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_OPEN_SQBKT</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a6680e52a42683ab01870e08cb7971be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_PLUS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>aa0d70e9d37b4ca5f1421881aa584532e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_QUESTION</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>ae29fad487492f03d459bc7cefe42842f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_SEMI</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>ad4ca6422034cf5300fdd69f9ab083f01</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_STRING</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a22a8c2a4bbaae9b68f65c9bb92fd4e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_TRUE</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a7fc7e09f45d0ef129ea29f3a5b0c32b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_NEGATION</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a80ee9e1cd12528def1f8023267e12f37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>yytokentype</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_AND</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a09d3f67b151bc1e002a78de682fc1c8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_ASSIGN</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9abfcd8d771490f5e44b29e69cad5bf720</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_CHAR</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9afc1d9070a444ece92960119b8b6d71b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_CLOSE_CURLY</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9aae42e05cc414a81f9fd58e0073bcc16f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_CLOSE_PAREN</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a15655ee10cce71e52f4e9956352d6c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_CLOSE_SQBKT</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a5da03dfd6a47ef2423f51f3b3839fd2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_COMMA</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9ae201ec41e309242dd482980cbf20fec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_DIV</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a4258358e78b8a083e17005efb73eac6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_DOUBLE</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a875b555dccbb4f76c01f6d3b64cb23be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_ELSE</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9aa3624108e89b325c2bc7b7fe968182b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_EXP</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a13decc3b00e3d8934a1a693f14f602e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_EQUALS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a15032d2373f146d828e947ff20dd7768</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_GREATER_EQUALS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9aa9c37344dac6ebefdebcc3be18a9165d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_GREATER</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9aae7d1ee5ed71c400ba55db04f16437a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_LESS_EQUALS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a485e7c46b63de949ebb3b0afa52342cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_LESS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9ada95264d25249b2a3d495210ba0914bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_FALSE</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9ad04c6fedfc6e82b9cd961d926579f541</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_INTEGER</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a9e4181ad64c506080e27af1e0e2fff4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_KEYWORD</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9ab9eea88fa355999ea4acf5ac43e6622f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_MINUS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9aeabbf9419f82ec47ab35d6931784dfb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_MULT</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a6f79423aaab078cd239e0992f2975c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_NOT</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a36d22df926b610573f0870bcb5c896f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_NOT_EQUALS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9ab213f08b61c46b1e0e78356df9ee40ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_OR</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9aee13d53546c9358e6b15a455f1c81fb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_OPEN_CURLY</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a6878ebedeefce3e087cd34942990cef1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_OPEN_PAREN</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9aba8fffd66e7fec5a70b8cec38866b04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_OPEN_SQBKT</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a627d888495b0154c3a309808f31a6d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_PLUS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9ad7d408f184b5312670748bbddf0077d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_QUESTION</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a14f7637fe9e94058ac70ab4f86fde81b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_SEMI</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a346b418eb2ed484e5f3216b78ee00f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_STRING</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a2b93aac4bda1ecc9cd242c671411c323</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_TRUE</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9a66901c4f0f0cf6cd9002834b1f8f2075</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_NEGATION</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15c9f7bd2f0e9686df5d9df4f3314aa9adcfa670a201b661c3c1f1059bd02075b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>YYSTYPE</type>
      <name>SAMRAI_yylval</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>ae7cedc42c3f9812176a9a1622130e5f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HDFDatabase.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>HDFDatabase_8C</filename>
    <includes id="HDFDatabase_8h" name="HDFDatabase.h" local="yes" imported="no">SAMRAI/tbox/HDFDatabase.h</includes>
    <includes id="IOStream_8h" name="IOStream.h" local="yes" imported="no">SAMRAI/tbox/IOStream.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>H5T_SAMRAI_INT</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a2f0b759577fb2146ab3b112227b4de19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>H5T_SAMRAI_FLOAT</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a20560f12b467612c0d23f6487357e519</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>H5T_SAMRAI_DOUBLE</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a8cbd53607fc2626ae57b1f4b954d6d47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>H5T_SAMRAI_BOOL</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a4775d20b8a8d98b89db3dba7928dde94</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>H5T_SAMRAI_ATTR</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a53587a172f6dfa64c7f863d9d1984651</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BEGIN_SUPPRESS_HDF5_WARNINGS</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a1c8cc5c542cbeb35aeac3058a2ed70f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>END_SUPPRESS_HDF5_WARNINGS</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>ac541e4b452ff64cd472a6b96f850a325</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HDFDatabase.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>HDFDatabase_8h</filename>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="DatabaseBox_8h" name="DatabaseBox.h" local="yes" imported="no">SAMRAI/tbox/DatabaseBox.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <class kind="class">SAMRAI::tbox::HDFDatabase</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>HDFDatabaseFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>HDFDatabaseFactory_8C</filename>
    <includes id="HDFDatabaseFactory_8h" name="HDFDatabaseFactory.h" local="yes" imported="no">SAMRAI/tbox/HDFDatabaseFactory.h</includes>
    <includes id="HDFDatabase_8h" name="HDFDatabase.h" local="yes" imported="no">SAMRAI/tbox/HDFDatabase.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>HDFDatabaseFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>HDFDatabaseFactory_8h</filename>
    <includes id="DatabaseFactory_8h" name="DatabaseFactory.h" local="yes" imported="no">SAMRAI/tbox/DatabaseFactory.h</includes>
    <class kind="class">SAMRAI::tbox::HDFDatabaseFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>IEEE.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>IEEE_8C</filename>
    <includes id="IEEE_8h" name="IEEE.h" local="yes" imported="no">SAMRAI/tbox/IEEE.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>IEEE.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>IEEE_8h</filename>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <class kind="struct">SAMRAI::tbox::IEEE</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>InputDatabase.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>InputDatabase_8h</filename>
    <includes id="MemoryDatabase_8h" name="MemoryDatabase.h" local="yes" imported="no">SAMRAI/tbox/MemoryDatabase.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="typedef">
      <type>MemoryDatabase</type>
      <name>InputDatabase</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a33358002f423537245e073cd0790dcb5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InputManager.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>InputManager_8C</filename>
    <includes id="InputManager_8h" name="InputManager.h" local="yes" imported="no">SAMRAI/tbox/InputManager.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="Parser_8h" name="Parser.h" local="yes" imported="no">SAMRAI/tbox/Parser.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>InputManager.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>InputManager_8h</filename>
    <includes id="InputDatabase_8h" name="InputDatabase.h" local="yes" imported="no">SAMRAI/tbox/InputDatabase.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <class kind="class">SAMRAI::tbox::InputManager</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>IOStream.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>IOStream_8h</filename>
  </compound>
  <compound kind="file">
    <name>Logger.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Logger_8C</filename>
    <includes id="Logger_8h" name="Logger.h" local="yes" imported="no">SAMRAI/tbox/Logger.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::tbox::AbortAppender</class>
    <class kind="class">SAMRAI::tbox::WarningAppender</class>
    <class kind="class">SAMRAI::tbox::DebugAppender</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Logger.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Logger_8h</filename>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <class kind="class">SAMRAI::tbox::Logger</class>
    <class kind="class">SAMRAI::tbox::Logger::Appender</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>MathUtilities.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>MathUtilities_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>MathUtilities.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>MathUtilities_8h</filename>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="MathUtilities_8C" name="MathUtilities.C" local="yes" imported="no">SAMRAI/tbox/MathUtilities.C</includes>
    <class kind="class">SAMRAI::tbox::MathUtilities</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>MathUtilitiesSpecial.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>MathUtilitiesSpecial_8C</filename>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="function">
      <type>TYPE</type>
      <name>round_internal</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a8fb80f5f7c49e400c31d0a58f00414fe</anchor>
      <arglist>(TYPE x)</arglist>
    </member>
    <member kind="function">
      <type>template float</type>
      <name>round_internal&lt; float &gt;</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a415e3675aa1cdf8e34bb5d073a78057c</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>template double</type>
      <name>round_internal&lt; double &gt;</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a3b11f55b23390dd0f75956ad05a1e782</anchor>
      <arglist>(double x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MemoryDatabase.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>MemoryDatabase_8C</filename>
    <includes id="MemoryDatabase_8h" name="MemoryDatabase.h" local="yes" imported="no">SAMRAI/tbox/MemoryDatabase.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="IOStream_8h" name="IOStream.h" local="yes" imported="no">SAMRAI/tbox/IOStream.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MEMORY_DB_ERROR</name>
      <anchorfile>MemoryDatabase_8C.html</anchorfile>
      <anchor>a1a5c88c03a09714805ae0ad495af5b17</anchor>
      <arglist>(X)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MemoryDatabase.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>MemoryDatabase_8h</filename>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <class kind="class">SAMRAI::tbox::MemoryDatabase</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>MemoryDatabaseFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>MemoryDatabaseFactory_8C</filename>
    <includes id="MemoryDatabaseFactory_8h" name="MemoryDatabaseFactory.h" local="yes" imported="no">SAMRAI/tbox/MemoryDatabaseFactory.h</includes>
    <includes id="MemoryDatabase_8h" name="MemoryDatabase.h" local="yes" imported="no">SAMRAI/tbox/MemoryDatabase.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>MemoryDatabaseFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>MemoryDatabaseFactory_8h</filename>
    <includes id="DatabaseFactory_8h" name="DatabaseFactory.h" local="yes" imported="no">SAMRAI/tbox/DatabaseFactory.h</includes>
    <class kind="class">SAMRAI::tbox::MemoryDatabaseFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>MemoryUtilities.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>MemoryUtilities_8C</filename>
    <includes id="MemoryUtilities_8h" name="MemoryUtilities.h" local="yes" imported="no">SAMRAI/tbox/MemoryUtilities.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="IOStream_8h" name="IOStream.h" local="yes" imported="no">SAMRAI/tbox/IOStream.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>MemoryUtilities.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>MemoryUtilities_8h</filename>
    <class kind="struct">SAMRAI::tbox::MemoryUtilities</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>MessageStream.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>MessageStream_8C</filename>
    <includes id="MessageStream_8h" name="MessageStream.h" local="yes" imported="no">SAMRAI/tbox/MessageStream.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>MessageStream.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>MessageStream_8h</filename>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::tbox::MessageStream</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>NullDatabase.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>NullDatabase_8C</filename>
    <includes id="NullDatabase_8h" name="NullDatabase.h" local="yes" imported="no">SAMRAI/tbox/NullDatabase.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>NullDatabase.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>NullDatabase_8h</filename>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::tbox::NullDatabase</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>OpenMPUtilities.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>OpenMPUtilities_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_omp_version</name>
      <anchorfile>OpenMPUtilities_8h.html</anchorfile>
      <anchor>a38ee6785069078aef2088aebb89d6178</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_omp_lock_t</name>
      <anchorfile>OpenMPUtilities_8h.html</anchorfile>
      <anchor>a10cc27c3617970eebee152b53720a41b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_omp_init_lock</name>
      <anchorfile>OpenMPUtilities_8h.html</anchorfile>
      <anchor>a076c978a2d92e35353397b280a1515f6</anchor>
      <arglist>(LOCK_PTR)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_omp_destroy_lock</name>
      <anchorfile>OpenMPUtilities_8h.html</anchorfile>
      <anchor>af407664a8f3a73615a4a5385b22a8bd7</anchor>
      <arglist>(LOCK_PTR)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_omp_set_lock</name>
      <anchorfile>OpenMPUtilities_8h.html</anchorfile>
      <anchor>a268926a9f6461c76b8dee995652e0d52</anchor>
      <arglist>(LOCK_PTR)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_omp_unset_lock</name>
      <anchorfile>OpenMPUtilities_8h.html</anchorfile>
      <anchor>ac8779f01afe4c81e3b97f37d23a62179</anchor>
      <arglist>(LOCK_PTR)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_omp_get_num_threads</name>
      <anchorfile>OpenMPUtilities_8h.html</anchorfile>
      <anchor>a503a7366bb8bae1a59b07d88af32ca18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_omp_get_max_threads</name>
      <anchorfile>OpenMPUtilities_8h.html</anchorfile>
      <anchor>af9daf36354b6db1e7914dbcc0c0fe302</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_IF_SINGLE_THREAD</name>
      <anchorfile>OpenMPUtilities_8h.html</anchorfile>
      <anchor>ab003bef0795019265a11091707a7b618</anchor>
      <arglist>(CODE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_IF_MULTI_THREAD</name>
      <anchorfile>OpenMPUtilities_8h.html</anchorfile>
      <anchor>a5e992dba3801a9dee79761945a5efab9</anchor>
      <arglist>(CODE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_IF_IN_PARALLEL_REGION</name>
      <anchorfile>OpenMPUtilities_8h.html</anchorfile>
      <anchor>a48597dd92c13b431cc347ae20064fded</anchor>
      <arglist>(CODE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_IF_NOT_IN_PARALLEL_REGION</name>
      <anchorfile>OpenMPUtilities_8h.html</anchorfile>
      <anchor>a6f41de1e104416b969ad442df70371a4</anchor>
      <arglist>(CODE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_IF_HAVE_OPENMP</name>
      <anchorfile>OpenMPUtilities_8h.html</anchorfile>
      <anchor>aa372c8635d1d8680c8c715e2b40dfc36</anchor>
      <arglist>(CODE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_IF_NOT_HAVE_OPENMP</name>
      <anchorfile>OpenMPUtilities_8h.html</anchorfile>
      <anchor>a220f2a2f102d080af5f0ab315e50bbba</anchor>
      <arglist>(CODE)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParallelBuffer.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>ParallelBuffer_8C</filename>
    <includes id="ParallelBuffer_8h" name="ParallelBuffer.h" local="yes" imported="no">SAMRAI/tbox/ParallelBuffer.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>ParallelBuffer.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>ParallelBuffer_8h</filename>
    <includes id="OpenMPUtilities_8h" name="OpenMPUtilities.h" local="yes" imported="no">SAMRAI/tbox/OpenMPUtilities.h</includes>
    <class kind="class">SAMRAI::tbox::ParallelBuffer</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Parser.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Parser_8C</filename>
    <includes id="Parser_8h" name="Parser.h" local="yes" imported="no">SAMRAI/tbox/Parser.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="function">
      <type>int</type>
      <name>yyparse</name>
      <anchorfile>Parser_8C.html</anchorfile>
      <anchor>acd8617a8f2ac0de8bc1cc032cf449e19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yyrestart</name>
      <anchorfile>Parser_8C.html</anchorfile>
      <anchor>aaefa7be34bfd03cd1e250f9f418b63e9</anchor>
      <arglist>(FILE *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parser_static_table_initialize</name>
      <anchorfile>Parser_8C.html</anchorfile>
      <anchor>a1576ce3f1b6bcb2560ef529bc6fd1517</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Parser.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Parser_8h</filename>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <class kind="class">SAMRAI::tbox::Parser</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>PIO.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>PIO_8C</filename>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <includes id="ParallelBuffer_8h" name="ParallelBuffer.h" local="yes" imported="no">SAMRAI/tbox/ParallelBuffer.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="variable" static="yes">
      <type>static ParallelBuffer</type>
      <name>pout_buffer</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>aaafff0bbde1815d1e4661864aa54c85a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ParallelBuffer</type>
      <name>perr_buffer</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a5ff8d206d2e85ac4f715aa01967fcf42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ParallelBuffer</type>
      <name>plog_buffer</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>ade90ffa35166163af6107adacde08691</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PIO.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>PIO_8h</filename>
    <class kind="struct">SAMRAI::tbox::PIO</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="variable">
      <type>std::ostream</type>
      <name>pout</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a1e98e73dc869d986f7ffe5b295075979</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::ostream</type>
      <name>perr</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>ad72fd66574b63c87061563d2c66b5475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::ostream</type>
      <name>plog</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>ab84041705493761fb17a8127e3a2dca2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RankGroup.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>RankGroup_8C</filename>
    <includes id="RankGroup_8h" name="RankGroup.h" local="yes" imported="no">SAMRAI/tbox/RankGroup.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>RankGroup.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>RankGroup_8h</filename>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <class kind="class">SAMRAI::tbox::RankGroup</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>RankTreeStrategy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>RankTreeStrategy_8C</filename>
    <includes id="RankTreeStrategy_8h" name="RankTreeStrategy.h" local="yes" imported="no">SAMRAI/tbox/RankTreeStrategy.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>RankTreeStrategy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>RankTreeStrategy_8h</filename>
    <includes id="RankGroup_8h" name="RankGroup.h" local="yes" imported="no">SAMRAI/tbox/RankGroup.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::tbox::RankTreeStrategy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>ReferenceCounter.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>ReferenceCounter_8C</filename>
    <includes id="ReferenceCounter_8h" name="ReferenceCounter.h" local="yes" imported="no">SAMRAI/tbox/ReferenceCounter.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>ReferenceCounter.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>ReferenceCounter_8h</filename>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <class kind="class">SAMRAI::tbox::ReferenceCounter</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>RestartManager.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>RestartManager_8C</filename>
    <includes id="RestartManager_8h" name="RestartManager.h" local="yes" imported="no">SAMRAI/tbox/RestartManager.h</includes>
    <includes id="HDFDatabaseFactory_8h" name="HDFDatabaseFactory.h" local="yes" imported="no">SAMRAI/tbox/HDFDatabaseFactory.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <includes id="NullDatabase_8h" name="NullDatabase.h" local="yes" imported="no">SAMRAI/tbox/NullDatabase.h</includes>
    <includes id="Parser_8h" name="Parser.h" local="yes" imported="no">SAMRAI/tbox/Parser.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>RestartManager.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>RestartManager_8h</filename>
    <includes id="Serializable_8h" name="Serializable.h" local="yes" imported="no">SAMRAI/tbox/Serializable.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="DatabaseFactory_8h" name="DatabaseFactory.h" local="yes" imported="no">SAMRAI/tbox/DatabaseFactory.h</includes>
    <class kind="class">SAMRAI::tbox::RestartManager</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>SAMRAI_MPI.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>SAMRAI__MPI_8C</filename>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>SAMRAI_MPI.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>SAMRAI__MPI_8h</filename>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::tbox::SAMRAI_MPI</class>
    <class kind="struct">SAMRAI::tbox::SAMRAI_MPI::Status</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="enumvalue">
      <name>MPI_COMM_WORLD</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7ade04a1c2575b8efe0f8781d3133fd554</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_COMM_NULL</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7ae3b7839245aff85a92cce9a50417ee0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_SUCCESS</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a6c5af30b03ec5456780fa783b9b5f066</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_CONGRUENT</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a5db0a1a50d45cce86d29bd1193f0bb95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_IDENT</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a07b3669a7af447bf105f5f394c7f8b53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_REQUEST_NULL</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7ab5961a66a4018fb30cebc406afd1a4cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_ERR_IN_STATUS</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a3f51891907532ab300331deae0a65bbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_UNDEFINED</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a81fd8fcf04957bebd9bc0d2f78f6999a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_ANY_SOURCE</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a47cc9285198b312ff3fabb173001fc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_ANY_TAG</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a20261417343aeaa812217aec1ca64f38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_BYTE</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a4fef145536d8f981180fea35d649e5aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_CHAR</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7ac0e5bbc531b14be39b0463f167446c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_DOUBLE</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a255b1f27ffa9f4db57f74daea59ff528</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_FLOAT</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a427aafd466b219133f38c7966331096d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_INT</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7acf37d771b9c8f91b5e08b02c53d7fb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_LONG</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a8644718ec54987c2cae69c8198922cdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_C_DOUBLE_COMPLEX</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a4e2f93618cca951ea35ad0e30081a5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_2INT</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7aa9953dfaaa452a773234ae48035ece2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_DOUBLE_INT</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a29ba0591f0615bfb235eb60706027ff1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_FLOAT_INT</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a5bb363dc3e89d8b0f39022697a5c8767</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_MIN</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a21176abb85012eed7cf68c32deaaf90d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_MINLOC</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7aa17e6b6b213dca0febfa5d3b6f5b2e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_MAX</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a19018b14d4414f9923af579ac8290aaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_MAXLOC</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a030f3918338bbb53df4463fb5270b3f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_SUM</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7ae69cbb6ec714f55e3c9129f284ef9d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MPI_TAG_UB</name>
      <anchorfile>SAMRAI__MPI_8h.html</anchorfile>
      <anchor>adf764cbdea00d65edcd07bb9953ad2b7a165389ea39ddc7db26d016fe0c078449</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SAMRAIManager.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>SAMRAIManager_8C</filename>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <includes id="IEEE_8h" name="IEEE.h" local="yes" imported="no">SAMRAI/tbox/IEEE.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>badnew</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a67dea29da08b2f13fceb709a2bc19532</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SAMRAIManager.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>SAMRAIManager_8h</filename>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <class kind="class">SAMRAI::tbox::SAMRAIManager</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Scanner.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Scanner_8C</filename>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="Parser_8h" name="Parser.h" local="yes" imported="no">SAMRAI/tbox/Parser.h</includes>
    <includes id="Grammar_8h" name="Grammar.h" local="yes" imported="no">Grammar.h</includes>
    <class kind="struct">yy_buffer_state</class>
    <member kind="define">
      <type>#define</type>
      <name>FLEX_SCANNER</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a3c3d1ef92e93b0bc81d7760a73d5c3b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_FLEX_MAJOR_VERSION</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a243ca1d30872935faf05ea5118ed6fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_FLEX_MINOR_VERSION</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a90f9d458829400869e47efb68a865677</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yyconst</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>aa2f1a918be586b44bf08126bde2d7cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_PROTO</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ad1c3fde80f461fe055f996f4ec6d4830</anchor>
      <arglist>(proto)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_NULL</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a8e0bcf8f8a5b613ea583347f8bc31cbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_SC_TO_UI</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>af1185350b7a92cf8aa5324c68850c8a6</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BEGIN</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ab766bbbee08d04b67e3fe599d6900873</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_START</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a8e14785f9eab7a997d659b25af9584c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTATE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a32b5b960944f946b192d54f672569cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_STATE_EOF</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ab3077e60914fc54dcc55ecae1ce9700b</anchor>
      <arglist>(state)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_NEW_FILE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a0406739e64fb5750cf995d2ae68ce69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_END_OF_BUFFER_CHAR</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ab866a64da164ed2d4d444df1ef1fc9b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_BUF_SIZE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ae7e51116e747d3390e7a6cfc6532834c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EOB_ACT_CONTINUE_SCAN</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>adf4b0db227e07782e28ade353a7ba7a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EOB_ACT_END_OF_FILE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a7f71d7fa2c403eb4b2f38cb9536f3c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EOB_ACT_LAST_MATCH</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ad1a0b5ebcabffe388e9e9ebb2619c1fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yyless</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ae65cb72d09db0abdc4b8e8c4d533ab14</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>unput</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a448a4e9041a09588332733c6846c770c</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_MAY_BE_UNUSED</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a12a31a0a8414ddef8c3154fe383a89ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_BUFFER_NEW</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a53579db42834b88199458993912c646d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_BUFFER_NORMAL</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a609d19f40900ecc2a5f812d9388c21fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_BUFFER_EOF_PENDING</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ad689d97c15e807a6116ace7a420cea57</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_CURRENT_BUFFER</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>aa093d500a6330d06d8e4760c494fac33</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_FLUSH_BUFFER</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ac5d478d90ea9a2ecd43d579067a2e89d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yy_new_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ab7eb911e18655f2f78e63afe5a8a4a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yy_set_interactive</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ac56eb96366c08862bf0efe5d83d1fc4c</anchor>
      <arglist>(is_interactive)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yy_set_bol</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a12e30d13a76a94e78010db9996d39c50</anchor>
      <arglist>(at_bol)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_AT_BOL</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a71ca89b3656acd0552f14949a571560b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yywrap</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ade1e2db9970733fbc3d9fecd09ce9771</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_SKIP_YYWRAP</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ae1ef5933028cbc587d31328e53d11a99</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yytext_ptr</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a790a191a93ef4d3b8c0bb43fd7480052</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_DO_BEFORE_ACTION</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>acc3486d769af4e4b2820346a0093cc79</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_NUM_RULES</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ae558785bb896e090901c2b905f6790c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_END_OF_BUFFER</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ab2708fd42cff29ce6a0a52b91bea40d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REJECT</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a835f10dd1ab4bf9a80c4cd80ee6e3058</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yymore</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a745d37b5e002b2e5f93ad42ea7b554be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_MORE_ADJ</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a68792d73820bc46a71d3d4e613f0b977</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_RESTORE_YY_MORE_OFFSET</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a56858d18c7eda4f53664496ef566f651</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INITIAL</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>aa3d063564f6ab16f6d408b8369d0e9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_NEVER_INTERACTIVE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a15b85de192a189d5a31cdd518e001e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_NO_UNPUT</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ae29b9eafd525b0fd9b1ecba8c44e5dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_INPUT</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>aecc5bc7182966c682c928cc68f42d6e8</anchor>
      <arglist>(b, r, s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOKEN</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ae61303e288a41f0e25ff8cd0c6296957</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXIMUM_INCLUDE_DEPTH</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a721eb647ac1cffd18b92750d6610fcf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMMENT</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a180f5b3835bdbfc11b353fd2af5c8659</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_NO_PUSH_STATE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a38e3a1cf6bfd339e7cfe0370e245730f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_NO_POP_STATE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ab99a7dbce52206f2cee91121f70f3f98</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_NO_TOP_STATE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ac3eedc6d2e3e4c9b2bacd0f1ebeab98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_READ_BUF_SIZE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>aab1491ceccb1c95c14320b2903773a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ECHO</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>aad1dc60a04a1d8cfc8b3ded13601e361</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yyterminate</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ac3286b18a2e91b4571b97df96a118e84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_START_STACK_INCR</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a227e75c43b9e0cd41529974230be7e75</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_FATAL_ERROR</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ac0586b8b0b092d02f4ba7d45abe328f2</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_DECL</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ae5b01ac2fa5a6ad5fb97559638abe686</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_BREAK</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a3cc40a460ad7df816678bcc05241e84c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_RULE_SETUP</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a690504b662e4281515bf12722df178ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_EXIT_FAILURE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ae93e67b85c44f6bd31ead14a552a35c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yyless</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ae65cb72d09db0abdc4b8e8c4d533ab14</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="typedef">
      <type>struct yy_buffer_state *</type>
      <name>YY_BUFFER_STATE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a4e5bd2d129903df83f3d13effaf8f3e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>yy_size_t</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>aa14cc3d400000eef0cd40225fd790cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>YY_CHAR</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a1f324b3cb0839eeb90145f0274e6946e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>yy_state_type</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a9ba7c416f135b0f0c1f4addded4616b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yyrestart</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a23078b0f02506465ee6af97eb9e7a8dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yy_switch_to_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a7d5a512c248e55a913a05633ed597ef2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yy_load_buffer_state</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a30fc8e518fa4e332a8657f6f8afa8fd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>YY_BUFFER_STATE</type>
      <name>yy_create_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>abf00d6d870f5a3e1ec5ede8b97cb81dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yy_delete_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a27e70d41e1eb328f119adec13c5bd07b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yy_init_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>af56d7ed5e4869cde3f7d90fef691bd8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yy_flush_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a1090aaba628649000946f88f48051cf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>YY_BUFFER_STATE</type>
      <name>yy_scan_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a2d17bd6111b99026f548ae8022ec721b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>YY_BUFFER_STATE</type>
      <name>yy_scan_string</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ab7e6ffd2e9da914c7a1e56caa1c93720</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>YY_BUFFER_STATE</type>
      <name>yy_scan_bytes</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>afc8343b6f4cacb6d60ad64fcbe2e6626</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>yy_flex_alloc</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>aa3b272c3bb84b8562a77c0a854056f32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>yy_flex_realloc</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>af95a4de4ea9c25f493b95b69d23f7908</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>yy_flex_free</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>aa48219f1ac8cc58ed7487ecaf5fe1e7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static yy_state_type</type>
      <name>yy_get_previous_state</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ac7941891fb35553e85c394d7240b6fac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static yy_state_type</type>
      <name>yy_try_NUL_trans</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a4344fdb3bbaea7ea57b2a021a451e942</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>yy_get_next_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a941fbfdbb3a4aa1ebc5bbac0be477d2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>yy_fatal_error</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a54305b3df006611fd8c8862fdb8a0dff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>input</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ab77a69608c1c09f3f14d24fce44e09ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>yylex</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>aa40b27ae32d6d1ae7160bd6256e08eb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static yy_state_type</type>
      <name>yy_try_NUL_trans</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>aef834b9da0e6ab2c8100976ec1ebd004</anchor>
      <arglist>(yy_state_type yy_current_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yyrestart</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ab657ddef65d43cc3ab8dfc2cad0ac5b8</anchor>
      <arglist>(FILE *input_file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yy_switch_to_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a3098c48a74ef8fd852f7dd4b3331cbce</anchor>
      <arglist>(YY_BUFFER_STATE new_buffer)</arglist>
    </member>
    <member kind="function">
      <type>YY_BUFFER_STATE</type>
      <name>yy_create_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a5bc6f1a5f7812508f425b08283f13ae8</anchor>
      <arglist>(FILE *file, int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yy_delete_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ae6ac796aa6c45d433a4b89bf45e6e9dc</anchor>
      <arglist>(YY_BUFFER_STATE b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yy_init_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a50748cd5701bec39eeb94d2cd2a011dd</anchor>
      <arglist>(YY_BUFFER_STATE b, FILE *file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yy_flush_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a2f59cc88e85e5455c62e4ef7ce095ea8</anchor>
      <arglist>(YY_BUFFER_STATE b)</arglist>
    </member>
    <member kind="function">
      <type>YY_BUFFER_STATE</type>
      <name>yy_scan_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>af81595b30c0da73f9034ffb511db6388</anchor>
      <arglist>(char *base, yy_size_t size)</arglist>
    </member>
    <member kind="function">
      <type>YY_BUFFER_STATE</type>
      <name>yy_scan_string</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>aa557728c6948d7264166cb792c355da9</anchor>
      <arglist>(char *yy_str)</arglist>
    </member>
    <member kind="function">
      <type>YY_BUFFER_STATE</type>
      <name>yy_scan_bytes</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>abc56e43879f04c9ee68d9c933e3c4e51</anchor>
      <arglist>(char *bytes, int len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>yy_fatal_error</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a118e659832b01fdd56f7e75b49856033</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>yy_flex_alloc</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a015607dc0247ff116630bb45a991f013</anchor>
      <arglist>(yy_size_t size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>yy_flex_realloc</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a1767258672797e00932513dc065026e6</anchor>
      <arglist>(void *ptr, yy_size_t size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>yy_flex_free</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ac713f8130aa0fdb7b4ed03c9d9c32294</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yyleng</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a1b5865350b5ca5c1d69f429c2a652953</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>yyin</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a87a127afa8f6c307fbfba10390675406</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>yyout</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a296847b42b0baa62e2af36cb79f3c0eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static YY_BUFFER_STATE</type>
      <name>yy_current_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a38d4b4b5964f7d49b4d9e19bf81996df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static char</type>
      <name>yy_hold_char</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a13f78e763996d2d86c85b45cbe146282</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>yy_n_chars</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>aa86c122f2050dbfd365fcf547e6fc1c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static char *</type>
      <name>yy_c_buf_p</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ade8fc57d3529bff56440a4f3e9c29586</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>yy_init</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>aeae6dabf9dcc4769518ecf054181b1c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>yy_start</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a2e1e1d9ee4610a6679d49ed8194b00af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>yy_did_buffer_switch_on_eof</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a57edb4569f96dcfce9deaff0eb6a6412</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>yytext</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a35b96d819f6a8f8638894c429e68b02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static short int</type>
      <name>yy_accept</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a600f4b01f6b9946f5871b8413274871e</anchor>
      <arglist>[96]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>yy_ec</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a1a8a1c1ee735421078f9a430e70beb20</anchor>
      <arglist>[256]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>yy_meta</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a679b3c0130e52ccd2af895bc97d999ae</anchor>
      <arglist>[47]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static short int</type>
      <name>yy_base</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>ae549d216d3514cf9501ef8dfea2b14a4</anchor>
      <arglist>[103]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static short int</type>
      <name>yy_def</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a2c0c50f0ca2d28ec851a3b3ccb24e595</anchor>
      <arglist>[103]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static short int</type>
      <name>yy_nxt</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a573900efba4b959eccc5c67117b3b430</anchor>
      <arglist>[206]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static short int</type>
      <name>yy_chk</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>afe10b9585295f7949fc7f1f1b9ddf003</anchor>
      <arglist>[206]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static yy_state_type</type>
      <name>yy_last_accepting_state</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a1e8856234732c99be24858b0073e1297</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static char *</type>
      <name>yy_last_accepting_cpos</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>afc6bef71feb2394eb5291e710139dfb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static YY_BUFFER_STATE</type>
      <name>s_include_stack</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a3e7774069fc7a65ab6ce7a289b1b466d</anchor>
      <arglist>[16]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>s_include_stack_top</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a27077b53da223e08fcea8774dfdf01df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Schedule.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Schedule_8C</filename>
    <includes id="Schedule_8h" name="Schedule.h" local="yes" imported="no">SAMRAI/tbox/Schedule.h</includes>
    <includes id="InputManager_8h" name="InputManager.h" local="yes" imported="no">SAMRAI/tbox/InputManager.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="typedef">
      <type>std::list&lt; boost::shared_ptr&lt; Transaction &gt; &gt;::iterator</type>
      <name>Iterator</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>adc7fd96d97edd50f6c284173b8c49e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; boost::shared_ptr&lt; Transaction &gt; &gt;::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a395c8ecc7b62e325376dc017525d837a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Schedule.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Schedule_8h</filename>
    <includes id="AsyncCommPeer_8h" name="AsyncCommPeer.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommPeer.h</includes>
    <includes id="AsyncCommStage_8h" name="AsyncCommStage.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommStage.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="MessageStream_8h" name="MessageStream.h" local="yes" imported="no">SAMRAI/tbox/MessageStream.h</includes>
    <includes id="Transaction_8h" name="Transaction.h" local="yes" imported="no">SAMRAI/tbox/Transaction.h</includes>
    <class kind="class">SAMRAI::tbox::Schedule</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Serializable.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Serializable_8C</filename>
    <includes id="Serializable_8h" name="Serializable.h" local="yes" imported="no">SAMRAI/tbox/Serializable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Serializable.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Serializable_8h</filename>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <class kind="class">SAMRAI::tbox::Serializable</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>SiloDatabase.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>SiloDatabase_8C</filename>
    <includes id="SiloDatabase_8h" name="SiloDatabase.h" local="yes" imported="no">SAMRAI/tbox/SiloDatabase.h</includes>
    <includes id="IOStream_8h" name="IOStream.h" local="yes" imported="no">SAMRAI/tbox/IOStream.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>SiloDatabase.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>SiloDatabase_8h</filename>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="DatabaseBox_8h" name="DatabaseBox.h" local="yes" imported="no">SAMRAI/tbox/DatabaseBox.h</includes>
    <includes id="Complex_8h" name="Complex.h" local="yes" imported="no">SAMRAI/tbox/Complex.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <class kind="class">SAMRAI::tbox::SiloDatabase</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>SiloDatabaseFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>SiloDatabaseFactory_8C</filename>
    <includes id="SiloDatabaseFactory_8h" name="SiloDatabaseFactory.h" local="yes" imported="no">SAMRAI/tbox/SiloDatabaseFactory.h</includes>
    <includes id="SiloDatabase_8h" name="SiloDatabase.h" local="yes" imported="no">SAMRAI/tbox/SiloDatabase.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>SiloDatabaseFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>SiloDatabaseFactory_8h</filename>
    <includes id="DatabaseFactory_8h" name="DatabaseFactory.h" local="yes" imported="no">SAMRAI/tbox/DatabaseFactory.h</includes>
    <class kind="class">SAMRAI::tbox::SiloDatabaseFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>StartupShutdownManager.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>StartupShutdownManager_8C</filename>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>StartupShutdownManager.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>StartupShutdownManager_8h</filename>
    <class kind="class">SAMRAI::tbox::StartupShutdownManager</class>
    <class kind="class">SAMRAI::tbox::StartupShutdownManager::AbstractHandler</class>
    <class kind="class">SAMRAI::tbox::StartupShutdownManager::Handler</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Statistic.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Statistic_8C</filename>
    <includes id="Statistic_8h" name="Statistic.h" local="yes" imported="no">SAMRAI/tbox/Statistic.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Statistic.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Statistic_8h</filename>
    <includes id="MessageStream_8h" name="MessageStream.h" local="yes" imported="no">SAMRAI/tbox/MessageStream.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <class kind="class">SAMRAI::tbox::Statistic</class>
    <class kind="struct">SAMRAI::tbox::Statistic::ProcStat</class>
    <class kind="struct">SAMRAI::tbox::Statistic::PatchStatRecord</class>
    <class kind="struct">SAMRAI::tbox::Statistic::PatchStat</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Statistician.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Statistician_8C</filename>
    <includes id="Statistician_8h" name="Statistician.h" local="yes" imported="no">SAMRAI/tbox/Statistician.h</includes>
    <includes id="IOStream_8h" name="IOStream.h" local="yes" imported="no">SAMRAI/tbox/IOStream.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="RestartManager_8h" name="RestartManager.h" local="yes" imported="no">SAMRAI/tbox/RestartManager.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="Schedule_8h" name="Schedule.h" local="yes" imported="no">SAMRAI/tbox/Schedule.h</includes>
    <includes id="StatTransaction_8h" name="StatTransaction.h" local="yes" imported="no">SAMRAI/tbox/StatTransaction.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Statistician.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Statistician_8h</filename>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="Serializable_8h" name="Serializable.h" local="yes" imported="no">SAMRAI/tbox/Serializable.h</includes>
    <includes id="Statistic_8h" name="Statistic.h" local="yes" imported="no">SAMRAI/tbox/Statistic.h</includes>
    <class kind="class">SAMRAI::tbox::Statistician</class>
    <class kind="class">SAMRAI::tbox::StatisticRestartDatabase</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>StatTransaction.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>StatTransaction_8C</filename>
    <includes id="StatTransaction_8h" name="StatTransaction.h" local="yes" imported="no">SAMRAI/tbox/StatTransaction.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>StatTransaction.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>StatTransaction_8h</filename>
    <includes id="Statistic_8h" name="Statistic.h" local="yes" imported="no">SAMRAI/tbox/Statistic.h</includes>
    <includes id="Transaction_8h" name="Transaction.h" local="yes" imported="no">SAMRAI/tbox/Transaction.h</includes>
    <class kind="class">SAMRAI::tbox::StatTransaction</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Timer.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Timer_8C</filename>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="IOStream_8h" name="IOStream.h" local="yes" imported="no">SAMRAI/tbox/IOStream.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Timer.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Timer_8h</filename>
    <includes id="Clock_8h" name="Clock.h" local="yes" imported="no">SAMRAI/tbox/Clock.h</includes>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <class kind="class">SAMRAI::tbox::Timer</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>TimerManager.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>TimerManager_8C</filename>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <includes id="InputDatabase_8h" name="InputDatabase.h" local="yes" imported="no">SAMRAI/tbox/InputDatabase.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="RestartManager_8h" name="RestartManager.h" local="yes" imported="no">SAMRAI/tbox/RestartManager.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="IOStream_8h" name="IOStream.h" local="yes" imported="no">SAMRAI/tbox/IOStream.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>TimerManager.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>TimerManager_8h</filename>
    <includes id="Database_8h" name="Database.h" local="yes" imported="no">SAMRAI/tbox/Database.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <includes id="Serializable_8h" name="Serializable.h" local="yes" imported="no">SAMRAI/tbox/Serializable.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <class kind="class">SAMRAI::tbox::TimerManager</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Tracer.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Tracer_8C</filename>
    <includes id="Tracer_8h" name="Tracer.h" local="yes" imported="no">SAMRAI/tbox/Tracer.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Tracer.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Tracer_8h</filename>
    <class kind="class">SAMRAI::tbox::Tracer</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Transaction.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Transaction_8C</filename>
    <includes id="Transaction_8h" name="Transaction.h" local="yes" imported="no">SAMRAI/tbox/Transaction.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Transaction.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Transaction_8h</filename>
    <includes id="MessageStream_8h" name="MessageStream.h" local="yes" imported="no">SAMRAI/tbox/MessageStream.h</includes>
    <class kind="class">SAMRAI::tbox::Transaction</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Utilities.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Utilities_8C</filename>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="SAMRAIManager_8h" name="SAMRAIManager.h" local="yes" imported="no">SAMRAI/tbox/SAMRAIManager.h</includes>
    <includes id="Logger_8h" name="Logger.h" local="yes" imported="no">SAMRAI/tbox/Logger.h</includes>
    <includes id="PIO_8h" name="PIO.h" local="yes" imported="no">SAMRAI/tbox/PIO.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Utilities.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/tbox/</path>
    <filename>Utilities_8h</filename>
    <includes id="IOStream_8h" name="IOStream.h" local="yes" imported="no">SAMRAI/tbox/IOStream.h</includes>
    <includes id="Logger_8h" name="Logger.h" local="yes" imported="no">SAMRAI/tbox/Logger.h</includes>
    <class kind="struct">SAMRAI::tbox::Utilities</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL_STATEMENT</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a76d90a17c620625b9d8b0bc1b526ed00</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NULL_USE</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>af9791b527d974ad06e3a35252dd32e2f</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_ERROR</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a49120d75ffbdfbaf0b28bbd8ad58e153</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_WARNING</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a5c90a7ee91157f3d5518680273da51f3</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_DEBUG</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a79b22d1ff1bda22f837a6ed840ebaaaa</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_ASSERT</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>afe03f1cedd6dd7fcbea7adf639e6fa4d</anchor>
      <arglist>(EXP)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_ASSERT_MSG</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a3ba84186aa2545cf8df683bb58dbf6ea</anchor>
      <arglist>(EXP, MSG)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOOST_CAST</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>aa9c647c9e8f6b84323f9e50343a58fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CPP_CAST</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a8684e2e08c31af1f1b68e3449c857da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_DEV_ASSERT</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a52c6f125cd9a73427ee5f0a026ef22c6</anchor>
      <arglist>(EXP)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_ASSERT_OBJDIM_EQUALITY2</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>abebac5c1e9bdda0da9d4ef2aebcb0fe9</anchor>
      <arglist>(arg1, arg2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_ASSERT_OBJDIM_EQUALITY3</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a4f196d4eb4285b650173818d7e662fbe</anchor>
      <arglist>(arg1, arg2, arg3)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_ASSERT_OBJDIM_EQUALITY4</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a595be51db8c87867776a88cb5e536f84</anchor>
      <arglist>(arg1, arg2, arg3, arg4)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_ASSERT_OBJDIM_EQUALITY5</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a8e9ed092553888861bc185a9f114a129</anchor>
      <arglist>(arg1, arg2, arg3, arg4, arg5)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TTBOX_ASSERT_OBJDIM_EQUALITY6</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>ab735c10515b70a82d84aa357a8c9bf07</anchor>
      <arglist>(arg1, arg2, arg3, arg4, arg5, arg6)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_ASSERT_OBJDIM_EQUALITY7</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a38a6ec19e885d52f6ca03871898e81c1</anchor>
      <arglist>(arg1, arg2, arg3, arg4, arg5, arg6, arg7)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_ASSERT_DIM_OBJDIM_EQUALITY1</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>aae9693b5872d2eba0f5834c3733865fe</anchor>
      <arglist>(dim, arg1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_ASSERT_DIM_OBJDIM_EQUALITY2</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a08b0e45e617fab2831108227e5016481</anchor>
      <arglist>(dim, arg1, arg2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_ASSERT_DIM_OBJDIM_EQUALITY3</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a7685bf05c982d37c46caca005f4a8431</anchor>
      <arglist>(dim, arg1, arg2, arg3)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_ASSERT_DIM_OBJDIM_EQUALITY4</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a95564a359409573c56fdec64bf41e9c8</anchor>
      <arglist>(dim, arg1, arg2, arg3, arg4)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_ASSERT_DIM_OBJDIM_EQUALITY5</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>aa97a522135a8cd36006a54baa072c8a5</anchor>
      <arglist>(dim, arg1, arg2, arg3, arg4, arg5)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_ASSERT_DIM_OBJDIM_EQUALITY6</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>ad5b50969ff48eca303e1ed0f8056b28a</anchor>
      <arglist>(dim,arg1, arg2, arg3, arg4, arg5, arg6)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_ASSERT_DIM_OBJDIM_EQUALITY7</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a788725f1d51ff056a81f26c5fa903d01</anchor>
      <arglist>(dim,arg1, arg2, arg3, arg4, arg5, arg6, arg7)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_ASSERT_DIM_OBJDIM_EQUALITY8</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a3f7a57e2451141cf483a6555fc70206a</anchor>
      <arglist>(dim,arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_DIM_ASSERT</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>aa7d2633aad0746b2447ade40b067aabd</anchor>
      <arglist>(EXP)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PETSC_SAMRAI_ERROR</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a7128088a2230fdc1c875c8b31f3b94a7</anchor>
      <arglist>(ierr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEPRECATED</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>aaf225a2b96038de3a42d61a1fa63654b</anchor>
      <arglist>(func)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoxGeometryVariableFillPattern.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>BoxGeometryVariableFillPattern_8C</filename>
    <includes id="BoxGeometryVariableFillPattern_8h" name="BoxGeometryVariableFillPattern.h" local="yes" imported="no">SAMRAI/xfer/BoxGeometryVariableFillPattern.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>BoxGeometryVariableFillPattern.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>BoxGeometryVariableFillPattern_8h</filename>
    <includes id="VariableFillPattern_8h" name="VariableFillPattern.h" local="yes" imported="no">SAMRAI/xfer/VariableFillPattern.h</includes>
    <class kind="class">SAMRAI::xfer::BoxGeometryVariableFillPattern</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenAlgorithm.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>CoarsenAlgorithm_8C</filename>
    <includes id="CoarsenAlgorithm_8h" name="CoarsenAlgorithm.h" local="yes" imported="no">SAMRAI/xfer/CoarsenAlgorithm.h</includes>
    <includes id="BoxGeometryVariableFillPattern_8h" name="BoxGeometryVariableFillPattern.h" local="yes" imported="no">SAMRAI/xfer/BoxGeometryVariableFillPattern.h</includes>
    <includes id="StandardCoarsenTransactionFactory_8h" name="StandardCoarsenTransactionFactory.h" local="yes" imported="no">SAMRAI/xfer/StandardCoarsenTransactionFactory.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenAlgorithm.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>CoarsenAlgorithm_8h</filename>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">SAMRAI/xfer/CoarsenClasses.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="CoarsenSchedule_8h" name="CoarsenSchedule.h" local="yes" imported="no">SAMRAI/xfer/CoarsenSchedule.h</includes>
    <includes id="CoarsenPatchStrategy_8h" name="CoarsenPatchStrategy.h" local="yes" imported="no">SAMRAI/xfer/CoarsenPatchStrategy.h</includes>
    <includes id="CoarsenTransactionFactory_8h" name="CoarsenTransactionFactory.h" local="yes" imported="no">SAMRAI/xfer/CoarsenTransactionFactory.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <class kind="class">SAMRAI::xfer::CoarsenAlgorithm</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenClasses.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>CoarsenClasses_8C</filename>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">SAMRAI/xfer/CoarsenClasses.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenClasses.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>CoarsenClasses_8h</filename>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">SAMRAI/hier/CoarsenOperator.h</includes>
    <includes id="VariableFillPattern_8h" name="VariableFillPattern.h" local="yes" imported="no">SAMRAI/xfer/VariableFillPattern.h</includes>
    <class kind="class">SAMRAI::xfer::CoarsenClasses</class>
    <class kind="class">SAMRAI::xfer::CoarsenClasses::Data</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenCopyTransaction.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>CoarsenCopyTransaction_8C</filename>
    <includes id="CoarsenCopyTransaction_8h" name="CoarsenCopyTransaction.h" local="yes" imported="no">SAMRAI/xfer/CoarsenCopyTransaction.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenCopyTransaction.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>CoarsenCopyTransaction_8h</filename>
    <includes id="Transaction_8h" name="Transaction.h" local="yes" imported="no">SAMRAI/tbox/Transaction.h</includes>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">SAMRAI/xfer/CoarsenClasses.h</includes>
    <class kind="class">SAMRAI::xfer::CoarsenCopyTransaction</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenPatchStrategy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>CoarsenPatchStrategy_8C</filename>
    <includes id="CoarsenPatchStrategy_8h" name="CoarsenPatchStrategy.h" local="yes" imported="no">SAMRAI/xfer/CoarsenPatchStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenPatchStrategy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>CoarsenPatchStrategy_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <class kind="class">SAMRAI::xfer::CoarsenPatchStrategy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenSchedule.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>CoarsenSchedule_8C</filename>
    <includes id="CoarsenSchedule_8h" name="CoarsenSchedule.h" local="yes" imported="no">SAMRAI/xfer/CoarsenSchedule.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="PeriodicShiftCatalog_8h" name="PeriodicShiftCatalog.h" local="yes" imported="no">SAMRAI/hier/PeriodicShiftCatalog.h</includes>
    <includes id="InputManager_8h" name="InputManager.h" local="yes" imported="no">SAMRAI/tbox/InputManager.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="CoarsenCopyTransaction_8h" name="CoarsenCopyTransaction.h" local="yes" imported="no">SAMRAI/xfer/CoarsenCopyTransaction.h</includes>
    <includes id="PatchLevelInteriorFillPattern_8h" name="PatchLevelInteriorFillPattern.h" local="yes" imported="no">SAMRAI/xfer/PatchLevelInteriorFillPattern.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenSchedule.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>CoarsenSchedule_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">SAMRAI/hier/ComponentSelector.h</includes>
    <includes id="Connector_8h" name="Connector.h" local="yes" imported="no">SAMRAI/hier/Connector.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="Schedule_8h" name="Schedule.h" local="yes" imported="no">SAMRAI/tbox/Schedule.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">SAMRAI/xfer/CoarsenClasses.h</includes>
    <includes id="CoarsenPatchStrategy_8h" name="CoarsenPatchStrategy.h" local="yes" imported="no">SAMRAI/xfer/CoarsenPatchStrategy.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">SAMRAI/xfer/RefineAlgorithm.h</includes>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">SAMRAI/xfer/RefineSchedule.h</includes>
    <includes id="CoarsenTransactionFactory_8h" name="CoarsenTransactionFactory.h" local="yes" imported="no">SAMRAI/xfer/CoarsenTransactionFactory.h</includes>
    <class kind="class">SAMRAI::xfer::CoarsenSchedule</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenTransactionFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>CoarsenTransactionFactory_8C</filename>
    <includes id="CoarsenTransactionFactory_8h" name="CoarsenTransactionFactory.h" local="yes" imported="no">SAMRAI/xfer/CoarsenTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenTransactionFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>CoarsenTransactionFactory_8h</filename>
    <includes id="Transaction_8h" name="Transaction.h" local="yes" imported="no">SAMRAI/tbox/Transaction.h</includes>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">SAMRAI/xfer/CoarsenClasses.h</includes>
    <class kind="class">SAMRAI::xfer::CoarsenTransactionFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>manual_datamovers.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/dox/</path>
    <filename>manual__datamovers_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>manual_operators.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/dox/</path>
    <filename>xfer_2dox_2manual__operators_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>manual_operators.dox</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/pdat/dox/</path>
    <filename>pdat_2dox_2manual__operators_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>PatchInteriorVariableFillPattern.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>PatchInteriorVariableFillPattern_8C</filename>
    <includes id="PatchInteriorVariableFillPattern_8h" name="PatchInteriorVariableFillPattern.h" local="yes" imported="no">SAMRAI/xfer/PatchInteriorVariableFillPattern.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>PatchInteriorVariableFillPattern.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>PatchInteriorVariableFillPattern_8h</filename>
    <includes id="VariableFillPattern_8h" name="VariableFillPattern.h" local="yes" imported="no">SAMRAI/xfer/VariableFillPattern.h</includes>
    <class kind="class">SAMRAI::xfer::PatchInteriorVariableFillPattern</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevelBorderAndInteriorFillPattern.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>PatchLevelBorderAndInteriorFillPattern_8C</filename>
    <includes id="PatchLevelBorderAndInteriorFillPattern_8h" name="PatchLevelBorderAndInteriorFillPattern.h" local="yes" imported="no">SAMRAI/xfer/PatchLevelBorderAndInteriorFillPattern.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevelBorderAndInteriorFillPattern.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>PatchLevelBorderAndInteriorFillPattern_8h</filename>
    <includes id="PatchLevelFillPattern_8h" name="PatchLevelFillPattern.h" local="yes" imported="no">SAMRAI/xfer/PatchLevelFillPattern.h</includes>
    <class kind="class">SAMRAI::xfer::PatchLevelBorderAndInteriorFillPattern</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevelBorderFillPattern.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>PatchLevelBorderFillPattern_8C</filename>
    <includes id="PatchLevelBorderFillPattern_8h" name="PatchLevelBorderFillPattern.h" local="yes" imported="no">SAMRAI/xfer/PatchLevelBorderFillPattern.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevelBorderFillPattern.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>PatchLevelBorderFillPattern_8h</filename>
    <includes id="PatchLevelFillPattern_8h" name="PatchLevelFillPattern.h" local="yes" imported="no">SAMRAI/xfer/PatchLevelFillPattern.h</includes>
    <class kind="class">SAMRAI::xfer::PatchLevelBorderFillPattern</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevelEnhancedFillPattern.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>PatchLevelEnhancedFillPattern_8C</filename>
    <includes id="PatchLevelEnhancedFillPattern_8h" name="PatchLevelEnhancedFillPattern.h" local="yes" imported="no">SAMRAI/xfer/PatchLevelEnhancedFillPattern.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevelEnhancedFillPattern.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>PatchLevelEnhancedFillPattern_8h</filename>
    <includes id="PatchLevelFillPattern_8h" name="PatchLevelFillPattern.h" local="yes" imported="no">SAMRAI/xfer/PatchLevelFillPattern.h</includes>
    <includes id="Connector_8h" name="Connector.h" local="yes" imported="no">SAMRAI/hier/Connector.h</includes>
    <class kind="class">SAMRAI::xfer::PatchLevelEnhancedFillPattern</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevelFillPattern.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>PatchLevelFillPattern_8C</filename>
    <includes id="PatchLevelFillPattern_8h" name="PatchLevelFillPattern.h" local="yes" imported="no">SAMRAI/xfer/PatchLevelFillPattern.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevelFillPattern.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>PatchLevelFillPattern_8h</filename>
    <includes id="Connector_8h" name="Connector.h" local="yes" imported="no">SAMRAI/hier/Connector.h</includes>
    <includes id="BoxNeighborhoodCollection_8h" name="BoxNeighborhoodCollection.h" local="yes" imported="no">SAMRAI/hier/BoxNeighborhoodCollection.h</includes>
    <class kind="class">SAMRAI::xfer::PatchLevelFillPattern</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevelFullFillPattern.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>PatchLevelFullFillPattern_8C</filename>
    <includes id="PatchLevelFullFillPattern_8h" name="PatchLevelFullFillPattern.h" local="yes" imported="no">SAMRAI/xfer/PatchLevelFullFillPattern.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevelFullFillPattern.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>PatchLevelFullFillPattern_8h</filename>
    <includes id="PatchLevelFillPattern_8h" name="PatchLevelFillPattern.h" local="yes" imported="no">SAMRAI/xfer/PatchLevelFillPattern.h</includes>
    <class kind="class">SAMRAI::xfer::PatchLevelFullFillPattern</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevelInteriorFillPattern.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>PatchLevelInteriorFillPattern_8C</filename>
    <includes id="PatchLevelInteriorFillPattern_8h" name="PatchLevelInteriorFillPattern.h" local="yes" imported="no">SAMRAI/xfer/PatchLevelInteriorFillPattern.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="RealBoxConstIterator_8h" name="RealBoxConstIterator.h" local="yes" imported="no">SAMRAI/hier/RealBoxConstIterator.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevelInteriorFillPattern.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>PatchLevelInteriorFillPattern_8h</filename>
    <includes id="PatchLevelFillPattern_8h" name="PatchLevelFillPattern.h" local="yes" imported="no">SAMRAI/xfer/PatchLevelFillPattern.h</includes>
    <class kind="class">SAMRAI::xfer::PatchLevelInteriorFillPattern</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineAlgorithm.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>RefineAlgorithm_8C</filename>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">SAMRAI/xfer/RefineAlgorithm.h</includes>
    <includes id="BoxGeometryVariableFillPattern_8h" name="BoxGeometryVariableFillPattern.h" local="yes" imported="no">SAMRAI/xfer/BoxGeometryVariableFillPattern.h</includes>
    <includes id="PatchLevelFullFillPattern_8h" name="PatchLevelFullFillPattern.h" local="yes" imported="no">SAMRAI/xfer/PatchLevelFullFillPattern.h</includes>
    <includes id="StandardRefineTransactionFactory_8h" name="StandardRefineTransactionFactory.h" local="yes" imported="no">SAMRAI/xfer/StandardRefineTransactionFactory.h</includes>
    <includes id="OverlapConnectorAlgorithm_8h" name="OverlapConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/OverlapConnectorAlgorithm.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineAlgorithm.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>RefineAlgorithm_8h</filename>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">SAMRAI/xfer/RefineClasses.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">SAMRAI/xfer/RefinePatchStrategy.h</includes>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">SAMRAI/xfer/RefineSchedule.h</includes>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <includes id="VariableFillPattern_8h" name="VariableFillPattern.h" local="yes" imported="no">SAMRAI/xfer/VariableFillPattern.h</includes>
    <includes id="Connector_8h" name="Connector.h" local="yes" imported="no">SAMRAI/hier/Connector.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxLevel_8h" name="BoxLevel.h" local="yes" imported="no">SAMRAI/hier/BoxLevel.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <class kind="class">SAMRAI::xfer::RefineAlgorithm</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineClasses.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>RefineClasses_8C</filename>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">SAMRAI/xfer/RefineClasses.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">SAMRAI/hier/PatchDescriptor.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">SAMRAI/hier/VariableDatabase.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineClasses.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>RefineClasses_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">SAMRAI/hier/RefineOperator.h</includes>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">SAMRAI/hier/TimeInterpolateOperator.h</includes>
    <includes id="VariableFillPattern_8h" name="VariableFillPattern.h" local="yes" imported="no">SAMRAI/xfer/VariableFillPattern.h</includes>
    <class kind="class">SAMRAI::xfer::RefineClasses</class>
    <class kind="struct">SAMRAI::xfer::RefineClasses::Data</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineCopyTransaction.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>RefineCopyTransaction_8C</filename>
    <includes id="RefineCopyTransaction_8h" name="RefineCopyTransaction.h" local="yes" imported="no">SAMRAI/xfer/RefineCopyTransaction.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineCopyTransaction.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>RefineCopyTransaction_8h</filename>
    <includes id="Transaction_8h" name="Transaction.h" local="yes" imported="no">SAMRAI/tbox/Transaction.h</includes>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">SAMRAI/xfer/RefineClasses.h</includes>
    <class kind="class">SAMRAI::xfer::RefineCopyTransaction</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefinePatchStrategy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>RefinePatchStrategy_8C</filename>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">SAMRAI/xfer/RefinePatchStrategy.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefinePatchStrategy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>RefinePatchStrategy_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">SAMRAI/xfer/RefineClasses.h</includes>
    <class kind="class">SAMRAI::xfer::RefinePatchStrategy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineSchedule.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>RefineSchedule_8C</filename>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">SAMRAI/xfer/RefineSchedule.h</includes>
    <includes id="BoxGeometryVariableFillPattern_8h" name="BoxGeometryVariableFillPattern.h" local="yes" imported="no">SAMRAI/xfer/BoxGeometryVariableFillPattern.h</includes>
    <includes id="PatchLevelFullFillPattern_8h" name="PatchLevelFullFillPattern.h" local="yes" imported="no">SAMRAI/xfer/PatchLevelFullFillPattern.h</includes>
    <includes id="PatchLevelInteriorFillPattern_8h" name="PatchLevelInteriorFillPattern.h" local="yes" imported="no">SAMRAI/xfer/PatchLevelInteriorFillPattern.h</includes>
    <includes id="RefineCopyTransaction_8h" name="RefineCopyTransaction.h" local="yes" imported="no">SAMRAI/xfer/RefineCopyTransaction.h</includes>
    <includes id="RefineScheduleConnectorWidthRequestor_8h" name="RefineScheduleConnectorWidthRequestor.h" local="yes" imported="no">SAMRAI/xfer/RefineScheduleConnectorWidthRequestor.h</includes>
    <includes id="RefineTimeTransaction_8h" name="RefineTimeTransaction.h" local="yes" imported="no">SAMRAI/xfer/RefineTimeTransaction.h</includes>
    <includes id="BoxContainer_8h" name="BoxContainer.h" local="yes" imported="no">SAMRAI/hier/BoxContainer.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">SAMRAI/hier/BoxUtilities.h</includes>
    <includes id="BoxLevelConnectorUtils_8h" name="BoxLevelConnectorUtils.h" local="yes" imported="no">SAMRAI/hier/BoxLevelConnectorUtils.h</includes>
    <includes id="MappingConnectorAlgorithm_8h" name="MappingConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/MappingConnectorAlgorithm.h</includes>
    <includes id="OverlapConnectorAlgorithm_8h" name="OverlapConnectorAlgorithm.h" local="yes" imported="no">SAMRAI/hier/OverlapConnectorAlgorithm.h</includes>
    <includes id="PeriodicShiftCatalog_8h" name="PeriodicShiftCatalog.h" local="yes" imported="no">SAMRAI/hier/PeriodicShiftCatalog.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="PatchGeometry_8h" name="PatchGeometry.h" local="yes" imported="no">SAMRAI/hier/PatchGeometry.h</includes>
    <includes id="AsyncCommPeer_8h" name="AsyncCommPeer.h" local="yes" imported="no">SAMRAI/tbox/AsyncCommPeer.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <includes id="InputManager_8h" name="InputManager.h" local="yes" imported="no">SAMRAI/tbox/InputManager.h</includes>
    <includes id="OpenMPUtilities_8h" name="OpenMPUtilities.h" local="yes" imported="no">SAMRAI/tbox/OpenMPUtilities.h</includes>
    <includes id="StartupShutdownManager_8h" name="StartupShutdownManager.h" local="yes" imported="no">SAMRAI/tbox/StartupShutdownManager.h</includes>
    <includes id="TimerManager_8h" name="TimerManager.h" local="yes" imported="no">SAMRAI/tbox/TimerManager.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineSchedule.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>RefineSchedule_8h</filename>
    <includes id="PatchLevelFillPattern_8h" name="PatchLevelFillPattern.h" local="yes" imported="no">SAMRAI/xfer/PatchLevelFillPattern.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">SAMRAI/xfer/RefineClasses.h</includes>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">SAMRAI/xfer/RefinePatchStrategy.h</includes>
    <includes id="RefineTransactionFactory_8h" name="RefineTransactionFactory.h" local="yes" imported="no">SAMRAI/xfer/RefineTransactionFactory.h</includes>
    <includes id="SingularityPatchStrategy_8h" name="SingularityPatchStrategy.h" local="yes" imported="no">SAMRAI/xfer/SingularityPatchStrategy.h</includes>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">SAMRAI/hier/ComponentSelector.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="Schedule_8h" name="Schedule.h" local="yes" imported="no">SAMRAI/tbox/Schedule.h</includes>
    <includes id="Timer_8h" name="Timer.h" local="yes" imported="no">SAMRAI/tbox/Timer.h</includes>
    <class kind="class">SAMRAI::xfer::RefineSchedule</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineScheduleConnectorWidthRequestor.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>RefineScheduleConnectorWidthRequestor_8C</filename>
    <includes id="RefineScheduleConnectorWidthRequestor_8h" name="RefineScheduleConnectorWidthRequestor.h" local="yes" imported="no">SAMRAI/xfer/RefineScheduleConnectorWidthRequestor.h</includes>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">SAMRAI/xfer/RefinePatchStrategy.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineScheduleConnectorWidthRequestor.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>RefineScheduleConnectorWidthRequestor_8h</filename>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">SAMRAI/hier/PatchHierarchy.h</includes>
    <class kind="class">SAMRAI::xfer::RefineScheduleConnectorWidthRequestor</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineTimeTransaction.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>RefineTimeTransaction_8C</filename>
    <includes id="RefineTimeTransaction_8h" name="RefineTimeTransaction.h" local="yes" imported="no">SAMRAI/xfer/RefineTimeTransaction.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">SAMRAI/hier/IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">SAMRAI/hier/Patch.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">SAMRAI/hier/PatchData.h</includes>
    <includes id="SAMRAI__MPI_8h" name="SAMRAI_MPI.h" local="yes" imported="no">SAMRAI/tbox/SAMRAI_MPI.h</includes>
    <includes id="MathUtilities_8h" name="MathUtilities.h" local="yes" imported="no">SAMRAI/tbox/MathUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineTimeTransaction.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>RefineTimeTransaction_8h</filename>
    <includes id="Transaction_8h" name="Transaction.h" local="yes" imported="no">SAMRAI/tbox/Transaction.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">SAMRAI/xfer/RefineClasses.h</includes>
    <class kind="class">SAMRAI::xfer::RefineTimeTransaction</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineTransactionFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>RefineTransactionFactory_8C</filename>
    <includes id="RefineTransactionFactory_8h" name="RefineTransactionFactory.h" local="yes" imported="no">SAMRAI/xfer/RefineTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineTransactionFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>RefineTransactionFactory_8h</filename>
    <includes id="Transaction_8h" name="Transaction.h" local="yes" imported="no">SAMRAI/tbox/Transaction.h</includes>
    <includes id="Utilities_8h" name="Utilities.h" local="yes" imported="no">SAMRAI/tbox/Utilities.h</includes>
    <includes id="BaseGridGeometry_8h" name="BaseGridGeometry.h" local="yes" imported="no">SAMRAI/hier/BaseGridGeometry.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">SAMRAI/xfer/RefineClasses.h</includes>
    <class kind="class">SAMRAI::xfer::RefineTransactionFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>SingularityPatchStrategy.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>SingularityPatchStrategy_8C</filename>
    <includes id="SingularityPatchStrategy_8h" name="SingularityPatchStrategy.h" local="yes" imported="no">SAMRAI/xfer/SingularityPatchStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>SingularityPatchStrategy.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>SingularityPatchStrategy_8h</filename>
    <class kind="class">SAMRAI::xfer::SingularityPatchStrategy</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>StandardCoarsenTransactionFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>StandardCoarsenTransactionFactory_8C</filename>
    <includes id="StandardCoarsenTransactionFactory_8h" name="StandardCoarsenTransactionFactory.h" local="yes" imported="no">SAMRAI/xfer/StandardCoarsenTransactionFactory.h</includes>
    <includes id="CoarsenCopyTransaction_8h" name="CoarsenCopyTransaction.h" local="yes" imported="no">SAMRAI/xfer/CoarsenCopyTransaction.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>StandardCoarsenTransactionFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>StandardCoarsenTransactionFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="Transaction_8h" name="Transaction.h" local="yes" imported="no">SAMRAI/tbox/Transaction.h</includes>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">SAMRAI/xfer/CoarsenClasses.h</includes>
    <includes id="CoarsenTransactionFactory_8h" name="CoarsenTransactionFactory.h" local="yes" imported="no">SAMRAI/xfer/CoarsenTransactionFactory.h</includes>
    <class kind="class">SAMRAI::xfer::StandardCoarsenTransactionFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>StandardRefineTransactionFactory.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>StandardRefineTransactionFactory_8C</filename>
    <includes id="StandardRefineTransactionFactory_8h" name="StandardRefineTransactionFactory.h" local="yes" imported="no">SAMRAI/xfer/StandardRefineTransactionFactory.h</includes>
    <includes id="RefineCopyTransaction_8h" name="RefineCopyTransaction.h" local="yes" imported="no">SAMRAI/xfer/RefineCopyTransaction.h</includes>
    <includes id="RefineTimeTransaction_8h" name="RefineTimeTransaction.h" local="yes" imported="no">SAMRAI/xfer/RefineTimeTransaction.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>StandardRefineTransactionFactory.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>StandardRefineTransactionFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">SAMRAI/hier/Box.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">SAMRAI/hier/PatchLevel.h</includes>
    <includes id="Transaction_8h" name="Transaction.h" local="yes" imported="no">SAMRAI/tbox/Transaction.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">SAMRAI/xfer/RefineClasses.h</includes>
    <includes id="RefineTransactionFactory_8h" name="RefineTransactionFactory.h" local="yes" imported="no">SAMRAI/xfer/RefineTransactionFactory.h</includes>
    <class kind="class">SAMRAI::xfer::StandardRefineTransactionFactory</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>VariableFillPattern.C</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>VariableFillPattern_8C</filename>
    <includes id="VariableFillPattern_8h" name="VariableFillPattern.h" local="yes" imported="no">SAMRAI/xfer/VariableFillPattern.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>VariableFillPattern.h</name>
    <path>/g/g10/arrighi2/RELEASE/SAMRAI/source/SAMRAI/xfer/</path>
    <filename>VariableFillPattern_8h</filename>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">SAMRAI/hier/BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">SAMRAI/hier/BoxOverlap.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">SAMRAI/hier/PatchDataFactory.h</includes>
    <class kind="class">SAMRAI::xfer::VariableFillPattern</class>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="page">
    <name>toolbox_complex</name>
    <title>Toolbox Complex Type</title>
    <filename>toolbox_complex</filename>
  </compound>
  <compound kind="page">
    <name>package_toolbox</name>
    <title>The Toolbox Package</title>
    <filename>package_toolbox</filename>
  </compound>
  <compound kind="page">
    <name>package_toolbox_base</name>
    <title>Base Toolbox Classes</title>
    <filename>package_toolbox_base</filename>
  </compound>
  <compound kind="page">
    <name>package_toolbox_database</name>
    <title>Generic Database Support</title>
    <filename>package_toolbox_database</filename>
  </compound>
  <compound kind="page">
    <name>package_toolbox_inputdb</name>
    <title>Input Database</title>
    <filename>package_toolbox_inputdb</filename>
  </compound>
  <compound kind="page">
    <name>package_toolbox_memory</name>
    <title>Memory Support</title>
    <filename>package_toolbox_memory</filename>
  </compound>
  <compound kind="page">
    <name>package_toolbox_parallel</name>
    <title>Parallel Toolbox Classes</title>
    <filename>package_toolbox_parallel</filename>
  </compound>
  <compound kind="page">
    <name>package_toolbox_restartdb</name>
    <title>Restart Database</title>
    <filename>package_toolbox_restartdb</filename>
  </compound>
  <compound kind="page">
    <name>package_toolbox_stream</name>
    <title>Stream Toolbox Classes</title>
    <filename>package_toolbox_stream</filename>
  </compound>
  <compound kind="page">
    <name>package_toolbox_timers</name>
    <title>Timer Classes</title>
    <filename>package_toolbox_timers</filename>
  </compound>
  <compound kind="page">
    <name>package_hierarchy</name>
    <title>The Hierarchy Package</title>
    <filename>package_hierarchy</filename>
  </compound>
  <compound kind="page">
    <name>package_hierarchy_boxes</name>
    <title>Box Calculus</title>
    <filename>package_hierarchy_boxes</filename>
  </compound>
  <compound kind="page">
    <name>package_hierarchy_dlbg</name>
    <title>Distributed Mesh Metadata</title>
    <filename>package_hierarchy_dlbg</filename>
  </compound>
  <compound kind="page">
    <name>package_hierarchy_patches</name>
    <title>AMR Patch Hierarchy Management</title>
    <filename>package_hierarchy_patches</filename>
  </compound>
  <compound kind="page">
    <name>package_hierarchy_transfer</name>
    <title>Data transfer interfaces</title>
    <filename>package_hierarchy_transfer</filename>
  </compound>
  <compound kind="page">
    <name>package_hierarchy_variables</name>
    <title>AMR Patch Data and Variable Management</title>
    <filename>package_hierarchy_variables</filename>
  </compound>
  <compound kind="page">
    <name>package_transfer</name>
    <title>The Transfer Package</title>
    <filename>package_transfer</filename>
  </compound>
  <compound kind="page">
    <name>package_transfer_datamovers</name>
    <title>Support for Moving Data on SAMR Meshes</title>
    <filename>package_transfer_datamovers</filename>
  </compound>
  <compound kind="page">
    <name>package_transfer_operators</name>
    <title>Patch Data Transfer Operators</title>
    <filename>package_transfer_operators</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata</name>
    <title>The Patchdata Package</title>
    <filename>package_patchdata</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_array</name>
    <title>Array-based Patch Data Support</title>
    <filename>package_patchdata_array</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_boxgeometry</name>
    <title>Box Geometry Computation</title>
    <filename>package_patchdata_boxgeometry</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_cell</name>
    <title>Cell Patch Data</title>
    <filename>package_patchdata_cell</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_edge</name>
    <title>Edge Patch Data</title>
    <filename>package_patchdata_edge</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_face</name>
    <title>Face Patch Data</title>
    <filename>package_patchdata_face</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_fortran</name>
    <title>Support for Patch Data Numerical Routines in FORTRAN</title>
    <filename>package_patchdata_fortran</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_index</name>
    <title>Index Patch Data</title>
    <filename>package_patchdata_index</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_multiblock</name>
    <title>Multiblock Patch Data Operations</title>
    <filename>package_patchdata_multiblock</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_node</name>
    <title>Node Patch Data</title>
    <filename>package_patchdata_node</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_operators</name>
    <title>Mesh-Independent operators</title>
    <filename>package_patchdata_operators</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_operators_constant_cell</name>
    <title>Cell Data Constant Operators</title>
    <filename>package_patchdata_operators_constant_cell</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_operators_constant_outernode</name>
    <title>Outernode Data Constant Operators</title>
    <filename>package_patchdata_operators_constant_outernode</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_operators_time_interpolate</name>
    <title>Time Interpolation Operators</title>
    <filename>package_patchdata_operators_time_interpolate</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_operators_time_interpolate_cell</name>
    <title>Time Interpolation Operators for Cell Data</title>
    <filename>package_patchdata_operators_time_interpolate_cell</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_operators_time_interpolate_fortran</name>
    <title>Time Interpolation Numerical Routines</title>
    <filename>package_patchdata_operators_time_interpolate_fortran</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_outeredge</name>
    <title>Outeredge Patch Data</title>
    <filename>package_patchdata_outeredge</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_outerface</name>
    <title>Outerface Patch Data</title>
    <filename>package_patchdata_outerface</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_outernode</name>
    <title>Outernode Patch Data</title>
    <filename>package_patchdata_outernode</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_outerside</name>
    <title>Outerside Patch Data</title>
    <filename>package_patchdata_outerside</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_side</name>
    <title>Side Patch Data</title>
    <filename>package_patchdata_side</filename>
  </compound>
  <compound kind="page">
    <name>package_mathematical_operations</name>
    <title>Mathematical Operations Package</title>
    <filename>package_mathematical_operations</filename>
  </compound>
  <compound kind="page">
    <name>package_mathops_array</name>
    <title>Basic Array Data Operations</title>
    <filename>package_mathops_array</filename>
  </compound>
  <compound kind="page">
    <name>package_mathops_cell</name>
    <title>Cell Patch Data Operations</title>
    <filename>package_mathops_cell</filename>
  </compound>
  <compound kind="page">
    <name>package_mathops_hierarchy</name>
    <title>Hierarchy Data Operation Base Classes</title>
    <filename>package_mathops_hierarchy</filename>
  </compound>
  <compound kind="page">
    <name>package_mesh</name>
    <title>The Mesh Package</title>
    <filename>package_mesh</filename>
  </compound>
  <compound kind="page">
    <name>package_mesh_clustering</name>
    <title>Box Generation</title>
    <filename>package_mesh_clustering</filename>
  </compound>
  <compound kind="page">
    <name>package_mesh_gridding</name>
    <title>Patch Hierarchy Construction and Adaptive Meshing</title>
    <filename>package_mesh_gridding</filename>
  </compound>
  <compound kind="page">
    <name>package_mesh_load_balance</name>
    <title>Load Balancing</title>
    <filename>package_mesh_load_balance</filename>
  </compound>
  <compound kind="page">
    <name>package_mesh_multiblock</name>
    <title>Multiblock Hierarchy Construction and Adaptive Meshing</title>
    <filename>package_mesh_multiblock</filename>
  </compound>
  <compound kind="page">
    <name>package_geometry</name>
    <title>The Geometry Package</title>
    <filename>package_geometry</filename>
  </compound>
  <compound kind="page">
    <name>package_geometry_cartesian</name>
    <title>Basic Cartesian Mesh Geometry Support</title>
    <filename>package_geometry_cartesian</filename>
  </compound>
  <compound kind="page">
    <name>package_geometry_cartesian_grid_geom</name>
    <title>Cartesian Grid Geometry</title>
    <filename>package_geometry_cartesian_grid_geom</filename>
  </compound>
  <compound kind="page">
    <name>package_geometry_cartesian_operators_cell</name>
    <title>Cell Data Operators</title>
    <filename>package_geometry_cartesian_operators_cell</filename>
  </compound>
  <compound kind="page">
    <name>package_geometry_cartesian_operators_fortran</name>
    <title>Cartesian Transfer Operator Numerical Routines</title>
    <filename>package_geometry_cartesian_operators_fortran</filename>
  </compound>
  <compound kind="page">
    <name>package_geometry_cartesian_patch_geom</name>
    <title>Cartesian Patch Geometry</title>
    <filename>package_geometry_cartesian_patch_geom</filename>
  </compound>
  <compound kind="page">
    <name>package_geometry_generic</name>
    <title>Generic Mesh Geometry Support</title>
    <filename>package_geometry_generic</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers</name>
    <title>The Solver Package</title>
    <filename>package_solvers</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_FAC</name>
    <title>FAC preconditioner on a SAMRAI hierarchy</title>
    <filename>package_solvers_FAC</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_nonlinear</name>
    <title>Nonlinear solver</title>
    <filename>package_solvers_nonlinear</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_packages</name>
    <title>Interfaces to Solver Libraries</title>
    <filename>package_solvers_packages</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_packages_petsc</name>
    <title>PETSc Vector Interface</title>
    <filename>package_solvers_packages_petsc</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_packages_sundials</name>
    <title>Interfaces for the Sundials of Solvers</title>
    <filename>package_solvers_packages_sundials</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_packages_sundials_cvode</name>
    <title>CVODE ODE solver interface</title>
    <filename>package_solvers_packages_sundials_cvode</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_packages_sundials_kinsol</name>
    <title>KINSOL Vector and Nonlinear Solver Interface</title>
    <filename>package_solvers_packages_sundials_kinsol</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_packages_sundials_vector</name>
    <title>Sundials Vector Interface</title>
    <filename>package_solvers_packages_sundials_vector</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_poisson</name>
    <title>Poisson solvers on a SAMRAI hierarchy</title>
    <filename>package_solvers_poisson</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_vectors</name>
    <title>SAMRAI Vector Facilities</title>
    <filename>package_solvers_vectors</filename>
  </compound>
  <compound kind="page">
    <name>package_algorithm</name>
    <title>The Algorithm Package</title>
    <filename>package_algorithm</filename>
  </compound>
  <compound kind="page">
    <name>package_algorithm_femutils</name>
    <title>Rudimentary Support for Finite Element Operations on SAMR Meshes</title>
    <filename>package_algorithm_femutils</filename>
  </compound>
  <compound kind="page">
    <name>package_algorithm_hyperbolic</name>
    <title>Hyperbolic Conservation Law Integration</title>
    <filename>package_algorithm_hyperbolic</filename>
  </compound>
  <compound kind="page">
    <name>package_algorithm_implicit</name>
    <title>Implicit time-marching algorithms</title>
    <filename>package_algorithm_implicit</filename>
  </compound>
  <compound kind="page">
    <name>package_algorithm_method_of_lines</name>
    <title>Time Integration with Method of Lines</title>
    <filename>package_algorithm_method_of_lines</filename>
  </compound>
  <compound kind="page">
    <name>package_algorithm_time_refinement</name>
    <title>Time Integration with Local Time Refinement</title>
    <filename>package_algorithm_time_refinement</filename>
  </compound>
  <compound kind="page">
    <name>package_apputils</name>
    <title>The Application Utilities Package</title>
    <filename>package_apputils</filename>
  </compound>
  <compound kind="page">
    <name>package_apputils_boundary</name>
    <title>Support for physical boundary conditions</title>
    <filename>package_apputils_boundary</filename>
  </compound>
  <compound kind="page">
    <name>package_apputils_plotting</name>
    <title>Visualization Data File Generation</title>
    <filename>package_apputils_plotting</filename>
  </compound>
  <compound kind="struct">
    <name>arith_functions</name>
    <filename>structarith__functions.html</filename>
    <member kind="variable">
      <type>string</type>
      <name>d_name</name>
      <anchorfile>structarith__functions.html</anchorfile>
      <anchor>a6838cd6b9483e025e1bcfe2a9226e407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double(*</type>
      <name>d_r2r_func</name>
      <anchorfile>structarith__functions.html</anchorfile>
      <anchor>afe294daecd3de95c0897ebd843be0ec3</anchor>
      <arglist>)(double)</arglist>
    </member>
    <member kind="variable">
      <type>dcomplex(*</type>
      <name>d_c2c_func</name>
      <anchorfile>structarith__functions.html</anchorfile>
      <anchor>a8b2dea25dd45b835b2d7451d66c075ba</anchor>
      <arglist>)(const dcomplex &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>double(*</type>
      <name>d_c2r_func</name>
      <anchorfile>structarith__functions.html</anchorfile>
      <anchor>a626bf51144619070ddf9d634e633cde4</anchor>
      <arglist>)(const dcomplex &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>KeyData</name>
    <filename>structKeyData.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>d_node_type</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>a420142f975f55de9e1b8c7a1c8f67c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_array_type</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>a78326cbe9d06f92249cab250df65ad78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_array_size</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>af7a4564332d9d358dacb43b78a3513ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KeyData *</type>
      <name>d_next</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>a9ee2f4730586da87628f02419748430d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>d_bool</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>a1170b06876f4c3e5c8dae35d3000e948</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DatabaseBox</type>
      <name>d_box</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>a82a9ccd8331ba7243604457840151236</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>d_char</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>a25be08b7fd5cbe9de9174a6fc91cd961</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dcomplex</type>
      <name>d_complex</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>a48b8c7c9132b3a4bcc4846e6343275d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>d_double</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>a642aabda30294210bbadab51480b46e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_integer</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>a130b0544158187dc5cd492be08bd646b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>d_string</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>a68b76c06c3885c2be591ef2b3eabc972</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MDA_Access</name>
    <filename>classMDA__Access.html</filename>
    <templarg>MDA_TYPE</templarg>
    <templarg>MDA_DIM</templarg>
    <templarg>OrderType</templarg>
    <member kind="typedef">
      <type>MDA_TYPE</type>
      <name>value_t</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a60138c6ef20a6b04cd3d197bc9bc26bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MDA_IndexRange&lt; MDA_DIM &gt;</type>
      <name>range_t</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a8f05cf86e4dfc4cef44b7aa18cc95521</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>range_t::dir_t</type>
      <name>dir_t</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a564b38addaf67d48902ff7713efbc4bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>range_t::index_t</type>
      <name>index_t</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>ab39e940273e205c01dd4a904ba4edb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrderType</type>
      <name>order_t</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>ab08b280293e702c24391d1e04ea94a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrderType::reduced_order_t</type>
      <name>reduced_order_t</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a84ff0f1563fb8d116ddff6e47b76d4e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MDA_Access</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a3f4c0079421a1ae6d4780575d6e11c1d</anchor>
      <arglist>(value_t *p=((value_t *) 0), const size_t *sz=((size_t *) 0), const index_t *st=((index_t *) 0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MDA_Access</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>aa43b48db50c557d13a8d3b350bbb2833</anchor>
      <arglist>(value_t *p, const index_t *si, const index_t *sf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MDA_Access</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>aba44626e495fc9a7068b861d2a2b3c4d</anchor>
      <arglist>(value_t *p, const order_t &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MDA_Access</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a5be943b3cdd58f958ca6a0bd6ea15768</anchor>
      <arglist>(const MDA_Access &amp;r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MDA_Access</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>aa6584d15ddfd95761b6f7cf63a8352dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a5cad9c860418202fd2e52610d1fdcf5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator value_t *</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a966f4470e1ae8706f8d01efa3a8367f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPointer</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a35c15cfa74273c4e0b88aa9ff3aa985d</anchor>
      <arglist>(value_t *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSizeAndStart</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a14e5138ab660ec31eac0a91305bf5630</anchor>
      <arglist>(const size_t *sz=((size_t *) 0), const index_t *st=((index_t *) 0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInclusiveRange</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>ac963bab1a4a978ef3c85ccecca8c4541</anchor>
      <arglist>(const index_t first[MDA_DIM], const index_t final[MDA_DIM])</arglist>
    </member>
    <member kind="function">
      <type>const range_t &amp;</type>
      <name>adjustDim</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>af22fa3e2da25bf252f66b5e4fceb8053</anchor>
      <arglist>(dir_t d, index_t first, index_t final)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a695411f0d0c9cbd4e43330ea26d2de06</anchor>
      <arglist>(const MDA_Access &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a0f1f8dec0688f77a113b37ad5171a681</anchor>
      <arglist>(const MDA_Access &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>const range_t &amp;</type>
      <name>range</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a0d584207c899197d4089700898a39234</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const index_t &amp;</type>
      <name>beg</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a2693e991963600774a756c515ef92714</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>const index_t &amp;</type>
      <name>end</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a46dbd76b8fef19e800f4fcab0aa702fa</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>const size_t &amp;</type>
      <name>size</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a3c07ea5d15a865a33a717b5484154945</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>value_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a4c0a0648b544febd6dca6afafe084eab</anchor>
      <arglist>(const index_t i[MDA_DIM]) const </arglist>
    </member>
    <member kind="function">
      <type>value_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a8de85ec8d3bca23e40dcec66fc1f7746</anchor>
      <arglist>(index_t i0) const </arglist>
    </member>
    <member kind="function">
      <type>value_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>ac6106f8dd49c7c090b1eabc583af4823</anchor>
      <arglist>(index_t i0, index_t i1) const </arglist>
    </member>
    <member kind="function">
      <type>value_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a2d3b1d8e8e050c0283492abbd0100f8e</anchor>
      <arglist>(index_t i0, index_t i1, index_t i2) const </arglist>
    </member>
    <member kind="function">
      <type>value_t &amp;</type>
      <name>operator()</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a1f67abf35e274e4e530a70e1ed4d9603</anchor>
      <arglist>(index_t i0, index_t i1, index_t i2, index_t i3) const </arglist>
    </member>
    <member kind="function">
      <type>value_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a6f06fe79c6f3e0b0101f7357ed8a05f1</anchor>
      <arglist>(index_t i0) const </arglist>
    </member>
    <member kind="function">
      <type>MDA_Access&lt; MDA_TYPE, OrderType::MDA_Reduced_DIM, typename OrderType::reduced_order_t &gt;</type>
      <name>reduce</name>
      <anchorfile>classMDA__Access.html</anchorfile>
      <anchor>a27648e4fcbc9a840bc584d5149e14823</anchor>
      <arglist>(index_t i) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MDA_AccessConst</name>
    <filename>classMDA__AccessConst.html</filename>
    <templarg>MDA_TYPE</templarg>
    <templarg>MDA_DIM</templarg>
    <templarg>OrderType</templarg>
    <base>MDA_Access&lt; const MDA_TYPE, MDA_DIM, OrderType &gt;</base>
    <member kind="typedef">
      <type>const MDA_TYPE</type>
      <name>value_t</name>
      <anchorfile>classMDA__AccessConst.html</anchorfile>
      <anchor>a4f2e45e3fc4c4ae973d26b254fe6bd2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MDA_IndexRange&lt; MDA_DIM &gt;</type>
      <name>range_t</name>
      <anchorfile>classMDA__AccessConst.html</anchorfile>
      <anchor>a7c0069a5e5be48e67b0ba12151fe51e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>range_t::dir_t</type>
      <name>dir_t</name>
      <anchorfile>classMDA__AccessConst.html</anchorfile>
      <anchor>ac14b4ffcf81c00f0a35e96f2770b8206</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>range_t::index_t</type>
      <name>index_t</name>
      <anchorfile>classMDA__AccessConst.html</anchorfile>
      <anchor>ab35cf58fab1be965248f5c91df5174d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrderType</type>
      <name>order_t</name>
      <anchorfile>classMDA__AccessConst.html</anchorfile>
      <anchor>a43202f36dbffa0cd94328b960e37ee40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MDA_AccessConst</name>
      <anchorfile>classMDA__AccessConst.html</anchorfile>
      <anchor>ad5f6fdf9b4d2e5e8aa292f5e01901757</anchor>
      <arglist>(value_t *p=((MDA_TYPE *) 0), const size_t *sz=((size_t *) 0), const index_t *st=((index_t *) 0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MDA_AccessConst</name>
      <anchorfile>classMDA__AccessConst.html</anchorfile>
      <anchor>a533ec7cb2a4322790005923a98e7873f</anchor>
      <arglist>(value_t *p, const index_t *si, const index_t *sf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MDA_AccessConst</name>
      <anchorfile>classMDA__AccessConst.html</anchorfile>
      <anchor>a147cf9f4891c835086587d8e744eac76</anchor>
      <arglist>(value_t *p, const MDA_IndexRange&lt; MDA_DIM &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MDA_AccessConst</name>
      <anchorfile>classMDA__AccessConst.html</anchorfile>
      <anchor>affd0f6510d469376ac2dab87543e4db5</anchor>
      <arglist>(const MDA_Access&lt; MDA_TYPE, MDA_DIM, OrderType &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>const MDA_AccessConst &amp;</type>
      <name>operator=</name>
      <anchorfile>classMDA__AccessConst.html</anchorfile>
      <anchor>ae332a2719b09d9398508e073901559fc</anchor>
      <arglist>(const MDA_Access&lt; MDA_TYPE, MDA_DIM, OrderType &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MDA_IndexRange</name>
    <filename>classMDA__IndexRange.html</filename>
    <templarg>MDA_DIM</templarg>
    <member kind="typedef">
      <type>short</type>
      <name>dir_t</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>a5147c557adc35004ca73ec23a7bf73dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>index_t</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>acd9cfdc512e0036bfd969ca477c24665</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MDA_IndexRange</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>a64b5d06607d0ec3cb3df358302669ca6</anchor>
      <arglist>(const size_t *sz=((size_t *) 0), const index_t *st=((index_t *) 0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MDA_IndexRange</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>a657384c7018f4b0a37d82dc1058a9018</anchor>
      <arglist>(const index_t *si, const index_t *sf)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MDA_IndexRange</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>abfb9f22dd77ebbbe23f64b113616d03f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumvalue">
      <name>D0</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>aac73465216b52b1ed0d8e79e9462adddab0cda22b40a4a902bb00c6935a28e727</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D1</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>aac73465216b52b1ed0d8e79e9462addda2ce4599ea10e993caf2970c306fde4d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D2</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>aac73465216b52b1ed0d8e79e9462adddafb79982a183a3d2be562491d33d1b92d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D3</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>aac73465216b52b1ed0d8e79e9462addda6d2c2e0f0f5de36a5d7cef9bc263c833</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D4</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>aac73465216b52b1ed0d8e79e9462adddae9313846a8c1c7834fbb7049732b3dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>index_t</type>
      <name>d_start</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>ad3a8c156ad6f0d2810d9919d29135020</anchor>
      <arglist>[MDA_DIM &gt; 0?MDA_DIM:1]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>index_t</type>
      <name>d_stop</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>a1c3864147a5c7b31fb1899bad555efcd</anchor>
      <arglist>[MDA_DIM &gt; 0?MDA_DIM:1]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>d_size</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>ab69118bcba9c3803f9d6d656573de811</anchor>
      <arglist>[MDA_DIM &gt; 0?MDA_DIM:1]</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSizeAndStart</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>ae0fe7863ed5212934257745adb8ee7e0</anchor>
      <arglist>(const size_t *sz=((size_t *) 0), const index_t *st=((index_t *) 0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInclusiveRange</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>a32966c055406e4d324da590a667df084</anchor>
      <arglist>(const index_t first[MDA_DIM], const index_t final[MDA_DIM])</arglist>
    </member>
    <member kind="function">
      <type>const MDA_IndexRange &amp;</type>
      <name>adjustDim</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>ac8b36da2f312165c6ca04304df432441</anchor>
      <arglist>(dir_t d, index_t first, index_t final)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>adb67911cbb93593c6888c720dfd451f5</anchor>
      <arglist>(const MDA_IndexRange &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>a94fa6a72266a98b372efe9469ea37aa8</anchor>
      <arglist>(const MDA_IndexRange &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>streamPut</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>a0158120cd85ae94ae2a01c10312f10a2</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>streamGet</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>a06a4a5e4f1b298f330d0310c951f1805</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>const index_t &amp;</type>
      <name>beg</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>aa549e319902dec196dffb82f30ee1592</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>const index_t &amp;</type>
      <name>end</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>a44035fff2512ba41e792a478235ffd99</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>const size_t &amp;</type>
      <name>size</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>a5fccc7d545d1772adee45f990f51d36c</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>totalSize</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>a14cf05d7f0430b7e2de1d015e02de010</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>a8f15254245d2f2faabe20aa39c0ab3ef</anchor>
      <arglist>(index_t i0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>af1eec88e269c5d79b24968e6c50d3815</anchor>
      <arglist>(index_t i0, index_t i1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>a184e981e5e145f28b08b6f23f068b006</anchor>
      <arglist>(index_t i0, index_t i1, index_t i2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>a5102ab37e0c23937dac9a2b29c544549</anchor>
      <arglist>(index_t i0, index_t i1, index_t i2, index_t i3) const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>a8e58cc3523c7024ec659a885fe7c10ed</anchor>
      <arglist>(std::ostream &amp;os, const MDA_IndexRange&lt; MDA_DIM &gt; &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classMDA__IndexRange.html</anchorfile>
      <anchor>ac0a022894191ddb4dcc33d31eabbedfd</anchor>
      <arglist>(std::istream &amp;is, MDA_IndexRange&lt; MDA_DIM &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MDA_OrderColMajor</name>
    <filename>classMDA__OrderColMajor.html</filename>
    <templarg>MDA_DIM</templarg>
    <base protection="private">MDA_IndexRange</base>
    <member kind="enumvalue">
      <name>MDA_Reduced_DIM</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>ac0ff8ba8689c37e2977a8ae218301f7da5b75a676baa589bc7f9943a104f833b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>index_t</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>ac0fc7c02f4d2d95ba40bc1d8f08eb057</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MDA_IndexRange&lt; MDA_DIM &gt;</type>
      <name>range_t</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>a8c5ea4b0595b37bd900cd1884dd305c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>range_t::dir_t</type>
      <name>dir_t</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>ae0877ff6c6322118e2f33b8f9e8e0e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MDA_OrderColMajor&lt; MDA_Reduced_DIM &gt;</type>
      <name>reduced_order_t</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>ae08bad45317f91bc44016ec5570eb06b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MDA_OrderColMajor</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>af011f0dc892d7b762eb417fcc7af7ac6</anchor>
      <arglist>(const size_t *sz=((size_t *) 0), const index_t *st=((index_t *) 0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MDA_OrderColMajor</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>a784607299410afb98cc2fd4dbbb280be</anchor>
      <arglist>(const index_t *si, const index_t *sf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MDA_OrderColMajor</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>aa6ed99ced22a5ff508f6648216cd5724</anchor>
      <arglist>(const range_t &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>totalSize</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>af79bd7ed1d7141d945f7c064b29e20a5</anchor>
      <arglist>(unsigned short d) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>reduce</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>a47c85d9493bab97e6122c1ed8456007d</anchor>
      <arglist>(index_t i, reduced_order_t &amp;new_order) const </arglist>
    </member>
    <member kind="function">
      <type>const range_t &amp;</type>
      <name>range</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>a6632b2a75ab47962461acdc90d27f9a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MDA_OrderColMajor &amp;</type>
      <name>setSizeAndStart</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>adf06407b3510b9633c3771ac6fbeae55</anchor>
      <arglist>(const size_t *sz=((size_t *) 0), const index_t *st=((index_t *) 0))</arglist>
    </member>
    <member kind="function">
      <type>const MDA_OrderColMajor &amp;</type>
      <name>setInclusiveRange</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>af0f13e4659597120f7f83a8470b20b90</anchor>
      <arglist>(const index_t first[MDA_DIM], const index_t final[MDA_DIM])</arglist>
    </member>
    <member kind="function">
      <type>const MDA_OrderColMajor &amp;</type>
      <name>adjustDim</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>a4522d24932400d8a5639a22aff786fe6</anchor>
      <arglist>(dir_t d, index_t first, index_t final)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>a9adaff39e6412c7e2b745d01bc580f4f</anchor>
      <arglist>(const MDA_OrderColMajor &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>aef1c3699a2c95a985c2b4ba5abf275cf</anchor>
      <arglist>(const MDA_OrderColMajor &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>index_t</type>
      <name>offset</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>ad49982dff5eff5429c7e7314e8b01793</anchor>
      <arglist>(const index_t i[MDA_DIM]) const </arglist>
    </member>
    <member kind="function">
      <type>index_t</type>
      <name>offset</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>aa06f01f13f37238d1ff82325f14b9836</anchor>
      <arglist>(index_t i0) const </arglist>
    </member>
    <member kind="function">
      <type>index_t</type>
      <name>offset</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>a0313e94933bc950984145437327f98d8</anchor>
      <arglist>(index_t i0, index_t i1) const </arglist>
    </member>
    <member kind="function">
      <type>index_t</type>
      <name>offset</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>a181f3e65e9075baea67bdd9cd1450de7</anchor>
      <arglist>(index_t i0, index_t i1, index_t i2) const </arglist>
    </member>
    <member kind="function">
      <type>index_t</type>
      <name>offset</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>a5c0d5a8120e466f556f72c14f399191d</anchor>
      <arglist>(index_t i0, index_t i1, index_t i2, index_t i3) const </arglist>
    </member>
    <member kind="function">
      <type>index_t</type>
      <name>fixedOffset</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>a4e4dae75af2df83180dd4a8a596d2b55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="enumvalue">
      <name>D0</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>aac196c8f0fd3d14fe1a3032375989e2ca201ac16fc91e0b3ba3e6de28ee1e426f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D1</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>aac196c8f0fd3d14fe1a3032375989e2ca8c163ba36419c9fc4bd0a8974b0ddfc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D2</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>aac196c8f0fd3d14fe1a3032375989e2caaba8edb89383c059b1b02ea4f0ce07ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D3</name>
      <anchorfile>classMDA__OrderColMajor.html</anchorfile>
      <anchor>aac196c8f0fd3d14fe1a3032375989e2ca6d9b37eda0b0bc637e6784cd0ec0ef30</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MDA_OrderRowMajor</name>
    <filename>classMDA__OrderRowMajor.html</filename>
    <templarg>MDA_DIM</templarg>
    <base protection="private">MDA_IndexRange</base>
    <member kind="enumvalue">
      <name>MDA_Reduced_DIM</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>a0693464b1c59d31d86fafef0038cff09a0e4126bfb2dbe11b08fc0c8aa73f8622</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>index_t</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>a7e074033808199321560c8e083c1a1b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MDA_IndexRange&lt; MDA_DIM &gt;</type>
      <name>range_t</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>a21fa6e49209bfff291fa75a4a3749b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>range_t::dir_t</type>
      <name>dir_t</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>a86953b59190629b48706b92aa8bb9965</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MDA_OrderRowMajor&lt; MDA_Reduced_DIM &gt;</type>
      <name>reduced_order_t</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>ac3a1c2ae597e57f26237104d7a272948</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MDA_OrderRowMajor</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>a829684a35ea3013da75e62dc7d89cfef</anchor>
      <arglist>(const size_t *sz=((size_t *) 0), const index_t *st=((index_t *) 0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MDA_OrderRowMajor</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>ac3db8bb6efed81f85a0fd090b297ab7a</anchor>
      <arglist>(const index_t *si, const index_t *sf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MDA_OrderRowMajor</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>a22d965ec5f696e6b9e1184e171475075</anchor>
      <arglist>(const range_t &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>totalSize</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>a828d7dd7ef226f081ea175973eec077a</anchor>
      <arglist>(unsigned short d) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>reduce</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>a45bffabf29ffc045b1186a9e890b29be</anchor>
      <arglist>(index_t i, reduced_order_t &amp;new_order) const </arglist>
    </member>
    <member kind="function">
      <type>const range_t &amp;</type>
      <name>range</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>abe985847fd16cb2d2cd0202ead768ed8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MDA_OrderRowMajor &amp;</type>
      <name>setSizeAndStart</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>a89ce853b9bc731b13dfab871461c6192</anchor>
      <arglist>(const size_t *sz=((size_t *) 0), const index_t *st=((index_t *) 0))</arglist>
    </member>
    <member kind="function">
      <type>const MDA_OrderRowMajor &amp;</type>
      <name>setInclusiveRange</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>a350f8ef6a0abe73a8283f0da3a6e9728</anchor>
      <arglist>(const index_t first[MDA_DIM], const index_t final[MDA_DIM])</arglist>
    </member>
    <member kind="function">
      <type>const MDA_OrderRowMajor &amp;</type>
      <name>adjustDim</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>ac8eb46172bd56f079765ea5ae6ea7aaa</anchor>
      <arglist>(dir_t d, index_t first, index_t final)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>aea1db9046a326c9029316a6cd2135eac</anchor>
      <arglist>(const MDA_OrderRowMajor &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>af72dc97838bd6d3e3c7cf59410fc8896</anchor>
      <arglist>(const MDA_OrderRowMajor &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>index_t</type>
      <name>offset</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>a7a8da29926d9e087edfabf2bb98ee6be</anchor>
      <arglist>(const index_t i[MDA_DIM]) const </arglist>
    </member>
    <member kind="function">
      <type>index_t</type>
      <name>offset</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>a8fe4f77f7c53bbc63fdf9a20faa63c68</anchor>
      <arglist>(index_t i0) const </arglist>
    </member>
    <member kind="function">
      <type>index_t</type>
      <name>offset</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>aed84cceb6107fe1b4fec3cbeed8d3181</anchor>
      <arglist>(index_t i0, index_t i1) const </arglist>
    </member>
    <member kind="function">
      <type>index_t</type>
      <name>offset</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>af1a28dbe0345037b66fbfbb840174fb5</anchor>
      <arglist>(index_t i0, index_t i1, index_t i2) const </arglist>
    </member>
    <member kind="function">
      <type>index_t</type>
      <name>offset</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>a4cc5af1f6d0040c683269dce26a488d5</anchor>
      <arglist>(index_t i0, index_t i1, index_t i2, index_t i3) const </arglist>
    </member>
    <member kind="function">
      <type>index_t</type>
      <name>fixedOffset</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>a8515c901ed57a38d80a31174abfc6374</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="enumvalue">
      <name>D0</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>adaf1013551aa242f9203f932a5830d98a58b834c64497a83fe5a10d2a005c83d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D1</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>adaf1013551aa242f9203f932a5830d98ab8e721c3f04ecd26ac4711b9cb71307d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D2</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>adaf1013551aa242f9203f932a5830d98a3b86b8bc3219f89fe69098d4ea48cb5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>D3</name>
      <anchorfile>classMDA__OrderRowMajor.html</anchorfile>
      <anchor>adaf1013551aa242f9203f932a5830d98a5d87951317a1d3d2a889a1cde0c9e00e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>yy_buffer_state</name>
    <filename>structyy__buffer__state.html</filename>
    <member kind="variable">
      <type>FILE *</type>
      <name>yy_input_file</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>a4843d1422e3276b636d475a3095bd948</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>yy_ch_buf</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>ad7b8df8d8a4688e57b0b8d3ca75adc85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>yy_buf_pos</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>a58aa927f098b99d99e75da80f9b681ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>yy_size_t</type>
      <name>yy_buf_size</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>a48302f5f3477a9c78bbddf56d356ef54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_n_chars</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>a06406208824817acfec2183b79080945</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_is_our_buffer</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>a80ce2431c70dc4f89ced487f18449465</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_is_interactive</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>abf5c70eea75581b58c0ee7bd31b14490</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_at_bol</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>a9d60c60af6e1a6f69de16871fd64f85f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_fill_buffer</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>a63d2afbb1d79a3fc63df9e12626f827d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_buffer_status</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>a70fd925d37a2f0454fbd0def675d106c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>yyalloc</name>
    <filename>unionyyalloc.html</filename>
    <member kind="variable">
      <type>yytype_int16</type>
      <name>yyss</name>
      <anchorfile>unionyyalloc.html</anchorfile>
      <anchor>aad44e4a724037e32eeb58333c516bb45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>YYSTYPE</type>
      <name>yyvs</name>
      <anchorfile>unionyyalloc.html</anchorfile>
      <anchor>a9494cc8d8cd0eba1b44ca20fe89de5d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>YYSTYPE</name>
    <filename>unionYYSTYPE.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>u_char</name>
      <anchorfile>unionYYSTYPE.html</anchorfile>
      <anchor>a2b65e525f21fb2ae2e40c73426a141b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>u_double</name>
      <anchorfile>unionYYSTYPE.html</anchorfile>
      <anchor>afdc2aaac1bee35fc42aaa23c3f24b547</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>u_integer</name>
      <anchorfile>unionYYSTYPE.html</anchorfile>
      <anchor>a8aad93df7251ff34145802e43323d407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KeyData *</type>
      <name>u_keydata</name>
      <anchorfile>unionYYSTYPE.html</anchorfile>
      <anchor>a52ef06ddee3df423c4809a2bd824fcd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string *</type>
      <name>u_keyword</name>
      <anchorfile>unionYYSTYPE.html</anchorfile>
      <anchor>a39af02ee9916968b86db8325780728b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string *</type>
      <name>u_string</name>
      <anchorfile>unionYYSTYPE.html</anchorfile>
      <anchor>a65ea5245d90314685abbd6761b2f2daf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Bdry</name>
    <filename>namespaceBdry.html</filename>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>namespaceBdry.html</anchorfile>
      <anchor>aad3d96e8fb5584ece448f695bc5055ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNDEFINED</name>
      <anchorfile>namespaceBdry.html</anchorfile>
      <anchor>aad3d96e8fb5584ece448f695bc5055aba362b1042988dd6dd7484015b76e39260</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FACE3D</name>
      <anchorfile>namespaceBdry.html</anchorfile>
      <anchor>aad3d96e8fb5584ece448f695bc5055abaeb57b9d5db99985835df377908fcb076</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EDGE3D</name>
      <anchorfile>namespaceBdry.html</anchorfile>
      <anchor>aad3d96e8fb5584ece448f695bc5055aba545ab7e250abb928202f2203c20b96fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NODE3D</name>
      <anchorfile>namespaceBdry.html</anchorfile>
      <anchor>aad3d96e8fb5584ece448f695bc5055aba54acdd9dff31c51ee6a89081fc11ab0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EDGE2D</name>
      <anchorfile>namespaceBdry.html</anchorfile>
      <anchor>aad3d96e8fb5584ece448f695bc5055abaa919a6a832c4e925fb55a83c4f108d44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NODE2D</name>
      <anchorfile>namespaceBdry.html</anchorfile>
      <anchor>aad3d96e8fb5584ece448f695bc5055aba7d837cb077a66a4f6ffc7931f4ac3c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NODE1D</name>
      <anchorfile>namespaceBdry.html</anchorfile>
      <anchor>aad3d96e8fb5584ece448f695bc5055abad8671dc28866256b7bfb8ed9c42bf0f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>BdryCond</name>
    <filename>namespaceBdryCond.html</filename>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLOW</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaada6508d34ee94eaac0aeec4dc93b670224</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REFLECT</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaada3377087764e427bbf84bcf05490fe5c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIRICHLET</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaadabcfde2b2403594f3acc9c523b3ccc844</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEUMANN</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaada78ba35a6bdfd280ae3127b910e5778ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XFLOW</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaadacf88d17396a28569091ece804b21c567</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YFLOW</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaadad1a3e6984bb1f841ee584d9df40cbf3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZFLOW</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaadaae2daa9e6bafe5e1cc7dcc81f80680a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XREFLECT</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaada150739d2a78130a2f916b16de9a4f608</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YREFLECT</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaada4ccdecd70cf8dd1eb41ff052c58acc12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZREFLECT</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaada14321946cc48a1fc327391914b81b638</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XDIRICHLET</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaada3c9e860dd167dcad173a79acb7dc2262</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YDIRICHLET</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaadadc65a39ac25197e61295cd71afb73e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZDIRICHLET</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaadab46918087847e9a62a2ef539ed9b0f57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XNEUMANN</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaada792dfc264a6250ecd84af96348355b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YNEUMANN</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaada74353458cfc99547da62f64c8a49aff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZNEUMANN</name>
      <anchorfile>namespaceBdryCond.html</anchorfile>
      <anchor>a3665127406930080e9e4761f69dadaada3313306e80b3b14d6a333a33bd71e145</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>BdryLoc</name>
    <filename>namespaceBdryLoc.html</filename>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>namespaceBdryLoc.html</anchorfile>
      <anchor>a49b41c770aad9ea0ce36dd9cf80b731f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO</name>
      <anchorfile>namespaceBdryLoc.html</anchorfile>
      <anchor>a49b41c770aad9ea0ce36dd9cf80b731faa78c4eaddbc1c42cb57180bd33e048a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI</name>
      <anchorfile>namespaceBdryLoc.html</anchorfile>
      <anchor>a49b41c770aad9ea0ce36dd9cf80b731fae71c4036ad2a69d854d5c69d6d0b8cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YLO</name>
      <anchorfile>namespaceBdryLoc.html</anchorfile>
      <anchor>a49b41c770aad9ea0ce36dd9cf80b731fa34ce3786af9c194354211381ca79a0eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YHI</name>
      <anchorfile>namespaceBdryLoc.html</anchorfile>
      <anchor>a49b41c770aad9ea0ce36dd9cf80b731fa6d1cbd4a9fef56ddf7d82c7a749e6b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZLO</name>
      <anchorfile>namespaceBdryLoc.html</anchorfile>
      <anchor>a49b41c770aad9ea0ce36dd9cf80b731fa6081b2b1d87a6250c4693eca7100e8d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZHI</name>
      <anchorfile>namespaceBdryLoc.html</anchorfile>
      <anchor>a49b41c770aad9ea0ce36dd9cf80b731fa11ed4a34f280d1d9e81a06ceb15b6bae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>EdgeBdyLoc3D</name>
    <filename>namespaceEdgeBdyLoc3D.html</filename>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO_YLO</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98ad9841d711e67c982c9d18530a686c439</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI_YLO</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98aa7a2d53657ebc05af365a574f52e47bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO_YHI</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98a858bc2de524df6a256ad3d64c3a95f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI_YHI</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98ab6702ca85e79ec8879da70919b5a38ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO_ZLO</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98a4139c928a385ce281d020885217bf443</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI_ZLO</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98ae015c7751e93ef251b01a9403bd6c521</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO_ZHI</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98a0f73a91e1adfc6797fb8adfe2d065dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI_ZHI</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98a84c46f5de24d7b4dc66bd0e63cfc87fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YLO_ZLO</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98a642290223bc0d5e361365a3d7effe29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YHI_ZLO</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98a1dfd0fa1c55d360c2825adfbd7ad0333</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YLO_ZHI</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98a983023c0858deed6eb4510adf3c2e2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YHI_ZHI</name>
      <anchorfile>namespaceEdgeBdyLoc3D.html</anchorfile>
      <anchor>a80677abe2604d2a8ee8d738288be0f98a0f4b1b16a167f59be6f654171c40f8a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>NodeBdyLoc2D</name>
    <filename>namespaceNodeBdyLoc2D.html</filename>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>namespaceNodeBdyLoc2D.html</anchorfile>
      <anchor>a18111e3e772b98125a27dea94cbe7c1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO_YLO</name>
      <anchorfile>namespaceNodeBdyLoc2D.html</anchorfile>
      <anchor>a18111e3e772b98125a27dea94cbe7c1da33c87e68716c8d89ae377eba6cb58179</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI_YLO</name>
      <anchorfile>namespaceNodeBdyLoc2D.html</anchorfile>
      <anchor>a18111e3e772b98125a27dea94cbe7c1daa7a834b68f8fb1237b83fed3880dfa1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO_YHI</name>
      <anchorfile>namespaceNodeBdyLoc2D.html</anchorfile>
      <anchor>a18111e3e772b98125a27dea94cbe7c1da143473cf6922f5f1b8cf8efc3ea1dd33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI_YHI</name>
      <anchorfile>namespaceNodeBdyLoc2D.html</anchorfile>
      <anchor>a18111e3e772b98125a27dea94cbe7c1da799b7ea5bf0215fbeafd8e1179d1f120</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>NodeBdyLoc3D</name>
    <filename>namespaceNodeBdyLoc3D.html</filename>
    <member kind="enumeration">
      <name>Type</name>
      <anchorfile>namespaceNodeBdyLoc3D.html</anchorfile>
      <anchor>a1710e3668d50a4c92a46747f4298d430</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO_YLO_ZLO</name>
      <anchorfile>namespaceNodeBdyLoc3D.html</anchorfile>
      <anchor>a1710e3668d50a4c92a46747f4298d430adb7f44f4bb8c521da9a5a57b9701e649</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI_YLO_ZLO</name>
      <anchorfile>namespaceNodeBdyLoc3D.html</anchorfile>
      <anchor>a1710e3668d50a4c92a46747f4298d430a4f9ae62a85ca17abdfc916214be2f24b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO_YHI_ZLO</name>
      <anchorfile>namespaceNodeBdyLoc3D.html</anchorfile>
      <anchor>a1710e3668d50a4c92a46747f4298d430ad5a9f71ab5d4af29b0f37b0e5a93e418</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI_YHI_ZLO</name>
      <anchorfile>namespaceNodeBdyLoc3D.html</anchorfile>
      <anchor>a1710e3668d50a4c92a46747f4298d430a52bc542db4af07afd75c7f009d8d87fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO_YLO_ZHI</name>
      <anchorfile>namespaceNodeBdyLoc3D.html</anchorfile>
      <anchor>a1710e3668d50a4c92a46747f4298d430af9a57422ac02726cc49c4db9ad050811</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI_YLO_ZHI</name>
      <anchorfile>namespaceNodeBdyLoc3D.html</anchorfile>
      <anchor>a1710e3668d50a4c92a46747f4298d430ae389544f5613b8034259f6f5304119c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XLO_YHI_ZHI</name>
      <anchorfile>namespaceNodeBdyLoc3D.html</anchorfile>
      <anchor>a1710e3668d50a4c92a46747f4298d430acf1c2882e773ecc4d2aca9b3524cb18a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>XHI_YHI_ZHI</name>
      <anchorfile>namespaceNodeBdyLoc3D.html</anchorfile>
      <anchor>a1710e3668d50a4c92a46747f4298d430aef851cf60880b04f3e8c4195cac1c395</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI</name>
    <filename>namespaceSAMRAI.html</filename>
    <namespace>SAMRAI::tbox</namespace>
    <namespace>SAMRAI::hier</namespace>
    <namespace>SAMRAI::xfer</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <namespace>SAMRAI::math</namespace>
    <namespace>SAMRAI::mesh</namespace>
    <namespace>SAMRAI::geom</namespace>
    <namespace>SAMRAI::solv</namespace>
    <namespace>SAMRAI::algs</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::algs</name>
    <filename>namespaceSAMRAI_1_1algs.html</filename>
    <class kind="class">SAMRAI::algs::HyperbolicLevelIntegrator</class>
    <class kind="class">SAMRAI::algs::HyperbolicPatchStrategy</class>
    <class kind="class">SAMRAI::algs::ImplicitEquationStrategy</class>
    <class kind="class">SAMRAI::algs::ImplicitIntegrator</class>
    <class kind="class">SAMRAI::algs::MethodOfLinesIntegrator</class>
    <class kind="class">SAMRAI::algs::MethodOfLinesPatchStrategy</class>
    <class kind="class">SAMRAI::algs::OuteredgeSumTransaction</class>
    <class kind="class">SAMRAI::algs::OuteredgeSumTransactionFactory</class>
    <class kind="class">SAMRAI::algs::OuternodeSumTransaction</class>
    <class kind="class">SAMRAI::algs::OuternodeSumTransactionFactory</class>
    <class kind="class">SAMRAI::algs::PatchBoundaryEdgeSum</class>
    <class kind="class">SAMRAI::algs::PatchBoundaryNodeSum</class>
    <class kind="class">SAMRAI::algs::TimeRefinementIntegrator</class>
    <class kind="class">SAMRAI::algs::TimeRefinementIntegratorConnectorWidthRequestor</class>
    <class kind="class">SAMRAI::algs::TimeRefinementLevelStrategy</class>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::HyperbolicLevelIntegrator</name>
    <filename>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</filename>
    <base>SAMRAI::algs::TimeRefinementLevelStrategy</base>
    <base>SAMRAI::mesh::StandardTagAndInitStrategy</base>
    <base>SAMRAI::tbox::Serializable</base>
    <member kind="enumeration">
      <name>HYP_VAR_TYPE</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a2b942773b6adae963741add627777f4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIME_DEP</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a2b942773b6adae963741add627777f4da0b702e61e735252458e0c19132477cf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INPUT</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a2b942773b6adae963741add627777f4da6c92d0f502c292eca993115478274f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_FILL</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a2b942773b6adae963741add627777f4da6fa7dc8650ffdf0ad4c2fb9d426648e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLUX</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a2b942773b6adae963741add627777f4da2d61c4a197489f17c392916db2c2e3ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TEMPORARY</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a2b942773b6adae963741add627777f4da8069329391cb780b2b5d76e73cfbf42f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HyperbolicLevelIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a13661b7333ec765370f96a685fcbcacf</anchor>
      <arglist>(const std::string &amp;object_name, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db, HyperbolicPatchStrategy *patch_strategy, bool use_time_refinement=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HyperbolicLevelIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>aee597348695b9547fe23da382eba4fef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeLevelIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a4064636b14a01ecea1d8955cb55ca37d</anchor>
      <arglist>(const boost::shared_ptr&lt; mesh::GriddingAlgorithmStrategy &gt; &amp;gridding_alg_strategy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLevelDt</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>ac933568dd0b8224b3bbd8bc1e7f8e912</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, const double dt_time, const bool initial_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxFinerLevelDt</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a4c97ede99c6fb8dad26a6fcfb14e697d</anchor>
      <arglist>(const int finer_level_number, const double coarse_dt, const hier::IntVector &amp;ratio_to_coarser)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>advanceLevel</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>adbc2c374748ac0bf3a1a2fb07405f12e</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const double current_time, const double new_time, const bool first_step, const bool last_step, const bool regrid_advance=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>standardLevelSynchronization</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a942fe38b617a8415e112d831e98023cb</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level, const int finest_level, const double sync_time, const std::vector&lt; double &gt; &amp;old_times)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>standardLevelSynchronization</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a04ac7a58562ba68f4e8ff7f1134b9100</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level, const int finest_level, const double sync_time, const double old_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>synchronizeNewLevels</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a945fc46f1f747c7cd5b7dac733c031b6</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level, const int finest_level, const double sync_time, const bool initial_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetTimeDependentData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a16caf57e64b65c96a79e9586ad7c7afd</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, const double new_time, const bool can_be_refined)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetDataToPreadvanceState</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a7cb2ba4233d041889d30005154e08527</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeLevelData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a392e88cf1fae4ef9f5fc09cbfc30cc8e</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const double init_data_time, const bool can_be_refined, const bool initial_time, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;old_level=boost::shared_ptr&lt; hier::PatchLevel &gt;(), const bool allocate_data=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetHierarchyConfiguration</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a537371effd1221180c639dd54f0ef057</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyGradientDetector</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a7f88cdceb7bc9afb7d33c2f117f8c68c</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const double error_data_time, const int tag_index, const bool initial_time, const bool uses_richardson_extrapolation_too)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyRichardsonExtrapolation</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a9207e0ee3cdf883f12fb7ea2809f96b7</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, const double error_data_time, const int tag_index, const double deltat, const int error_coarsen_ratio, const bool initial_time, const bool uses_gradient_detector_too)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>coarsenDataForRichardsonExtrapolation</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>acca15f011e7ce423fc574ee26ad56320</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;coarse_level, const double coarsen_data_time, const bool before_advance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerVariable</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>abdcab6c4fa5e46ca902202d98246b40a</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Variable &gt; &amp;var, const hier::IntVector ghosts, const HYP_VAR_TYPE h_v_type, const boost::shared_ptr&lt; hier::BaseGridGeometry &gt; &amp;transfer_geom, const std::string &amp;coarsen_name=std::string(), const std::string &amp;refine_name=std::string())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>afc904e9bd24a00f5964b2a3b89aa88e2</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a22b1b8c229365790d6b7751e6e79b79d</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::VariableContext &gt;</type>
      <name>getCurrentContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a28ed6af341fdcaa7b6b056e33a524799</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::VariableContext &gt;</type>
      <name>getNewContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>aa11e245e1a4c1909d18a64e71c42143b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::VariableContext &gt;</type>
      <name>getOldContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>aa59d005a38235327999883496fbea095</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::VariableContext &gt;</type>
      <name>getScratchContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a4736fe87631feaa1c234b55ced8cfd36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::VariableContext &gt;</type>
      <name>getPlotContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a1d894e17b709a2ec6ef4ca167842f10c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usingRefinedTimestepping</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>aeca1cb61d5d5e5f9ce5dd15175b9b50c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStatistics</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>ab0fc6774d81a203fc1189d5af578a24d</anchor>
      <arglist>(std::ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a58c4336cc6c7ff408ac7ce79908c872a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getFromInput</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a08f5b907893bd76e0f843f7287438e47</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db, bool is_from_restart)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a054e224c8f4f4de88e6697b9c5d6f1a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessFluxData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>ad039dcd0eccf7c4ead3ad12ade6ea5c3</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, const double cur_time, const double new_time, const bool regrid_advance, const bool first_step, const bool last_step)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessFluxData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a8cb0540f8a8d68b52ce85c9daa3f450a</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, const bool regrid_advance, const bool first_step, const bool last_step)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyTimeDependentData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a49a106085a3a1ed06d0c5664bce5483e</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, const boost::shared_ptr&lt; hier::VariableContext &gt; &amp;src_context, const boost::shared_ptr&lt; hier::VariableContext &gt; &amp;dst_context)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>synchronizeLevelWithCoarser</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a2ee358683ba0b8bee7998bc2514b8083</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;fine, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;coarse, const double sync_time, const double coarse_sim_time)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkUserTagData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a4761c7480bd74b8319673a6b583dbd5f</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const int tag_index) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkNewLevelTagData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a3b804b8a67a0ffb68264d14b43f0adcc</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const int tag_index) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::HyperbolicPatchStrategy</name>
    <filename>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</filename>
    <base>SAMRAI::xfer::RefinePatchStrategy</base>
    <base>SAMRAI::xfer::CoarsenPatchStrategy</base>
    <member kind="function">
      <type></type>
      <name>HyperbolicPatchStrategy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>aedd6b70351a72080525733b3dfed6b14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HyperbolicPatchStrategy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>aaa4bc1edb9920d6941819b5ca8eb5a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>registerModelVariables</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a4d86d87131ab8824d6884167639acb70</anchor>
      <arglist>(HyperbolicLevelIntegrator *integrator)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setupLoadBalancer</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a0daef6ee86089e2c854cc98e6ea90d5a</anchor>
      <arglist>(HyperbolicLevelIntegrator *integrator, mesh::GriddingAlgorithm *gridding_algorithm)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeDataOnPatch</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>ab8610a2fa09736537b72315a66bfa326</anchor>
      <arglist>(hier::Patch &amp;patch, const double data_time, const bool initial_time)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>computeStableDtOnPatch</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>adce818986288899185e5832fd7b565f6</anchor>
      <arglist>(hier::Patch &amp;patch, const bool initial_time, const double dt_time)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeFluxesOnPatch</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a6ae2404eb90897f5e311baafbe1a6fd3</anchor>
      <arglist>(hier::Patch &amp;patch, const double time, const double dt)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>conservativeDifferenceOnPatch</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a5c416adf7d32d80d73eb8cef33b72e96</anchor>
      <arglist>(hier::Patch &amp;patch, const double time, const double dt, bool at_syncronization)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessAdvanceLevelState</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a9ea18d3f8fb24ba1844bef95ed7e199d</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, double current_time, double dt, bool first_step, bool last_step, bool regrid_advance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessAdvanceLevelState</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a5004a132c246a33510ec13acc9b8c0ac</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, double current_time, double dt, bool first_step, bool last_step, bool regrid_advance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tagGradientDetectorCells</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a7acd9a47ff0f33244ffe54a7352ce424</anchor>
      <arglist>(hier::Patch &amp;patch, const double regrid_time, const bool initial_error, const int tag_index, const bool uses_richardson_extrapolation_too)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tagRichardsonExtrapolationCells</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>aec657d0e4b2e91b3bf42fa11dd5fc67d</anchor>
      <arglist>(hier::Patch &amp;patch, const int error_level_number, const boost::shared_ptr&lt; hier::VariableContext &gt; &amp;coarsened_fine, const boost::shared_ptr&lt; hier::VariableContext &gt; &amp;advanced_coarse, const double regrid_time, const double deltat, const int error_coarsen_ratio, const bool initial_error, const int tag_index, const bool uses_gradient_detector_too)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPhysicalBoundaryConditions</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>af482fa0a13cf89f84276b5d1f6b09822</anchor>
      <arglist>(hier::Patch &amp;patch, const double fill_time, const hier::IntVector &amp;ghost_width_to_fill)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkUserTagData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>ab32ee46543f3a0149034b47b15d27bb0</anchor>
      <arglist>(hier::Patch &amp;patch, const int tag_index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkNewPatchTagData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>ab10399923e20d7975aa0caf615dd7f8a</anchor>
      <arglist>(hier::Patch &amp;patch, const int tag_index) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::VariableContext &gt;</type>
      <name>getDataContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a396812b3487197d2dba1ff8a8ebd5af7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a024e4745981ac453284f616e187d3a01</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::VariableContext &gt; &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearDataContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a7a96b203c4ce422aba0944c9bca0b469</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::ImplicitEquationStrategy</name>
    <filename>classSAMRAI_1_1algs_1_1ImplicitEquationStrategy.html</filename>
    <member kind="function">
      <type></type>
      <name>ImplicitEquationStrategy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitEquationStrategy.html</anchorfile>
      <anchor>add0a95816c45337f53cb464e3b65d74d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImplicitEquationStrategy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitEquationStrategy.html</anchorfile>
      <anchor>a6784f714a2a9d8d1c1ae9999a44ad1fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setupSolutionVector</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitEquationStrategy.html</anchorfile>
      <anchor>ad5dd5ab73bee699b37ea07c5c3e20159</anchor>
      <arglist>(const boost::shared_ptr&lt; solv::SAMRAIVectorReal&lt; double &gt; &gt; &amp;solution)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getInitialDt</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitEquationStrategy.html</anchorfile>
      <anchor>a16f604968a42cb815c6c7c41de0abbbe</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getNextDt</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitEquationStrategy.html</anchorfile>
      <anchor>af694f80e5242f7e8ff152dad6d1191a5</anchor>
      <arglist>(const bool good_solution, const int solver_retcode)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setInitialGuess</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitEquationStrategy.html</anchorfile>
      <anchor>a134f87aeaa08d4b9c56a300699f768d9</anchor>
      <arglist>(const bool first_step, const double current_time, const double current_dt, const double old_dt)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>checkNewSolution</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitEquationStrategy.html</anchorfile>
      <anchor>adce15089d82d877daeab7935000dddd2</anchor>
      <arglist>(const int solver_retcode)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateSolution</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitEquationStrategy.html</anchorfile>
      <anchor>a14c4f95d90ca8e69715c0a820ed2ea67</anchor>
      <arglist>(const double new_time)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::ImplicitIntegrator</name>
    <filename>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</filename>
    <base>SAMRAI::tbox::Serializable</base>
    <member kind="function">
      <type></type>
      <name>ImplicitIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>abc2c4b27b4463b8c3696891fdee4dba8</anchor>
      <arglist>(const std::string &amp;object_name, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db, ImplicitEquationStrategy *implicit_equations, solv::NonlinearSolverStrategy *nonlinear_solver, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImplicitIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a708efc1e4ab94b62b36b475c68874307</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a682d2067a0e651b1cabd0d61f65b9e68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advanceSolution</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a78bcc02aaf136261232b78c5072b65ce</anchor>
      <arglist>(const double dt, const bool first_step)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNextDt</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>ac165b0444f0f783dae58d70f556950f3</anchor>
      <arglist>(const bool good_solution, const int solver_retcode)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkNewSolution</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>ad02fc407ef8863e5523df3cdba6c0eb9</anchor>
      <arglist>(const int solver_retcode) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>updateSolution</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>afde3e964c7d665856e6336c503ebf114</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getInitialTime</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>af5f34e622e1d0cadc41c40298a54baba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFinalTime</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>ad584d4ee33483c454ed80518fb8a0661</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCurrentTime</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>aec4358e89767c5b3b55e1691d69ec419</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCurrentDt</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>acb2fc8226650e70019b4c3777488e0e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntegratorStep</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a6da5cb7ef328da806dbc19e01457b6fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxIntegratorSteps</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>ad95dcdb9a3d4dbc519177cbf7ce6700e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stepsRemaining</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a7489cbab8d0f845516e44689b13dcafa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a89e68eacfb6209b36b0b63dad51bb822</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a20150fe16d9397caf3013971f1346928</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a0ef0ac15fcf57f951a9bccbd05ba2fd7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::MethodOfLinesIntegrator</name>
    <filename>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</filename>
    <base>SAMRAI::tbox::Serializable</base>
    <base>SAMRAI::mesh::StandardTagAndInitStrategy</base>
    <member kind="enumeration">
      <name>MOL_VAR_TYPE</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a25ed25ae080357a46aaac785496e1775</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOLN</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a25ed25ae080357a46aaac785496e1775a10c156c3215dfc4bbff06ec8eb25d053</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RHS</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a25ed25ae080357a46aaac785496e1775a7e0bc60a9247f08d98d861c39d520594</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MethodOfLinesIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a19aae3600496759725acfc08bd0dd72d</anchor>
      <arglist>(const std::string &amp;object_name, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db, MethodOfLinesPatchStrategy *patch_strategy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MethodOfLinesIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a313ebec84e01ccd5939bbf6c858c33f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>acb5424717b932bbfd7191bae8bbae004</anchor>
      <arglist>(const boost::shared_ptr&lt; mesh::GriddingAlgorithm &gt; &amp;gridding_alg)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTimestep</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a686d7d7e5b350150950f73dc17de202f</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const double time) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceHierarchy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>ab15c0df323f82747232cabb1490671a7</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const double time, const double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerVariable</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a33923f2cf98de20eb3effac6888f41d5</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Variable &gt; &amp;variable, const hier::IntVector &amp;ghosts, const MOL_VAR_TYPE m_v_type, const boost::shared_ptr&lt; hier::BaseGridGeometry &gt; &amp;transfer_geom, const std::string &amp;coarsen_name=std::string(), const std::string &amp;refine_name=std::string())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a6e6a7b029afd818fc75f9ce19b25c556</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeLevelData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>ade065cc3ed6bd4936b72dcc88df07580</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const double init_time, const bool can_be_refined, const bool initial_time, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;old_level=boost::shared_ptr&lt; hier::PatchLevel &gt;(), const bool allocate_data=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetHierarchyConfiguration</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a97a0d8a66c02d0c4c39701747aa61fac</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyGradientDetector</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>aa8cc336004d00cc179e9b6c4978dd4f3</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const double time, const int tag_index, const bool initial_time, const bool uses_richardson_extrapolation_too)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>ad2b76a8dadb25206a3b8e9e7e260ddd2</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a490ecd121d71da22b6928c640454cf69</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::MethodOfLinesPatchStrategy</name>
    <filename>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</filename>
    <base>SAMRAI::xfer::RefinePatchStrategy</base>
    <base>SAMRAI::xfer::CoarsenPatchStrategy</base>
    <member kind="function">
      <type></type>
      <name>MethodOfLinesPatchStrategy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a480516ff28c181e8a6c92179d3b3c1ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~MethodOfLinesPatchStrategy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a497f8142c09f645c1cf1d760b86dc413</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>registerModelVariables</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>aff8f6ef934a337a2e4f86f000233851c</anchor>
      <arglist>(MethodOfLinesIntegrator *integrator)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeDataOnPatch</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>ae4e0d2e3309dbb5be78158c84212db05</anchor>
      <arglist>(hier::Patch &amp;patch, const double time, const bool initial_time) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>computeStableDtOnPatch</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a68c086922e74ae0f8cba318573df1c41</anchor>
      <arglist>(hier::Patch &amp;patch, const double time) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>singleStep</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a3163b0a1c4d2e11d74f12591aad59e95</anchor>
      <arglist>(hier::Patch &amp;patch, const double dt, const double alpha_1, const double alpha_2, const double beta) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>tagGradientDetectorCells</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>ac799539cc1d417aae811743a6f4c8a84</anchor>
      <arglist>(hier::Patch &amp;patch, const double regrid_time, const bool initial_error, const int tag_index, const bool uses_richardson_extrapolation_too)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPhysicalBoundaryConditions</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a712040f2a35c444883c9cb8e3f06af14</anchor>
      <arglist>(hier::Patch &amp;patch, const double fill_time, const hier::IntVector &amp;ghost_width_to_fill)=0</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::VariableContext &gt;</type>
      <name>getInteriorWithGhostsContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a188518bf40329018b3eceb6c63e8586b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::VariableContext &gt;</type>
      <name>getInteriorContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>ad07fe543d11192a37a1bae1e63ad89a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInteriorWithGhostsContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>ae73949c7353babf1d4a260f25c9dc690</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::VariableContext &gt; &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInteriorContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>aa1c057f4751883e48e11a359d0fbc6eb</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::VariableContext &gt; &amp;context)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::OuteredgeSumTransaction</name>
    <filename>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</filename>
    <base>SAMRAI::tbox::Transaction</base>
    <member kind="function">
      <type></type>
      <name>OuteredgeSumTransaction</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>ace33cb7a667f45aa96c2c0d385898805</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;dst_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;src_level, const boost::shared_ptr&lt; hier::BoxOverlap &gt; &amp;overlap, const hier::Box &amp;dst_node, const hier::Box &amp;src_node, const xfer::RefineClasses::Data **refine_data, int item_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuteredgeSumTransaction</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>a6b8a198711504f2bd127d0a85bae06c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>aa859a20a7118d8ca59a38f5d1468a121</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>computeIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>aa967f76bd6cd428cb4e8e75921749375</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>computeOutgoingMessageSize</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>abaa62188794a21f7ae3d485430b600e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSourceProcessor</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>a2bd60472bebea83d14a6690e685ae61d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDestinationProcessor</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>a978655d47cd90e8edf64ecbf2d629d34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>a8f9b5241347b89525e748d19aebe555c</anchor>
      <arglist>(tbox::MessageStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>a99dce8d595bc9ca7973477bfe02e8b8b</anchor>
      <arglist>(tbox::MessageStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyLocalData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>a03d3b240a4f2ef083ba37b00cea29940</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>aa5bef558346f1d3963cdbdc57f967732</anchor>
      <arglist>(std::ostream &amp;stream) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::OuteredgeSumTransactionFactory</name>
    <filename>classSAMRAI_1_1algs_1_1OuteredgeSumTransactionFactory.html</filename>
    <base>SAMRAI::xfer::RefineTransactionFactory</base>
    <member kind="function">
      <type></type>
      <name>OuteredgeSumTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransactionFactory.html</anchorfile>
      <anchor>a1737e3f6544e59048a7130dd22541ef2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuteredgeSumTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransactionFactory.html</anchorfile>
      <anchor>a6406b8048bead2b62baf327dca750cf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransactionFactory.html</anchorfile>
      <anchor>a23c8b22fa2512bd99ee7b8a065c1232a</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;dst_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;src_level, const boost::shared_ptr&lt; hier::BoxOverlap &gt; &amp;overlap, const hier::Box &amp;dst_node, const hier::Box &amp;src_node, const xfer::RefineClasses::Data **refine_data, int item_id, const hier::Box &amp;box, bool use_time_interpolation=false) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransactionFactory.html</anchorfile>
      <anchor>a30116b9ffe332347b6db1de1791ea92c</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;dst_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;src_level, const boost::shared_ptr&lt; hier::BoxOverlap &gt; &amp;overlap, const hier::Box &amp;dst_node, const hier::Box &amp;src_node, const xfer::RefineClasses::Data **refine_data, int item_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocessScratchSpace</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransactionFactory.html</anchorfile>
      <anchor>a843172193655029690c5554a691a6550</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, double fill_time, const hier::ComponentSelector &amp;preprocess_vector) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::OuternodeSumTransaction</name>
    <filename>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</filename>
    <base>SAMRAI::tbox::Transaction</base>
    <member kind="function">
      <type></type>
      <name>OuternodeSumTransaction</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>a31309a8f3eba0b81c24e054a9ed4e58e</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;dst_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;src_level, const boost::shared_ptr&lt; hier::BoxOverlap &gt; &amp;overlap, const hier::Box &amp;dst_node, const hier::Box &amp;src_node, const xfer::RefineClasses::Data **refine_data, int item_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuternodeSumTransaction</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>a612feb2f27363eb710d9d8dba4cbd40a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>afa1f1c42394923ebbe74897be9f8445c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>computeIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>add88634f39f3813502ac8d0c97dbdf87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>computeOutgoingMessageSize</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>ab7f43386dd4388b651bed94a4e51da74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSourceProcessor</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>a89ca3f5e98c4ee68267e18d790591d27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDestinationProcessor</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>ac884c3efa3b29cd4ae9e9e8d9bf9bc77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>a9cf3d27197507ff6c1a6d182b10b5c3b</anchor>
      <arglist>(tbox::MessageStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>aeec0813aee54dc25d075289485a68cae</anchor>
      <arglist>(tbox::MessageStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyLocalData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>af5a8a8cc0f8db0802e81d99afdaa033b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>ad6d3ae065b7fdcd8c8f4158c25eb351f</anchor>
      <arglist>(std::ostream &amp;stream) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::OuternodeSumTransactionFactory</name>
    <filename>classSAMRAI_1_1algs_1_1OuternodeSumTransactionFactory.html</filename>
    <base>SAMRAI::xfer::RefineTransactionFactory</base>
    <member kind="function">
      <type></type>
      <name>OuternodeSumTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransactionFactory.html</anchorfile>
      <anchor>aab9a0a20962fb3bc598db314f33812cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuternodeSumTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransactionFactory.html</anchorfile>
      <anchor>a1c3ef27cc602ed8e38253454c0d8d8a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefineItems</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransactionFactory.html</anchorfile>
      <anchor>ae1290d4c6c3d5ffbd6d9d4af02bd0f59</anchor>
      <arglist>(const xfer::RefineClasses::Data *const *refine_items)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetRefineItems</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransactionFactory.html</anchorfile>
      <anchor>a75a2a18b55df79a3f1db460076056968</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransactionFactory.html</anchorfile>
      <anchor>a5b892266c390e51c003c7187f86ed947</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;dst_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;src_level, const boost::shared_ptr&lt; hier::BoxOverlap &gt; &amp;overlap, const hier::Box &amp;dst_node, const hier::Box &amp;src_node, const xfer::RefineClasses::Data **refine_data, int item_id, const hier::Box &amp;box, bool use_time_interpolation=false) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransactionFactory.html</anchorfile>
      <anchor>a7766a9f2740141f9b3bd40be96c00907</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;dst_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;src_level, const boost::shared_ptr&lt; hier::BoxOverlap &gt; &amp;overlap, const hier::Box &amp;dst_node, const hier::Box &amp;src_node, const xfer::RefineClasses::Data **refine_data, int item_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocessScratchSpace</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransactionFactory.html</anchorfile>
      <anchor>af95dfca23e683fff51ae2a170f819b2b</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, double fill_time, const hier::ComponentSelector &amp;preprocess_vector) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::PatchBoundaryEdgeSum</name>
    <filename>classSAMRAI_1_1algs_1_1PatchBoundaryEdgeSum.html</filename>
    <member kind="function">
      <type></type>
      <name>PatchBoundaryEdgeSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryEdgeSum.html</anchorfile>
      <anchor>a3f6779a264640c2b08789c586f556ebc</anchor>
      <arglist>(const std::string &amp;object_name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PatchBoundaryEdgeSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryEdgeSum.html</anchorfile>
      <anchor>af170d39869c705b6066a6ffca21565f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryEdgeSum.html</anchorfile>
      <anchor>a2d8f676dcb0bc7007e630ef052eb9a74</anchor>
      <arglist>(int edge_data_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryEdgeSum.html</anchorfile>
      <anchor>a90b2f0d56bbb111cb4c10be34a2e2c92</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryEdgeSum.html</anchorfile>
      <anchor>ad813c9c0520f8d649bb272ab2cc98c15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryEdgeSum.html</anchorfile>
      <anchor>a0003811faf69a908e5aa86a1235f95e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumSharedPatchDataSlots</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryEdgeSum.html</anchorfile>
      <anchor>aec4184c3315cb625bfdd36061b18221a</anchor>
      <arglist>(int max_variables_to_register)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumUniquePatchDataSlots</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryEdgeSum.html</anchorfile>
      <anchor>a5b154bc42c78df5557a9904784d24675</anchor>
      <arglist>(int max_variables_to_register)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::PatchBoundaryNodeSum</name>
    <filename>classSAMRAI_1_1algs_1_1PatchBoundaryNodeSum.html</filename>
    <member kind="function">
      <type></type>
      <name>PatchBoundaryNodeSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryNodeSum.html</anchorfile>
      <anchor>aa1832c3d8b885320be4e4aa595fbe6da</anchor>
      <arglist>(const std::string &amp;object_name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PatchBoundaryNodeSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryNodeSum.html</anchorfile>
      <anchor>a2e26f5c7bddae4a40e3cc9c3cdb45e97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryNodeSum.html</anchorfile>
      <anchor>aed77c21cae01fd7954e5689993d229aa</anchor>
      <arglist>(int node_data_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryNodeSum.html</anchorfile>
      <anchor>adf0e9e84c1613752400f1a6d99e7884e</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryNodeSum.html</anchorfile>
      <anchor>aa21e5a9a5b5378dfa0e15c8d3e3eb1b4</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryNodeSum.html</anchorfile>
      <anchor>a0a8c7e4775157b6dcb33ee1cbb9d5eb1</anchor>
      <arglist>(const bool fill_hanging_nodes=false) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryNodeSum.html</anchorfile>
      <anchor>a342d94db03c01d1c1317f246356ec5c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumSharedPatchDataSlots</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryNodeSum.html</anchorfile>
      <anchor>aaae1016ab6a00007dbc51a3660b971de</anchor>
      <arglist>(int max_variables_to_register)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumUniquePatchDataSlots</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryNodeSum.html</anchorfile>
      <anchor>a3e5f00d614aa88248b0aba35fd68e3e8</anchor>
      <arglist>(int max_variables_to_register)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::TimeRefinementIntegrator</name>
    <filename>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</filename>
    <base>SAMRAI::tbox::Serializable</base>
    <member kind="function">
      <type></type>
      <name>TimeRefinementIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>acc3f18ea8b74f92bcb6214977d70e918</anchor>
      <arglist>(const std::string &amp;object_name, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const boost::shared_ptr&lt; TimeRefinementLevelStrategy &gt; &amp;level_integrator, const boost::shared_ptr&lt; mesh::GriddingAlgorithmStrategy &gt; &amp;gridding_algorithm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeRefinementIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a9b7ba3a25d927b490225a61e22b210d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>initializeHierarchy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a9bb69f278be2cb9033cd4b17870967c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>advanceHierarchy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a6d970af336b5733b5d87325be8099ce9</anchor>
      <arglist>(const double dt, const bool rebalance_coarsest=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atRegridPoint</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>ae8b3fc2a93dbefdc105749bc0695fa89</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getIntegratorTime</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>abc0b2114b67c1469a0b022b2b0b98a40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStartTime</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>ab1a0fd6ae3d008323af3477097fc3ece</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEndTime</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>ac617c926627db100320e8387f5f56b20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntegratorStep</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>aff14b28dd45f381aa97db78bfe791965</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxIntegratorSteps</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>aae584cb934444fa02f8b038ed66eae45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stepsRemaining</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>acbd23862359fba47f126adc59abe5543</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stepsRemaining</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a752ba19813d83f5393e4020a0c851e98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLevelDtActual</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>ac24ff5d0dc511ca4a9c59d307759c868</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLevelDtMax</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a93aea393c5e02727236db7f6b77b53f0</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLevelSimTime</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>abc334cf6092f60d679fb6b07e007615b</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLevelStep</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a932888bc614f3368869514cebfe7ffc8</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLevelMaxSteps</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a08e5868c3c5d7edd9c51cdb8b98110a5</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a9647e9e597d22cb9435e042132662b22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; TimeRefinementLevelStrategy &gt;</type>
      <name>getLevelIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>ae1881067f3e7e5fa97a1a5c5776736eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; mesh::GriddingAlgorithmStrategy &gt;</type>
      <name>getGriddingAlgorithm</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a18c662122b842bfea1f10fdfc73616d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstLevelStep</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a821e9f996780f643d9ba7628b04bc7bc</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lastLevelStep</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>ad3b24574fa1b9cbde9d72ce5b2f9de1f</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRegridInterval</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a3519dcd4be2d1e638e163400010a69a2</anchor>
      <arglist>(const int regrid_interval)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a892af1c027f4407d368c63cd635d5d41</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDataForLevel</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a32c6c41d23d2f2a0655da6cecce9e815</anchor>
      <arglist>(std::ostream &amp;os, const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a1259af80620e4da8f219657364f38c40</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>acd24cb915a6a8574a7ee8b8d023456c8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::TimeRefinementIntegratorConnectorWidthRequestor</name>
    <filename>classSAMRAI_1_1algs_1_1TimeRefinementIntegratorConnectorWidthRequestor.html</filename>
    <base>SAMRAI::hier::PatchHierarchy::ConnectorWidthRequestorStrategy</base>
    <member kind="function">
      <type></type>
      <name>TimeRefinementIntegratorConnectorWidthRequestor</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegratorConnectorWidthRequestor.html</anchorfile>
      <anchor>acfc82eb6d179ca2505d30d4d4b666c02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeRequiredConnectorWidths</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegratorConnectorWidthRequestor.html</anchorfile>
      <anchor>a539c8b9d602aa5c11df5579624f5ad5c</anchor>
      <arglist>(std::vector&lt; hier::IntVector &gt; &amp;self_connector_widths, std::vector&lt; hier::IntVector &gt; &amp;fine_connector_widths, const hier::PatchHierarchy &amp;patch_hierarchy) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTagBuffer</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegratorConnectorWidthRequestor.html</anchorfile>
      <anchor>ae1961f0ef832d2d87a5f46825f44ff88</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;tag_buffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::TimeRefinementLevelStrategy</name>
    <filename>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</filename>
    <member kind="function">
      <type></type>
      <name>TimeRefinementLevelStrategy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>a9997234609f0bd705a27109e3d0014a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeRefinementLevelStrategy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>a68b75415f2548062e5a2f7f7a4ac8c86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeLevelIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>a68a38b14bf6e50ac2b0dccf4be02867a</anchor>
      <arglist>(const boost::shared_ptr&lt; mesh::GriddingAlgorithmStrategy &gt; &amp;gridding_alg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getLevelDt</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>af1241a721625f093cd5b3fa94d4624ab</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, const double dt_time, const bool initial_time)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMaxFinerLevelDt</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>a727adc3cb8ea6e8cdfcad8f36728d76f</anchor>
      <arglist>(const int finer_level_number, const double coarse_dt, const hier::IntVector &amp;ratio)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>advanceLevel</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>af9e36296a65a86a5b43f9f31659612e8</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const double current_time, const double new_time, const bool first_step, const bool last_step, const bool regrid_advance=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>standardLevelSynchronization</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>ae6d3f49891af6ed7faba1989eece648b</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level, const int finest_level, const double sync_time, const std::vector&lt; double &gt; &amp;old_times)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>synchronizeNewLevels</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>a880c587cd06cecfd3f1839241244a523</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level, const int finest_level, const double sync_time, const bool initial_time)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetTimeDependentData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>a83e7418e4423dffa8ac5aadc3d5bd985</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, const double new_time, const bool can_be_refined)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetDataToPreadvanceState</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>aac10b083ef1a64c8f0d1d85dc0550769</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>usingRefinedTimestepping</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>a9ca6bd9cace490319f43f955dac7444f</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::appu</name>
    <filename>namespaceSAMRAI_1_1appu.html</filename>
    <class kind="class">SAMRAI::appu::BoundaryUtilityStrategy</class>
    <class kind="struct">SAMRAI::appu::CartesianBoundaryUtilities2</class>
    <class kind="struct">SAMRAI::appu::CartesianBoundaryUtilities3</class>
    <class kind="class">SAMRAI::appu::VisDerivedDataStrategy</class>
    <class kind="class">SAMRAI::appu::VisItDataWriter</class>
    <class kind="class">SAMRAI::appu::VisMaterialsDataStrategy</class>
  </compound>
  <compound kind="class">
    <name>SAMRAI::appu::BoundaryUtilityStrategy</name>
    <filename>classSAMRAI_1_1appu_1_1BoundaryUtilityStrategy.html</filename>
    <member kind="function">
      <type></type>
      <name>BoundaryUtilityStrategy</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryUtilityStrategy.html</anchorfile>
      <anchor>a91925ee13921bbe899abc489d747af17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoundaryUtilityStrategy</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryUtilityStrategy.html</anchorfile>
      <anchor>ad4ec3b11faf2d48816241474f60db9d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>readDirichletBoundaryDataEntry</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryUtilityStrategy.html</anchorfile>
      <anchor>a32285b6b08af24e2e727341903937fcf</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;db, std::string &amp;db_name, int bdry_location_index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>readNeumannBoundaryDataEntry</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryUtilityStrategy.html</anchorfile>
      <anchor>acbf4d76d7c049ffb651bbfeee810275c</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;db, std::string &amp;db_name, int bdry_location_index)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::appu::CartesianBoundaryUtilities2</name>
    <filename>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities2.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getFromInput</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities2.html</anchorfile>
      <anchor>af8237e6c572475657725b07360af4980</anchor>
      <arglist>(BoundaryUtilityStrategy *bdry_strategy, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db, std::vector&lt; int &gt; &amp;edge_conds, std::vector&lt; int &gt; &amp;node_conds, const hier::IntVector &amp;periodic)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fillEdgeBoundaryData</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities2.html</anchorfile>
      <anchor>a7c21b839c7f95cf093867daa3de9a866</anchor>
      <arglist>(const std::string &amp;varname, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;vardata, const hier::Patch &amp;patch, const hier::IntVector &amp;ghost_width_to_fill, const std::vector&lt; int &gt; &amp;bdry_edge_conds, const std::vector&lt; double &gt; &amp;bdry_edge_values)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fillNodeBoundaryData</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities2.html</anchorfile>
      <anchor>ab59be388fd1f082d0c86fba7f93643fa</anchor>
      <arglist>(const std::string &amp;varname, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;vardata, const hier::Patch &amp;patch, const hier::IntVector &amp;ghost_width_to_fill, const std::vector&lt; int &gt; &amp;bdry_node_conds, const std::vector&lt; double &gt; &amp;bdry_edge_values)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getEdgeLocationForNodeBdry</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities2.html</anchorfile>
      <anchor>a87e4825f55b5a99ef142e4c311cb39da</anchor>
      <arglist>(int node_loc, int node_btype)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>checkBdryData</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities2.html</anchorfile>
      <anchor>a219ec2b2004c1b61bea5ced5a967c6c1</anchor>
      <arglist>(const std::string &amp;varname, const hier::Patch &amp;patch, int data_id, int depth, const hier::IntVector &amp;gcw_to_check, const hier::BoundaryBox &amp;bbox, int bcase, const double &amp;bstate)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::appu::CartesianBoundaryUtilities3</name>
    <filename>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities3.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getFromInput</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities3.html</anchorfile>
      <anchor>a8fe85dc6938824b69c4c69f8f43f4f50</anchor>
      <arglist>(BoundaryUtilityStrategy *bdry_strategy, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db, std::vector&lt; int &gt; &amp;face_conds, std::vector&lt; int &gt; &amp;edge_conds, std::vector&lt; int &gt; &amp;node_conds, const hier::IntVector &amp;periodic)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fillFaceBoundaryData</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities3.html</anchorfile>
      <anchor>abc62365e181901f23d467b55c15a7b20</anchor>
      <arglist>(const std::string &amp;varname, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;vardata, const hier::Patch &amp;patch, const hier::IntVector &amp;ghost_width_to_fill, const std::vector&lt; int &gt; &amp;bdry_face_conds, const std::vector&lt; double &gt; &amp;bdry_face_values)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fillEdgeBoundaryData</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities3.html</anchorfile>
      <anchor>ac3b8e078632b4ee4a68e32df4cc69b5c</anchor>
      <arglist>(const std::string &amp;varname, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;vardata, const hier::Patch &amp;patch, const hier::IntVector &amp;ghost_width_to_fill, const std::vector&lt; int &gt; &amp;bdry_edge_conds, const std::vector&lt; double &gt; &amp;bdry_face_values)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fillNodeBoundaryData</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities3.html</anchorfile>
      <anchor>aa45e4fd1692a301caa211d8cecceb992</anchor>
      <arglist>(const std::string &amp;varname, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;vardata, const hier::Patch &amp;patch, const hier::IntVector &amp;ghost_width_to_fill, const std::vector&lt; int &gt; &amp;bdry_node_conds, const std::vector&lt; double &gt; &amp;bdry_face_values)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getFaceLocationForEdgeBdry</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities3.html</anchorfile>
      <anchor>ab98159d41eb1fe0152cd431ea4bb8d3d</anchor>
      <arglist>(int edge_loc, int edge_btype)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getFaceLocationForNodeBdry</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities3.html</anchorfile>
      <anchor>a9c01b91b459f2f01a2c64ed7ce6aba82</anchor>
      <arglist>(int node_loc, int node_btype)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>checkBdryData</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities3.html</anchorfile>
      <anchor>a37bc7236cd30b83d987fd30cb121f3fd</anchor>
      <arglist>(const std::string &amp;varname, const hier::Patch &amp;patch, int data_id, int depth, const hier::IntVector &amp;gcw_to_check, const hier::BoundaryBox &amp;bbox, int bcase, const double &amp;bstate)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::appu::VisDerivedDataStrategy</name>
    <filename>classSAMRAI_1_1appu_1_1VisDerivedDataStrategy.html</filename>
    <member kind="function">
      <type></type>
      <name>VisDerivedDataStrategy</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisDerivedDataStrategy.html</anchorfile>
      <anchor>a7a76f1cc6335c3ede2a513a07c8abdc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VisDerivedDataStrategy</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisDerivedDataStrategy.html</anchorfile>
      <anchor>a50f67bf4ee4cf6b86b514a92c5c9cf98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>packDerivedDataIntoDoubleBuffer</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisDerivedDataStrategy.html</anchorfile>
      <anchor>a86eb0cb786918c3683d54b96844b08c3</anchor>
      <arglist>(double *buffer, const hier::Patch &amp;patch, const hier::Box &amp;region, const std::string &amp;variable_name, int depth_index, double simulation_time=0.0) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>packMixedDerivedDataIntoDoubleBuffer</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisDerivedDataStrategy.html</anchorfile>
      <anchor>a45083218cdd8220f0894d5337b33cc58</anchor>
      <arglist>(double *buffer, std::vector&lt; double &gt; &amp;mixbuffer, const hier::Patch &amp;patch, const hier::Box &amp;region, const std::string &amp;variable_name, int depth_index) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::appu::VisItDataWriter</name>
    <filename>classSAMRAI_1_1appu_1_1VisItDataWriter.html</filename>
    <member kind="function">
      <type></type>
      <name>VisItDataWriter</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a446ed46d6dfe9d1e91b77f4d0b07e623</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;object_name, const std::string &amp;dump_directory_name, int number_procs_per_file=1, bool is_multiblock=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VisItDataWriter</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a0a5c9eefe7375936b608923755cfde9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultDerivedDataWriter</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a5fc1209fb9491f0e0200c8c1582e8a54</anchor>
      <arglist>(VisDerivedDataStrategy *default_derived_writer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaterialsDataWriter</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a6c98c4d9c88136e523c8f44b662d0c26</anchor>
      <arglist>(VisMaterialsDataStrategy *materials_data_writer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerPlotQuantity</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>aea9a183d8538e58673e8fd9ea9d4bd18</anchor>
      <arglist>(const std::string &amp;variable_name, const std::string &amp;variable_type, const int patch_data_index, const int start_depth_index=0, const double scale_factor=1.0, const std::string &amp;variable_centering=&quot;UNKNOWN&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerDerivedPlotQuantity</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>ae0e1ca908d4386cee2405d5b62692a76</anchor>
      <arglist>(const std::string &amp;variable_name, const std::string &amp;variable_type, VisDerivedDataStrategy *derived_writer=0, const double scale_factor=1.0, const std::string &amp;variable_centering=&quot;CELL&quot;, const std::string &amp;variable_mix_type=&quot;CLEAN&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevelPlotQuantity</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a073d77fe139d6a5fd6a7b2ff9e5533b4</anchor>
      <arglist>(const std::string &amp;variable_name, const int level_number, const int patch_data_index, const int start_depth_index=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerNodeCoordinates</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>aa38f8fcfc3489f6bfdde1f05606ea43c</anchor>
      <arglist>(const int patch_data_index, const int start_depth_index=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSingleNodeCoordinate</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a01c0101c10011a41f25bd0bcfb4f5250</anchor>
      <arglist>(const int coordinate_number, const int patch_data_index, const int depth_index=0, const double scale_factor=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerMaterialNames</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a4b1da68b0f276104f5e5a15b3e05f8a8</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;material_names)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSparseMaterialNames</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a58683e422a15f3263bcddc8841796e55</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;material_names)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSpeciesNames</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a895152bf4c8af5f0d3d20d43b8f63a4a</anchor>
      <arglist>(const std::string &amp;material_name, const std::vector&lt; std::string &gt; &amp;species_names)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerVisItExpressions</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>ab9adaa4527f5028337efec539ae137c2</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;expression_keys, const std::vector&lt; std::string &gt; &amp;expressions, const std::vector&lt; std::string &gt; &amp;expression_types)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writePlotData</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>abb8563ca251cb8fc5b1e7ae601730eee</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, int time_step, double simulation_time=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSummaryFilename</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a303784551016695618fbae5e4b89f5bf</anchor>
      <arglist>(std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>ad90d0b1c6a001b44240cec18fdbc9162</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::appu::VisMaterialsDataStrategy</name>
    <filename>classSAMRAI_1_1appu_1_1VisMaterialsDataStrategy.html</filename>
    <member kind="enumeration">
      <name>PACK_RETURN_TYPE</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisMaterialsDataStrategy.html</anchorfile>
      <anchor>ae828832a338243edaf88517027ea7c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VISIT_ALLZERO</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisMaterialsDataStrategy.html</anchorfile>
      <anchor>ae828832a338243edaf88517027ea7c81a68a968496a41cea1a7a038c912d23266</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VISIT_ALLONE</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisMaterialsDataStrategy.html</anchorfile>
      <anchor>ae828832a338243edaf88517027ea7c81a8998751fac65758ce15b8bbf0f49e5f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VISIT_MIXED</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisMaterialsDataStrategy.html</anchorfile>
      <anchor>ae828832a338243edaf88517027ea7c81a6d9ce03a0c338c460cbc5fa66046bef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VisMaterialsDataStrategy</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisMaterialsDataStrategy.html</anchorfile>
      <anchor>a0a9baa2b384d9110df6dc836abfd93fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VisMaterialsDataStrategy</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisMaterialsDataStrategy.html</anchorfile>
      <anchor>ad06d724f519775689b4d07ca3490a1c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>packMaterialFractionsIntoDoubleBuffer</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisMaterialsDataStrategy.html</anchorfile>
      <anchor>a5022e62a3f4247665f706ce3fbc6c583</anchor>
      <arglist>(double *buffer, const hier::Patch &amp;patch, const hier::Box &amp;region, const std::string &amp;material_name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>packMaterialFractionsIntoSparseBuffers</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisMaterialsDataStrategy.html</anchorfile>
      <anchor>ab27b9b1eacbe159492f5071fa3303d41</anchor>
      <arglist>(int *mat_list, std::vector&lt; int &gt; &amp;mix_zones, std::vector&lt; int &gt; &amp;mix_mat, std::vector&lt; double &gt; &amp;vol_fracs, std::vector&lt; int &gt; &amp;next_mat, const hier::Patch &amp;patch, const hier::Box &amp;region) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>packSpeciesFractionsIntoDoubleBuffer</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisMaterialsDataStrategy.html</anchorfile>
      <anchor>a8d3680574b6764c9f5b8c2bf1b68e4be</anchor>
      <arglist>(double *buffer, const hier::Patch &amp;patch, const hier::Box &amp;region, const std::string &amp;material_name, const std::string &amp;species_name) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::geom</name>
    <filename>namespaceSAMRAI_1_1geom.html</filename>
    <class kind="class">SAMRAI::geom::CartesianCellComplexConservativeLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianCellComplexLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianCellComplexWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianCellDoubleConservativeLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianCellDoubleLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianCellDoubleWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianCellFloatConservativeLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianCellFloatLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianCellFloatWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianEdgeComplexWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianEdgeDoubleConservativeLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianEdgeDoubleWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianEdgeFloatConservativeLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianEdgeFloatWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianFaceComplexWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianFaceDoubleConservativeLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianFaceDoubleWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianFaceFloatConservativeLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianFaceFloatWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianGridGeometry</class>
    <class kind="class">SAMRAI::geom::CartesianNodeComplexLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianNodeDoubleLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianNodeFloatLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianOuterfaceComplexWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianOuterfaceDoubleWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianOuterfaceFloatWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianOutersideDoubleWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianPatchGeometry</class>
    <class kind="class">SAMRAI::geom::CartesianSideComplexWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianSideDoubleConservativeLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianSideDoubleWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianSideFloatConservativeLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianSideFloatWeightedAverage</class>
    <class kind="class">SAMRAI::geom::GridGeometry</class>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianCellComplexConservativeLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianCellComplexConservativeLinearRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianCellComplexConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexConservativeLinearRefine.html</anchorfile>
      <anchor>add001bc4b4848723ac8b15a4438adae4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianCellComplexConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexConservativeLinearRefine.html</anchorfile>
      <anchor>a618581e46aaae38076fc116ea3da735d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexConservativeLinearRefine.html</anchorfile>
      <anchor>afa285d0609fdbbcc21661f501409ef6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexConservativeLinearRefine.html</anchorfile>
      <anchor>ae17bfbe07ac2f1590fab37a2bd4fa29c</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexConservativeLinearRefine.html</anchorfile>
      <anchor>a1577f9aa7f9cd1125520e6aea1913df0</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexConservativeLinearRefine.html</anchorfile>
      <anchor>a2c645b78afb19c5b040cedeaa92164fc</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::Box &amp;fine_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianCellComplexLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianCellComplexLinearRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianCellComplexLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexLinearRefine.html</anchorfile>
      <anchor>a6068a4a22702e846469d94b11975a0d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianCellComplexLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexLinearRefine.html</anchorfile>
      <anchor>a975be9f7f6b212cc6cd671414793fc32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexLinearRefine.html</anchorfile>
      <anchor>a6167f1fe763c8dd7d79f86ed32d5d27b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexLinearRefine.html</anchorfile>
      <anchor>ad761d246f66f8de0d13e685d7b591f6f</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexLinearRefine.html</anchorfile>
      <anchor>ac61464b5b8b8a2797e11d8b4b19b4619</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexLinearRefine.html</anchorfile>
      <anchor>ab1fb291727ef1def73d554fdbee995e6</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::Box &amp;fine_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianCellComplexWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianCellComplexWeightedAverage.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianCellComplexWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexWeightedAverage.html</anchorfile>
      <anchor>a755fce4eb14ba4a2f62821a642f0016d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianCellComplexWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexWeightedAverage.html</anchorfile>
      <anchor>a3328fc56896965948883ad7f55106c9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexWeightedAverage.html</anchorfile>
      <anchor>a22f4c7288be8d5743bca06d81716fc25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexWeightedAverage.html</anchorfile>
      <anchor>aa0f6e7c965f3d00ce624868743227e86</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexWeightedAverage.html</anchorfile>
      <anchor>a5ab2a5b2a7e30f5e1d081a97b695464e</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianCellDoubleConservativeLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianCellDoubleConservativeLinearRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianCellDoubleConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a148683d3f8257bd78bf81c1c4a2c26c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianCellDoubleConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a9ff4b8a1fc3b9508ac34d74cc48310a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a5a7ad7343c4381229a12fd7698958421</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>ab856492a11bc29cf72b6d756cdec78f3</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a7be57530b21d4a3ed3c6597950c1c983</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>aaabc7066604f9e7831b5599b7bf37e86</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::Box &amp;fine_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianCellDoubleLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianCellDoubleLinearRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianCellDoubleLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleLinearRefine.html</anchorfile>
      <anchor>a37959ec8d3e2070055ef0391a9bbd41d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianCellDoubleLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleLinearRefine.html</anchorfile>
      <anchor>af07e54ec99c3d3680388003df55cbebb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleLinearRefine.html</anchorfile>
      <anchor>a8108ad727c08f26c4ca89207366a8f15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleLinearRefine.html</anchorfile>
      <anchor>aa66a0b3e32328e73e6013e7879c408b6</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleLinearRefine.html</anchorfile>
      <anchor>abc3477957cdf9db73764ffd2c66a34c3</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleLinearRefine.html</anchorfile>
      <anchor>ab62aac400a9ab714a5de57b34e7d1ed2</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::Box &amp;fine_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianCellDoubleWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianCellDoubleWeightedAverage.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianCellDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleWeightedAverage.html</anchorfile>
      <anchor>ae0f29265eab433980ccb1b37e40005fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianCellDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleWeightedAverage.html</anchorfile>
      <anchor>a7974a6a1c829325a1f8be608b620e65e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleWeightedAverage.html</anchorfile>
      <anchor>a4332c77e844a5d156aa31a128268e54c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleWeightedAverage.html</anchorfile>
      <anchor>ad294e7ba4177e5d378f53a58b792e751</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleWeightedAverage.html</anchorfile>
      <anchor>ae283c58848bff23187c21901c7511944</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianCellFloatConservativeLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianCellFloatConservativeLinearRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianCellFloatConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a34cd46a316889c21781143199b8add22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianCellFloatConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a12eee8860d0b9ea63ba4c0fb21254658</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatConservativeLinearRefine.html</anchorfile>
      <anchor>ae0d0dd3bf21fd49fa1307d69b838c87b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatConservativeLinearRefine.html</anchorfile>
      <anchor>aed8056055e258abc420e9214b044b702</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a2ad178581d5a19a36335ddf3b6a8bfcd</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a5fd9972caf65588632c7f78f087c7e08</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::Box &amp;fine_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianCellFloatLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianCellFloatLinearRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianCellFloatLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatLinearRefine.html</anchorfile>
      <anchor>ace94e2992342d5f93d7fffba392ddbb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianCellFloatLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatLinearRefine.html</anchorfile>
      <anchor>ab0d700b4a209fb316fa511cb6509ef57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatLinearRefine.html</anchorfile>
      <anchor>a9b6bc837c7aa42f3c8664cf6a7d7aff6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatLinearRefine.html</anchorfile>
      <anchor>ab248b061146c48a9339183449b5bbfad</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatLinearRefine.html</anchorfile>
      <anchor>ac28e3f6a69fb29050ac94fa367a7f208</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatLinearRefine.html</anchorfile>
      <anchor>a4e9872a218544f41cba48efb06007069</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::Box &amp;fine_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianCellFloatWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianCellFloatWeightedAverage.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianCellFloatWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatWeightedAverage.html</anchorfile>
      <anchor>a5faf023942c7aca4d8645c02bb7c2813</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianCellFloatWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatWeightedAverage.html</anchorfile>
      <anchor>a9320f8eb1b35d6d4110b48052987d5d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatWeightedAverage.html</anchorfile>
      <anchor>a51354e1b397fa9fb5428b377cee19e27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatWeightedAverage.html</anchorfile>
      <anchor>ace6dc3d3c6b2c46f94287599a400b03d</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatWeightedAverage.html</anchorfile>
      <anchor>abf7471389e420385c5542e739fab0fec</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianEdgeComplexWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianEdgeComplexWeightedAverage.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianEdgeComplexWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeComplexWeightedAverage.html</anchorfile>
      <anchor>af268cadad7fb3806a9806cfa19609b2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianEdgeComplexWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeComplexWeightedAverage.html</anchorfile>
      <anchor>a16874b3e91a70c9e66c972c86b44efdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeComplexWeightedAverage.html</anchorfile>
      <anchor>a1fa8a5bd116ca731de58cab75f912016</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeComplexWeightedAverage.html</anchorfile>
      <anchor>a391b9cfd5645cd91b48d1d197c6f03b0</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeComplexWeightedAverage.html</anchorfile>
      <anchor>af232abc3c8417dd911ca852dfde67dec</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianEdgeDoubleConservativeLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleConservativeLinearRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianEdgeDoubleConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a5bd61ec5487cc4de994316d5fb864ff4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianEdgeDoubleConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a76fd02126bf5bc448e56833431904118</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a764cd2cbdf030c164559a313eea4c519</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a8b20582d552c4b7240a5f5ad3ce0a46a</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a0fa0e7f548a2eaad4fe5cd1bcdbed2da</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianEdgeDoubleWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleWeightedAverage.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianEdgeDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleWeightedAverage.html</anchorfile>
      <anchor>a5e1a91f822367b9bc12efa85066c1df5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianEdgeDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleWeightedAverage.html</anchorfile>
      <anchor>a35d0fdeb3812d61410166e74d4e8c30b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleWeightedAverage.html</anchorfile>
      <anchor>a51fb88d3631efa3a419112acf06d23ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleWeightedAverage.html</anchorfile>
      <anchor>a60de9f1804700f0605a1915d9d79000a</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleWeightedAverage.html</anchorfile>
      <anchor>a90e11fe2314adbff6d4ba7d36c769fc5</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianEdgeFloatConservativeLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianEdgeFloatConservativeLinearRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianEdgeFloatConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a928ac9000b4e15d4e9155bd61e8948ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianEdgeFloatConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatConservativeLinearRefine.html</anchorfile>
      <anchor>aa5694a9d3bc3ecde6e08ea663a5147da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a833eb5c026bebff3525c2837596c43ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a0e19422934dcde447b48495ec925116d</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a07680d637f5f045e3c733c9cc1004a0b</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianEdgeFloatWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianEdgeFloatWeightedAverage.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianEdgeFloatWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatWeightedAverage.html</anchorfile>
      <anchor>a682658dc9819b961b883aa5b13812311</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianEdgeFloatWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatWeightedAverage.html</anchorfile>
      <anchor>a3f23141633832738d92f26a1e7f1fedf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatWeightedAverage.html</anchorfile>
      <anchor>a45f4ab54b67520366827f999fb657fe0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatWeightedAverage.html</anchorfile>
      <anchor>a46bc8ad4d6e7ddb404fbbeed206ada91</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatWeightedAverage.html</anchorfile>
      <anchor>a066f2076e3c9a7fe2261464061ab7bd5</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianFaceComplexWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianFaceComplexWeightedAverage.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianFaceComplexWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceComplexWeightedAverage.html</anchorfile>
      <anchor>a68d9c6f9ee9c2e84947db38751d9780a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianFaceComplexWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceComplexWeightedAverage.html</anchorfile>
      <anchor>a8f5465b30e21d9786eaaefd8ff3a470c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceComplexWeightedAverage.html</anchorfile>
      <anchor>a005e571fbe8fb7cfc848e5d3697806af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceComplexWeightedAverage.html</anchorfile>
      <anchor>a28cb4ef1efa4b7a2157c7f0cae9255dc</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceComplexWeightedAverage.html</anchorfile>
      <anchor>a9b3f619fa8c178596f56595b128472f6</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianFaceDoubleConservativeLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianFaceDoubleConservativeLinearRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianFaceDoubleConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>af486f1f534ddf5d26a10550d25425506</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianFaceDoubleConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>adeee75c05affcdc2a9b2cc706911589d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a5eac4905fcb88d59eab65d7d2bcc79a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a52f85834bef0e1a9dbc5f3ee2482295c</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a6efb587548441f3c5b764ed4442d16d8</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianFaceDoubleWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianFaceDoubleWeightedAverage.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianFaceDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a3ff84cbd7d05656b2ba14e1ab46bd9fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianFaceDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a8bf0482dd64027f2bfc4468e1ca0da7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a2c558b1d8caadca6f9808b88baeb6764</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a8b1a1c36105dfd47fbecd094ee77dc0a</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a4c0e1378e40c74ba078f32353461fe91</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianFaceFloatConservativeLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianFaceFloatConservativeLinearRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianFaceFloatConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a8767ce3d0f0337c619d0c128611ac767</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianFaceFloatConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a6d2f582777d182b9cf24c9ad2332b486</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatConservativeLinearRefine.html</anchorfile>
      <anchor>ac624e2f21d3c0b56e0dba4f31cc313cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a7d92e591894bb2c68ca67576b5ef2b7f</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a8c03e8385ee53f7749eac15612d674e6</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianFaceFloatWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianFaceFloatWeightedAverage.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianFaceFloatWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatWeightedAverage.html</anchorfile>
      <anchor>a8968964ef755139faf6829bc09d21bd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianFaceFloatWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatWeightedAverage.html</anchorfile>
      <anchor>a3da47019a03fee9cc1fd08dd09b8f188</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatWeightedAverage.html</anchorfile>
      <anchor>ab61f8c3634777badb5081004ee948d01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatWeightedAverage.html</anchorfile>
      <anchor>a079425309520d20f72ff4f3d72fd4c59</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatWeightedAverage.html</anchorfile>
      <anchor>ad2c88b3b6162cfa9096684631b97dc0b</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianGridGeometry</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</filename>
    <base>SAMRAI::geom::GridGeometry</base>
    <member kind="function">
      <type></type>
      <name>CartesianGridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a433a1c6a7e9ff1a87aa3bcf9142d9035</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;object_name, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CartesianGridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>ab9729e5892540db0a2e44250606d6927</anchor>
      <arglist>(const std::string &amp;object_name, const double *x_lo, const double *x_up, hier::BoxContainer &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CartesianGridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a12c1e42dc91d5f8f1d984c718d35e940</anchor>
      <arglist>(const std::string &amp;object_name, const double *x_lo, const double *x_up, hier::BoxContainer &amp;domain, const boost::shared_ptr&lt; hier::TransferOperatorRegistry &gt; &amp;op_reg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianGridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a74232ef5496e513bd24c6a0742cacdfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::BaseGridGeometry &gt;</type>
      <name>makeRefinedGridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a710df9890eb6bc2fe209754314a335bd</anchor>
      <arglist>(const std::string &amp;fine_geom_name, const hier::IntVector &amp;refine_ratio) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::BaseGridGeometry &gt;</type>
      <name>makeCoarsenedGridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a9ceb85ea50daee60e793b11fc25721cb</anchor>
      <arglist>(const std::string &amp;coarse_geom_name, const hier::IntVector &amp;coarsen_ratio) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGeometryDataOnPatch</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a6d5b435ceb1561f19ff7db2c11a246c2</anchor>
      <arglist>(hier::Patch &amp;patch, const hier::IntVector &amp;ratio_to_level_zero, const TwoDimBool &amp;touches_regular_bdry) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGeometryData</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a927e1e7cf2dc3309de94fda79ec39f15</anchor>
      <arglist>(const double *x_lo, const double *x_up, const hier::BoxContainer &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getDx</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a81edbc0886c02431cf03da059a2ab65c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getXLower</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>ad9eb336a33ca53932d4fd5c18907cf99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getXUpper</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a9a584604619a49d568059a205040de9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a2b7be3a14abd613b20a062bb6fe43f24</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a1f724c022cc68e70e22d57ad5b9df048</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>buildOperators</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>adaba714894c7b98e974219c4150ad2a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianNodeComplexLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianNodeComplexLinearRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianNodeComplexLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeComplexLinearRefine.html</anchorfile>
      <anchor>a61b6c78778edaa84f375e958816f9844</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianNodeComplexLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeComplexLinearRefine.html</anchorfile>
      <anchor>aae28f5d2719603cf6815385e225913f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeComplexLinearRefine.html</anchorfile>
      <anchor>a46f806f4115113b9cd39d22a134e9593</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeComplexLinearRefine.html</anchorfile>
      <anchor>aeb294c0f2a5115bb7b28d1640ab585b6</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeComplexLinearRefine.html</anchorfile>
      <anchor>a2ca2c30396e5e5db129259322933328a</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeComplexLinearRefine.html</anchorfile>
      <anchor>a716e3cdfb2b7ede21d6a77ebe2ebc033</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::Box &amp;fine_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianNodeDoubleLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianNodeDoubleLinearRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianNodeDoubleLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeDoubleLinearRefine.html</anchorfile>
      <anchor>a4fde41a0ebab3b5ce235c35ebb433536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianNodeDoubleLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeDoubleLinearRefine.html</anchorfile>
      <anchor>af4240e4583d6116e9e34a4d3c5fc2176</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeDoubleLinearRefine.html</anchorfile>
      <anchor>a3efbc3a6c913d3eca29ac0ba4dcf1cd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeDoubleLinearRefine.html</anchorfile>
      <anchor>ab3315b31bfba87058fc95318c5263dde</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeDoubleLinearRefine.html</anchorfile>
      <anchor>ad2f71e32f58d77e692a179cd5efd6929</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeDoubleLinearRefine.html</anchorfile>
      <anchor>ac4192afbf12a0f9437d1e9a8ca9890e8</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::Box &amp;fine_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianNodeFloatLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianNodeFloatLinearRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianNodeFloatLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeFloatLinearRefine.html</anchorfile>
      <anchor>ad5b30bee79725e8c45d663f4c86c0dc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianNodeFloatLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeFloatLinearRefine.html</anchorfile>
      <anchor>ac88f93e87ed68cb9488cfcef24b081c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeFloatLinearRefine.html</anchorfile>
      <anchor>ac848dbdeb3f3b83189791fc9b49ef650</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeFloatLinearRefine.html</anchorfile>
      <anchor>af8d7bd96ecb0d8226f838ef08ed7a05c</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeFloatLinearRefine.html</anchorfile>
      <anchor>a1bebca8783bf0891310016cbe3ebe97f</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeFloatLinearRefine.html</anchorfile>
      <anchor>afef200d7181cfecd5c9444341dd7d09b</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::Box &amp;fine_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianOuterfaceComplexWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianOuterfaceComplexWeightedAverage.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianOuterfaceComplexWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceComplexWeightedAverage.html</anchorfile>
      <anchor>a28fbc6c4734e69dbbd61c6352d2bfb6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianOuterfaceComplexWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceComplexWeightedAverage.html</anchorfile>
      <anchor>adaaaecc7105b1e3d0a1f51a74671a633</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceComplexWeightedAverage.html</anchorfile>
      <anchor>a355175231df0c4066da0a211ab40040d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceComplexWeightedAverage.html</anchorfile>
      <anchor>a6463cb159b1b5c6778ad2fe1f1bc010f</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceComplexWeightedAverage.html</anchorfile>
      <anchor>ad139412d1b35ff6a665a504e6e61a6f6</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianOuterfaceDoubleWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianOuterfaceDoubleWeightedAverage.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianOuterfaceDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceDoubleWeightedAverage.html</anchorfile>
      <anchor>ab7bcd0bfeb62b4eb93872e102a27be12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianOuterfaceDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a1f84fdaaec419df3d7a1a34b1232d438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a2867e956065962ee02ca8727a1e2d322</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a48684d69cd0dbd4c44ec89ec4677b291</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a628abb6e7751e1078fa23e7f655c9de5</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianOuterfaceFloatWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianOuterfaceFloatWeightedAverage.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianOuterfaceFloatWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceFloatWeightedAverage.html</anchorfile>
      <anchor>aa19c053a7f7f1bc028a4fd4353211405</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianOuterfaceFloatWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceFloatWeightedAverage.html</anchorfile>
      <anchor>a8351401c09539cb5c99febf43b583dce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceFloatWeightedAverage.html</anchorfile>
      <anchor>a6650f222a6dcc2ca3b6d28a28a323ac5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceFloatWeightedAverage.html</anchorfile>
      <anchor>a8bf1091f9530b5cb467b51910ca132ba</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceFloatWeightedAverage.html</anchorfile>
      <anchor>acd688cd2e83b3439f9b5cb4db579aff0</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianOutersideDoubleWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianOutersideDoubleWeightedAverage.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianOutersideDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOutersideDoubleWeightedAverage.html</anchorfile>
      <anchor>a0cde83308b8eafd7d25e4ed6222b75b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianOutersideDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOutersideDoubleWeightedAverage.html</anchorfile>
      <anchor>a69b0a1fe1e9b68a5f5fc6f66ba334ecf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOutersideDoubleWeightedAverage.html</anchorfile>
      <anchor>a68c285b28f16fb65c53549a79f74ad8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOutersideDoubleWeightedAverage.html</anchorfile>
      <anchor>a4f8d959d4b060684b9e9e3a16d0ca0f9</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOutersideDoubleWeightedAverage.html</anchorfile>
      <anchor>a16d71178de968e01e0a117d2110e1e8e</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianPatchGeometry</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianPatchGeometry.html</filename>
    <base>SAMRAI::hier::PatchGeometry</base>
    <member kind="typedef">
      <type>hier::PatchGeometry::TwoDimBool</type>
      <name>TwoDimBool</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianPatchGeometry.html</anchorfile>
      <anchor>a48cd3d580c8ba0283c4f7c6b45b96d1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CartesianPatchGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianPatchGeometry.html</anchorfile>
      <anchor>a341229455aaef6aabe48b5d52d891dba</anchor>
      <arglist>(const hier::IntVector &amp;ratio_to_level_zero, const TwoDimBool &amp;touches_regular_bdry, const hier::BlockId &amp;block_id, const double *dx, const double *x_lo, const double *x_hi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianPatchGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianPatchGeometry.html</anchorfile>
      <anchor>a434686f0d7071afb71a40965ed9c16f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getDx</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianPatchGeometry.html</anchorfile>
      <anchor>a1029d7810fac0ed31e29bf617ad9f179</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getXLower</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianPatchGeometry.html</anchorfile>
      <anchor>a2146e5a28ad9172c36809a2840bde756</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getXUpper</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianPatchGeometry.html</anchorfile>
      <anchor>a9c8f1652d491c0cac01dea3befc43d0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianPatchGeometry.html</anchorfile>
      <anchor>ac76f67b5dc9533f7f20157755040a368</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianSideComplexWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianSideComplexWeightedAverage.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianSideComplexWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideComplexWeightedAverage.html</anchorfile>
      <anchor>a0e44439b8fa37e8edaa87161f30d4cb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianSideComplexWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideComplexWeightedAverage.html</anchorfile>
      <anchor>a8ec7d6a3f5a09197e4b1ea6fb15cf726</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideComplexWeightedAverage.html</anchorfile>
      <anchor>ad201cf309c6ba81b119144cdfb304f72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideComplexWeightedAverage.html</anchorfile>
      <anchor>a933b859f99d6ecdbc2f6804665f03c90</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideComplexWeightedAverage.html</anchorfile>
      <anchor>a6e75d4e84c74ee3f585f5416e0957f93</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianSideDoubleConservativeLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianSideDoubleConservativeLinearRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianSideDoubleConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>ace2174affd6ff6c766bfd7b9cbb1d0f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianSideDoubleConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a47b40b2256892ee5f3d7fbf316b6f6b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>aa038f2c72b3d42ba6b69d287c36fcb9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a9d3c44792f4f855fe7d313332429897c</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a29ffad32d7388aa4b2e0b0d17e05ab92</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianSideDoubleWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianSideDoubleWeightedAverage.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianSideDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleWeightedAverage.html</anchorfile>
      <anchor>a23a915e7404f2a626ce9bb32d6b9e3d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianSideDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleWeightedAverage.html</anchorfile>
      <anchor>aa706b0ecf989ddbc5fcf778c3ae50976</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleWeightedAverage.html</anchorfile>
      <anchor>ab3cb3b093eb39834f112e18445b5e767</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleWeightedAverage.html</anchorfile>
      <anchor>ad95d376e5bc59acca625fef63913fa91</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleWeightedAverage.html</anchorfile>
      <anchor>ac3cc89627368e47afe2883f2b5068c26</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianSideFloatConservativeLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianSideFloatConservativeLinearRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianSideFloatConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatConservativeLinearRefine.html</anchorfile>
      <anchor>aea705896180fd092faf1ebac05878c13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianSideFloatConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a4a91b9d135ebdd6e0203ba3b8656c497</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a976c6333740150dfb44851a811966be7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a4701689aae93adad52a993ea0e4e3ea9</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatConservativeLinearRefine.html</anchorfile>
      <anchor>adab63cd265f624b2811360dbed40e3b7</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianSideFloatWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianSideFloatWeightedAverage.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianSideFloatWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatWeightedAverage.html</anchorfile>
      <anchor>a685d59572072c4c2f55cf69163e9aba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianSideFloatWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatWeightedAverage.html</anchorfile>
      <anchor>a76f8bee0c6d47cb676ae105c3cacb2a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatWeightedAverage.html</anchorfile>
      <anchor>a3db8696e57fd6f25eb8105a29ed31240</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatWeightedAverage.html</anchorfile>
      <anchor>a1c04d786b7a1de6bdf73ac1e8bbda4b2</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatWeightedAverage.html</anchorfile>
      <anchor>a9e081e520065f208c68ab332b043a4c2</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::GridGeometry</name>
    <filename>classSAMRAI_1_1geom_1_1GridGeometry.html</filename>
    <base>SAMRAI::hier::BaseGridGeometry</base>
    <member kind="function">
      <type></type>
      <name>GridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1GridGeometry.html</anchorfile>
      <anchor>a901ff8253bfea4084e7628790cba2c8b</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;object_name, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db, bool allow_multiblock=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1GridGeometry.html</anchorfile>
      <anchor>ababd775750aaa75ea54b558d62d68d57</anchor>
      <arglist>(const std::string &amp;object_name, hier::BoxContainer &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1GridGeometry.html</anchorfile>
      <anchor>ab929dd734aab66036c53a7fac484e699</anchor>
      <arglist>(const std::string &amp;object_name, hier::BoxContainer &amp;domain, const boost::shared_ptr&lt; hier::TransferOperatorRegistry &gt; &amp;op_reg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1GridGeometry.html</anchorfile>
      <anchor>a3427c06c014e3fa0ba8d3ec045e28eb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BaseGridGeometry &gt;</type>
      <name>makeRefinedGridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1GridGeometry.html</anchorfile>
      <anchor>a8c94c12b6bb63cea5af78d92d57ea4d9</anchor>
      <arglist>(const std::string &amp;fine_geom_name, const hier::IntVector &amp;refine_ratio) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BaseGridGeometry &gt;</type>
      <name>makeCoarsenedGridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1GridGeometry.html</anchorfile>
      <anchor>af7253bb0b1218ecb73f5e895ee568c17</anchor>
      <arglist>(const std::string &amp;coarse_geom_name, const hier::IntVector &amp;coarsen_ratio) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>buildOperators</name>
      <anchorfile>classSAMRAI_1_1geom_1_1GridGeometry.html</anchorfile>
      <anchor>a44a4b232205237c450eb6e7ef0efb46d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::hier</name>
    <filename>namespaceSAMRAI_1_1hier.html</filename>
    <class kind="class">SAMRAI::hier::AssumedPartition</class>
    <class kind="class">SAMRAI::hier::AssumedPartitionBox</class>
    <class kind="class">SAMRAI::hier::BaseConnectorAlgorithm</class>
    <class kind="class">SAMRAI::hier::BaseGridGeometry</class>
    <class kind="class">SAMRAI::hier::BlockId</class>
    <class kind="class">SAMRAI::hier::BoundaryBox</class>
    <class kind="class">SAMRAI::hier::BoundaryBoxUtils</class>
    <class kind="class">SAMRAI::hier::BoundaryLookupTable</class>
    <class kind="class">SAMRAI::hier::Box</class>
    <class kind="class">SAMRAI::hier::BoxIterator</class>
    <class kind="class">SAMRAI::hier::BoxContainer</class>
    <class kind="class">SAMRAI::hier::BoxContainerSingleBlockIterator</class>
    <class kind="class">SAMRAI::hier::BoxContainerSingleOwnerIterator</class>
    <class kind="class">SAMRAI::hier::BoxContainerUtils</class>
    <class kind="class">SAMRAI::hier::BoxGeometry</class>
    <class kind="class">SAMRAI::hier::BoxId</class>
    <class kind="class">SAMRAI::hier::BoxLevel</class>
    <class kind="class">SAMRAI::hier::BoxLevelConnectorUtils</class>
    <class kind="class">SAMRAI::hier::BoxLevelHandle</class>
    <class kind="class">SAMRAI::hier::BoxLevelStatistics</class>
    <class kind="class">SAMRAI::hier::BoxNeighborhoodCollection</class>
    <class kind="class">SAMRAI::hier::BoxOverlap</class>
    <class kind="class">SAMRAI::hier::BoxTree</class>
    <class kind="struct">SAMRAI::hier::BoxUtilities</class>
    <class kind="class">SAMRAI::hier::CoarseFineBoundary</class>
    <class kind="class">SAMRAI::hier::CoarsenOperator</class>
    <class kind="class">SAMRAI::hier::ComponentSelector</class>
    <class kind="class">SAMRAI::hier::Connector</class>
    <class kind="class">SAMRAI::hier::ConnectorStatistics</class>
    <class kind="class">SAMRAI::hier::FlattenedHierarchy</class>
    <class kind="class">SAMRAI::hier::GlobalId</class>
    <class kind="class">SAMRAI::hier::HierarchyNeighbors</class>
    <class kind="class">SAMRAI::hier::Index</class>
    <class kind="class">SAMRAI::hier::IntVector</class>
    <class kind="class">SAMRAI::hier::LocalId</class>
    <class kind="class">SAMRAI::hier::MappingConnector</class>
    <class kind="class">SAMRAI::hier::MappingConnectorAlgorithm</class>
    <class kind="class">SAMRAI::hier::MultiblockBoxTree</class>
    <class kind="class">SAMRAI::hier::OverlapConnectorAlgorithm</class>
    <class kind="class">SAMRAI::hier::Patch</class>
    <class kind="class">SAMRAI::hier::PatchBoundaries</class>
    <class kind="class">SAMRAI::hier::PatchData</class>
    <class kind="class">SAMRAI::hier::PatchDataFactory</class>
    <class kind="class">SAMRAI::hier::PatchDataRestartManager</class>
    <class kind="class">SAMRAI::hier::PatchDescriptor</class>
    <class kind="class">SAMRAI::hier::PatchFactory</class>
    <class kind="class">SAMRAI::hier::PatchGeometry</class>
    <class kind="class">SAMRAI::hier::PatchHierarchy</class>
    <class kind="class">SAMRAI::hier::PatchLevel</class>
    <class kind="class">SAMRAI::hier::PatchLevelFactory</class>
    <class kind="class">SAMRAI::hier::PeriodicId</class>
    <class kind="class">SAMRAI::hier::PeriodicShiftCatalog</class>
    <class kind="class">SAMRAI::hier::PersistentOverlapConnectors</class>
    <class kind="class">SAMRAI::hier::ProcessorMapping</class>
    <class kind="class">SAMRAI::hier::RealBoxConstIterator</class>
    <class kind="class">SAMRAI::hier::RefineOperator</class>
    <class kind="class">SAMRAI::hier::SequentialLocalIdGenerator</class>
    <class kind="class">SAMRAI::hier::SingularityFinder</class>
    <class kind="class">SAMRAI::hier::TimeInterpolateOperator</class>
    <class kind="class">SAMRAI::hier::TransferOperatorRegistry</class>
    <class kind="class">SAMRAI::hier::Transformation</class>
    <class kind="class">SAMRAI::hier::UncoveredBoxIterator</class>
    <class kind="class">SAMRAI::hier::Variable</class>
    <class kind="class">SAMRAI::hier::VariableContext</class>
    <class kind="class">SAMRAI::hier::VariableDatabase</class>
    <member kind="enumeration">
      <name>ConnectorNotFoundAction</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a256cef944748f7494c84017f5829101a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTOR_ERROR</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a256cef944748f7494c84017f5829101aaad2ce1ba6d0e0a3fd6877ba7f45ce983</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTOR_CREATE</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a256cef944748f7494c84017f5829101aa544fdb3dc8b290ea8fbe0f5b3bcfc598</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTOR_IMPLICIT_CREATION_RULE</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a256cef944748f7494c84017f5829101aa358709ce9182ffe89b933f5b6bcd8870</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a96908bbe9494aa74292d13972ee0d4f9</anchor>
      <arglist>(std::istream &amp;s, Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a94bbae049793f3f0097e00d74888dd83</anchor>
      <arglist>(std::ostream &amp;s, const Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxContainer::operator std::vector&lt; tbox::DatabaseBox &gt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a1abbf9580bd60c01ff4a222cd45c9dee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a86317125df6c2eb65553d25794c3b9d4</anchor>
      <arglist>(std::ostream &amp;s, const BoxContainer::Outputter &amp;format)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a7c43cd076078a23374298b48a3f5a520</anchor>
      <arglist>(std::ostream &amp;co, const BoxId &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>afb52c7cb40bb763aa515f75b49db60dc</anchor>
      <arglist>(std::ostream &amp;s, const BoxLevel::Outputter &amp;format)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>ac751e548574bfef193d039e55d29d7b8</anchor>
      <arglist>(std::ostream &amp;os, const Connector::Outputter &amp;format)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>aa00c2b7e87fbeb350b37dc5ff7421008</anchor>
      <arglist>(std::ostream &amp;co, const GlobalId &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a70f8031b2e9a7945dc8903b7d796a106</anchor>
      <arglist>(std::istream &amp;s, Index &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>ab3b5173d4ce8e24eedb882b292fd6a58</anchor>
      <arglist>(std::ostream &amp;s, const Index &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a161b01d3d8a05603f40678e2d95e25bb</anchor>
      <arglist>(std::istream &amp;s, IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>aa309443486df112fdfac155615a9c180</anchor>
      <arglist>(std::ostream &amp;s, const IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a3da43f9884e66e17a08572f15e3d235c</anchor>
      <arglist>(std::ostream &amp;co, const LocalId &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a8bb707f5fc3860628bc35e33403fba1e</anchor>
      <arglist>(std::ostream &amp;s, const Patch &amp;patch)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>aa138e9f0a250b1688eb3f7ca667993c5</anchor>
      <arglist>(std::ostream &amp;co, const PeriodicId &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::AssumedPartition</name>
    <filename>classSAMRAI_1_1hier_1_1AssumedPartition.html</filename>
    <member kind="function">
      <type></type>
      <name>AssumedPartition</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartition.html</anchorfile>
      <anchor>a7e27ba05b787338cb348dfc7e733bda4</anchor>
      <arglist>(const BoxContainer &amp;unpartitioned_boxes, int rank_begin, int rank_end, int index_begin=0, double avg_parts_per_rank=1.0, bool interleave=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AssumedPartition</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartition.html</anchorfile>
      <anchor>a096c5b6fcbff17833e89cdae182501fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AssumedPartition</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartition.html</anchorfile>
      <anchor>a5965477efaba5cc96c8b6c2f9064ce2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partition</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartition.html</anchorfile>
      <anchor>a4eb2ab242a98a3b81069971dbbbeed60</anchor>
      <arglist>(const BoxContainer &amp;unpartitioned_boxes, int rank_begin, int rank_end, int index_begin=0, double avg_parts_per_rank=1.0, bool interleave=false)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumberOfParts</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartition.html</anchorfile>
      <anchor>a69e8e98e6b98a659fc8013f57ba39e94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOwner</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartition.html</anchorfile>
      <anchor>a1e7faff1f275055e914b6baefc64a7df</anchor>
      <arglist>(int box_index) const </arglist>
    </member>
    <member kind="function">
      <type>Box</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartition.html</anchorfile>
      <anchor>a42fabad0d313880ef6b010bbd9676c13</anchor>
      <arglist>(int box_index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAllBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartition.html</anchorfile>
      <anchor>a0a41f3a1ffe1044e0fe179237a2bedb3</anchor>
      <arglist>(BoxContainer &amp;all_boxes) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAllBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartition.html</anchorfile>
      <anchor>a5ddb71b70b3211dc4d47ca78bfec51c8</anchor>
      <arglist>(BoxContainer &amp;all_boxes, int rank) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartition.html</anchorfile>
      <anchor>a19251e429d7551d9d872014e8d482ffd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartition.html</anchorfile>
      <anchor>aa414616e54dd6e50d6fa051878c32182</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginOfRank</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartition.html</anchorfile>
      <anchor>aa0abd14f81b376e6d218d80280b54bf5</anchor>
      <arglist>(int rank) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endOfRank</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartition.html</anchorfile>
      <anchor>a937366a115a41a3a1da6f7ef182a17fe</anchor>
      <arglist>(int rank) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findOverlaps</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartition.html</anchorfile>
      <anchor>a61c3e29a3a45fcb819c728e56dbe33a4</anchor>
      <arglist>(BoxContainer &amp;overlapping_boxes, const Box &amp;box, const BaseGridGeometry &amp;grid_geometry, const IntVector &amp;refinement_ratio) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findOverlaps</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartition.html</anchorfile>
      <anchor>a23caf8d118b7fcdf6c9a6699478c041e</anchor>
      <arglist>(BoxContainer &amp;overlapping_boxes, const Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>selfCheck</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartition.html</anchorfile>
      <anchor>ad2509b37586c99c1abd7d6854a2ae158</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recursivePrint</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartition.html</anchorfile>
      <anchor>aca950c9d53727ba9fc5c1324677bfb79</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;border, int detail_depth=2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::AssumedPartitionBox</name>
    <filename>classSAMRAI_1_1hier_1_1AssumedPartitionBox.html</filename>
    <member kind="function">
      <type></type>
      <name>AssumedPartitionBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartitionBox.html</anchorfile>
      <anchor>ab8ba7f08ebbc368dc5b734bf005d9479</anchor>
      <arglist>(const Box &amp;unpartitioned_box, int rank_begin, int rank_end, int index_begin=0, double avg_parts_per_rank=1.0, bool interleave=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AssumedPartitionBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartitionBox.html</anchorfile>
      <anchor>acfccd217d6cef88634e3eb3ffc9c4ac6</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partition</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartitionBox.html</anchorfile>
      <anchor>ac7e3c6e426cae7ee56e3af7a38c8fb9b</anchor>
      <arglist>(const Box &amp;unpartitioned_box, int rank_begin, int rank_end, int index_begin=0, double avg_parts_per_rank=1.0, bool interleave=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AssumedPartitionBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartitionBox.html</anchorfile>
      <anchor>a887289b8ced837dbe1156d6cbe4935e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box &amp;</type>
      <name>getUnpartitionedBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartitionBox.html</anchorfile>
      <anchor>ad5f32cd5fc59f1246f63629a8fd441da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfParts</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartitionBox.html</anchorfile>
      <anchor>a16eacfc2531198df8dc09bfa96bd8877</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOwner</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartitionBox.html</anchorfile>
      <anchor>ac823ae24330d2ce7ab0eaf759b6d46a6</anchor>
      <arglist>(int box_index) const </arglist>
    </member>
    <member kind="function">
      <type>Box</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartitionBox.html</anchorfile>
      <anchor>a3e4a169e282ddc9e4fa1bdef5218c68c</anchor>
      <arglist>(int box_index) const </arglist>
    </member>
    <member kind="function">
      <type>Box</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartitionBox.html</anchorfile>
      <anchor>af644687f3e160524b157c2881f751180</anchor>
      <arglist>(const IntVector &amp;position) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAllBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartitionBox.html</anchorfile>
      <anchor>aa1dcedf6341c76b9c2520251448314ee</anchor>
      <arglist>(BoxContainer &amp;all_boxes) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAllBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartitionBox.html</anchorfile>
      <anchor>a4e9a0e22c8cb1b06852d58c80232e966</anchor>
      <arglist>(BoxContainer &amp;all_boxes, int rank) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartitionBox.html</anchorfile>
      <anchor>a2c6497cc53bc215a6fd4c11e4651bd9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartitionBox.html</anchorfile>
      <anchor>a62b84738604bee5d8c562fff4e7d7a3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginOfRank</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartitionBox.html</anchorfile>
      <anchor>a34d7ae599f4d246f2068744ed6c05238</anchor>
      <arglist>(int rank) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endOfRank</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartitionBox.html</anchorfile>
      <anchor>a47e561c1a28da453a82bf3b919ae9078</anchor>
      <arglist>(int rank) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findOverlaps</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartitionBox.html</anchorfile>
      <anchor>a8795215091c6fa992a5931b8e99f39fd</anchor>
      <arglist>(BoxContainer &amp;overlapping_boxes, const Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>selfCheck</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartitionBox.html</anchorfile>
      <anchor>a0d078ab6604a4fb0f81c8b4a8b528ccb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recursivePrint</name>
      <anchorfile>classSAMRAI_1_1hier_1_1AssumedPartitionBox.html</anchorfile>
      <anchor>ae02aa4c2cbdf376d1491a5c0fad97203</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;border, int detail_depth=2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BaseConnectorAlgorithm</name>
    <filename>classSAMRAI_1_1hier_1_1BaseConnectorAlgorithm.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>BaseConnectorAlgorithm</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseConnectorAlgorithm.html</anchorfile>
      <anchor>a2004101cfceaf46f7b8f75a49ff610e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseConnectorAlgorithm</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseConnectorAlgorithm.html</anchorfile>
      <anchor>a54a34c5b4e0930335911f7d37cc4d7db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupCommunication</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseConnectorAlgorithm.html</anchorfile>
      <anchor>a317d72271faf7d81de1ab3aa4cbaf381</anchor>
      <arglist>(tbox::AsyncCommPeer&lt; int &gt; *&amp;all_comms, tbox::AsyncCommStage &amp;comm_stage, const tbox::SAMRAI_MPI &amp;mpi, const std::set&lt; int &gt; &amp;incoming_ranks, const std::set&lt; int &gt; &amp;outgoing_ranks, const boost::shared_ptr&lt; tbox::Timer &gt; &amp;mpi_wait_timer, int &amp;operation_mpi_tag, bool print_steps) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>packReferencedNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseConnectorAlgorithm.html</anchorfile>
      <anchor>ab6f968f9581fbb1a1762d386d1d263fe</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;send_mesg, int idx_offset_to_ref, const BoxContainer &amp;referenced_new_head_nabrs, const BoxContainer &amp;referenced_new_base_nabrs, const tbox::Dimension &amp;dim, bool print_steps) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>receiveAndUnpack</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseConnectorAlgorithm.html</anchorfile>
      <anchor>a5bc2c80e6172ffe0173f768cb140d019</anchor>
      <arglist>(Connector &amp;new_base_to_new_head, Connector *new_head_to_new_base, const std::set&lt; int &gt; &amp;incoming_ranks, tbox::AsyncCommPeer&lt; int &gt; *all_comms, tbox::AsyncCommStage &amp;comm_stage, const boost::shared_ptr&lt; tbox::Timer &gt; &amp;receive_and_unpack_timer, bool print_steps) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BaseGridGeometry</name>
    <filename>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</filename>
    <base>SAMRAI::tbox::Serializable</base>
    <class kind="class">SAMRAI::hier::BaseGridGeometry::ConstNeighborIterator</class>
    <class kind="class">SAMRAI::hier::BaseGridGeometry::Neighbor</class>
    <class kind="class">SAMRAI::hier::BaseGridGeometry::NeighborIterator</class>
    <member kind="typedef">
      <type>PatchGeometry::TwoDimBool</type>
      <name>TwoDimBool</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a2c84daec71e1e05ec3bad88279b1ee71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseGridGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>acb35341c85c992e92c7be494cc0f10b6</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;object_name, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db, bool allow_multiblock=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseGridGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a6b1645ff250edd7083c2b56bc5a8b739</anchor>
      <arglist>(const std::string &amp;object_name, BoxContainer &amp;domain)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseGridGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a14e2ff30289470d8ecce5867b2635112</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePhysicalDomain</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a3121e566f814c8b69d62b6ba760df106</anchor>
      <arglist>(BoxContainer &amp;domain, const IntVector &amp;ratio_to_level_zero, const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePhysicalDomainWithPeriodicImages</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>afea4db9c9b049f2a2c4c74e3f37be625</anchor>
      <arglist>(BoxContainer &amp;domain, const IntVector &amp;ratio_to_level_zero, const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePhysicalDomain</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a30799197a6a455cc0cb1c8d19ef15475</anchor>
      <arglist>(BoxLevel &amp;box_level, const IntVector &amp;ratio_to_level_zero, const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePhysicalDomain</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>aa3b218ddfb045d81f760ac135c977dc5</anchor>
      <arglist>(BoxContainer &amp;domain_boxes, const IntVector &amp;ratio_to_level_zero) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePhysicalDomain</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>ac4500caa1f578f624325d73eaf4f51ed</anchor>
      <arglist>(BoxLevel &amp;box_level, const IntVector &amp;ratio_to_level_zero) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhysicalDomain</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>aa4343ec6693caa98481863561810711a</anchor>
      <arglist>(const BoxContainer &amp;domain, const size_t number_blocks)</arglist>
    </member>
    <member kind="function">
      <type>const BoxContainer &amp;</type>
      <name>getPhysicalDomain</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>ae87a623d8a09007e0ab7fcd1c4975448</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BoxContainer &amp;</type>
      <name>getDomainSearchTree</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>ae9d9dff79f597adaa4c609889d0cb0fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BoxContainer &amp;</type>
      <name>getPeriodicDomainSearchTree</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>ae52702ba3b9888e727829fcf7979c40d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDomainIsSingleBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a025e5bdc7c515abbedb32418692c89e3</anchor>
      <arglist>(const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializePeriodicShift</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>aa3acf8fcafae0e42c7ddef695902d612</anchor>
      <arglist>(const IntVector &amp;directions)</arglist>
    </member>
    <member kind="function">
      <type>IntVector</type>
      <name>getPeriodicShift</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a0cb5a20a07c1ef2444d73b938f3e2508</anchor>
      <arglist>(const IntVector &amp;ratio_to_level_zero) const </arglist>
    </member>
    <member kind="function">
      <type>const PeriodicShiftCatalog &amp;</type>
      <name>getPeriodicShiftCatalog</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a74c51b0794b31942e8738e51ef43c0e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumberBlocks</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a7c1b9175f29090db7e70609198d30cd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntVector</type>
      <name>getMaxTransferOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a4fa66503a18aa7e4bf7f3ed80e196605</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; BaseGridGeometry &gt;</type>
      <name>makeRefinedGridGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a968532340aeb78d7d001077c7670bc3b</anchor>
      <arglist>(const std::string &amp;fine_geom_name, const IntVector &amp;refine_ratio) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; BaseGridGeometry &gt;</type>
      <name>makeCoarsenedGridGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>aaf8de212bb28d3b179a8b72919a665d5</anchor>
      <arglist>(const std::string &amp;coarse_geom_name, const IntVector &amp;coarsen_ratio) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGeometryDataOnPatch</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>ad4e7b24f0759775fb22863a779a4388a</anchor>
      <arglist>(Patch &amp;patch, const IntVector &amp;ratio_to_level_zero, const TwoDimBool &amp;touches_regular_bdry) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBoundaryBoxesOnLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a311a05ddf998f15bacb99d2fd80cc5d6</anchor>
      <arglist>(std::map&lt; BoxId, PatchBoundaries &gt; &amp;boundaries, const PatchLevel &amp;level, const IntVector &amp;periodic_shift, const IntVector &amp;ghost_width, const std::vector&lt; BoxContainer &gt; &amp;domain, bool do_all_patches=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBoundaryBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a0d85bbb9457dd891d2cf79d9ac1b8528</anchor>
      <arglist>(PatchBoundaries &amp;patch_boundaries, const Box &amp;box, const BoxContainer &amp;domain_boxes, const IntVector &amp;ghosts, const IntVector &amp;periodic_shift) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjustMultiblockPatchLevelBoundaries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a8e6feb712b0d3f62061a13e34008f3a0</anchor>
      <arglist>(PatchLevel &amp;patch_level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>abcf69f3e15104c7360e0b5e54125faeb</anchor>
      <arglist>(const char *var_type_name, const boost::shared_ptr&lt; CoarsenOperator &gt; &amp;coarsen_op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRefineOperator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>aecef292efb8f956281623e8c1be436bf</anchor>
      <arglist>(const char *var_type_name, const boost::shared_ptr&lt; RefineOperator &gt; &amp;refine_op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a4a2393fa2136747608df8a6bd3e8a942</anchor>
      <arglist>(const char *var_type_name, const boost::shared_ptr&lt; TimeInterpolateOperator &gt; &amp;time_op)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; CoarsenOperator &gt;</type>
      <name>lookupCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a9caec604d95019574c60247c97c75822</anchor>
      <arglist>(const boost::shared_ptr&lt; Variable &gt; &amp;var, const std::string &amp;op_name)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RefineOperator &gt;</type>
      <name>lookupRefineOperator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a24ae5de0cee5397bfec289abbba31715</anchor>
      <arglist>(const boost::shared_ptr&lt; Variable &gt; &amp;var, const std::string &amp;op_name)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; TimeInterpolateOperator &gt;</type>
      <name>lookupTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a203c33a511662e9c72fcddb9bc3b871b</anchor>
      <arglist>(const boost::shared_ptr&lt; Variable &gt; &amp;var, const std::string &amp;op_name=&quot;STD_LINEAR_TIME_INTERPOLATE&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinTransferOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a571bd04ea6ef3851ff969cfce86aa1e5</anchor>
      <arglist>(const IntVector &amp;min_value)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a9d11d3bc88025b781369ec0868c7c1c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>ae59b99b58fc078db1c36922ee5e851de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a431c8c999ca3e560301ca80596db783a</anchor>
      <arglist>(const BlockId &amp;block_a, const BlockId &amp;block_b, const Transformation::RotationIdentifier rotation_b_to_a, const IntVector &amp;shift_b_to_a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findSingularities</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a048fbad09f75c59a4e5db5f1b776c76c</anchor>
      <arglist>(std::set&lt; std::set&lt; BlockId &gt; &gt; &amp;singularity_blocks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>chopDomain</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a01030601e4e982fe31dccf6be15f20fc</anchor>
      <arglist>(BoxContainer &amp;chopped_domain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDomainOutsideBlock</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>ab2ccb71f6163ba0f739f8fca2c5109f1</anchor>
      <arglist>(BoxContainer &amp;domain_outside_block, const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfBlockSingularities</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a8e8bfc592ce1ce3632c2ce548782d35b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BoxContainer &amp;</type>
      <name>getSingularityBoxContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>afc696ada5b9f9a5d84544a801dfbb5bb</anchor>
      <arglist>(const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>transformBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a54d295355deb36e3ff8507bcce711691</anchor>
      <arglist>(Box &amp;box, const IntVector &amp;ratio, const BlockId &amp;output_block, const BlockId &amp;input_block) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>transformBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>abd473929be0ea202a542bb9dbdde268a</anchor>
      <arglist>(Box &amp;box, int level_number, const BlockId &amp;output_block, const BlockId &amp;input_block) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>transformBoxContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a6a1defea91aa9a819792130ac87cafb9</anchor>
      <arglist>(BoxContainer &amp;boxes, const IntVector &amp;ratio, const BlockId &amp;output_block, const BlockId &amp;input_block) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTransformedBlock</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>af7d5a8c2276d52a38e2c335fa168f109</anchor>
      <arglist>(BoxContainer &amp;block_boxes, const BlockId &amp;base_block, const BlockId &amp;transformed_block)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a8f7b5ea584e4bcb325fcc59bc2c0e654</anchor>
      <arglist>(const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>ab6f08d17ed3d3108f575d44620c66b1d</anchor>
      <arglist>(const BlockId &amp;block_a, const BlockId &amp;block_b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>areSingularityNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>abea2a02283882c0f1b7e2bbeaccd0962</anchor>
      <arglist>(const BlockId &amp;block_a, const BlockId &amp;block_b) const </arglist>
    </member>
    <member kind="function">
      <type>Transformation::RotationIdentifier</type>
      <name>getRotationIdentifier</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>ae42b72e7ac995e307de1ce3a6a03fc1d</anchor>
      <arglist>(const BlockId &amp;dst, const BlockId &amp;src) const </arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>getOffset</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a6984d4eebd91ef2e0fa86469df7be9c3</anchor>
      <arglist>(const BlockId &amp;dst, const BlockId &amp;src, int level_num) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasEnhancedConnectivity</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a5bc0d426345a277583c1a8689efb5f85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasIsotropicRatios</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a622850abd53768f67086cafd2eec2cfc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpRatios</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a590e81d9dd3b6712d9760cd77b54950c</anchor>
      <arglist>(const std::vector&lt; IntVector &gt; &amp;ratio_to_coarser)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getEquivalentLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a5ccc3e073b809aebaf2426ffa075567d</anchor>
      <arglist>(const IntVector &amp;ratio_to_level_zero) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a2a44cc9f46a022c854e761a8cef83e92</anchor>
      <arglist>(std::ostream &amp;stream) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a48bbb36fc2179d989b6a148f79c3b977</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function">
      <type>NeighborIterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>aa8dc2aa63809a1fcb871b0f7113bb8c7</anchor>
      <arglist>(const BlockId &amp;block_id)</arglist>
    </member>
    <member kind="function">
      <type>NeighborIterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>af4ae32d7b43d4b7da7ac5e63f34325ba</anchor>
      <arglist>(const BlockId &amp;block_id)</arglist>
    </member>
    <member kind="function">
      <type>NeighborIterator</type>
      <name>find</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a099dea16fa497453a9963b235728a579</anchor>
      <arglist>(const BlockId &amp;block_id, const BlockId &amp;nbr_block_id)</arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborIterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>ad18c824c2143c72a040eeaf15fafc1a7</anchor>
      <arglist>(const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborIterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a08553405dd8ce85c303a80125041eaa3</anchor>
      <arglist>(const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborIterator</type>
      <name>find</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a5f16ec1deb9cded31272d99331b26d6c</anchor>
      <arglist>(const BlockId &amp;block_id, const BlockId &amp;nbr_block_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findPatchesTouchingBoundaries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a6c114d583c0eea623e24d751207f6eaf</anchor>
      <arglist>(std::map&lt; BoxId, TwoDimBool &gt; &amp;touches_regular_boundary, std::map&lt; BoxId, TwoDimBool &gt; &amp;touches_periodic_boundary, const PatchLevel &amp;level) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBoxTouchingBoundaries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a88a0aa57ec9c97888964904e3d087891</anchor>
      <arglist>(TwoDimBool &amp;touches_regular_bdry, TwoDimBool &amp;touches_periodic_bdry, const Box &amp;box, const IntVector &amp;refinement_ratio, const BoxContainer &amp;refined_periodic_domain_tree) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGeometryOnPatches</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a1b32fed582e318fd825236941f134624</anchor>
      <arglist>(PatchLevel &amp;level, const IntVector &amp;ratio_to_level_zero, const std::map&lt; BoxId, TwoDimBool &gt; &amp;touches_regular_bdry, const bool defer_boundary_box_creation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaryBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a8c325429f40644934b6403aa62596ef6</anchor>
      <arglist>(PatchLevel &amp;level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BaseGridGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a3364f17623cfe4d36347b741499dab85</anchor>
      <arglist>(const std::string &amp;object_name, BoxContainer &amp;domain, const boost::shared_ptr&lt; TransferOperatorRegistry &gt; &amp;op_reg)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>readBlockDataFromInput</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>ab2d5cbd3201d19708fda5320b94b6402</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; TransferOperatorRegistry &gt;</type>
      <name>d_transfer_operator_registry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a3f77f497366bc01a1f1082995cb27fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tbox::Dimension</type>
      <name>d_dim</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry.html</anchorfile>
      <anchor>a3db460feb609c2e0619cc971dfe5cc94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BaseGridGeometry::ConstNeighborIterator</name>
    <filename>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1ConstNeighborIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstNeighborIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>a67c358a5a57606f7739f980e6d581d96</anchor>
      <arglist>(const ConstNeighborIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstNeighborIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>a7599d445a8d2aa3757c6ca4a5f1feb36</anchor>
      <arglist>(const NeighborIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstNeighborIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>afb48ffa9aefed70d171635824946ea3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>add655d89b50496dc4ae0c4ed8a3810bb</anchor>
      <arglist>(const ConstNeighborIterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>a1ab2ada7ad2e4c56c3a1336451640aca</anchor>
      <arglist>(const NeighborIterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const Neighbor &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>a2945c98bf5d12f1f89277048406c8797</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborIterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>ab2c559ec88c716d4655cc32a2641d158</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>a4cccef0187531a6ee5f6de1b026e6412</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>a695cd407d6157ab4944eabf32333c0b3</anchor>
      <arglist>(const ConstNeighborIterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>a46b62680a819082058bad327e96dda1b</anchor>
      <arglist>(const ConstNeighborIterator &amp;rhs) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BaseGridGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>a19d5e21bc0208204e430a2000f627623</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BaseGridGeometry::Neighbor</name>
    <filename>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1Neighbor.html</filename>
    <member kind="function">
      <type></type>
      <name>Neighbor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1Neighbor.html</anchorfile>
      <anchor>a8fd4ab40a589f0fe3553549268374270</anchor>
      <arglist>(const BlockId &amp;block_id, const BoxContainer &amp;domain, const std::vector&lt; Transformation &gt; &amp;transformation)</arglist>
    </member>
    <member kind="function">
      <type>const BlockId &amp;</type>
      <name>getBlockId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1Neighbor.html</anchorfile>
      <anchor>a70eb633ae560956c142d8eef8226e46c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BoxContainer &amp;</type>
      <name>getTransformedDomain</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1Neighbor.html</anchorfile>
      <anchor>a1ce5161af20c39ded1a79ce226f116a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Transformation &amp;</type>
      <name>getTransformation</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1Neighbor.html</anchorfile>
      <anchor>a1df108937042fef102b9f6d5be50e1fd</anchor>
      <arglist>(const int level_num) const </arglist>
    </member>
    <member kind="function">
      <type>Transformation::RotationIdentifier</type>
      <name>getRotationIdentifier</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1Neighbor.html</anchorfile>
      <anchor>a0dd06e1332bf66c9ae9a18e986ee33ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>getShift</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1Neighbor.html</anchorfile>
      <anchor>a99ad2fff811ff602b3d4662cab6ee1db</anchor>
      <arglist>(const int level_num) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTransformation</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1Neighbor.html</anchorfile>
      <anchor>a3a6e26face75885ad29ec20962d4fcbb</anchor>
      <arglist>(const Transformation &amp;transformation, int level_num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSingularity</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1Neighbor.html</anchorfile>
      <anchor>aadd2a69d47de8a7d046aa74b9e4c1139</anchor>
      <arglist>(bool is_singularity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSingularity</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1Neighbor.html</anchorfile>
      <anchor>a7653ee0a13942f44875d4af65cded0cc</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BaseGridGeometry::NeighborIterator</name>
    <filename>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1NeighborIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>NeighborIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1NeighborIterator.html</anchorfile>
      <anchor>aefab184ab633fd0419a85780fe60a015</anchor>
      <arglist>(const NeighborIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NeighborIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1NeighborIterator.html</anchorfile>
      <anchor>ac151cd8ea03ea04c190ee458dc88e617</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NeighborIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1NeighborIterator.html</anchorfile>
      <anchor>abe932e5725ef17378d920c36e11a91e5</anchor>
      <arglist>(const NeighborIterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Neighbor &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1NeighborIterator.html</anchorfile>
      <anchor>aa0eb8e3b17fa05db6d553b44bd6ecb21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NeighborIterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1NeighborIterator.html</anchorfile>
      <anchor>a77b1d7d74b456e3f7d2981227a280ca2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>NeighborIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1NeighborIterator.html</anchorfile>
      <anchor>aa041507a3600a7d9f0d9469f7b49632c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1NeighborIterator.html</anchorfile>
      <anchor>a39481175c2e67d13329de187868291a9</anchor>
      <arglist>(const NeighborIterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1NeighborIterator.html</anchorfile>
      <anchor>a2e911a476de30ad9a369302162d64ec7</anchor>
      <arglist>(const NeighborIterator &amp;rhs) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BaseGridGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BaseGridGeometry_1_1NeighborIterator.html</anchorfile>
      <anchor>a19d5e21bc0208204e430a2000f627623</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BlockId</name>
    <filename>classSAMRAI_1_1hier_1_1BlockId.html</filename>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>block_t</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>a51cd5ba280eb2903a2f3b524e701da44</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>abf3faa62d113a2a176b6d61b6dd499f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>a512bc181aacc83db0ed646193e547c8a</anchor>
      <arglist>(const BlockId &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>ae3456cc3dd8b04f0c585a3be2c71f0eb</anchor>
      <arglist>(const unsigned int &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>ac7b943b5d616f686084d4028ccd2141a</anchor>
      <arglist>(const int &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BlockId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>a09b653084972bae3b36f904d4697ba3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BlockId &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>a89f46575f4224da2680737e11b23afcc</anchor>
      <arglist>(const BlockId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>a9137570b315f30a2c4afa8e3b50d06fe</anchor>
      <arglist>(const int &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>a2dba5037f4dde3353b9cc2daaf9a083f</anchor>
      <arglist>(const unsigned int &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>a3307514c87cc170b0850eb23913be962</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const block_t &amp;</type>
      <name>getBlockValue</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>ad815fed52ae768d779435af15b5e85c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>a54be277313517aa17e57479b72dfa851</anchor>
      <arglist>(const BlockId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>acdb4a9551c9f9aac1f9a14b6c68286db</anchor>
      <arglist>(const BlockId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>acc3ad1c73262ed2c868a74bfe93d21d6</anchor>
      <arglist>(const BlockId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>aaa334bb00df40375e642b14dce789773</anchor>
      <arglist>(const BlockId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>af0175b17a31ffeb65b04923a2d91e415</anchor>
      <arglist>(const BlockId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>ac502d8a34cbc13616a3d11ad6f26f4ef</anchor>
      <arglist>(const BlockId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>a7ecf895c3a541e6865fa017b99ae3205</anchor>
      <arglist>(const block_t &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>a0cf2b64381b2355d01ab8ac7d0abcaba</anchor>
      <arglist>(const block_t &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>a38a65ea2a7e02f000b19069c91ebcecc</anchor>
      <arglist>(const block_t &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>ae4f4c2901139dc032b604c26a7354a2d</anchor>
      <arglist>(const block_t &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>a24918b906ee0b2c183d95f261fe88e7c</anchor>
      <arglist>(const block_t &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>a26e6f9582848f7825cca61d39d8095c2</anchor>
      <arglist>(const block_t &amp;rhs) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BlockId &amp;</type>
      <name>zero</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>ac72018b09858dea326445b9b4e2f946e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BlockId &amp;</type>
      <name>invalidId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>af5ec2c3b87256cd021571cd78a897d92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BlockId.html</anchorfile>
      <anchor>ac30658f58dc96f2434adc24844a05cce</anchor>
      <arglist>(std::ostream &amp;co, const BlockId &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoundaryBox</name>
    <filename>classSAMRAI_1_1hier_1_1BoundaryBox.html</filename>
    <member kind="enumeration">
      <name>BoundaryOrientation</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>a8ca81b15434ad71ad358a4f845a8e7fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOWER</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>a8ca81b15434ad71ad358a4f845a8e7fca421ed3379231b92086cfa3aedf35ccf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIDDLE</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>a8ca81b15434ad71ad358a4f845a8e7fca355df711e0b033c35915deb8684b9a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPPER</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>a8ca81b15434ad71ad358a4f845a8e7fca13842a417181bbd3f462474ffc242de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundaryBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>abbcf92685715aec1c845fabfd52de5d3</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundaryBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>aa85308ea8667843d54a1cf8bb8d9c3fe</anchor>
      <arglist>(const Box &amp;box, const int bdry_type, const int location_index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundaryBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>a510fee6ef391165620cf3f9a06be9227</anchor>
      <arglist>(const BoundaryBox &amp;boundary_box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoundaryBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>a1cd30efc60e89bfec6c2062469afbf27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>a5081ee50b5fe846088febc104f3b7eb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBoundaryType</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>afcf0ee01d74a797112d7e8696e3c826d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocationIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>a66235cfeb7b6b340e61a07e0aab0555a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsMultiblockSingularity</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>af4737d2db3a0a32763c6ece4c9466682</anchor>
      <arglist>(bool is_mblk_singularity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsMultiblockSingularity</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>ae22cb8e14f09fa59a8be8824ee289bcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoundaryBox &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>a9dea260293f1929b0c7da2d28dafab11</anchor>
      <arglist>(const BoundaryBox &amp;boundary_box)</arglist>
    </member>
    <member kind="function">
      <type>BoundaryOrientation</type>
      <name>getBoundaryOrientation</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>abb4d03e1be1536055c5750dd433df268</anchor>
      <arglist>(const int dir) const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>a83093e12583eabd3c3be2804d1c7641e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoundaryBoxUtils</name>
    <filename>classSAMRAI_1_1hier_1_1BoundaryBoxUtils.html</filename>
    <member kind="function">
      <type></type>
      <name>BoundaryBoxUtils</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBoxUtils.html</anchorfile>
      <anchor>a417e58daed984c23b8947c378919a97a</anchor>
      <arglist>(const BoundaryBox &amp;bbox)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoundaryBoxUtils</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBoxUtils.html</anchorfile>
      <anchor>afcaab149011db8a38277f17205815594</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaryBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBoxUtils.html</anchorfile>
      <anchor>adb09860c1e09073e8a1a0ccae7f05f41</anchor>
      <arglist>(const BoundaryBox &amp;bbox)</arglist>
    </member>
    <member kind="function">
      <type>const BoundaryBox &amp;</type>
      <name>getBoundaryBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBoxUtils.html</anchorfile>
      <anchor>a30e1aa5257025ace39dec5c93f4d84d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>getOutwardShift</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBoxUtils.html</anchorfile>
      <anchor>aae488df1f302e6dfca5bd19354cdaca2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stretchBoxToGhostWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBoxUtils.html</anchorfile>
      <anchor>ade15fe6e4bf72dab9e88039750b38cd7</anchor>
      <arglist>(Box &amp;box, const IntVector &amp;ghost_cell_width) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendBoxOutward</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBoxUtils.html</anchorfile>
      <anchor>a89108c4b1320175fda9f6d7b55378278</anchor>
      <arglist>(Box &amp;box, const IntVector &amp;extension) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>normalDir</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBoxUtils.html</anchorfile>
      <anchor>a5d7f8b4a03163119335c82ee70464095</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoundaryBox</type>
      <name>trimBoundaryBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBoxUtils.html</anchorfile>
      <anchor>aeaf04a43e9efaee78dfbebb144496884</anchor>
      <arglist>(const Box &amp;limit_box) const </arglist>
    </member>
    <member kind="function">
      <type>Box</type>
      <name>getSurfaceBoxFromBoundaryBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBoxUtils.html</anchorfile>
      <anchor>a4324c28741254c7b685fd53bfa095b65</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoundaryLookupTable</name>
    <filename>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</filename>
    <member kind="function">
      <type>const std::vector&lt; tbox::Dimension::dir_t &gt; &amp;</type>
      <name>getDirections</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</anchorfile>
      <anchor>aaf27c94bcaec4327c88138bbc449671a</anchor>
      <arglist>(int loc, tbox::Dimension::dir_t codim) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>getMaxLocationIndices</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</anchorfile>
      <anchor>a0300b3d69e1daf891e481eab193feb87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxLocationIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</anchorfile>
      <anchor>a7ce783f3b7e0d302ad9648d33be245c2</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLower</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</anchorfile>
      <anchor>afb88525e33262c4bba87b2ac9b798e31</anchor>
      <arglist>(int loc, int codim, int dir_index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpper</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</anchorfile>
      <anchor>a37c4328501546d4f281e57046b2572a3</anchor>
      <arglist>(int loc, int codim, int dir_index) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; IntVector &gt; &amp;</type>
      <name>getBoundaryDirections</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</anchorfile>
      <anchor>a50cca44420bf3af5aebf9475f3e4ce17</anchor>
      <arglist>(int codim) const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</anchorfile>
      <anchor>a01fe5d059a4818f867fda2da5fbfa244</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BoundaryLookupTable *</type>
      <name>getLookupTable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</anchorfile>
      <anchor>aec786b413c0b3e2c1019295243d8346a</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BoundaryLookupTable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</anchorfile>
      <anchor>a576425535cebc3d4254e084a8c1e5f2a</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~BoundaryLookupTable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</anchorfile>
      <anchor>a6213cd740272820ea65ae818ed197fe1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::Box</name>
    <filename>classSAMRAI_1_1hier_1_1Box.html</filename>
    <class kind="struct">SAMRAI::hier::Box::box_equality</class>
    <class kind="struct">SAMRAI::hier::Box::id_equal</class>
    <class kind="struct">SAMRAI::hier::Box::id_less</class>
    <member kind="typedef">
      <type>tbox::Dimension::dir_t</type>
      <name>dir_t</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a3b2540223bfce2a013cad4cb186d0638</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoxIterator</type>
      <name>iterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>aa9df17a93f6604465890248b4203665d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a2a0f4d989d16b57091920e82d9c417c5</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>aa1015a3587ecb1631d56ec0b064478ab</anchor>
      <arglist>(const Index &amp;lower, const Index &amp;upper, const BlockId &amp;block_id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a85052a596587b984ae7e1cfe4e3fee60</anchor>
      <arglist>(const Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a6e528f065c413d292121279ffc04d519</anchor>
      <arglist>(const tbox::DatabaseBox &amp;box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a39f1822569f2ea8c5beec65936df332e</anchor>
      <arglist>(const Index &amp;lower, const Index &amp;upper, const BlockId &amp;block_id, const LocalId &amp;local_id, const int owner_rank, const PeriodicId &amp;periodic_id=PeriodicId::zero())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>afc3e74c64d00e67c5b5802f0d9640caf</anchor>
      <arglist>(const Box &amp;box, const LocalId &amp;local_id, const int owner_rank, const PeriodicId &amp;periodic_id=PeriodicId::zero())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>ac80337283d5f5ddcbe93aa57cfbc4f42</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const GlobalId &amp;id, const PeriodicId &amp;periodic_id=PeriodicId::zero())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>adda0a982204712951c9c8338b108597c</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const BoxId &amp;box_id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a891b92b95f64654a8dd7b1c9fec6fc11</anchor>
      <arglist>(const Box &amp;other, const PeriodicId &amp;periodic_id, const IntVector &amp;refinement_ratio, const PeriodicShiftCatalog &amp;shift_catalog)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Box</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a3af0990a0c5d4e7d9d5c80b510ea08d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>af47e2473dfb6f6eb129a8b3b497e6639</anchor>
      <arglist>(const Box &amp;box, const LocalId &amp;local_id, const int owner_rank, const PeriodicId &amp;periodic_id=PeriodicId::zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a6198f9021aad38818f2589d0cff351b5</anchor>
      <arglist>(const Box &amp;other, const PeriodicId &amp;periodic_id, const IntVector &amp;refinement_ratio, const PeriodicShiftCatalog &amp;shift_catalog)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a57a8c3c3bbc3e144ebd14718f42aedee</anchor>
      <arglist>(const BoxId &amp;box_id)</arglist>
    </member>
    <member kind="function">
      <type>const BoxId &amp;</type>
      <name>getBoxId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a4ff5cdfa2e77f981fd93863203ce6d28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBlockId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a3bc603c2734156f784a825f2f201973b</anchor>
      <arglist>(const BlockId &amp;block_id)</arglist>
    </member>
    <member kind="function">
      <type>const BlockId &amp;</type>
      <name>getBlockId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a73f3ed453b03c2119ed4ef5727fb05f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocalId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>aa26049aa510b65aed1397253a77572bc</anchor>
      <arglist>(const LocalId &amp;local_id)</arglist>
    </member>
    <member kind="function">
      <type>const LocalId &amp;</type>
      <name>getLocalId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a6add4abdda3a5ae7dbccaaf9862a0948</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const GlobalId &amp;</type>
      <name>getGlobalId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a8c9bef7de2206f009d87d31153075a82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOwnerRank</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>acfdbd27da5bb84da56e3541e793724d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PeriodicId &amp;</type>
      <name>getPeriodicId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>ae0c5998bbe766e9788f473227dd23f0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPeriodicImage</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a9fdd4070179cf7d8eab46f7291aaf357</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdEqual</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a29aff4528e1be2d79a193c4931e8b2cc</anchor>
      <arglist>(const Box &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Box &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>ac779bb7961d2798445b623e6962c1992</anchor>
      <arglist>(const Box &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const Index &amp;</type>
      <name>lower</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>aa5dd40fb6a8dd9ebdb167b5f4c82fa72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLower</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a59a56b4a6bf212ace458de2dd05bd441</anchor>
      <arglist>(const Index &amp;new_lower)</arglist>
    </member>
    <member kind="function">
      <type>const Index &amp;</type>
      <name>upper</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a52dd0e185dad8ed09280acb9d1d30803</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpper</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a3b4b9d643c59362f4f78b6332385b95b</anchor>
      <arglist>(const Index &amp;new_upper)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>lower</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a99739e49fd5571550850571e85674a4f</anchor>
      <arglist>(dir_t i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLower</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>accd51c38ec7aee42a457241a7e9988eb</anchor>
      <arglist>(dir_t i, int new_lower)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>upper</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a58061c423fd5779a81bceea1120956be</anchor>
      <arglist>(dir_t i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpper</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a6d03d6244e57e1c26c52b9c38e777447</anchor>
      <arglist>(dir_t i, int new_upper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEmpty</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a33f068f87d255c8f1eae6f79b4b10338</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a6b91ba9faad6a46e4b033c2ccd510426</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>aedf565447ef14f89f2ef1662404ae07f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberCells</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a18b8b83ef572cf75d14ea84eadefbba9</anchor>
      <arglist>(const dir_t i) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector</type>
      <name>numberCells</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a5679e447ddb1dbaa9c64ec6c9d542d04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a3a83a9f21f6ad1b6b9c8c06298e56df2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>dir_t</type>
      <name>longestDirection</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>ac78761caf5e8a38290806e19a96be8f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>offset</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a98fa1eae72ab2c5ac0fab3b702311012</anchor>
      <arglist>(const Index &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>index</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a33edcf35ae9652b3392cb262bef5d972</anchor>
      <arglist>(const size_t offset) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a667a2c86d45c2e82be659c6d08f2ce67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a17332e67c8cb76ab58f730adea167737</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a6dc369fca1c33ea02bda8319a7b9e3dc</anchor>
      <arglist>(const Index &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a72ddb512f3b631b1c591e892073f3d97</anchor>
      <arglist>(const Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSpatiallyEqual</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a0b171d395c69d312114bf49e02bdeaaa</anchor>
      <arglist>(const Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>Box</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a91bbe18020a0767e11b032d5bdce4b80</anchor>
      <arglist>(const Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>Box &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a3749243387ac0d1add3a7ba0d4b6bc23</anchor>
      <arglist>(const Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersect</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a54b1743d12c6b0d8552b8841deaebaef</anchor>
      <arglist>(const Box &amp;other, Box &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a90db92aee86ae226d1c060e5b2bb4d46</anchor>
      <arglist>(const Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>Box</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a9657627431176104cf475ead29b270c2</anchor>
      <arglist>(const Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>Box &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>ad4365e529a6da09977e05cf136556365</anchor>
      <arglist>(const Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>coalesceWith</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a0e02239ef9501b9bc47453d754aca9d7</anchor>
      <arglist>(const Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grow</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a88c6fbe350f87957af27302ca00d1185</anchor>
      <arglist>(const IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grow</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a461aa1a68dbb3aa1bfd3ce5b0df55901</anchor>
      <arglist>(const dir_t direction, const int ghosts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>growLower</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a3789534154a09b8a2bd9cef1010b429f</anchor>
      <arglist>(const IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>growLower</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>abd788c6d44198dce8e8830f13bbcf6bd</anchor>
      <arglist>(const dir_t direction, const int ghosts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>growUpper</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a5e02fa3872cd98847683b2ee5162b84f</anchor>
      <arglist>(const IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>growUpper</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>ac9812dadf4b91d8b6d477d42c2258069</anchor>
      <arglist>(const dir_t direction, const int ghosts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lengthen</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>ac17bd389019b7ee175e4ac836237cda5</anchor>
      <arglist>(const dir_t direction, const int ghosts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shorten</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a91ca2e852cac6753248c2ad2550c3928</anchor>
      <arglist>(const dir_t direction, const int ghosts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shift</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>aab7b7c5ec485a56eb8fd68f5bec0322d</anchor>
      <arglist>(const IntVector &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shift</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a1213ad30ad793cf08e5a89b791432b1d</anchor>
      <arglist>(const dir_t direction, const int offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a2571400f751941031fc74c243a111dc4</anchor>
      <arglist>(const Transformation::RotationIdentifier rotation_ident)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a39de04c4a599169534757fa77aa348f3</anchor>
      <arglist>(const IntVector &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a48664a67ee47b1163a958d7690bf145b</anchor>
      <arglist>(const IntVector &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>Box &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a823ba77ba4ab7a9cb87f564b8d122e5d</anchor>
      <arglist>(const tbox::DatabaseBox &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>Box &amp;</type>
      <name>Box_from_DatabaseBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a7dc66512eb659bb2c7454bf32c439666</anchor>
      <arglist>(const tbox::DatabaseBox &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_Box_from_DatabaseBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a8e449905938902db329b7c6a82b1dbc3</anchor>
      <arglist>(const tbox::DatabaseBox &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>tbox::DatabaseBox</type>
      <name>DatabaseBox_from_Box</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a5eaa7e17d9e7fcc100ece85f8491c7e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator tbox::DatabaseBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>ae47957a17131800de1a2fae3780bdce0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator tbox::DatabaseBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>aec27f4c3269fc6a4213e2eea9c38abca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a577d9d6fd94c95508d0d20dbdf944e42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lockId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a37a7282117e4c7d1c662cde0754c7377</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>idLocked</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a68767f4ed13d0cecea7483b65a0717f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Box</type>
      <name>grow</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>ab4e4baa8e2c0607e683e48b64979adb2</anchor>
      <arglist>(const Box &amp;box, const IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Box</type>
      <name>shift</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a5a5b8154995a77e406cf7cdc78855ed2</anchor>
      <arglist>(const Box &amp;box, const IntVector &amp;offset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Box</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a4d7584eac61d82dd293c111dff9b15b4</anchor>
      <arglist>(const Box &amp;box, const IntVector &amp;ratio)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Box</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a8c57cfa3c891172a59fea309872125bf</anchor>
      <arglist>(const Box &amp;box, const IntVector &amp;ratio)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Box &amp;</type>
      <name>getEmptyBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a4b2ee8e460ff86ebc5ec3bbd2b8fc59e</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Box &amp;</type>
      <name>getUniverse</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>ae2afb6c9022187630848869c7108e841</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>BoxIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a2a4fdfcdad6880a51100ee879f77a0b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a3d3741ed318125216d5f721192b48682</anchor>
      <arglist>(std::istream &amp;s, Box &amp;box)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a38123b59287b95438936de8c3a30ae32</anchor>
      <arglist>(std::ostream &amp;s, const Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToIntBuffer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a9132ce04f3e68cfa19262ff959e3fdce</anchor>
      <arglist>(int *buffer) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromIntBuffer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a1f665a74ed5453b2cb3412984233b25f</anchor>
      <arglist>(const int *buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToMessageStream</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a5c9dfc73ffad23217ff2d157654646fe</anchor>
      <arglist>(tbox::MessageStream &amp;msg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromMessageStream</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>aaad5eea517a3b040f237086716549997</anchor>
      <arglist>(tbox::MessageStream &amp;msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>commBufferSize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a38a65d14ed57e27817b2e1188d97bff2</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::hier::Box::box_equality</name>
    <filename>structSAMRAI_1_1hier_1_1Box_1_1box__equality.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structSAMRAI_1_1hier_1_1Box_1_1box__equality.html</anchorfile>
      <anchor>a10c6aa80f35efdd0d337e6583200e864</anchor>
      <arglist>(const Box &amp;b1, const Box &amp;b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structSAMRAI_1_1hier_1_1Box_1_1box__equality.html</anchorfile>
      <anchor>a20e7e2ef1b1d496c21d763c801f93f12</anchor>
      <arglist>(const Box *b1, const Box *b2) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::hier::Box::id_equal</name>
    <filename>structSAMRAI_1_1hier_1_1Box_1_1id__equal.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structSAMRAI_1_1hier_1_1Box_1_1id__equal.html</anchorfile>
      <anchor>ab671a86db2b7ab09407b24d55a04a960</anchor>
      <arglist>(const Box &amp;b1, const Box &amp;b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structSAMRAI_1_1hier_1_1Box_1_1id__equal.html</anchorfile>
      <anchor>a026238f4b4cad8d5cf7afbbfbf5c76ad</anchor>
      <arglist>(const Box *b1, const Box *b2) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::hier::Box::id_less</name>
    <filename>structSAMRAI_1_1hier_1_1Box_1_1id__less.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structSAMRAI_1_1hier_1_1Box_1_1id__less.html</anchorfile>
      <anchor>aee7d47591d9849429323e5530423482a</anchor>
      <arglist>(const Box &amp;b1, const Box &amp;b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structSAMRAI_1_1hier_1_1Box_1_1id__less.html</anchorfile>
      <anchor>a8cb8da27d5a6f106c8d4da1c801adc9f</anchor>
      <arglist>(const Box *b1, const Box *b2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxIterator</name>
    <filename>classSAMRAI_1_1hier_1_1BoxIterator.html</filename>
    <member kind="typedef">
      <type>tbox::Dimension::dir_t</type>
      <name>dir_t</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a223ebecda1fb4a8f7e34b4a4eed72b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>aeb6b48adaee867b38523f595d0166b68</anchor>
      <arglist>(const BoxIterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>BoxIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a86178f6f3ffa2358cf90791b297e2594</anchor>
      <arglist>(const BoxIterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoxIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a2ee962ca6c519aad969944bc716d7f04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Index &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>ae23aa708a28a1445d7f5837e62aed6f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Index *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a80933a24173dd78b09fb7ab43623b5c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoxIterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a4aa0ab5ade14731c14ac1bf330aa4a03</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>BoxIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>af996a26651f6cf5a9f00e1c5ed439623</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a39aea263de120b35648eb6375e11f73a</anchor>
      <arglist>(const BoxIterator &amp;iterator) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a793f94b9d02a3e32ee2766dbe7fbfad4</anchor>
      <arglist>(const BoxIterator &amp;iterator) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Box</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a3f229d41a6747c1fd12cbe102d06b13c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxContainer</name>
    <filename>classSAMRAI_1_1hier_1_1BoxContainer.html</filename>
    <class kind="class">SAMRAI::hier::BoxContainer::BoxContainerConstIterator</class>
    <class kind="class">SAMRAI::hier::BoxContainer::BoxContainerIterator</class>
    <class kind="class">SAMRAI::hier::BoxContainer::Outputter</class>
    <member kind="typedef">
      <type>BoxContainerIterator</type>
      <name>iterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>aff3fe3b8197b28da1ce580dd10a80d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoxContainerConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a9029557738c2cf06d5e00b072a5606a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>ad795e5b89220de39c135f35a67cdd9f4</anchor>
      <arglist>(const BoxContainer &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdEqual</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>addbc2e3fd0573678cd793bcfe4e0258c</anchor>
      <arglist>(const BoxContainer &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSpatiallyEqual</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a8c5e154d95a5cc990613062dc62c70d0</anchor>
      <arglist>(const BoxContainer &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a3388a48a209f9b2d08f51bc64f1b33f5</anchor>
      <arglist>(const BoxContainer &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeTree</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>afaa3a4f83b2f6714087926aea2d21664</anchor>
      <arglist>(const BaseGridGeometry *grid_geometry=0, const int min_number=10) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTree</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a6583a10f3562655a992cc0108222dd3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBoxInBlock</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a8f29006cbc555f91394a5b641d99027a</anchor>
      <arglist>(const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findOverlapBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>aa6e83d2ee9cc30cc14da50cc398e89c2</anchor>
      <arglist>(BoxContainer &amp;overlap_boxes, const Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findOverlapBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>ad254ff6fa6afdaa32c7539dcef0749c4</anchor>
      <arglist>(std::vector&lt; const Box * &gt; &amp;overlap_boxes, const Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findOverlapBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a046d85a16e8923c8e7493a128c27595e</anchor>
      <arglist>(BoxContainer &amp;overlap_boxes, const Box &amp;box, const IntVector &amp;refinement_ratio, bool include_singularity_block_neighbors=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findOverlapBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>aa97cea6ce26cd7669d8cda4898b91b95</anchor>
      <arglist>(std::vector&lt; const Box * &gt; &amp;overlap_boxes, const Box &amp;box, const IntVector &amp;refinement_ratio, bool include_singularity_block_neighbors=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOverlap</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>ab161e5c0d9cb1ef48c0b06016f6ec78f</anchor>
      <arglist>(const Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a7b71e640373c9fdc6c7a5caca13a1077</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a3c485123fcf0afa0f3fda4b0769cafa0</anchor>
      <arglist>(const bool ordered)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a41fe31cad64a3b15ed599a910d2f8273</anchor>
      <arglist>(const_iterator first, const_iterator last, const bool ordered=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>ad63ddcd7165e1b411faafc10452056ac</anchor>
      <arglist>(const Box &amp;box, const bool ordered=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>adcb9a691b0d39407ddc04c21014d1892</anchor>
      <arglist>(const BoxContainer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a9c10c1fbfe303934ace48ad09de2c1d0</anchor>
      <arglist>(const std::vector&lt; tbox::DatabaseBox &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>afe2288d97c15f402d9b0f2d999de9c47</anchor>
      <arglist>(const BoxContainer &amp;other, const BlockId &amp;block_id)</arglist>
    </member>
    <member kind="function">
      <type>BoxContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>aff2f982d2652d67aeb3ff8100dfdc163</anchor>
      <arglist>(const BoxContainer &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>BoxContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a52c10d65f3522145a133f40c8fdcfe28</anchor>
      <arglist>(const std::vector&lt; tbox::DatabaseBox &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoxContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a4e7ae9ea3a7700f61efc722c56d9ed40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a2471b46bb9a12ca391187ac781240ba3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a7371af1cb3790c297440cec6dda6a72e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>ad871f3c0557760094807290656e33750</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a7d67bdccb18882a276659b5c2851edc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a192b7c4c41e41cdb9466afb9005136e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a9177f688d517d8106664d509c6851f86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a9c566195352afe03c2c1b2ef8d19e55c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BoxContainerSingleBlockIterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a109bd0cce2a5b8f69e5ea1f971294ca2</anchor>
      <arglist>(const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>BoxContainerSingleBlockIterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a830399bd31f98ef38c7df25180486f9f</anchor>
      <arglist>(const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>BoxContainerSingleOwnerIterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>af0a3a4e59efb7b20fdc43ea27a375582</anchor>
      <arglist>(const int &amp;owner_rank) const </arglist>
    </member>
    <member kind="function">
      <type>BoxContainerSingleOwnerIterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a6de540684a35466938f821a940d459e9</anchor>
      <arglist>(const int &amp;owner_rank) const </arglist>
    </member>
    <member kind="function">
      <type>RealBoxConstIterator</type>
      <name>realBegin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a42c5c13e9f4ddb913215f12a030c761e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealBoxConstIterator</type>
      <name>realEnd</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a7dae366456c18c63846ffd42a0fbc542</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Box &amp;</type>
      <name>front</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>aacb30f477c077d265d20b477e5adc0f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Box &amp;</type>
      <name>back</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a1a00d37886fa41bd01c6741568ab5bb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>ac4efcb7ab3ef052fa78b468ecb26cf44</anchor>
      <arglist>(iterator iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a0c1648bbd364c5d25c1c4b1a99de0f1c</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a36eeafbcb7e07afea2806d64a2f0d4c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a9aa7f1ff4dacf6c075e4eadb7363ea3c</anchor>
      <arglist>(BoxContainer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getOwners</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a8f32186ba3fc0bb9df9f73ed746ebc92</anchor>
      <arglist>(std::set&lt; int &gt; &amp;owners) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grow</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a4e0ebf36f1800ef69be70eddfeb9e638</anchor>
      <arglist>(const IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shift</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a28ac3b63bd66820c89449634de6e69c1</anchor>
      <arglist>(const IntVector &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>aef570e52b1dedc50e0e2f607f02ef113</anchor>
      <arglist>(const IntVector &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a9906f066cab6279e709490b50245313e</anchor>
      <arglist>(const IntVector &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getTotalSizeOfBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>adaf04b91b7439bc7cb9f61734871e930</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>ab302f3413aca7d08ae39eb765e0f91d2</anchor>
      <arglist>(const Index &amp;idx, const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>Box</type>
      <name>getBoundingBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a6440b7e06427fd365eb05604e7dc99f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Box</type>
      <name>getBoundingBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a300c7b4246e444e698f719d8df4b61c6</anchor>
      <arglist>(const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxesIntersect</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a14358caff71c9fb7dd8d8b3e3e193ea1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>order</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a8a554081bd049c99de1e0d6ad53d1cba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unorder</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>ad3fc42e7710adae0c5d1d5a1c0a1698d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrdered</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>ab60e3636df51eb5997471a5520c7884b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushFront</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a9dac68baead6e75db214c8b120f0730e</anchor>
      <arglist>(const Box &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBack</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a236e2463d9ec5964135861de73f16324</anchor>
      <arglist>(const Box &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_front</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>ad73c72c593ada860cc4e354753f4914e</anchor>
      <arglist>(const Box &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>ac7036801c26c07f0eec66853f2f6fd2d</anchor>
      <arglist>(const Box &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertBefore</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a3f9ea6e1242029ed5b0bec7ebfc55ecb</anchor>
      <arglist>(iterator iter, const Box &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertAfter</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a3229998b188dfe40a9bddb47d737da4f</anchor>
      <arglist>(iterator iter, const Box &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spliceFront</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>aba38984af87d838459be4b85d0638bb9</anchor>
      <arglist>(BoxContainer &amp;boxes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spliceBack</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>ad0766ee251b631b81cd2333e71dd33f2</anchor>
      <arglist>(BoxContainer &amp;boxes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popFront</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>aa26e34c146a2e4d3db594350d030682c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popBack</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a09990007ee046ca5b308cdeea9bf9302</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>simplify</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>acf2587b68a7d1a7d2a2134d9f87c0fca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coalesce</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a4f65643b3d30a7bc24dbac9a22abb5c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a610b4fa87a46fb7225d10a76014d4c86</anchor>
      <arglist>(const Transformation::RotationIdentifier rotation_ident)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIntersections</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>ab7efb9cecef0461f129c18f41fa06402</anchor>
      <arglist>(const Box &amp;takeaway)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIntersections</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a140cd0612e724e550fecb567f38c760b</anchor>
      <arglist>(const BoxContainer &amp;takeaway)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIntersections</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a9eae3c6a62fc8e46c2cb3430b72966ec</anchor>
      <arglist>(const IntVector &amp;refinement_ratio, const BoxContainer &amp;takeaway, const bool include_singularity_block_neighbors=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIntersections</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>ad98c16c6d4f4d7a3d748dcc08fd3a010</anchor>
      <arglist>(const Box &amp;box, const Box &amp;takeaway)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersectBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>aafc53135623a761a92fc7053dd482810</anchor>
      <arglist>(const Box &amp;keep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersectBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a2f7078f8f3e4024318d535717ed2cb34</anchor>
      <arglist>(const BoxContainer &amp;keep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersectBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a6332ff5ba2add3c55657b80d254a116e</anchor>
      <arglist>(const IntVector &amp;refinement_ratio, const BoxContainer &amp;keep, bool include_singularity_block_neighbors=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insert</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a2c2d862cadd5ab8e61c1104b98d90fbe</anchor>
      <arglist>(const Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a235e4cc65c93a2acc692838a0215e44f</anchor>
      <arglist>(iterator position, const Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>ae043c3cad663f7ff9ec97ee02b9a2bd3</anchor>
      <arglist>(const_iterator first, const_iterator last)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a4460be7ce26be1bc5ce2ffc09b0efc9d</anchor>
      <arglist>(const Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lowerBound</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a7e31c87c644fd9666c1bf1517f49d935</anchor>
      <arglist>(const Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>upperBound</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a0b375d7cb0766e9db20fa442c3d67cb3</anchor>
      <arglist>(const Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>erase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a72fdf350374069c52b2a36c715e9fc88</anchor>
      <arglist>(const Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>separatePeriodicImages</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>ae92dc83a2539e418b81f92e63a5c77ab</anchor>
      <arglist>(std::vector&lt; Box &gt; &amp;real_box_vector, std::vector&lt; Box &gt; &amp;periodic_image_box_vector, const PeriodicShiftCatalog &amp;shift_catalog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePeriodicImageBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>ae6c69e1e6065a9b4e0b88384cd7cf49f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unshiftPeriodicImageBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a14be836a0a040a017c670c27537f8c30</anchor>
      <arglist>(BoxContainer &amp;output_boxes, const IntVector &amp;refinement_ratio, const PeriodicShiftCatalog &amp;shift_catalog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>aa24aaf0ff0de7a5a86e80ac1b2cfc96f</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>aa0928d91ef08c3bc5ff619be13351577</anchor>
      <arglist>(tbox::Database &amp;restart_db)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::vector&lt; tbox::DatabaseBox &gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a7e47dfbb2f2a4b41458315d14d8515ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>abfff5008f021e5091f3eb192afa7aa8d</anchor>
      <arglist>(std::ostream &amp;os=tbox::plog, const std::string &amp;border=std::string()) const </arglist>
    </member>
    <member kind="function">
      <type>Outputter</type>
      <name>format</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>a690469554c526eae84d5763ac0965e3c</anchor>
      <arglist>(const std::string &amp;border=std::string(), int detail_depth=2) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoxContainerIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>acf9e3e89ec00844bde233c296adf4db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoxContainerConstIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer.html</anchorfile>
      <anchor>ab605c1f6e8e543714f20820b93d2d556</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxContainer::BoxContainerConstIterator</name>
    <filename>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerConstIterator.html</filename>
    <member kind="typedef">
      <type>std::bidirectional_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerConstIterator.html</anchorfile>
      <anchor>a45a70cd391088dc34278c6913633eca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Box</type>
      <name>value_type</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerConstIterator.html</anchorfile>
      <anchor>ac71b56c12a8d2f1f203b56ea845431bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerConstIterator.html</anchorfile>
      <anchor>a70dcd98f3575d921599a19ca9f72a465</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Box *</type>
      <name>pointer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerConstIterator.html</anchorfile>
      <anchor>a6d101597e8a8b74ee2c15aa8b4718711</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Box &amp;</type>
      <name>reference</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerConstIterator.html</anchorfile>
      <anchor>abc331cd7f5d9700e96ae9569627cce70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxContainerConstIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerConstIterator.html</anchorfile>
      <anchor>aa1bc1ddcb4acb2db5a6da4172181742c</anchor>
      <arglist>(const BoxContainerConstIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxContainerConstIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerConstIterator.html</anchorfile>
      <anchor>a6c4280294e6df79571cb923cb16dc88f</anchor>
      <arglist>(const BoxContainerIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>BoxContainerConstIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerConstIterator.html</anchorfile>
      <anchor>acab45f20338621e6dc4a7ede91476aea</anchor>
      <arglist>(const BoxContainerConstIterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoxContainerConstIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerConstIterator.html</anchorfile>
      <anchor>aea86c55e68eb8f89ba7a708a5396dc38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerConstIterator.html</anchorfile>
      <anchor>a4f04dde4b1d50904c9109913f6602c35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Box *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerConstIterator.html</anchorfile>
      <anchor>afbd62760f584c857bd4dd790115cf70a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoxContainerConstIterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerConstIterator.html</anchorfile>
      <anchor>a393533b3602d2f062fb6f6b885fbbc97</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const BoxContainerConstIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerConstIterator.html</anchorfile>
      <anchor>af7ad227f247ea1bcbe32d8771d67570d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BoxContainerConstIterator</type>
      <name>operator--</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerConstIterator.html</anchorfile>
      <anchor>a61da74bd9a9274a23e7c1c74edd2fb0c</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const BoxContainerConstIterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerConstIterator.html</anchorfile>
      <anchor>a3c5cb279b5eaf4660db07dd1772932d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerConstIterator.html</anchorfile>
      <anchor>a719da6dc5b7845814d99023a9dd31ebf</anchor>
      <arglist>(const BoxContainerConstIterator &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerConstIterator.html</anchorfile>
      <anchor>af7e06f9c9f70a683946ebe9a0148b104</anchor>
      <arglist>(const BoxContainerConstIterator &amp;other) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoxContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerConstIterator.html</anchorfile>
      <anchor>a933a65eeafeeba91e73c10528dfcfa43</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoxContainerIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerConstIterator.html</anchorfile>
      <anchor>acf9e3e89ec00844bde233c296adf4db5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxContainer::BoxContainerIterator</name>
    <filename>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</filename>
    <member kind="typedef">
      <type>std::bidirectional_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</anchorfile>
      <anchor>ac2ca2c3ebd8620fbaf31465a0314d3a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Box</type>
      <name>value_type</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</anchorfile>
      <anchor>abeb67b7bdc3578e4a87529e2acb8ccc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</anchorfile>
      <anchor>aff62f5ccf7e6eb17a2eb2674aa75b947</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Box *</type>
      <name>pointer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</anchorfile>
      <anchor>ab749e36db5e96cc7017bfd7a080473e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Box &amp;</type>
      <name>reference</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</anchorfile>
      <anchor>a5013300236f338a4aff53edec4f61d7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxContainerIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</anchorfile>
      <anchor>a12755884c0c521308eb0b6a0583eeef5</anchor>
      <arglist>(const BoxContainerIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>BoxContainerIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</anchorfile>
      <anchor>af30f3a186dce66f094d90dae828b4d28</anchor>
      <arglist>(const BoxContainerIterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoxContainerIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</anchorfile>
      <anchor>a24ee26196ef99477ea599cdb344368c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Box &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</anchorfile>
      <anchor>a0fba2d809614d3a7a57fc0192b594be2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Box *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</anchorfile>
      <anchor>a405f2a63e65de97f60ba82acb8ff74be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoxContainerIterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</anchorfile>
      <anchor>a0e6cae7ef18595273c2444c16af8427c</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const BoxContainerIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</anchorfile>
      <anchor>aafb67122ad81ca8cb51597620f3c155f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BoxContainerIterator</type>
      <name>operator--</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</anchorfile>
      <anchor>aca9340b884a0c856dd333d76d7dffde4</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const BoxContainerIterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</anchorfile>
      <anchor>ae31964c7aac4a345b4066a115a2c3654</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</anchorfile>
      <anchor>a819a6c7887eebead301f8e31f25942a8</anchor>
      <arglist>(const BoxContainerIterator &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</anchorfile>
      <anchor>ad52175e3468e7dd32afd8415e068fed1</anchor>
      <arglist>(const BoxContainerConstIterator &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</anchorfile>
      <anchor>a189b174518bb6d428c09aa85afaca03f</anchor>
      <arglist>(const BoxContainerIterator &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</anchorfile>
      <anchor>af3cd0232156b52609f6ad777c36f7e58</anchor>
      <arglist>(const BoxContainerConstIterator &amp;other) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoxContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</anchorfile>
      <anchor>a933a65eeafeeba91e73c10528dfcfa43</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoxContainerConstIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1BoxContainerIterator.html</anchorfile>
      <anchor>ab605c1f6e8e543714f20820b93d2d556</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxContainer::Outputter</name>
    <filename>classSAMRAI_1_1hier_1_1BoxContainer_1_1Outputter.html</filename>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoxContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1Outputter.html</anchorfile>
      <anchor>a933a65eeafeeba91e73c10528dfcfa43</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainer_1_1Outputter.html</anchorfile>
      <anchor>afe0b40cec06244091a28e181566588c3</anchor>
      <arglist>(std::ostream &amp;s, const Outputter &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxContainerSingleBlockIterator</name>
    <filename>classSAMRAI_1_1hier_1_1BoxContainerSingleBlockIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>~BoxContainerSingleBlockIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainerSingleBlockIterator.html</anchorfile>
      <anchor>a11b7ee15d28c2594f0869cc7ee53db2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BoxContainerSingleBlockIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainerSingleBlockIterator.html</anchorfile>
      <anchor>a55b2b0a25d4a7d063d82dc3c31b13052</anchor>
      <arglist>(const BoxContainerSingleBlockIterator &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>const Box &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainerSingleBlockIterator.html</anchorfile>
      <anchor>a68523b8c9c4564fc5027bedad83a5368</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Box *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainerSingleBlockIterator.html</anchorfile>
      <anchor>a80231105d7fcc08a834c3e43149d5a6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainerSingleBlockIterator.html</anchorfile>
      <anchor>a4af3acbbf89e5b1c796a595e498137bb</anchor>
      <arglist>(const BoxContainerSingleBlockIterator &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainerSingleBlockIterator.html</anchorfile>
      <anchor>ac1a0dfe704a3ef667f8e319010dc2f08</anchor>
      <arglist>(const BoxContainerSingleBlockIterator &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>BoxContainerSingleBlockIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainerSingleBlockIterator.html</anchorfile>
      <anchor>ac9817844208c7e2cf8feea507ce5c610</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BoxContainerSingleBlockIterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainerSingleBlockIterator.html</anchorfile>
      <anchor>a6d55cef8495197c0a94d7bf1a37c999e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainerSingleBlockIterator.html</anchorfile>
      <anchor>ac6d9d477fedcae6de41816695170f75e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoxContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainerSingleBlockIterator.html</anchorfile>
      <anchor>a933a65eeafeeba91e73c10528dfcfa43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxContainerSingleOwnerIterator</name>
    <filename>classSAMRAI_1_1hier_1_1BoxContainerSingleOwnerIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>~BoxContainerSingleOwnerIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainerSingleOwnerIterator.html</anchorfile>
      <anchor>ab42f072e6251874b5fe5607d7e937c5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BoxContainerSingleOwnerIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainerSingleOwnerIterator.html</anchorfile>
      <anchor>af317fb0fdc3ac7b63e273b516d0fb2ee</anchor>
      <arglist>(const BoxContainerSingleOwnerIterator &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>const Box &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainerSingleOwnerIterator.html</anchorfile>
      <anchor>acef6fabe438a02237e40ebf9b4751a26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Box *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainerSingleOwnerIterator.html</anchorfile>
      <anchor>ae93339de1eb149e00fe46ba7410b4ef5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainerSingleOwnerIterator.html</anchorfile>
      <anchor>aa9ed0f5ccbf837a866875ce42a760184</anchor>
      <arglist>(const BoxContainerSingleOwnerIterator &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainerSingleOwnerIterator.html</anchorfile>
      <anchor>ab7cfae064398a27b4006a0b86f86cf1c</anchor>
      <arglist>(const BoxContainerSingleOwnerIterator &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>BoxContainerSingleOwnerIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainerSingleOwnerIterator.html</anchorfile>
      <anchor>ac49e3d5845ad61fa10396e2439ebaf9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BoxContainerSingleOwnerIterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainerSingleOwnerIterator.html</anchorfile>
      <anchor>a01b8fd5e10cf21d820395fff344368e6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoxContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainerSingleOwnerIterator.html</anchorfile>
      <anchor>a933a65eeafeeba91e73c10528dfcfa43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxContainerUtils</name>
    <filename>classSAMRAI_1_1hier_1_1BoxContainerUtils.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>recursivePrintBoxVector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxContainerUtils.html</anchorfile>
      <anchor>af58b525bca2353b518d542501a561665</anchor>
      <arglist>(const std::vector&lt; Box &gt; &amp;boxes, std::ostream &amp;output_stream=tbox::plog, const std::string &amp;border=std::string(), int detail_depth=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxGeometry</name>
    <filename>classSAMRAI_1_1hier_1_1BoxGeometry.html</filename>
    <member kind="function">
      <type></type>
      <name>BoxGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxGeometry.html</anchorfile>
      <anchor>a1b067891f497e81a41c61f18b102e174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoxGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxGeometry.html</anchorfile>
      <anchor>ac67170cf4f49a5d329deba0b5fbfa028</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxGeometry.html</anchorfile>
      <anchor>ae77c695c195966e7915d980ebc7ec320</anchor>
      <arglist>(const BoxGeometry &amp;src_geometry, const Box &amp;src_mask, const Box &amp;fill_box, const bool overwrite_interior, const Transformation &amp;transformation, const BoxContainer &amp;dst_restrict_boxes=BoxContainer()) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxGeometry.html</anchorfile>
      <anchor>ad5f5a8afc00edb59851e2049069356c0</anchor>
      <arglist>(const BoxGeometry &amp;dst_geometry, const BoxGeometry &amp;src_geometry, const Box &amp;src_mask, const Box &amp;fill_box, const bool overwrite_interior, const Transformation &amp;src_offset, const bool retry, const BoxContainer &amp;dst_restrict_boxes=BoxContainer()) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; BoxOverlap &gt;</type>
      <name>setUpOverlap</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxGeometry.html</anchorfile>
      <anchor>ac1049473677a9dd0fbf7345fce08127e</anchor>
      <arglist>(const BoxContainer &amp;boxes, const Transformation &amp;offset) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxId</name>
    <filename>classSAMRAI_1_1hier_1_1BoxId.html</filename>
    <member kind="function">
      <type></type>
      <name>BoxId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>a3661867c9dc6321cc1e02d3a5ccaf0a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>ab77f375f1f0d5af5dbe123fd3f097487</anchor>
      <arglist>(const LocalId &amp;local_id, const int owner_rank, const PeriodicId &amp;periodic_id=PeriodicId::zero())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>a6c79bd2f10a0eeef3769fc086d4f8b3d</anchor>
      <arglist>(const GlobalId &amp;id, const PeriodicId &amp;periodic_id=PeriodicId::zero())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>ad0f9ad8b93c1e53783dbbcff4e4637ee</anchor>
      <arglist>(const BoxId &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoxId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>a683d8d6ed0d21ec7160768aec500f617</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>ac7a57991845e8e65a1563ca3b3dca509</anchor>
      <arglist>(const LocalId &amp;local_id, const int owner_rank, const PeriodicId &amp;periodic_id=PeriodicId::zero())</arglist>
    </member>
    <member kind="function">
      <type>const GlobalId &amp;</type>
      <name>getGlobalId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>a7d3fd71915e65caa1d7689fd67c27920</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOwnerRank</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>a7941ad39d84b38e0b90f172c22bfa981</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const LocalId &amp;</type>
      <name>getLocalId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>a6c1b43b8a67db9898d93cbd50d2e1175</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PeriodicId &amp;</type>
      <name>getPeriodicId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>a89eb6d57f954651aad1fc869c181f1b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPeriodicImage</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>a403c7e23eb3566ea773be85bebac090f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>a76f241d607991aa3b8cea60eb7986753</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>ae372169c4d2c83825ba5d65e4bf1acd8</anchor>
      <arglist>(const BoxId &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>a42dbadc8b92cbaf6d33b46af7f668300</anchor>
      <arglist>(const BoxId &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>a95e720a27f6ef28958ea026a3c082541</anchor>
      <arglist>(const BoxId &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>a569512236be1e378c7633834df51c04a</anchor>
      <arglist>(const BoxId &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>a6818801d9c5dc31f000ae833d973e113</anchor>
      <arglist>(const BoxId &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>a4b8ca7600b0c6a5b9886744118da3b6f</anchor>
      <arglist>(const BoxId &amp;r) const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>a1ff7320a4004dd62fbc7939dc3877341</anchor>
      <arglist>(std::ostream &amp;co, const BoxId &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToIntBuffer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>addaafa7714fbaf2d072f25657ef541a4</anchor>
      <arglist>(int *buffer) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromIntBuffer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>a12e1506e7b0ca22bc9b490ecde940a7e</anchor>
      <arglist>(const int *buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToMessageStream</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>a510e8579ca254e20fb1b7c9f9e2e18c1</anchor>
      <arglist>(tbox::MessageStream &amp;msg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromMessageStream</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>a184c52142331e2d48110559fc8faab1b</anchor>
      <arglist>(tbox::MessageStream &amp;msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>commBufferSize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxId.html</anchorfile>
      <anchor>a3b8e3fd194a0befa4e85a3ed0c279100</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxLevel</name>
    <filename>classSAMRAI_1_1hier_1_1BoxLevel.html</filename>
    <class kind="class">SAMRAI::hier::BoxLevel::Outputter</class>
    <member kind="enumeration">
      <name>ParallelState</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a02c34699888ab34b06f59a210247bcb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTED</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a02c34699888ab34b06f59a210247bcb4a50fcdd33dde8ec1597aa318dcb384578</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GLOBALIZED</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a02c34699888ab34b06f59a210247bcb4a2dbf00b87512ae236e2dbde25acb952f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a35b7fce14d4b31de23aa5d5bdf1a472e</anchor>
      <arglist>(const tbox::Dimension &amp;dim, tbox::Database &amp;restart_db, const boost::shared_ptr&lt; const BaseGridGeometry &gt; &amp;grid_geom)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>ab8771dd90200a99a9e60cb6b356fcecf</anchor>
      <arglist>(const BoxLevel &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>af19ca6a464561b4f23133b91d77d4470</anchor>
      <arglist>(const IntVector &amp;ratio, const boost::shared_ptr&lt; const BaseGridGeometry &gt; &amp;grid_geom, const tbox::SAMRAI_MPI &amp;mpi=tbox::SAMRAI_MPI::getSAMRAIWorld(), const ParallelState parallel_state=DISTRIBUTED)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a4fc90e22dd04d5408a1f52ecb1ac8d60</anchor>
      <arglist>(const BoxContainer &amp;boxes, const IntVector &amp;ratio, const boost::shared_ptr&lt; const BaseGridGeometry &gt; &amp;grid_geom, const tbox::SAMRAI_MPI &amp;mpi=tbox::SAMRAI_MPI::getSAMRAIWorld(), const ParallelState parallel_state=DISTRIBUTED)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoxLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a962662fdff601ac5bc5fe60440c67d83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BoxLevel &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a13c61b0dbe112df0eca5960e378f35c5</anchor>
      <arglist>(const BoxLevel &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>aab19edd439fc4c1124ca533ad1146381</anchor>
      <arglist>(const BoxLevel &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>ac944ca2251fa1c7ac06c5570919ae734</anchor>
      <arglist>(const BoxLevel &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateGlobalData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>af26bd3d728ba0f8094ee6b9acb593040</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPersistentOverlapConnectors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a8ce8fadb18fcfcdd48f1b373a1b979a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Connector &amp;</type>
      <name>findConnector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a71f2a11a6581bb984038829196757659</anchor>
      <arglist>(const BoxLevel &amp;head, const IntVector &amp;min_connector_width, ConnectorNotFoundAction not_found_action, bool exact_width_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>const Connector &amp;</type>
      <name>findConnectorWithTranspose</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a3da1e63839f7f194f3c42c5cf5f46dc4</anchor>
      <arglist>(const BoxLevel &amp;head, const IntVector &amp;min_connector_width, const IntVector &amp;transpose_min_connector_width, ConnectorNotFoundAction not_found_action, bool exact_width_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>const Connector &amp;</type>
      <name>createConnector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a02aa235c3d2e5b9700a81e6853294fb7</anchor>
      <arglist>(const BoxLevel &amp;head, const IntVector &amp;connector_width) const </arglist>
    </member>
    <member kind="function">
      <type>const Connector &amp;</type>
      <name>createConnectorWithTranspose</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a85bf92f1e262d7e182442aa09316640d</anchor>
      <arglist>(const BoxLevel &amp;head, const IntVector &amp;connector_width, const IntVector &amp;transpose_connector_width) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cacheConnector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a6caf4ac1f3c3b137a4bc890e3680c710</anchor>
      <arglist>(boost::shared_ptr&lt; Connector &gt; &amp;connector) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasConnector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>add1eb8a1f02b102f4f1f95528d217581</anchor>
      <arglist>(const BoxLevel &amp;head, const IntVector &amp;min_connector_width) const </arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; BoxLevelHandle &gt; &amp;</type>
      <name>getBoxLevelHandle</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>ad28ae9914fffcd6712061af51e0fbfef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>add9723ad7a88b27b00f7a691d6eb2e0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a8f53858f6a358760477cbf8f42615b1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>af3867518e8cca269d54e4b04d9622781</anchor>
      <arglist>(const BoxContainer &amp;boxes, const IntVector &amp;ratio, const boost::shared_ptr&lt; const BaseGridGeometry &gt; &amp;grid_geom, const tbox::SAMRAI_MPI &amp;mpi=tbox::SAMRAI_MPI::getSAMRAIWorld(), const ParallelState parallel_state=DISTRIBUTED)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapInitialize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>ab1fd7baf5161fcdbbb830480f3f77293</anchor>
      <arglist>(BoxContainer &amp;boxes, const IntVector &amp;ratio, const boost::shared_ptr&lt; const BaseGridGeometry &gt; &amp;grid_geom, const tbox::SAMRAI_MPI &amp;mpi=tbox::SAMRAI_MPI::getSAMRAIWorld(), const ParallelState parallel_state=DISTRIBUTED)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>ad1993c509749c5b3e92c0c534a51e9fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInitialized</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>ab5f4c8b090dbff0226e778e316b21920</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePeriodicImageBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a2b2aeafd75c199736c5e2ed21dc015b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>ad1e2b6cbb81383c7661222048edd103c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearForBoxChanges</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>aa94cf056421d4661cb39f485dd236ba3</anchor>
      <arglist>(bool isInvalid=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParallelState</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a68a7c6544286b59ab1508695cadc0c99</anchor>
      <arglist>(const ParallelState parallel_state)</arglist>
    </member>
    <member kind="function">
      <type>ParallelState</type>
      <name>getParallelState</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>ae0f03563c8ba07e61c0262ebac27b6c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cacheGlobalReducedData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a88d752dca7dd51b8c1b0b0aa27c3d64e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BoxLevel &amp;</type>
      <name>getGlobalizedVersion</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a257e30e9541d393912b74e66e3f1393d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocateGlobalizedVersion</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a0394ad7edaca17db2b72deefec2ecf3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::SAMRAI_MPI &amp;</type>
      <name>getMPI</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>aa56ee65e5e67d58f580b4a6a700c431f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BoxContainer &amp;</type>
      <name>getBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a1e75df2ef751e7ed7f42c9e9a0991fa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BoxContainer &amp;</type>
      <name>getGlobalBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>afe03004a023ac5e76e01aef59fd6a612</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGlobalBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a621aa4df7351bf32b53dcc2258890415</anchor>
      <arglist>(BoxContainer &amp;global_boxes) const </arglist>
    </member>
    <member kind="function">
      <type>LocalId</type>
      <name>getFirstLocalId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a153e6634835c71dcb5643609112995e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LocalId</type>
      <name>getLastLocalId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>aba0e4564fd0ccd65a4e91c0326b38789</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>getRefinementRatio</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a769ce9dbc1523384d0092a33aa0e5dbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalNumberOfBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a75baa526ecb8ca03a4f9520172ae8904</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalNumberOfBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>ae17e88ee3daf8c90f63eb69d75fd9e5a</anchor>
      <arglist>(int rank) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalNumberOfBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>ad4838ed2fd92a444d15c5b01e069a898</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxNumberOfBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a799ad52b977646d3c095c25463d4d15b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinNumberOfBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a922bbd77b18facc9efe362166f9f0a1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getLocalNumberOfCells</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>ac5422e0dc4aa9d6d58106895ff02bac4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getMaxNumberOfCells</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a9393d4518cb5fab157e054d070a9676b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getMinNumberOfCells</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>ac5c5540240eaaca51f895c58c04c68a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getLocalNumberOfCells</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>ac163b80b716511ad09233ffb5576c87e</anchor>
      <arglist>(int rank) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getGlobalNumberOfCells</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a4cbe06570b6e5bef932cf7f4a463f53d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Box &amp;</type>
      <name>getLocalBoundingBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>aece22d4e0bd7ead327eb4b5df2ddf88b</anchor>
      <arglist>(const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>const Box &amp;</type>
      <name>getGlobalBoundingBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a11d792af9ebcc062e071640e75284cfe</anchor>
      <arglist>(const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>getLocalMaxBoxSize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>abcbd7601c3d3a2cdc014c17c520e6ecf</anchor>
      <arglist>(const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>getLocalMinBoxSize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a770132982090d235a4898a506d7d0be3</anchor>
      <arglist>(const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>getGlobalMaxBoxSize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a895428c4d4fe9c969eb557132bc95f0e</anchor>
      <arglist>(const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>getGlobalMinBoxSize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>ae38717e6b1d93b2694be7317aba127c4</anchor>
      <arglist>(const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a9a051730fadf4671bf844259fe45fd39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; const BaseGridGeometry &gt; &amp;</type>
      <name>getGridGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>aec78d23ef813cea9c1f08b30d6cec25f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refineBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>af9d572999cb352e26876d5641c89f28c</anchor>
      <arglist>(BoxLevel &amp;finer, const IntVector &amp;ratio, const IntVector &amp;final_ratio) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsenBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a6d08a9ac95f9c25ffb319bbc0e79f7b1</anchor>
      <arglist>(BoxLevel &amp;coarser, const IntVector &amp;ratio, const IntVector &amp;final_ratio) const </arglist>
    </member>
    <member kind="function">
      <type>BoxContainer::const_iterator</type>
      <name>addBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a7f03d7672157b32ea927b73751663872</anchor>
      <arglist>(const Box &amp;box, const BlockId &amp;block_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a7a80e5adb2b547f075125db37be16ff7</anchor>
      <arglist>(const Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBoxWithoutUpdate</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a7192f8a642329533e870d08ac4affb08</anchor>
      <arglist>(const Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPeriodicBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a1efaddb0a58895344bfdc03003e1aa9d</anchor>
      <arglist>(const Box &amp;existing_box, const PeriodicId &amp;shift_number)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a960befb3bc83403345c75c7ed6a177e8</anchor>
      <arglist>(BoxContainer::iterator &amp;ibox)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>aac786eaec7c2fa5256f41a685c945257</anchor>
      <arglist>(const Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseBoxWithoutUpdate</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a0ee46cb63c7d8409c8688f3700605a98</anchor>
      <arglist>(const Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>BoxContainer::const_iterator</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>aae14445c8c9e8c06bc7d3132ee490555</anchor>
      <arglist>(const Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>BoxContainer::const_iterator</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a2fc9a3140f7ad64850ad6556d53223ec</anchor>
      <arglist>(const BoxId &amp;box_id) const </arglist>
    </member>
    <member kind="function">
      <type>BoxContainer::const_iterator</type>
      <name>getBoxStrict</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>aeb1f97fa84af6ba5c273c64c0ea0c80c</anchor>
      <arglist>(const Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>BoxContainer::const_iterator</type>
      <name>getBoxStrict</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a5d59700b00e6da268bf003a842f626ee</anchor>
      <arglist>(const BoxId &amp;box_id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSpatiallyEqualBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>ac33526f84722654e4eec9ef11093aaac</anchor>
      <arglist>(const Box &amp;box_to_match, const BlockId &amp;block_id, Box &amp;matching_box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>aa36386f372e60084d09119c9e8c36718</anchor>
      <arglist>(const BoxId &amp;box_id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a1d8a2324f2425898efad09a23f1f61f6</anchor>
      <arglist>(const GlobalId &amp;global_id, const PeriodicId &amp;periodic_id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a3b57ea9786676c090d5619abde08bd63</anchor>
      <arglist>(const Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a8ec0ee23695893a76962ad8a8922f2a1</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recursivePrint</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a00c11404f06b3a72323cb3fc5d650309</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;border, int detail_depth=2) const </arglist>
    </member>
    <member kind="function">
      <type>Outputter</type>
      <name>format</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>aef7ffb368ef636b78732ba7b64c51277</anchor>
      <arglist>(const std::string &amp;border=std::string(), int detail_depth=2) const </arglist>
    </member>
    <member kind="function">
      <type>Outputter</type>
      <name>formatStatistics</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a0358ed57086330055c464956136feac8</anchor>
      <arglist>(const std::string &amp;border=std::string()) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>swap</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>a9eebd53c534a0b42c59cf9cb08f2777e</anchor>
      <arglist>(BoxLevel &amp;level_a, BoxLevel &amp;level_b)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PersistentOverlapConnectors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel.html</anchorfile>
      <anchor>ae17fc1942f6de54c13321a9481366cd1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxLevel::Outputter</name>
    <filename>classSAMRAI_1_1hier_1_1BoxLevel_1_1Outputter.html</filename>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoxLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel_1_1Outputter.html</anchorfile>
      <anchor>ade5148e6656171aa69a94e41b1dff87f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevel_1_1Outputter.html</anchorfile>
      <anchor>afe0b40cec06244091a28e181566588c3</anchor>
      <arglist>(std::ostream &amp;s, const Outputter &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxLevelConnectorUtils</name>
    <filename>classSAMRAI_1_1hier_1_1BoxLevelConnectorUtils.html</filename>
    <member kind="function">
      <type></type>
      <name>BoxLevelConnectorUtils</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelConnectorUtils.html</anchorfile>
      <anchor>a7bcaa32bb4e11b2c1fee3080a64a2545</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoxLevelConnectorUtils</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelConnectorUtils.html</anchorfile>
      <anchor>a2ee1f5fd62409eb09e099ce82a1aa5cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSanityCheckMethodPreconditions</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelConnectorUtils.html</anchorfile>
      <anchor>ae7c029d73668a17cbcd4decbb1bf0866</anchor>
      <arglist>(bool do_check)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSanityCheckMethodPostconditions</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelConnectorUtils.html</anchorfile>
      <anchor>ad487b8fea1290525313ec0e667aa08a9</anchor>
      <arglist>(bool do_check)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBoxesAroundBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelConnectorUtils.html</anchorfile>
      <anchor>a2a2e2c35b5c00f2dfd9f6d39566d8554</anchor>
      <arglist>(BoxContainer &amp;boundary, const IntVector &amp;refinement_ratio, const boost::shared_ptr&lt; const BaseGridGeometry &gt; &amp;grid_geometry, const bool simplify_boundary_boxes=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimerPrefix</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelConnectorUtils.html</anchorfile>
      <anchor>a7d59815e4dfdfaacd8a72c6f2bda8abd</anchor>
      <arglist>(const std::string &amp;timer_prefix)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelConnectorUtils.html</anchorfile>
      <anchor>a84f4e540d816b2fd5660ea38428456f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>baseNestsInHead</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelConnectorUtils.html</anchorfile>
      <anchor>a42f1f7020d108fbad46a7853910d0b18</anchor>
      <arglist>(bool *locally_nests, const Connector &amp;connector, const IntVector &amp;base_swell, const IntVector &amp;head_swell, const IntVector &amp;head_nesting_margin, const BoxContainer *domain=0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>baseNestsInHead</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelConnectorUtils.html</anchorfile>
      <anchor>ad603f2ccd20562a8020dca52e5f233bd</anchor>
      <arglist>(bool *locally_nests, const BoxLevel &amp;base, const BoxLevel &amp;head, const IntVector &amp;base_swell, const IntVector &amp;head_swell, const IntVector &amp;head_margin, const BoxContainer *domain=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeExternalParts</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelConnectorUtils.html</anchorfile>
      <anchor>a82485b05ecc10f9ca99dd38e727ef9e7</anchor>
      <arglist>(boost::shared_ptr&lt; BoxLevel &gt; &amp;external, boost::shared_ptr&lt; MappingConnector &gt; &amp;input_to_external, const Connector &amp;input_to_reference, const IntVector &amp;nesting_width, const BoxContainer &amp;domain=BoxContainer()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeInternalParts</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelConnectorUtils.html</anchorfile>
      <anchor>a936a0a54222605b44e39ee306d8ba9a7</anchor>
      <arglist>(boost::shared_ptr&lt; BoxLevel &gt; &amp;internal, boost::shared_ptr&lt; MappingConnector &gt; &amp;input_to_internal, const Connector &amp;input_to_reference, const IntVector &amp;nesting_width, const BoxContainer &amp;domain=BoxContainer()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeNonIntersectingParts</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelConnectorUtils.html</anchorfile>
      <anchor>ab742fc9b6c8104a713d1716a9fe3b096</anchor>
      <arglist>(boost::shared_ptr&lt; BoxLevel &gt; &amp;remainder, boost::shared_ptr&lt; Connector &gt; &amp;input_to_remainder, const Connector &amp;input_to_takeaway) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeSortingMap</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelConnectorUtils.html</anchorfile>
      <anchor>a307c40943177d19883e736a4ac7c6430</anchor>
      <arglist>(boost::shared_ptr&lt; BoxLevel &gt; &amp;sorted_box_level, boost::shared_ptr&lt; MappingConnector &gt; &amp;output_map, const BoxLevel &amp;unsorted_box_level, bool sort_boxes_by_corner=true, bool sequentialize_global_indices=true, LocalId initial_sequential_index=LocalId::getZero()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeRemainderMap</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelConnectorUtils.html</anchorfile>
      <anchor>ac089ec2d0ac153bd3e494ab46ee0a257</anchor>
      <arglist>(boost::shared_ptr&lt; BoxLevel &gt; &amp;remainder, boost::shared_ptr&lt; MappingConnector &gt; &amp;orig_to_remainder, const MappingConnector &amp;orig_to_rejections) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPeriodicImages</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelConnectorUtils.html</anchorfile>
      <anchor>a7cb54d1f23e65ddd4c74ae78d1d75b40</anchor>
      <arglist>(BoxLevel &amp;box_level, const BoxContainer &amp;domain_search_tree, const IntVector &amp;threshold_distance) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPeriodicImagesAndRelationships</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelConnectorUtils.html</anchorfile>
      <anchor>ac49fedc69a4c201ea8ac36631d8b93c8</anchor>
      <arglist>(BoxLevel &amp;box_level, Connector &amp;box_level_to_anchor, const BoxContainer &amp;domain_search_tree, const Connector &amp;anchor_to_anchor) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxLevelHandle</name>
    <filename>classSAMRAI_1_1hier_1_1BoxLevelHandle.html</filename>
    <member kind="function">
      <type></type>
      <name>~BoxLevelHandle</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelHandle.html</anchorfile>
      <anchor>aa77f6d3ba30c36c6f589fdd489b4a014</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoxLevel &amp;</type>
      <name>getBoxLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelHandle.html</anchorfile>
      <anchor>a3bd009e9074c2ef3e89a3c1c9d927c7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAttached</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelHandle.html</anchorfile>
      <anchor>a8f6514990ba17d2f5d96a0458f03b913</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoxLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelHandle.html</anchorfile>
      <anchor>ade5148e6656171aa69a94e41b1dff87f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxLevelStatistics</name>
    <filename>classSAMRAI_1_1hier_1_1BoxLevelStatistics.html</filename>
    <member kind="function">
      <type></type>
      <name>BoxLevelStatistics</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelStatistics.html</anchorfile>
      <anchor>af471a6a7d565a5676afa5eef65466fdd</anchor>
      <arglist>(const BoxLevel &amp;box_level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printBoxStats</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxLevelStatistics.html</anchorfile>
      <anchor>a97022e3f5f165ae3c4bcd0f5f674e382</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;border) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxNeighborhoodCollection</name>
    <filename>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</filename>
    <class kind="class">SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator</class>
    <class kind="class">SAMRAI::hier::BoxNeighborhoodCollection::ConstNeighborIterator</class>
    <class kind="class">SAMRAI::hier::BoxNeighborhoodCollection::Iterator</class>
    <class kind="class">SAMRAI::hier::BoxNeighborhoodCollection::NeighborIterator</class>
    <member kind="typedef">
      <type>std::pair&lt; Iterator, bool &gt;</type>
      <name>InsertRetType</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>abee86b277bd22f76d2b4f68a66f53c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxNeighborhoodCollection</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a0bdf5bf8f253f55e10ca62facf461344</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxNeighborhoodCollection</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a6dff974b3efd1a0b337c34086113852b</anchor>
      <arglist>(const BoxContainer &amp;base_boxes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxNeighborhoodCollection</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a32a548f107666fc24f8de1b076808013</anchor>
      <arglist>(const BoxNeighborhoodCollection &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>BoxNeighborhoodCollection &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>aeb5a89b997f75ecdaf33800c59fec9e9</anchor>
      <arglist>(const BoxNeighborhoodCollection &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoxNeighborhoodCollection</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a189e95388fae6a77cfdb7aec900bb483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a063cfd222a1f181c5b975c6add2ca01f</anchor>
      <arglist>(const BoxNeighborhoodCollection &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a87abf2e6bd0a6aee7afe45a24575b00a</anchor>
      <arglist>(const BoxNeighborhoodCollection &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getOwners</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a488f9b273df880557e6fd11c6bfc079f</anchor>
      <arglist>(std::set&lt; int &gt; &amp;owners) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getOwners</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>aa89c1bed578cae194ff8045d579aacf9</anchor>
      <arglist>(ConstIterator &amp;itr, std::set&lt; int &gt; &amp;owners) const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a02c7d2290082cd9f25d825be78df8018</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>ab66d0698b0a48e9d059d99421f4905c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>ad3e8d878b4b56bbfaee0f13b551ba057</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a0bb1c268065aa9b42dbf1dd34dbd892b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NeighborIterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a8bf244c0ed68d62ff4edfeec06ce3027</anchor>
      <arglist>(const BoxId &amp;base_box_id)</arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborIterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a4aaff247f0fefafdf2a555e926a35c52</anchor>
      <arglist>(const BoxId &amp;base_box_id) const </arglist>
    </member>
    <member kind="function">
      <type>NeighborIterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a592ae98e9002409226a3e8fb46fcb6e3</anchor>
      <arglist>(Iterator &amp;base_box_itr)</arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborIterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>ae90a5f51c94633e5fdada4da9d312f22</anchor>
      <arglist>(const ConstIterator &amp;base_box_itr) const </arglist>
    </member>
    <member kind="function">
      <type>NeighborIterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a11677fc191e53bf2ef6d540e2fb8b7a3</anchor>
      <arglist>(const BoxId &amp;base_box_id)</arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborIterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>abcb399214baf22ae8e309977d1ecf646</anchor>
      <arglist>(const BoxId &amp;base_box_id) const </arglist>
    </member>
    <member kind="function">
      <type>NeighborIterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a482d655f5bd76c69624b8d480774a40b</anchor>
      <arglist>(Iterator &amp;base_box_itr)</arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborIterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>aa7f450e2faebcee58dbf16ae40cb8a61</anchor>
      <arglist>(const ConstIterator &amp;base_box_itr) const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>find</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a7fbffe2217b81e2ec0cfac7cc6911aa8</anchor>
      <arglist>(const BoxId &amp;base_box_id) const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a7ddd256707d9ce4a663c82e9b7ebf1ee</anchor>
      <arglist>(const BoxId &amp;base_box_id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>af972a9e30855b458e507d7c66fd3f12c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numBoxNeighborhoods</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a2ca113250bd660e2c9e28f5ddb7cc26e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyBoxNeighborhood</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a38cc3828da0bbcd64422d20a93bad58c</anchor>
      <arglist>(const BoxId &amp;base_box_id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emptyBoxNeighborhood</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a64fb1003dd0ae1f8a8f5aedadee746e5</anchor>
      <arglist>(const ConstIterator &amp;base_box_itr) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>afed45dd7e2b859bab651b1d4f2731fbb</anchor>
      <arglist>(const BoxId &amp;base_box_id) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a39967da24b3dc1377030b7e0f015608e</anchor>
      <arglist>(const ConstIterator &amp;base_box_itr) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sumNumNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a48f8d586ff3aae9eddbf4962a23f1cda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNeighbor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a78174a71eea343a8e237e92880ced496</anchor>
      <arglist>(const BoxId &amp;base_box_id, const Box &amp;nbr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNeighbor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>aadaf159abc99d494eadad8489d423651</anchor>
      <arglist>(const ConstIterator &amp;base_box_itr, const Box &amp;nbr) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neighborhoodEqual</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a5c05fe8b135ce700857d3ca00f7f8492</anchor>
      <arglist>(const BoxId &amp;base_box_id, const BoxNeighborhoodCollection &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBaseBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a6a405d33841681cc8fc8a4f463863e38</anchor>
      <arglist>(const BoxId &amp;base_box_id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocal</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>ada3d9323188f5d29bd4fd8d09a08841b</anchor>
      <arglist>(int rank) const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>insert</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>aad6a2017e7cfad431eb94f397e31ae6a</anchor>
      <arglist>(const BoxId &amp;base_box_id, const Box &amp;new_nbr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a818da9434b65e589eb50921011ab8274</anchor>
      <arglist>(Iterator &amp;base_box_itr, const Box &amp;new_nbr)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>insert</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a4f5457a6033d7de24c6d055926847d00</anchor>
      <arglist>(const BoxId &amp;base_box_id, const BoxContainer &amp;new_nbrs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a6df294e059f2bad140721641325cecba</anchor>
      <arglist>(Iterator &amp;base_box_itr, const BoxContainer &amp;new_nbrs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a3e0ed6efde719352b9267061461a2a79</anchor>
      <arglist>(const BoxId &amp;base_box_id, const Box &amp;nbr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>afc9c57b8aedddb3b4de160e3991aacbe</anchor>
      <arglist>(Iterator &amp;base_box_itr, const Box &amp;nbr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a7ff82deadce2e92bef8e3cd87da1d253</anchor>
      <arglist>(const BoxId &amp;base_box_id, const BoxContainer &amp;nbrs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a1191cd4e49fd7312225e5d37dc551a92</anchor>
      <arglist>(Iterator &amp;base_box_itr, const BoxContainer &amp;nbrs)</arglist>
    </member>
    <member kind="function">
      <type>InsertRetType</type>
      <name>insert</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>adfb917176c9e39bef065c47ca0b9c85d</anchor>
      <arglist>(const BoxId &amp;new_base_box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a15af8994ebb1b15f65673eb7d5ffc262</anchor>
      <arglist>(const BoxId &amp;base_box_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>ab52179d62ac01216301c87a5bcde757c</anchor>
      <arglist>(Iterator &amp;base_box_itr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a92852535a9c1e410c68b318064b1202c</anchor>
      <arglist>(Iterator &amp;first_base_box_itr, Iterator &amp;last_base_box_itr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseNonLocalNeighborhoods</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>ab0c10df57ca3b784f4f8672392387268</anchor>
      <arglist>(int rank)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseEmptyNeighborhoods</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a9a1483b4a130cda40d54719853f80784</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erasePeriodicNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a8ec3b48e89830565c2cbb4d637074c34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a8ef7daafadccd50c77a86eb4fb7a8a33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsenNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>afd7e2cb3e68e335604cb415d8f71578e</anchor>
      <arglist>(const IntVector &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refineNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a633a6deb9a50a1698259dd70443bdcd6</anchor>
      <arglist>(const IntVector &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>growNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a5a5a72e03e458c57572dd2e53e663ea7</anchor>
      <arglist>(const IntVector &amp;growth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a2ca434d70c73031b822913722ce343ce</anchor>
      <arglist>(BoxContainer &amp;neighbors) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a1ff2843eac5286d0f16fc86a4dc03af2</anchor>
      <arglist>(BoxContainer &amp;neighbors, const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a8d28d983082b132a55b628ab3e1f86ad</anchor>
      <arglist>(std::map&lt; BlockId, BoxContainer &gt; &amp;neighbors) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a72daa70dfbfbe2a0d6b6f6ded2cd5508</anchor>
      <arglist>(const BoxId &amp;base_box_id, BoxContainer &amp;neighbors) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPeriodicNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>aaf9619d83dea3dee98b3b862c6fcf0ba</anchor>
      <arglist>(BoxContainer &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToIntBuffer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a163e3e9f69eff6d4ae3cb1a3dae25c1a</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;send_mesg, const tbox::Dimension &amp;dim, int buff_init) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromIntBuffer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a3020f10855e68c10f3906d99db875efd</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;recv_mesg, const std::vector&lt; int &gt; &amp;proc_offset, const tbox::Dimension &amp;dim, int num_proc, int rank)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>ac2b6db738d77fc5ab3ba0d553717a517</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a4d2801fc113b686f8cdffe4349831efa</anchor>
      <arglist>(tbox::Database &amp;restart_db)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Iterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a9830fc407400559db7e7783cc10a9394</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ConstIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection.html</anchorfile>
      <anchor>a5485970bb9da6b5d782fa28638b5658f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxNeighborhoodCollection::ConstIterator</name>
    <filename>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstIterator.html</anchorfile>
      <anchor>a0e74e0ceb96ca27f827f0fce244be344</anchor>
      <arglist>(const BoxNeighborhoodCollection &amp;nbrhds, bool from_start=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstIterator.html</anchorfile>
      <anchor>a0314add5072325177d0dee3315192fb4</anchor>
      <arglist>(const ConstIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstIterator.html</anchorfile>
      <anchor>afb2add7ed332e3d467bda0c8a68443da</anchor>
      <arglist>(const Iterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstIterator.html</anchorfile>
      <anchor>a7d87b8bdb27b711568d56ea806a8f6a5</anchor>
      <arglist>(const ConstIterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstIterator.html</anchorfile>
      <anchor>a7157e8aab46f4e75f050d15a25d414cc</anchor>
      <arglist>(const Iterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstIterator.html</anchorfile>
      <anchor>a2138729869b5cd781dd35fcce2572d19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoxId &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstIterator.html</anchorfile>
      <anchor>a8a5e8d7b2fd694b302408dfdaf9f31bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BoxId *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstIterator.html</anchorfile>
      <anchor>aa2ca4f546881081af81951ca8a220b6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstIterator.html</anchorfile>
      <anchor>ab641e9e455a7d11710021069b97f39f9</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstIterator.html</anchorfile>
      <anchor>a8d33db3bc67ac39f731b56b9f00f0eb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstIterator.html</anchorfile>
      <anchor>a19ccdb6dac1d5006554f69018db88ff8</anchor>
      <arglist>(const ConstIterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstIterator.html</anchorfile>
      <anchor>a04895857dc57ffa1b31916925088eb05</anchor>
      <arglist>(const ConstIterator &amp;rhs) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoxNeighborhoodCollection</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstIterator.html</anchorfile>
      <anchor>a575ef3116a743934aeae34060b1fda10</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Connector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstIterator.html</anchorfile>
      <anchor>a1574f0490ae4a8ede8317663c105b4bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ConstNeighborIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstIterator.html</anchorfile>
      <anchor>af047fd96ba10b6365c29607b24ba4f6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxNeighborhoodCollection::ConstNeighborIterator</name>
    <filename>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstNeighborIterator.html</filename>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>ae9dc228126149266aee5287d014820d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Box</type>
      <name>value_type</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>ad0e7c0e3f1ae12bcec8fc964459c3dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>a4562f9497454e714a058b0b1198dc052</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Box *</type>
      <name>pointer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>a0ba47d78297fa84c63d387e588072fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Box &amp;</type>
      <name>reference</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>a67e077713a46a4971cbe1adec4c1009c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstNeighborIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>ade0d7db5b3e2a71b38a5c3de469378b9</anchor>
      <arglist>(const ConstIterator &amp;base_box_itr, bool from_start=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstNeighborIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>a68c368d75f279b9bba77b49ba0b2f778</anchor>
      <arglist>(const ConstNeighborIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstNeighborIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>add3a3b96bf0380fbd1eef198e155098d</anchor>
      <arglist>(const NeighborIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>a7cda9aaaa0d62e80b5c40933b6a5a7e2</anchor>
      <arglist>(const ConstNeighborIterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>a5b91ad5f5de6e676a0d088454c682e6b</anchor>
      <arglist>(const NeighborIterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstNeighborIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>a8011b2a04c3fef459060fc13ebfbb674</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>ac958e4c14020f5671355a8497e373ca8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Box *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>ae9f269dca67f78faa750b88796af4c5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborIterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>a6d3ab35f420d2e5bbe9b12a29e976d86</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>aa606c635094410ccca25988be10fffe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>a2dfd8a8bae72a65dd0ea0954fb7e3817</anchor>
      <arglist>(const ConstNeighborIterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>a00afc9984e5a9516ee4de2957d7eeb87</anchor>
      <arglist>(const ConstNeighborIterator &amp;rhs) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoxNeighborhoodCollection</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1ConstNeighborIterator.html</anchorfile>
      <anchor>a575ef3116a743934aeae34060b1fda10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxNeighborhoodCollection::Iterator</name>
    <filename>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1Iterator.html</anchorfile>
      <anchor>a6d402119039e65ef2a47e44265db0096</anchor>
      <arglist>(BoxNeighborhoodCollection &amp;nbrhds, bool from_start=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1Iterator.html</anchorfile>
      <anchor>a4af46371e89bbc104d7f8abc67076b70</anchor>
      <arglist>(const Iterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1Iterator.html</anchorfile>
      <anchor>af4ca1b861146c51be53fbd293691fbde</anchor>
      <arglist>(const Iterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Iterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1Iterator.html</anchorfile>
      <anchor>a9a247d3fb07e12255d21850cda05c2cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoxId &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1Iterator.html</anchorfile>
      <anchor>a7a68352aa502c2388922bae9aa91b946</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BoxId *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1Iterator.html</anchorfile>
      <anchor>a20f409aa8a6e962393474316bc6ad395</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1Iterator.html</anchorfile>
      <anchor>a7aa145cf3f1058e9054aae7628ee16dd</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1Iterator.html</anchorfile>
      <anchor>a6ef62054f24fa811a4971756991a1301</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1Iterator.html</anchorfile>
      <anchor>a49fa2fe9b6e4fd03f63af35d94779ebf</anchor>
      <arglist>(const Iterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1Iterator.html</anchorfile>
      <anchor>a52fab653a1866850fc2f41f576c8a4e1</anchor>
      <arglist>(const Iterator &amp;rhs) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoxNeighborhoodCollection</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1Iterator.html</anchorfile>
      <anchor>a575ef3116a743934aeae34060b1fda10</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Connector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1Iterator.html</anchorfile>
      <anchor>a1574f0490ae4a8ede8317663c105b4bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ConstIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1Iterator.html</anchorfile>
      <anchor>a5485970bb9da6b5d782fa28638b5658f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>NeighborIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1Iterator.html</anchorfile>
      <anchor>abd4a1efa9e3fd84ebff05c366a0ab736</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxNeighborhoodCollection::NeighborIterator</name>
    <filename>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1NeighborIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>NeighborIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1NeighborIterator.html</anchorfile>
      <anchor>ac4590df5ebe3b46c706747f048d54a9a</anchor>
      <arglist>(Iterator &amp;base_box_itr, bool from_start=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NeighborIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1NeighborIterator.html</anchorfile>
      <anchor>a0ecb621edaf4715136777bbf70153a23</anchor>
      <arglist>(const NeighborIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>NeighborIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1NeighborIterator.html</anchorfile>
      <anchor>a5ef2f8e26f766bf1cec1060ba0244e27</anchor>
      <arglist>(const NeighborIterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NeighborIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1NeighborIterator.html</anchorfile>
      <anchor>a4904877cd1349c58ae89a77f96c6387f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1NeighborIterator.html</anchorfile>
      <anchor>a2291155f3683079538de0c0dc0f111f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Box *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1NeighborIterator.html</anchorfile>
      <anchor>a660f97fa46199c141fd11afde4d2eb51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NeighborIterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1NeighborIterator.html</anchorfile>
      <anchor>a6abc87d87649bf47f3315143af74b581</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>NeighborIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1NeighborIterator.html</anchorfile>
      <anchor>a3c6a9cb87969d06e097dc820ffb337f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1NeighborIterator.html</anchorfile>
      <anchor>ab81b5b65c73185f243e45be43ac5670f</anchor>
      <arglist>(const NeighborIterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1NeighborIterator.html</anchorfile>
      <anchor>a32b81434b471e1b0ee5cdb86b29c7eb6</anchor>
      <arglist>(const NeighborIterator &amp;rhs) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoxNeighborhoodCollection</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1NeighborIterator.html</anchorfile>
      <anchor>a575ef3116a743934aeae34060b1fda10</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ConstNeighborIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxNeighborhoodCollection_1_1NeighborIterator.html</anchorfile>
      <anchor>af047fd96ba10b6365c29607b24ba4f6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxOverlap</name>
    <filename>classSAMRAI_1_1hier_1_1BoxOverlap.html</filename>
    <member kind="function">
      <type></type>
      <name>BoxOverlap</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxOverlap.html</anchorfile>
      <anchor>ac21198d8cb759c75a845b85c9b7d837e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoxOverlap</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxOverlap.html</anchorfile>
      <anchor>a2641498a84a19c2b1b7cfbb2169047da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isOverlapEmpty</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxOverlap.html</anchorfile>
      <anchor>a9981425e58b12be926237dab834e9fe7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const IntVector &amp;</type>
      <name>getSourceOffset</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxOverlap.html</anchorfile>
      <anchor>aa1a60c2596bbf058aad2a359125f642d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Transformation &amp;</type>
      <name>getTransformation</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxOverlap.html</anchorfile>
      <anchor>ae2fc3cf7a0bdf63d15a3c105b275b745</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxOverlap.html</anchorfile>
      <anchor>a15491c9b2d0c7ffd7891cbcb7969b48f</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxTree</name>
    <filename>classSAMRAI_1_1hier_1_1BoxTree.html</filename>
    <member kind="function">
      <type></type>
      <name>~BoxTree</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTree.html</anchorfile>
      <anchor>a9a75cfac6f8ae3f7edd7d3d87dd6296a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>printStatistics</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTree.html</anchorfile>
      <anchor>aefe2fefa02dc4a4fe39d414c54484433</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetStatistics</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTree.html</anchorfile>
      <anchor>a3b17e483b0112f2e73d1da42ae8262bd</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MultiblockBoxTree</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTree.html</anchorfile>
      <anchor>a4b24c7f6dedb818117b2b6ea960c7a5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::hier::BoxUtilities</name>
    <filename>structSAMRAI_1_1hier_1_1BoxUtilities.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>checkBoxConstraints</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>a76e9f160b0f9a75d6b8425de01a97bbe</anchor>
      <arglist>(const Box &amp;box, const IntVector &amp;min_size, const IntVector &amp;cut_factor, const IntVector &amp;bad_interval, const BoxContainer &amp;physical_boxes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>chopBoxes</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>a5804619c16119506444b48d41e3b2f26</anchor>
      <arglist>(BoxContainer &amp;boxes, const IntVector &amp;max_size, const IntVector &amp;min_size, const IntVector &amp;cut_factor, const IntVector &amp;bad_interval, const BoxContainer &amp;physical_boxes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>chopBox</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>af0b4191a90ca2a6530b43549efc7b737</anchor>
      <arglist>(BoxContainer &amp;boxes, const Box &amp;box, const std::vector&lt; std::list&lt; int &gt; &gt; &amp;cut_points)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>extendBoxToDomainBoundary</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>a01f13be2125c96d4c2d38840f2df2921</anchor>
      <arglist>(Box &amp;box, const BoxContainer &amp;domain, const IntVector &amp;ext_ghosts)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>extendBoxesToDomainBoundary</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>a7f415a7c2357a1bd90a00059501cef27</anchor>
      <arglist>(BoxContainer &amp;boxes, const BoxContainer &amp;domain, const IntVector &amp;ext_ghosts)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>growBoxesWithinDomain</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>a835654fce77dfe3289d5b64405ddd6ca</anchor>
      <arglist>(BoxContainer &amp;boxes, const BoxContainer &amp;domain, const IntVector &amp;min_size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>growBoxWithinDomain</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>a94006fff4bd347678b4c6622e950b849</anchor>
      <arglist>(Box &amp;box, const BoxContainer &amp;local_domain_complement, const IntVector &amp;min_size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>findBestCutPointsGivenMax</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>a402d7d60489b97e2956ba4d8438f3500</anchor>
      <arglist>(std::vector&lt; std::list&lt; int &gt; &gt; &amp;cut_points, const Box &amp;box, const IntVector &amp;max_size, const IntVector &amp;min_size, const IntVector &amp;cut_factor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>findBestCutPointsForDirectionGivenMax</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>a3bedfc32450fc986eb5b7fce4c0d1b1b</anchor>
      <arglist>(const tbox::Dimension::dir_t idir, std::list&lt; int &gt; &amp;cut_points, const Box &amp;box, const int max_size, const int min_size, const int cut_factor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>findBestCutPointsGivenNumber</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>a5f6325c836b8675d83747be2e074a7e7</anchor>
      <arglist>(std::vector&lt; std::list&lt; int &gt; &gt; &amp;cut_points, const Box &amp;box, const IntVector &amp;number_boxes, const IntVector &amp;min_size, const IntVector &amp;cut_factor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>findBestCutPointsForDirectionGivenNumber</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>a0c607fefbe3fe336bbdfe19e997d7a7e</anchor>
      <arglist>(const tbox::Dimension::dir_t idir, std::list&lt; int &gt; &amp;cut_points, const Box &amp;box, const int num_boxes, const int min_size, const int cut_factor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>checkBoxForBadCutPoints</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>a78726f1773d33ea92cde9faa8c840335</anchor>
      <arglist>(IntVector &amp;bad_cut_information, const Box &amp;box, const BoxContainer &amp;physical_boxes, const IntVector &amp;bad_interval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>checkBoxForBadCutPointsInDirection</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>a4cf8ce7291e71bd834f746d54c6f28f9</anchor>
      <arglist>(const tbox::Dimension::dir_t dir, const Box &amp;box, const BoxContainer &amp;physical_boxes, const IntVector &amp;bad_interval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findBadCutPoints</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>a42f57fb1c0fd2cfc85f454d1f95dcceb</anchor>
      <arglist>(std::vector&lt; std::vector&lt; bool &gt; &gt; &amp;bad_cuts, const Box &amp;box, const BoxContainer &amp;physical_boxes, const IntVector &amp;bad_interval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findBadCutPointsForDirection</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>a915c365a32303853fe2442402ef11277</anchor>
      <arglist>(const tbox::Dimension::dir_t dir, std::vector&lt; bool &gt; &amp;bad_cuts, const Box &amp;box, const BoxContainer &amp;physical_boxes, const IntVector &amp;bad_interval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fixBadCutPoints</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>af5d417eb814fddb568aa47fea0768308</anchor>
      <arglist>(std::vector&lt; std::list&lt; int &gt; &gt; &amp;cuts, const std::vector&lt; std::vector&lt; bool &gt; &gt; &amp;bad_cuts, const Box &amp;box, const IntVector &amp;min_size, const IntVector &amp;cut_factor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fixBadCutPointsForDirection</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>af78e45b15f7183cfdbae1bdaac0814fc</anchor>
      <arglist>(const tbox::Dimension::dir_t dir, std::list&lt; int &gt; &amp;cuts, const std::vector&lt; bool &gt; &amp;bad_cuts, const Box &amp;box, const int min_size, const int cut_factor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findBadCutPointsForBorderAndDirection</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>adfc3f1ee68d8e983cabd1bf545cea284</anchor>
      <arglist>(const tbox::Dimension::dir_t id, std::vector&lt; bool &gt; &amp;bad_cuts, const Box &amp;box, const Box &amp;border, const int bad_interval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>makeNonOverlappingBoxContainers</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>a62466bcf5f1383a8f0dbebd9f7610c20</anchor>
      <arglist>(std::vector&lt; BoxContainer &gt; &amp;box_list_array, const BoxContainer &amp;boxes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>growAndAdjustAcrossBlockBoundary</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>a545f5d4db930a8b269afdaff433bf717</anchor>
      <arglist>(BoxContainer &amp;grown_boxes, const Box &amp;box, const boost::shared_ptr&lt; const BaseGridGeometry &gt; &amp;grid_geom, const IntVector &amp;ratio_to_level_zero, const IntVector &amp;refine_coarsen_ratio, const IntVector &amp;grow_width, bool do_refine, bool do_coarsen)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::CoarseFineBoundary</name>
    <filename>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</filename>
    <member kind="function">
      <type></type>
      <name>CoarseFineBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a64ec8f8a525a851feb62368c3a31076d</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoarseFineBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a499a50729ada5aca3863fad043933f8e</anchor>
      <arglist>(const CoarseFineBoundary &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoarseFineBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a370e0175daecdf9aca947d162a36ac0e</anchor>
      <arglist>(const PatchHierarchy &amp;hierarchy, int level_num, const IntVector &amp;max_ghost_width)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoarseFineBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a03951fdf0602f1c8d2dfaacfb083092e</anchor>
      <arglist>(const PatchLevel &amp;level, const Connector &amp;box_level_to_domain, const Connector &amp;box_level_to_self, const IntVector &amp;max_ghost_width)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoarseFineBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a1e3bd6c01c6b0b93aecd4845b63f4afb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a70a60c3ede90030bb5e1615d410ed553</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a00e2c57b202a5ee5cffa408971a81af7</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>CoarseFineBoundary &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a841e2fe908f9a4bc0d4c6247bb23ecf3</anchor>
      <arglist>(const CoarseFineBoundary &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a8a59ca51277f4b6fbf122b3feb39429c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; BoundaryBox &gt; &amp;</type>
      <name>getBoundaries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a2d13d1fff050eea163d9bd0bc1c58d98</anchor>
      <arglist>(const GlobalId &amp;global_id, const int boundary_type, const BlockId &amp;block_id=BlockId::zero()) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; BoundaryBox &gt; &amp;</type>
      <name>getNodeBoundaries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>ac504a7390c75d900e7271489f5a735b3</anchor>
      <arglist>(const GlobalId &amp;global_id, const BlockId &amp;block_id=BlockId::zero()) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; BoundaryBox &gt; &amp;</type>
      <name>getEdgeBoundaries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a0624bc8c8168f040de52c9eb993e9f19</anchor>
      <arglist>(const GlobalId &amp;global_id, const BlockId &amp;block_id=BlockId::zero()) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; BoundaryBox &gt; &amp;</type>
      <name>getFaceBoundaries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>aa79efbf52f36ff4f5e34cac36e34bed1</anchor>
      <arglist>(const GlobalId &amp;global_id, const BlockId &amp;block_id=BlockId::zero()) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::CoarsenOperator</name>
    <filename>classSAMRAI_1_1hier_1_1CoarsenOperator.html</filename>
    <member kind="function">
      <type></type>
      <name>CoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarsenOperator.html</anchorfile>
      <anchor>a98bac669d1de4151adee952b672b0250</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarsenOperator.html</anchorfile>
      <anchor>afaf4ab6d020adb2d0343908b1102e64d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarsenOperator.html</anchorfile>
      <anchor>ac5235b717d7ab4cb52962d0af5829abc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarsenOperator.html</anchorfile>
      <anchor>aca8b440be66765589dfdc4ba542e4c95</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarsenOperator.html</anchorfile>
      <anchor>a270a37dea8385c5dc0c9d186c0a19c7e</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarsenOperator.html</anchorfile>
      <anchor>a701eb237286e30b002ba80bac8ead91c</anchor>
      <arglist>(Patch &amp;coarse, const Patch &amp;fine, const int dst_component, const int src_component, const Box &amp;coarse_box, const IntVector &amp;ratio) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntVector</type>
      <name>getMaxCoarsenOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarsenOperator.html</anchorfile>
      <anchor>a7c976752e30402bb09a37ba9aef0bfdb</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::ComponentSelector</name>
    <filename>classSAMRAI_1_1hier_1_1ComponentSelector.html</filename>
    <member kind="function">
      <type></type>
      <name>ComponentSelector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a04d60321896b3d8d2cb6ba93ddc8c2b6</anchor>
      <arglist>(const bool flag=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComponentSelector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a4ead5c3e578adb48ad5530fd9643d366</anchor>
      <arglist>(const ComponentSelector &amp;flags)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ComponentSelector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a3c42c25801e1ce21f54f4d1ecef84945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a9649ba322556ba38fd1f584f8f0e28d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ComponentSelector &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>ae31b7671e2fdbbdb85126cf9c460e3c4</anchor>
      <arglist>(const ComponentSelector &amp;flags)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>afd90a06fc849dbf07b9d2d3fe2572382</anchor>
      <arglist>(const ComponentSelector &amp;flags) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a536c9150da5724d9e72d411d0d2d86c9</anchor>
      <arglist>(const ComponentSelector &amp;flags) const </arglist>
    </member>
    <member kind="function">
      <type>ComponentSelector</type>
      <name>operator|</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a72445b492e010249b4ded080612ddc1a</anchor>
      <arglist>(const ComponentSelector &amp;flags) const </arglist>
    </member>
    <member kind="function">
      <type>ComponentSelector</type>
      <name>operator&amp;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a29c07eab46887b65c35fe6acff392970</anchor>
      <arglist>(const ComponentSelector &amp;flags) const </arglist>
    </member>
    <member kind="function">
      <type>ComponentSelector</type>
      <name>operator!</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a96625592000e63d94801411f7af89365</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ComponentSelector &amp;</type>
      <name>operator|=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a83c90c51568e3a82ce0c9a0724722366</anchor>
      <arglist>(const ComponentSelector &amp;flags)</arglist>
    </member>
    <member kind="function">
      <type>ComponentSelector &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>ac1799eea6e776020b1662358d2aa0c61</anchor>
      <arglist>(const ComponentSelector &amp;flags)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSet</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>af47eaf50dee02c71c9930ce3e839914b</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFlag</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>ac2296f256c843f2258a239a830cc3937</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clrFlag</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>acf70ef4ae218978d8b23806b6b724e9d</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllFlags</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>ab9527c3377aad790276f34b8f6b969f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clrAllFlags</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>aeefb51e8ecc29599d04b83fd79380d6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>ac411e3afdb5f9cbc0fd156c295d2ea1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>any</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a19d7603edddd234150d0ecb597cadfc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>none</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>ab6bbec44a5c89b2e332490a0a41f0f87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a009dd578e42a15c124bd261f376c74b1</anchor>
      <arglist>(std::ostream &amp;os=tbox::plog) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::Connector</name>
    <filename>classSAMRAI_1_1hier_1_1Connector.html</filename>
    <class kind="class">SAMRAI::hier::Connector::Outputter</class>
    <member kind="typedef">
      <type>BoxContainer</type>
      <name>NeighborSet</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ad7ed18665ba43e593547eaa62b2eb507</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoxNeighborhoodCollection::ConstIterator</type>
      <name>ConstNeighborhoodIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ac1bcbc5b3a49ad135e56736c2711b457</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoxNeighborhoodCollection::Iterator</type>
      <name>NeighborhoodIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>acbc09313ed887ebaff6b5313d952b5ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoxNeighborhoodCollection::ConstNeighborIterator</type>
      <name>ConstNeighborIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a0fc1129bae2aeb2b5446d05027a0a137</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoxNeighborhoodCollection::NeighborIterator</type>
      <name>NeighborIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>af2b97ecb096ff2d3e61dc4f75a989825</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Connector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a8b59949ad2f72cc93949d84206fefe84</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Connector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>af4136d945c5e92be8b72e7e90c4c2df9</anchor>
      <arglist>(const tbox::Dimension &amp;dim, tbox::Database &amp;restart_db)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Connector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a2126ddea61a08d992bde2a6f077d03b8</anchor>
      <arglist>(const Connector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Connector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>afa8bac45251f3bd220e22cf27fe17f27</anchor>
      <arglist>(const BoxLevel &amp;base_box_level, const BoxLevel &amp;head_box_level, const IntVector &amp;base_width, const BoxLevel::ParallelState parallel_state=BoxLevel::DISTRIBUTED)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Connector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a7b4e7ed128c4cc089674906559593634</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeTransposeOf</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a811ce2f70e0c4557840765f8124c9190</anchor>
      <arglist>(const Connector &amp;other, const tbox::SAMRAI_MPI &amp;mpi=tbox::SAMRAI_MPI(MPI_COMM_NULL))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reorderRelationshipsByHead</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a659efbe99af379f7c396d6392f01d17f</anchor>
      <arglist>(std::map&lt; Box, BoxContainer, Box::id_less &gt; &amp;relationships_by_head) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ab8c454be7e0e0a015fb91dedcfc6eec2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearNeighborhoods</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>acc027f2080cb319aec47ff84a959f94f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinalized</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a3b758ffc761b7c265fa24a31610ca339</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborhoodIterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>aaed4f4f9596f23265d2806d562b0d885</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NeighborhoodIterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a887c26ae425f975889debb396d685719</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborhoodIterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ac9a46279c3c08130b094ed46d40fabd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NeighborhoodIterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>aeded54ee1f5399d2d6b7598c8bc82101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborIterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a89a0f8cdb5d91f9894c9d5773935bfda</anchor>
      <arglist>(const ConstNeighborhoodIterator &amp;nbrhd) const </arglist>
    </member>
    <member kind="function">
      <type>NeighborIterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ae943661542db01f91e25ffe2ed473258</anchor>
      <arglist>(NeighborhoodIterator &amp;nbrhd)</arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborIterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a58937dbd8a357a8e8602b7c17afc9836</anchor>
      <arglist>(const ConstNeighborhoodIterator &amp;nbrhd) const </arglist>
    </member>
    <member kind="function">
      <type>NeighborIterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ad853e4519401f3c6245ac974ebdb937f</anchor>
      <arglist>(NeighborhoodIterator &amp;nbrhd)</arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborhoodIterator</type>
      <name>findLocal</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>adffe6f0e34035cbb3264f46cad5b9949</anchor>
      <arglist>(const BoxId &amp;box_id) const </arglist>
    </member>
    <member kind="function">
      <type>NeighborhoodIterator</type>
      <name>findLocal</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>af83d91339ffb7bd48576ee53e512822a</anchor>
      <arglist>(const BoxId &amp;box_id)</arglist>
    </member>
    <member kind="function">
      <type>ConstNeighborhoodIterator</type>
      <name>find</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ad3cf3e5189be54a4396916579ad2f3c7</anchor>
      <arglist>(const BoxId &amp;box_id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>localNeighborhoodsEqual</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a1b3dd6e639a8da17898f12bf10b65ae3</anchor>
      <arglist>(const Connector &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neighborhoodEqual</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ae83609687fcf2b46f805b990580435d2</anchor>
      <arglist>(const BoxId &amp;box_id, const Connector &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNeighborSet</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a3215511cb3318fe69e211517d8d2acbd</anchor>
      <arglist>(const BoxId &amp;box_id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLocalNeighbor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ac93c41ae9e02447a9d1b97303d07a629</anchor>
      <arglist>(const BoxId &amp;box_id, const Box &amp;neighbor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNeighborBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>adb76e8b41c94423a04ced94687d31801</anchor>
      <arglist>(const BoxId &amp;box_id, BoxContainer &amp;nbr_boxes) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLocalNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ab8a01d6ad55629ff60d76aa248d31df0</anchor>
      <arglist>(BoxContainer &amp;neighbors) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLocalNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a2c79e791195927834e6ec9e95aa21aae</anchor>
      <arglist>(std::map&lt; BlockId, BoxContainer &gt; &amp;neighbors) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numLocalNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>aec79ec6987e40e2208a3ab08d280d702</anchor>
      <arglist>(const BoxId &amp;box_id) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numLocalEmptyNeighborhoods</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a01198aeecaa05c742a73080e36a17389</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLocalOwners</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a8657f735c145f2bf3206a378c7b24655</anchor>
      <arglist>(std::set&lt; int &gt; &amp;owners) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLocalOwners</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a04c4e2ed49b27b06595ba8acc0c17ae0</anchor>
      <arglist>(ConstNeighborhoodIterator &amp;base_boxes_itr, std::set&lt; int &gt; &amp;owners) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalizeContext</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ab22068ef25438187c4b07e1af0f197f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ae859b1425fdf80b51e3bc31a3cbb0003</anchor>
      <arglist>(const BoxLevel &amp;new_base, bool finalize_context=false)</arglist>
    </member>
    <member kind="function">
      <type>const BoxLevel &amp;</type>
      <name>getBase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ab85066f5ae1075c8e8f3041cfdaa1c6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHead</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ac97940662e7d9432cb22f9e83337bb0b</anchor>
      <arglist>(const BoxLevel &amp;new_head, bool finalize_context=false)</arglist>
    </member>
    <member kind="function">
      <type>const BoxLevel &amp;</type>
      <name>getHead</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a7760ddd7527e71e4a85826cff8e1ed60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>getRatio</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a56113ab06378022871b5157520cddc7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ratioIsExact</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>adcfe8722f8afcafbd48da607ce865b09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getHeadCoarserFlag</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>aa9715afebd3c1c3e97d2c6628da68a91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocal</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>add2eabe7dce520c1e22fd58c7f9faf04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Connector *</type>
      <name>createLocalTranspose</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ac636b4b2468f533b4016ccf8381410a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Connector *</type>
      <name>createTranspose</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a41e470fc45ad6e411aad77c635b884eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Connector &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>af65f19695d684b6af4fe35f59b34ce37</anchor>
      <arglist>(const Connector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a8c7a82380ff0fdf1e5cc5a25f5a05ffc</anchor>
      <arglist>(const Connector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>acfaff6988e1c09fc735419e458f754c6</anchor>
      <arglist>(const Connector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParallelState</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ab9dbd4a07f274a5409fc9f42596a345d</anchor>
      <arglist>(const BoxLevel::ParallelState parallel_state)</arglist>
    </member>
    <member kind="function">
      <type>BoxLevel::ParallelState</type>
      <name>getParallelState</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a05fcbb239bb320df4da94068f7ae9933</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::SAMRAI_MPI &amp;</type>
      <name>getMPI</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a2c19c8e3ba825428f8389cfa8a765583</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a7f1e9f9514bdf70ff676b1a4bf849e78</anchor>
      <arglist>(const IntVector &amp;new_width, bool finalize_context=false)</arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>getConnectorWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a166aef3a6a27d170fb90849235f0143b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrinkWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a848a92ae72a3d35f5369296329a541bf</anchor>
      <arglist>(const IntVector &amp;new_width)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalNumberOfNeighborSets</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>acf412b90fea96db84bfee0f007dba562</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalNumberOfRelationships</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>aaeea4aa3d4edee2bec8fa2cf94aadbd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalNumberOfNeighborSets</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>afbe980ac5000ab82ca10a00fee3618be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalNumberOfRelationships</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a763fb44539271c697266f905cfa3d0bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cacheGlobalReducedData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ae633a448cb228b9d4580acb795e963fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a52a9a73c8913a9a12345f32765694209</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNeighborhoodsToErrorStream</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a7f9abad0ff13c8ef21ea6674ca522397</anchor>
      <arglist>(const std::string &amp;border) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNeighborhoodToStream</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a4a0142726d638d08c14da644ea050b45</anchor>
      <arglist>(std::ostream &amp;os, const BoxId &amp;box_id) const </arglist>
    </member>
    <member kind="function">
      <type>Outputter</type>
      <name>format</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ac24e1e57779a85878b0595fe00b8aebe</anchor>
      <arglist>(const std::string &amp;border=std::string(), int detail_depth=2) const </arglist>
    </member>
    <member kind="function">
      <type>Outputter</type>
      <name>formatStatistics</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a0465a83425ed0e00a8cbaf85383f0705</anchor>
      <arglist>(const std::string &amp;border=std::string()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a36f9149a2c5335686b4f7431f27a35fa</anchor>
      <arglist>(const BoxContainer &amp;neighbors, const BoxId &amp;base_box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseNeighbor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ae97f31d0e751ae1968394869f2d60dfb</anchor>
      <arglist>(const Box &amp;neighbor, const BoxId &amp;box_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertLocalNeighbor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a5fbf56e230c953d46f412f5d52055b17</anchor>
      <arglist>(const Box &amp;neighbor, const BoxId &amp;box_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertLocalNeighbor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a4e3b2cc87c9385dbc6e91883313739b0</anchor>
      <arglist>(const Box &amp;neighbor, NeighborhoodIterator &amp;base_box_itr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseLocalNeighborhood</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>abaa29cf15f00ae1ff334405fa57a2f39</anchor>
      <arglist>(const BoxId &amp;box_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePeriodicRelationships</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>aa34973973b4d43f6ec68b3ec9c390829</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePeriodicLocalNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>afea9f62adf45fdf3f2844512a499dc4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPeriodicLocalNeighborhoodBaseBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ac7a86243c80d8e4bc6f48f45e65f40e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NeighborhoodIterator</type>
      <name>makeEmptyLocalNeighborhood</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a0eb1f6c94cc7241037f519fac9e6a7b7</anchor>
      <arglist>(const BoxId &amp;box_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseEmptyNeighborSets</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a01ee57dbac162e2d3d5cb90ba6e80295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmptyNeighborhood</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a8bcc9cb068cad8d7c14fb517d6cd939e</anchor>
      <arglist>(const BoxId &amp;box_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsenLocalNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>addb7576119775e0ca12a7c35b083fd3e</anchor>
      <arglist>(const IntVector &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refineLocalNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>aedac389ea28d58ef0a5c8efbd2e2f183</anchor>
      <arglist>(const IntVector &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>growLocalNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a0e2ca47497738d6b68e3294bfa8c009c</anchor>
      <arglist>(const IntVector &amp;growth)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>computeRatioInfo</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a9315a53ec231280edde0141e4cf442a2</anchor>
      <arglist>(const IntVector &amp;baseRefinementRatio, const IntVector &amp;headRefinementRatio, IntVector &amp;ratio, bool &amp;head_coarser, bool &amp;ratio_is_exact)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doLocalTransposeWork</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ad10879d4d789a38ac857a319fb427adc</anchor>
      <arglist>(Connector *transpose) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>doTransposeWork</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a06c358bbbd850c640b2d7535ea670a38</anchor>
      <arglist>(Connector *transpose) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OverlapConnectorAlgorithm</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a10aa5a1001ae1d972f937202c8a1b9f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recursivePrint</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a38533c620f9a32a6137c4a2b0fcc1b4a</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;border, int detail_depth=2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransposeOf</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ade5f6cee7c70c56c0b4860079181b0fe</anchor>
      <arglist>(const Connector &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>checkConsistencyWithBase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ab94bcf20255bc52f6ff96c2bc9fcd999</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertConsistencyWithBase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a4aa6250f6287d628694dd0a4fb889366</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>checkConsistencyWithHead</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a4a560f2bee9958d4d1280591a4130d08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertConsistencyWithHead</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a1a237ea02d188e3a44bee0cd2fee95d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTranspose</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a6db399e90ebf7feb69238b74b71416d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Connector &amp;</type>
      <name>getTranspose</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a6fa0bb3804a55ed2e635bb2fc2b28ba2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTranspose</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a26f507acf644f848cb70824ed0d7822a</anchor>
      <arglist>(Connector *transpose, bool owns_transpose)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>checkTransposeCorrectness</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a43fa8f14bf8149ed4548fdc00c61d793</anchor>
      <arglist>(const Connector &amp;transpose, bool ignore_periodic_relationships=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertTransposeCorrectness</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a79869f9decf981ad83d20ebc65aacda8</anchor>
      <arglist>(const Connector &amp;transpose, const bool ignore_periodic_relationships=false) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>checkOverlapCorrectness</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>ac8c733ccf061a9603a2086eb08573595</anchor>
      <arglist>(bool ignore_self_overlap=false, bool assert_completeness=true, bool ignore_periodic_images=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertOverlapCorrectness</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a5674c57801276dbf7ed4b114ff1926dc</anchor>
      <arglist>(bool ignore_self_overlap=false, bool assert_completeness=true, bool ignore_periodic_images=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findOverlapErrors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a0d10f8e633f056c0b680ed0d931ad85a</anchor>
      <arglist>(boost::shared_ptr&lt; Connector &gt; &amp;missing, boost::shared_ptr&lt; Connector &gt; &amp;extra, bool ignore_self_overlap=false) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntVector</type>
      <name>convertHeadWidthToBase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>a0568ed9a1fe8995de6ebccd2e3a5d909</anchor>
      <arglist>(const IntVector &amp;base_refinement_ratio, const IntVector &amp;head_refinement_ratio, const IntVector &amp;head_width)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>computeNeighborhoodDifferences</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector.html</anchorfile>
      <anchor>aad3442963e80d76a524ed1ff63d86391</anchor>
      <arglist>(boost::shared_ptr&lt; Connector &gt; &amp;left_minus_right, const Connector &amp;left_connector, const Connector &amp;right_connector)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::Connector::Outputter</name>
    <filename>classSAMRAI_1_1hier_1_1Connector_1_1Outputter.html</filename>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Connector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector_1_1Outputter.html</anchorfile>
      <anchor>a1574f0490ae4a8ede8317663c105b4bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Connector_1_1Outputter.html</anchorfile>
      <anchor>afe0b40cec06244091a28e181566588c3</anchor>
      <arglist>(std::ostream &amp;s, const Outputter &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::ConnectorStatistics</name>
    <filename>classSAMRAI_1_1hier_1_1ConnectorStatistics.html</filename>
    <member kind="function">
      <type></type>
      <name>ConnectorStatistics</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ConnectorStatistics.html</anchorfile>
      <anchor>ae4a0418f9cb2365b313e51570a5e7cc8</anchor>
      <arglist>(const Connector &amp;connector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printNeighborStats</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ConnectorStatistics.html</anchorfile>
      <anchor>ab85efe6b224bcf04b1109fcc182ee5c6</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;border) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::FlattenedHierarchy</name>
    <filename>classSAMRAI_1_1hier_1_1FlattenedHierarchy.html</filename>
    <member kind="function">
      <type></type>
      <name>FlattenedHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1FlattenedHierarchy.html</anchorfile>
      <anchor>a2d67f78db2a313135a8d4f0497b89c5e</anchor>
      <arglist>(const PatchHierarchy &amp;hierarchy, int coarsest_level, int finest_level)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FlattenedHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1FlattenedHierarchy.html</anchorfile>
      <anchor>ad5ead59ff407c19c8dfbbda78749368f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoarsestLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1FlattenedHierarchy.html</anchorfile>
      <anchor>af05a3501cb84889f7f0d1fe1d02a00bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFinestLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1FlattenedHierarchy.html</anchorfile>
      <anchor>a922d9deef733720388633668c8b88a8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BoxContainer &amp;</type>
      <name>getVisibleBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1FlattenedHierarchy.html</anchorfile>
      <anchor>a4f129010f9ef8a56851e060f8392ff8a</anchor>
      <arglist>(const Box &amp;box, int ln) const </arglist>
    </member>
    <member kind="function">
      <type>const PatchHierarchy &amp;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1FlattenedHierarchy.html</anchorfile>
      <anchor>ac09728ce1b32f58d3cde0371a8f47e46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UncoveredBoxIterator</type>
      <name>beginUncovered</name>
      <anchorfile>classSAMRAI_1_1hier_1_1FlattenedHierarchy.html</anchorfile>
      <anchor>af46ae09935091eb77a6f4be2bbf3ee99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UncoveredBoxIterator</type>
      <name>endUncovered</name>
      <anchorfile>classSAMRAI_1_1hier_1_1FlattenedHierarchy.html</anchorfile>
      <anchor>ae21ec9f6bfc1cc9c50144cd14c0546b7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::GlobalId</name>
    <filename>classSAMRAI_1_1hier_1_1GlobalId.html</filename>
    <member kind="function">
      <type></type>
      <name>GlobalId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GlobalId.html</anchorfile>
      <anchor>a2ca4b888c6b9685f314c236b90ad163a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GlobalId.html</anchorfile>
      <anchor>a951862b7303fba595e0e02b20aa1b610</anchor>
      <arglist>(const LocalId &amp;local_id, const int owner_rank)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GlobalId.html</anchorfile>
      <anchor>acdd1baa2c0dd988430b1969204e55ce6</anchor>
      <arglist>(const GlobalId &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GlobalId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GlobalId.html</anchorfile>
      <anchor>a1c9402c65e73390cb0e822a94b4b2fe3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>getOwnerRank</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GlobalId.html</anchorfile>
      <anchor>aa6aa948e6e8199e29c3c36d9a0f2b7d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>getOwnerRank</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GlobalId.html</anchorfile>
      <anchor>ab8d0937b08cbcbefd41ed4050a467f46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LocalId &amp;</type>
      <name>getLocalId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GlobalId.html</anchorfile>
      <anchor>ad4ae7dd716e283a21d506c263c140bd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LocalId &amp;</type>
      <name>getLocalId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GlobalId.html</anchorfile>
      <anchor>a4f8b9558e509acfb7dc32417b01f7f30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GlobalId.html</anchorfile>
      <anchor>a26602712aa7134eceae7194457ef2e1d</anchor>
      <arglist>(const GlobalId &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GlobalId.html</anchorfile>
      <anchor>a8c654319a0ccfcf03fbc54af97d5cf19</anchor>
      <arglist>(const GlobalId &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GlobalId.html</anchorfile>
      <anchor>a45d21cee046b0a372113eca740dc6cbb</anchor>
      <arglist>(const GlobalId &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GlobalId.html</anchorfile>
      <anchor>a9e43c469e4899886dc381e442e929600</anchor>
      <arglist>(const GlobalId &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GlobalId.html</anchorfile>
      <anchor>ac305834e4717ba612486640a744b0048</anchor>
      <arglist>(const GlobalId &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GlobalId.html</anchorfile>
      <anchor>a09ecaca4b7c1ec909f2a6515faa1dd52</anchor>
      <arglist>(const GlobalId &amp;r) const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GlobalId.html</anchorfile>
      <anchor>a501ba6bb4b58d737273ebadbdf3f94a3</anchor>
      <arglist>(std::ostream &amp;co, const GlobalId &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::HierarchyNeighbors</name>
    <filename>classSAMRAI_1_1hier_1_1HierarchyNeighbors.html</filename>
    <member kind="function">
      <type></type>
      <name>HierarchyNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1HierarchyNeighbors.html</anchorfile>
      <anchor>a7eff9215b61f6c049bffc09e851fda92</anchor>
      <arglist>(const PatchHierarchy &amp;hierarchy, int coarsest_level, int finest_level)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HierarchyNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1HierarchyNeighbors.html</anchorfile>
      <anchor>ac67cb44786cdef7ded5755028e9e5558</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoarsestLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1HierarchyNeighbors.html</anchorfile>
      <anchor>ac72121af202bd5b14e8e6ecc4ae97d1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFinestLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1HierarchyNeighbors.html</anchorfile>
      <anchor>a9ccc54e9670f78cbe49a7f4cff0ba4f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BoxContainer &amp;</type>
      <name>getFinerLevelNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1HierarchyNeighbors.html</anchorfile>
      <anchor>ab2af845294a01f37059148ebe9772c00</anchor>
      <arglist>(const Box &amp;box, int ln) const </arglist>
    </member>
    <member kind="function">
      <type>const BoxContainer &amp;</type>
      <name>getCoarserLevelNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1HierarchyNeighbors.html</anchorfile>
      <anchor>adf2efab223589578c0853e15d9773406</anchor>
      <arglist>(const Box &amp;box, int ln) const </arglist>
    </member>
    <member kind="function">
      <type>const BoxContainer &amp;</type>
      <name>getSameLevelNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1HierarchyNeighbors.html</anchorfile>
      <anchor>a793eacb2f324f239d024d4de25ce3184</anchor>
      <arglist>(const Box &amp;box, int ln) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::Index</name>
    <filename>classSAMRAI_1_1hier_1_1Index.html</filename>
    <member kind="typedef">
      <type>tbox::Dimension::dir_t</type>
      <name>dir_t</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a306c8ed214857958125ac5be796fa968</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Index</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a839230018a049bc7d37bf3ff57708b1b</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Index</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a82cfb9916426eea1bbe99190205d611a</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const int value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Index</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a34d5225c8d19bd6898201419b8d1261f</anchor>
      <arglist>(const int i, const int j)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Index</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>ab10cada20dcf1968746ff58dd8e9f6b3</anchor>
      <arglist>(const int i, const int j, const int k)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Index</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>af8df7ade742c9c6db5d35ac2a2f26b21</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Index</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a0e701ca956ebc9a222eefe6178dbeb39</anchor>
      <arglist>(const Index &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Index</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a7752a2d67dc5eb646a0d703f08cc5a13</anchor>
      <arglist>(const IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Index</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a9eb103c0052dd7b415e93e97e05133fb</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const int array[])</arglist>
    </member>
    <member kind="function">
      <type>Index &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a12146ab21607637c77ec2d29c48ae8ec</anchor>
      <arglist>(const Index &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>ae1d20aed1038da80d5abd90cd9a1e9f7</anchor>
      <arglist>(const IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Index</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a5c3bcc2640a84808c86d54f0a6418963</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>abe5f7602d7054a80bdb85c0f7dd3e513</anchor>
      <arglist>(const Index &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>adc649ab233839d1427331ffbf5364f8c</anchor>
      <arglist>(const Index &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Index &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>aa4382d5cc4768039cd8fc298e0fd33ad</anchor>
      <arglist>(const IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>aaf92e4f1890843ada9e71bb66b17fa34</anchor>
      <arglist>(const IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Index &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>adc4f7589b4fc4a90027a3fb67473f5c9</anchor>
      <arglist>(const Index &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>afef824f1a959e883fe18a04ea8d09e7f</anchor>
      <arglist>(const Index &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Index &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a4449ca00870f13e0e930b877e2a0d375</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a23d3a2f9717ec303b77041e84a382bf4</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Index &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>aea7d6740c0b97036471fd73eacee1e7f</anchor>
      <arglist>(const Index &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>adffc68d7f2252b3ad76836f99d98ab04</anchor>
      <arglist>(const Index &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Index &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>aba484d6a9f70ec5cd37f96844e398ece</anchor>
      <arglist>(const IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a16808b156caa404845374297db1c5e75</anchor>
      <arglist>(const IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Index &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a0efd6c0ed9d66b63ad8f95dfb8a3fc2b</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a0d0a9a42d888dd8cf7a644701c376dde</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Index &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a7f3f30595ebee67eae0f8225076faeff</anchor>
      <arglist>(const IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a3dabc8b1018b3fb05430cef62cb319ca</anchor>
      <arglist>(const IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Index &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a1ded984e8a04ef47376113667f920586</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a0ccd04d8155566bcdbc633dbfcab7e79</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Index &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>af7521763486afd7f6c1241db20faee84</anchor>
      <arglist>(const IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>operator/</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>acc63bbb167e66a7b6b7eb0aac8b51a1b</anchor>
      <arglist>(const IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Index &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>ad58c6f5ee27d315d270e04192908e896</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>operator/</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a74701ba7de5d98d52449665cdd80488e</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a0a89615b7cfadff0ec69706090ee048e</anchor>
      <arglist>(const unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a93f4a73ef3947e189b87cd42e95564bc</anchor>
      <arglist>(const unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a932a762a313bd6b532173c11d1a3c1aa</anchor>
      <arglist>(const unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a76e7fe1eadd16b31a192452a22777e03</anchor>
      <arglist>(const unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a5b4f11ff28e6b183ce04930bb2d2a07a</anchor>
      <arglist>(const Index &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a37adba8a4deb581c4b47f48e0c329982</anchor>
      <arglist>(const Index &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a716168f4c80bddee362888f84162a399</anchor>
      <arglist>(const Index &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a9699e566a7b33b0eae6083abab88470f</anchor>
      <arglist>(const Index &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>ae31925b069cf9bcf3d3f2a2d36ce81ef</anchor>
      <arglist>(const Index &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>ab69ac140e7596b964c9369856f84a0fb</anchor>
      <arglist>(const Index &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index &amp;</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>aa8acf838a6a645f18f8f410482bfcdd8</anchor>
      <arglist>(const IntVector &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a9b6ab6ec179ba38d3b2adf3720fe3f7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Index &amp;</type>
      <name>getZeroIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>aaf1ecdf16adfc1586dba92a2ff188c93</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Index &amp;</type>
      <name>getOneIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a785429bc6ce9d6a5e6ce2f1dffba640c</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Index &amp;</type>
      <name>getMinIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>af7d18c67232d3c9fa020fa3580e119e3</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Index &amp;</type>
      <name>getMaxIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>ac4f853cdfff20e3b25c819769548069e</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Index</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>aff4f74c447921f6b754196c9f8cca710</anchor>
      <arglist>(const Index &amp;index, const IntVector &amp;ratio)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Index</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a96a9d63e22b7fd60dc504b09ef3ea875</anchor>
      <arglist>(const Index &amp;a, const Index &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>ae39ee4f7fa4a20d81915afa369744cc1</anchor>
      <arglist>(std::istream &amp;s, Index &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a519f2e2e8e87021e88583ba32275bf4e</anchor>
      <arglist>(std::ostream &amp;s, const Index &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::IntVector</name>
    <filename>classSAMRAI_1_1hier_1_1IntVector.html</filename>
    <member kind="typedef">
      <type>tbox::Dimension::dir_t</type>
      <name>dir_t</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a07a3625797b8e551507cf2c67e5520ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>af53e9ede7f30104d2eee53ad8e1306f3</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a68ccb5cb4a85e8e3b1c87c502a1e3e2d</anchor>
      <arglist>(size_t num_blocks, const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a83e981424eff0438d64a7992663f9733</anchor>
      <arglist>(const tbox::Dimension &amp;dim, int value, size_t num_blocks=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a5b8084081260cfe8983b7c22e5bffcdb</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;vec, size_t num_blocks=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a62c3e211103f268cd1524d696e7ce6a7</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const int array[], size_t num_blocks=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a1899c2eda100d75efb16b20382f45a0a</anchor>
      <arglist>(const IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a43dbfc738573e274fe6558312680fbc8</anchor>
      <arglist>(const IntVector &amp;rhs, size_t num_blocks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a7d370f7e872b53c31cd5112976b0033a</anchor>
      <arglist>(const Index &amp;rhs, size_t num_blocks=1)</arglist>
    </member>
    <member kind="function">
      <type>IntVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a1da3af4d833af2517ef9ea451be45a74</anchor>
      <arglist>(const IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>adc4eccb977c54e6043af75c4dcb60cb7</anchor>
      <arglist>(const Index &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IntVector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>ae3a008e82377fd5b2be06a46b1da8ca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumBlocks</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a45359c8633c1c5fd9dc06dbf6010cdcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntVector</type>
      <name>getBlockVector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>ae8d1415a70c42ad7f72a90fb1240ab2d</anchor>
      <arglist>(const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a9f6e8a0415e3521b28eead8e9b6f089d</anchor>
      <arglist>(const unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a8529dbdbdcbf318fc641e5bdd0d27a95</anchor>
      <arglist>(const unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a89d66cb362e3d00dbba605832814871c</anchor>
      <arglist>(const unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a39127e587def6737ebf05b46a244c87f</anchor>
      <arglist>(const unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a979b632f5c19e57a3fb404b774249092</anchor>
      <arglist>(const BlockId::block_t b, const unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>ad85f679c435113b3cfabd71d536a96de</anchor>
      <arglist>(const BlockId::block_t b, const unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a39a33a43b95f76d121c9d21fc5ed3271</anchor>
      <arglist>(const IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntVector</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a13d49c180c00f2ce0b144a91736e9c4f</anchor>
      <arglist>(const IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>ac365b6488d656e3d62e04c982f290e95</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntVector</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a61a5630254c7a52ed32b439d7586827e</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>aab3b59baed57b532f1324b2e98518109</anchor>
      <arglist>(const IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntVector</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>aac3dfd6f9d0381497a276c193f92cc38</anchor>
      <arglist>(const IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a5a0b8565e90585064f8022506a22b6e7</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntVector</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>aeecf58a651b087c3b16fac6a6962021f</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a268710d83610956affd8588809bbb75c</anchor>
      <arglist>(const IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntVector</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a0d18ecca463bf361b666112d896f6501</anchor>
      <arglist>(const IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a39edac0d04828382587d42fd395b13c3</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntVector</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>ac67a114f0f7c4230bcf130a2a970e0f1</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>acd76b0559d360daef3472026c8db56b8</anchor>
      <arglist>(const IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntVector</type>
      <name>operator/</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>afc28c14cc673bd7a1cc7ba56426a1459</anchor>
      <arglist>(const IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a6cf36b3ab86794ee541aad6e9102f019</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntVector</type>
      <name>operator/</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a6ed96981772548ae2c2b36c917c9e1ef</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ceilingDivide</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>aa9f8d70ad56b406605434b9d535d50b3</anchor>
      <arglist>(const IntVector &amp;denominator)</arglist>
    </member>
    <member kind="function">
      <type>IntVector</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a3594bd4c6014f9cb3f6d50d4d7b06e78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>af16547b0333256bafd30a2d571b364dd</anchor>
      <arglist>(int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>adcf2ec3335202a72bb892b63e0540eb0</anchor>
      <arglist>(int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>aeff574865946c34f114ff922a3ff01d5</anchor>
      <arglist>(const IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>ad721a567a3ba48b062c77fff5c9da854</anchor>
      <arglist>(const IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>ab51477981cb5f7162734d33a2bee1fb3</anchor>
      <arglist>(const IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>ac73c33b2efdfbe4146dd70910b4e0f7c</anchor>
      <arglist>(const IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>adaedb4caa6554f08fef4ebdc5744dd86</anchor>
      <arglist>(const IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a4e11c7ffa17cd3fe5268f4dd06211794</anchor>
      <arglist>(const IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>ae3a617a75e07fe76870445a62e09193f</anchor>
      <arglist>(const IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a47e913fcb43e503bdc30aecbc73784a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a48024ad0ce8e1bb9e8d7c93e38a9b3fd</anchor>
      <arglist>(const IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>adfd79938c35bcf07317cdcbf2f34a8c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAll</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>ab656fe646e07d22dd7414f06afb850aa</anchor>
      <arglist>(const IntVector &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>long int</type>
      <name>getProduct</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a411e5f93d40851343329910a4fe42177</anchor>
      <arglist>(const BlockId &amp;block_id=BlockId::invalidId()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a38dd0743808512a9724cadbc06d02ffc</anchor>
      <arglist>(tbox::Database &amp;restart_db, const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>af50e251f4fcb54f7662ec6f97f4d3272</anchor>
      <arglist>(tbox::Database &amp;restart_db, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a8238adf575c71ea75e76200e44669371</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortIntVector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a927e5003caddf2cc714f81ec85763109</anchor>
      <arglist>(const IntVector &amp;values)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntVector</type>
      <name>ceilingDivide</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>ac91c3b76c9954be5b9d55cc5f1e57716</anchor>
      <arglist>(const IntVector &amp;numerator, const IntVector &amp;denominator)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntVector</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>abe9c65aba2f503e3496e17a0b0cec7b9</anchor>
      <arglist>(const IntVector &amp;a, const IntVector &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntVector</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>aa76c5e8ac3a35bff2d8653113fec9208</anchor>
      <arglist>(const IntVector &amp;a, const IntVector &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IntVector &amp;</type>
      <name>getZero</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a178dc4477a52ff09e80a2c3e86944e7f</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IntVector &amp;</type>
      <name>getOne</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a2d8aeb3c6ed3270611091ba13dab8f40</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a280cc9786b3034e97db4ff1e02fe561c</anchor>
      <arglist>(std::istream &amp;s, IntVector &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a50ca8f264f13ad1906cdc9024fdf7222</anchor>
      <arglist>(std::ostream &amp;s, const IntVector &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::LocalId</name>
    <filename>classSAMRAI_1_1hier_1_1LocalId.html</filename>
    <member kind="function">
      <type></type>
      <name>LocalId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a71959dcd942dbbe81c16aeb043e19c42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a6999f38214430b00db0c688e58f76c78</anchor>
      <arglist>(const LocalId &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a7d6e4704f046c1bdecafcb3d65d0a1ed</anchor>
      <arglist>(const int &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocalId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a86b5ef041ae519cc82f2241cd66bca3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LocalId &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a70aaa9791a873f850b85ef3cde3d5706</anchor>
      <arglist>(const LocalId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>LocalId &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>ab77ec24b34cae0c01476d3747e93ac6c</anchor>
      <arglist>(const int &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>getValue</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>aab3b40453c998134a952b639cb34da7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>getValue</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a6e6ec95dd61a48dd5aa495988d39f2ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>aa2208a3a89c714d3bc2a85efde82b42d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LocalId</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>afc5d2de36468774dd1fb7ddeaad97b28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LocalId</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a4b4c82d1669a43a3d22593259000959e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>LocalId</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>af882b03150458ce4b2c79d56f699f706</anchor>
      <arglist>(const LocalId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>LocalId</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>ac56587c89a590cd965826d6a1a9a6e2a</anchor>
      <arglist>(const LocalId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>LocalId</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a905da471594bfc21238924a0ad545b45</anchor>
      <arglist>(const LocalId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>LocalId</type>
      <name>operator/</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a653bd22bb419b7ecc2d8d0ac3f1c50a4</anchor>
      <arglist>(const LocalId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>LocalId</type>
      <name>operator%</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a49b31618d404df5d96f0a9418ad0b0a4</anchor>
      <arglist>(const LocalId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>LocalId &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a1e19fdae314a18776f215d89f31b1645</anchor>
      <arglist>(const LocalId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>LocalId &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a4adb25c36d5bcb59c5bef67d55495f2c</anchor>
      <arglist>(const LocalId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>LocalId</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a404d28c606eb2e34156f964f8d9cbdc7</anchor>
      <arglist>(const int &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>LocalId</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a078da6960de2a7bb55158a100650ab6b</anchor>
      <arglist>(const int &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>LocalId</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a0f05eb8dee7f02d15dafad59565b5b51</anchor>
      <arglist>(const int &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>LocalId</type>
      <name>operator/</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a47cca0ddf9eee73fcfaf0ae137d43ee1</anchor>
      <arglist>(const int &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>LocalId</type>
      <name>operator%</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>aac66a0ff9595818575401de6e306b080</anchor>
      <arglist>(const int &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>LocalId &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a2635db39dd62ebf1e8feb0746e7b6ba8</anchor>
      <arglist>(const int &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>LocalId &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>acb50440848231f47aaaf4a29cc47f525</anchor>
      <arglist>(const int &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a8bb2581f2af8559097e7b66913841f58</anchor>
      <arglist>(const LocalId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a7e813226058c08126f26fb3c3fd5920b</anchor>
      <arglist>(const LocalId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a9d7bcc3245180f5c2bb9186a2baaf782</anchor>
      <arglist>(const LocalId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>af9aeb6c494c9839873a84b402086a0b2</anchor>
      <arglist>(const LocalId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>aa95f6ce6ba36695af2c832f094f72063</anchor>
      <arglist>(const LocalId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>aad2f64f49b76abfd1bab3d6287995e08</anchor>
      <arglist>(const LocalId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a34cb5d817faa2e37961e6c389c386e97</anchor>
      <arglist>(const int &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>acfd6d28507c4f8a68ad5337bc2506909</anchor>
      <arglist>(const int &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a79b2b57aff0c6308e13e1150aeddf195</anchor>
      <arglist>(const int &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a071358b65174a88f5c74b8cfd8e4fb48</anchor>
      <arglist>(const int &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a43f809bd1c53bf172326ed356236f688</anchor>
      <arglist>(const int &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a7fd58ea58e7339477a7b967cf6fba32a</anchor>
      <arglist>(const int &amp;rhs) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LocalId &amp;</type>
      <name>getZero</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>a2f3de5eaff1b15ea67de5a32fd5b434a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LocalId &amp;</type>
      <name>getInvalidId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>abe1c0c81189c492feae71ad0d8b040e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocalId.html</anchorfile>
      <anchor>ab33cf644c5befa9e56f3690efbce3368</anchor>
      <arglist>(std::ostream &amp;co, const LocalId &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::MappingConnector</name>
    <filename>classSAMRAI_1_1hier_1_1MappingConnector.html</filename>
    <base>SAMRAI::hier::Connector</base>
    <member kind="enumeration">
      <name>MappingType</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnector.html</anchorfile>
      <anchor>a5a21e15fa359f1042f419a99b4ead920</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOCAL</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnector.html</anchorfile>
      <anchor>a5a21e15fa359f1042f419a99b4ead920af93b5f4da3a7d2768f1e2f290dc0f198</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_LOCAL</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnector.html</anchorfile>
      <anchor>a5a21e15fa359f1042f419a99b4ead920a71ef2c940dbc8290c197ecf90b669eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnector.html</anchorfile>
      <anchor>a5a21e15fa359f1042f419a99b4ead920a6f57fef498da5f2baf85203f68001c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MappingConnector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnector.html</anchorfile>
      <anchor>aa367bb00e6d5018fc1cc6765262d4939</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MappingConnector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnector.html</anchorfile>
      <anchor>a07bd95cfcccda0a456f0870ede15b17d</anchor>
      <arglist>(const tbox::Dimension &amp;dim, tbox::Database &amp;restart_db)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MappingConnector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnector.html</anchorfile>
      <anchor>af20fd5d9d45904e5c815d0bc68ae4a75</anchor>
      <arglist>(const MappingConnector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MappingConnector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnector.html</anchorfile>
      <anchor>ad40da83228900fb34a3b330d34da7aab</anchor>
      <arglist>(const BoxLevel &amp;base_box_level, const BoxLevel &amp;head_box_level, const IntVector &amp;base_width, const BoxLevel::ParallelState parallel_state=BoxLevel::DISTRIBUTED)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MappingConnector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnector.html</anchorfile>
      <anchor>ad8c356a59631a91963a19e7ede759d3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MappingConnector &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnector.html</anchorfile>
      <anchor>a3c45dd5a8b1a8e12a5731ecff3112f71</anchor>
      <arglist>(const MappingConnector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>MappingConnector *</type>
      <name>createLocalTranspose</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnector.html</anchorfile>
      <anchor>a48cea38d4a58675c6d85e1579673a799</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MappingConnector *</type>
      <name>createTranspose</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnector.html</anchorfile>
      <anchor>a4e8292980bb172ca97c601a59a52aeb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>findMappingErrors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnector.html</anchorfile>
      <anchor>a4052836894fdbb159a52920aecadf08d</anchor>
      <arglist>(MappingType map_type=UNKNOWN) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertMappingValidity</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnector.html</anchorfile>
      <anchor>a0d930313142f8921092d9f0c88e1b9c6</anchor>
      <arglist>(MappingType map_type=UNKNOWN) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::MappingConnectorAlgorithm</name>
    <filename>classSAMRAI_1_1hier_1_1MappingConnectorAlgorithm.html</filename>
    <base>SAMRAI::hier::BaseConnectorAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>MappingConnectorAlgorithm</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnectorAlgorithm.html</anchorfile>
      <anchor>ab3ff8d6c8ee7809aee4ddae75ebfcfb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MappingConnectorAlgorithm</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnectorAlgorithm.html</anchorfile>
      <anchor>a570faea59fa8e4652d35f448dc502b2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBarrierBeforeCommunication</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnectorAlgorithm.html</anchorfile>
      <anchor>ab82049f0069edad8228c368be12a6a96</anchor>
      <arglist>(bool do_barrier)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSanityCheckMethodPreconditions</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnectorAlgorithm.html</anchorfile>
      <anchor>aad57b4f76b2d56c1d5b753e2392b4502</anchor>
      <arglist>(bool do_check)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSanityCheckMethodPostconditions</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnectorAlgorithm.html</anchorfile>
      <anchor>a77fffdbd32e453eb930e1ac9452d7899</anchor>
      <arglist>(bool do_check)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSAMRAI_MPI</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnectorAlgorithm.html</anchorfile>
      <anchor>ab874866eb6288edd52152f74001e1c79</anchor>
      <arglist>(const tbox::SAMRAI_MPI &amp;mpi, bool make_duplicate=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>modify</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnectorAlgorithm.html</anchorfile>
      <anchor>af136045187cb0ae70ad13d6853545a7f</anchor>
      <arglist>(Connector &amp;anchor_to_mapped, const MappingConnector &amp;old_to_new, BoxLevel *mutable_new=0, BoxLevel *mutable_old=0) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnectorAlgorithm.html</anchorfile>
      <anchor>a7ebf08b6b559aecb837b7b4bf646cabe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimerPrefix</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MappingConnectorAlgorithm.html</anchorfile>
      <anchor>ace4e137f748db628e280064c1d60e06e</anchor>
      <arglist>(const std::string &amp;timer_prefix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::MultiblockBoxTree</name>
    <filename>classSAMRAI_1_1hier_1_1MultiblockBoxTree.html</filename>
    <member kind="function">
      <type></type>
      <name>~MultiblockBoxTree</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MultiblockBoxTree.html</anchorfile>
      <anchor>a848e1ec446975c4ef071797f14f04cf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoxContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1MultiblockBoxTree.html</anchorfile>
      <anchor>a933a65eeafeeba91e73c10528dfcfa43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::OverlapConnectorAlgorithm</name>
    <filename>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</filename>
    <base>SAMRAI::hier::BaseConnectorAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>OverlapConnectorAlgorithm</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>a5035bbebfa166de6e1601a7b6e3907f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OverlapConnectorAlgorithm</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>a50b389f621cf8086641063518662bbcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromInput</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>a96125360a070e96de0046f919ec99530</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findOverlaps</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>a3698546884e96887a1efb39a099701ed</anchor>
      <arglist>(boost::shared_ptr&lt; Connector &gt; &amp;connector, const BoxLevel &amp;base_box_level, const BoxLevel &amp;head_box_level, const IntVector &amp;base_width, const BoxLevel::ParallelState parallel_state=BoxLevel::DISTRIBUTED, const bool ignore_self_overlap=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findOverlapsWithTranspose</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>a4e31509736543b0a9ea202fcdbf99de1</anchor>
      <arglist>(boost::shared_ptr&lt; Connector &gt; &amp;connector, const BoxLevel &amp;base_box_level, const BoxLevel &amp;head_box_level, const IntVector &amp;base_width, const IntVector &amp;transpose_base_width, const BoxLevel::ParallelState parallel_state=BoxLevel::DISTRIBUTED, const bool ignore_self_overlap=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findOverlaps</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>ae332c260d625389d3d7ce6140fbcf788</anchor>
      <arglist>(Connector &amp;connector, const bool ignore_self_overlap=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findOverlaps</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>a5f56d7303025dffaef086edf0185cf4f</anchor>
      <arglist>(Connector &amp;connector, const BoxLevel &amp;globalized_head, const bool ignore_self_overlap=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findOverlaps_assumedPartition</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>a6b340a8cc4df1d6d7567b9d8da3abe87</anchor>
      <arglist>(Connector &amp;connector) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>a4b4daff38f94fab6cfe1db93e3a24494</anchor>
      <arglist>(Connector::NeighborSet &amp;neighbors, const Connector &amp;connector, const BoxId &amp;box_id, const IntVector &amp;width) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractNeighbors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>ac9a7056e8a9e7b5b9dfed57afb50a19b</anchor>
      <arglist>(Connector &amp;other, const Connector &amp;connector, const IntVector &amp;width) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bridgeWithNesting</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>a29e80a211de4749ecc033596e4fe5c37</anchor>
      <arglist>(boost::shared_ptr&lt; Connector &gt; &amp;west_to_east, const Connector &amp;west_to_center, const Connector &amp;center_to_east, const IntVector &amp;center_growth_to_nest_west, const IntVector &amp;center_growth_to_nest_east, const IntVector &amp;connector_width_limit, bool compute_transpose) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bridge</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>a74e426410da5dfd3461c4ae7b268e4da</anchor>
      <arglist>(boost::shared_ptr&lt; Connector &gt; &amp;west_to_east, const Connector &amp;west_to_center, const Connector &amp;center_to_east, const IntVector &amp;connector_width_limit, bool compute_transpose) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bridge</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>ace6a5dbe88186e63811080f3734826e4</anchor>
      <arglist>(boost::shared_ptr&lt; Connector &gt; &amp;west_to_east, const Connector &amp;west_to_center, const Connector &amp;center_to_east, bool compute_transpose) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bridge</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>a2eee26beb8ea8bbc4977f5ac1eb45768</anchor>
      <arglist>(Connector &amp;west_to_center, const Connector &amp;center_to_east, const IntVector &amp;connector_width_limit) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBarrierBeforeCommunication</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>a99bf3a60edd92ad43916c7410c9d5129</anchor>
      <arglist>(bool do_barrier)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSanityCheckMethodPreconditions</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>a29f448936a23f8dd367ce65c371466a8</anchor>
      <arglist>(bool do_check)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSanityCheckMethodPostconditions</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>a7088a2d599fd1d4c7efca3d078207e98</anchor>
      <arglist>(bool do_check)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSAMRAI_MPI</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>a2c5d518cee5fba53a393387a4110bb14</anchor>
      <arglist>(const tbox::SAMRAI_MPI &amp;mpi, bool make_duplicate=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrintSteps</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>a2642092f5b583af36c564849ad2df1f7</anchor>
      <arglist>(bool print_steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimerPrefix</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>a8d69f7abe729ec94f3e4ca647116286e</anchor>
      <arglist>(const std::string &amp;timer_prefix)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1hier_1_1OverlapConnectorAlgorithm.html</anchorfile>
      <anchor>a8bb13003c85cb2ce6fbdc30488b9a6a4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::Patch</name>
    <filename>classSAMRAI_1_1hier_1_1Patch.html</filename>
    <member kind="function">
      <type></type>
      <name>Patch</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a30d62e63bd689d0637266c9592d37a42</anchor>
      <arglist>(const Box &amp;box, const boost::shared_ptr&lt; PatchDescriptor &gt; &amp;descriptor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Patch</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>ac4b8a32925879431271fdd0cdda79170</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a329c8fdae10da2cddbce8ade496a88de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const GlobalId &amp;</type>
      <name>getGlobalId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a651a5235d7a7acd38dfb6e89f662607e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const LocalId &amp;</type>
      <name>getLocalId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a38d0c331b70e4c94197a6c676256a27b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; PatchDescriptor &gt;</type>
      <name>getPatchDescriptor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a31baf8c362aa18a20466b196c7628363</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; PatchData &gt;</type>
      <name>getPatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>af05f01c683d5b81fb173cfaa785b876c</anchor>
      <arglist>(const int id) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; PatchData &gt;</type>
      <name>getPatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a6d70d1535047cb845dcf2db6b62995e6</anchor>
      <arglist>(const boost::shared_ptr&lt; Variable &gt; &amp;variable, const boost::shared_ptr&lt; VariableContext &gt; &amp;context) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a556104b57673bc678dd055bf88e72f11</anchor>
      <arglist>(const int id, const boost::shared_ptr&lt; PatchData &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkAllocated</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a6310dd60d193ae88de069c70ff69bc1f</anchor>
      <arglist>(const int id) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSizeOfPatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>abd44945fc099a4f98e2c6bc598a90006</anchor>
      <arglist>(const int id) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSizeOfPatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a5d12bf31eb041376c555feb17058dcbd</anchor>
      <arglist>(const ComponentSelector &amp;components) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>ab3fb646373684c9b03a8367745b6dde4</anchor>
      <arglist>(const int id, const double time=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a6f7d26dd868193305dcdf7f0c8d260a8</anchor>
      <arglist>(const ComponentSelector &amp;components, const double time=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a2849a79c0e87c9b60cd0d475c73d8b01</anchor>
      <arglist>(const int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a06aba2db78c5191777fb78fefbe5c8e6</anchor>
      <arglist>(const ComponentSelector &amp;components)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a49c3d8fd56cd743993adee119c9bf1fc</anchor>
      <arglist>(const boost::shared_ptr&lt; PatchGeometry &gt; &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; PatchGeometry &gt;</type>
      <name>getPatchGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a1eb621f35fd81e04bf0e26e8ec3f33f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a4b62dc3719eee2bd44d68a01173f8f85</anchor>
      <arglist>(const double timestamp, const int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a85871573c66d85944fa3bfd266521e90</anchor>
      <arglist>(const double timestamp, const ComponentSelector &amp;components)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>afffc7dca27c1a2560fbe9c8590750dfd</anchor>
      <arglist>(const double timestamp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPatchLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a4b279751da80d57f34968dd6af22cff6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a17c78cc1b2e36196a6cb01d7e3de022f</anchor>
      <arglist>(const int level_number)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a647f9716b9e0da76115a166f10e819c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchInHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a9ccdbe11b388c81e8b112a75d6f39c56</anchor>
      <arglist>(bool in_hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a9858c1283d9994e8e512b6fd8974c841</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>aac6ae73299bf2b33effa1bedf64c3cf3</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recursivePrint</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a4da217e46a2561b7e6e0cfca080041b1</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;border=std::string(), int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a18e851a7069986f90c1f196858a934a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numPatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a836829029257b50dbc88f00147f910db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>add8238c08e840932ac6272004b60a840</anchor>
      <arglist>(std::ostream &amp;s, const Patch &amp;patch)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchBoundaries</name>
    <filename>classSAMRAI_1_1hier_1_1PatchBoundaries.html</filename>
    <member kind="function">
      <type></type>
      <name>PatchBoundaries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchBoundaries.html</anchorfile>
      <anchor>afd44b5a44c62bc49d8663b6ef0a7b40b</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PatchBoundaries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchBoundaries.html</anchorfile>
      <anchor>ac9e43c8d35872a9ae79e1f312b880192</anchor>
      <arglist>(const PatchBoundaries &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>PatchBoundaries &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchBoundaries.html</anchorfile>
      <anchor>a4e2ef867a5f061388fde5129d50af119</anchor>
      <arglist>(const PatchBoundaries &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; BoundaryBox &gt; &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchBoundaries.html</anchorfile>
      <anchor>a40e4a1323c528302c4f00d369614618d</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; BoundaryBox &gt; &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchBoundaries.html</anchorfile>
      <anchor>acba2aa8d3d4a352874b27d36ddfc8d26</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::vector&lt; BoundaryBox &gt; &gt; &amp;</type>
      <name>getVectors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchBoundaries.html</anchorfile>
      <anchor>a4302be4f0a9f01d49b6b8ce23b6262dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; BoundaryBox &gt; &gt; &amp;</type>
      <name>getVectors</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchBoundaries.html</anchorfile>
      <anchor>a1fe471b94c65be940999c89d9dc33471</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchBoundaries.html</anchorfile>
      <anchor>a0d4b9867fb1d977f81603150fd2ad900</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchData</name>
    <filename>classSAMRAI_1_1hier_1_1PatchData.html</filename>
    <member kind="function">
      <type></type>
      <name>PatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a4aa15158b0ac91fc75a06ce9ebd5314e</anchor>
      <arglist>(const Box &amp;domain, const IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>ab961b008cc73f271e987ce35bcfeca03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a93209bcc3efdf9087c1aff3ca3d956d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Box &amp;</type>
      <name>getGhostBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>aa6caf497b888235784c803aee856f7a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>getGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a77734e31c58cf2ecf44a54d809e5eb49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a9ff0be6da5b1e3f667daed8ba15b8dcb</anchor>
      <arglist>(const double timestamp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTime</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a15a251c870bff619a84ff01398b6348b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>ae11daa48e2aedf80b7c44bb838cdf9f2</anchor>
      <arglist>(const PatchData &amp;src)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a34a0b358ae9349e2bef0a8e3bf6b4278</anchor>
      <arglist>(PatchData &amp;dst) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a9db2a42da4a464f29d9e69c271bb7cd2</anchor>
      <arglist>(const PatchData &amp;src, const BoxOverlap &amp;overlap)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a828b790d3f3c553535b4502452ba2eba</anchor>
      <arglist>(PatchData &amp;dst, const BoxOverlap &amp;overlap) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a6a8a6bea3564c490bac76fa7989e1d6a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a53047fb5af2549e50c5a717beeb0caa7</anchor>
      <arglist>(const BoxOverlap &amp;overlap) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a9b73721b1f1f580e99626de07f91d950</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const BoxOverlap &amp;overlap) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>ada56faab0c403e0c8b2e95ad28515a00</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const BoxOverlap &amp;overlap)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a78b67dc5c322c4def87ae730b4092696</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a46f69705aaa6831bf10978dd2973f375</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a4b2528593ae5bf177579d4d11afac2e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setGhostBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>ad3009fb7dbc160526728a4a387e0de62</anchor>
      <arglist>(const Box &amp;ghost_box)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchDataFactory</name>
    <filename>classSAMRAI_1_1hier_1_1PatchDataFactory.html</filename>
    <member kind="function">
      <type></type>
      <name>PatchDataFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>a539ee0750eaa077175ed467cab412716</anchor>
      <arglist>(const IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchDataFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>a5e8c4b7ff3326e93c48d6df6ad543c11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; PatchDataFactory &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>a24334a733219559cfd8c2fe1191e4b0c</anchor>
      <arglist>(const IntVector &amp;ghosts)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; PatchData &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>a4b554c5f714493c9cb3e0786a9a8cc2c</anchor>
      <arglist>(const Patch &amp;patch) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; BoxGeometry &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>aed41a849221d09982c3a874f8f734620</anchor>
      <arglist>(const Box &amp;box) const =0</arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>getGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>ab45f9196a952044c24ececeb1a0c71ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>a3fa8a830e87cf72c2f16238fd528632f</anchor>
      <arglist>(const Box &amp;box) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>aee151da4304c49ef6d719325c4ee9142</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>a20b20d411c3d41a3450d1d76c01d132e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>a4f37e2cb46288741f7b1386cafb5eab0</anchor>
      <arglist>(const boost::shared_ptr&lt; PatchDataFactory &gt; &amp;dst_pdf) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual MultiblockDataTranslator *</type>
      <name>getMultiblockDataTranslator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>aeeb39a1a0920c9ccb90b4605afdf600f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>a218d9afe4e8acf752849f2f4c4e6fa02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntVector</type>
      <name>d_ghosts</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>ad046f92e419a0f63d8410ed6c5614eb2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchDataRestartManager</name>
    <filename>classSAMRAI_1_1hier_1_1PatchDataRestartManager.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isPatchDataRegisteredForRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataRestartManager.html</anchorfile>
      <anchor>a316b30f54227d0a093d0e83dbffa1c96</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerPatchDataForRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataRestartManager.html</anchorfile>
      <anchor>add70ff48bfad02bad9cf943f3c57210a</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterPatchDataForRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataRestartManager.html</anchorfile>
      <anchor>a81a7c0a717b5700e85407c18c926f831</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>registeredPatchDataMatches</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataRestartManager.html</anchorfile>
      <anchor>a9409ad20580f5a1a2400724761b1d8ee</anchor>
      <arglist>(const ComponentSelector &amp;selected)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PatchDataRestartManager *</type>
      <name>getManager</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataRestartManager.html</anchorfile>
      <anchor>abef4a5ad54b4ed7a0f38dab8a54ab42f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchDescriptor</name>
    <filename>classSAMRAI_1_1hier_1_1PatchDescriptor.html</filename>
    <member kind="function">
      <type></type>
      <name>PatchDescriptor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>abd4b0f7c706f401e9c9ad626b4cb4f80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PatchDescriptor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>af490ede82c72a22b4c54a104f6adc0cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>definePatchDataComponent</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>a607b171be6fbefdfeea0260b6a51eb02</anchor>
      <arglist>(const std::string &amp;name, const boost::shared_ptr&lt; PatchDataFactory &gt; &amp;factory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePatchDataComponent</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>ad22dc0ace921239115b9174053aa445b</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; PatchDataFactory &gt;</type>
      <name>getPatchDataFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>a01fa3d8796a13b541dfa5e394e6dab95</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; PatchDataFactory &gt;</type>
      <name>getPatchDataFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>aed13e4e2fd184c23ce58a2ed755e4a88</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxNumberRegisteredComponents</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>a9e7d88a4aa81c1c7b0ddeee8306ab83e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mapNameToIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>a49ed31c9711ca037f89496fe4aa7d433</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>mapIndexToName</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>a8da9c52580c79aee24ae633afbcc2001</anchor>
      <arglist>(const int id) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector</type>
      <name>getMaxGhostWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>a345abba45fe959f1c4e65bb22b25e52c</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinGhostWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>a8e8fd38183275ef2aae477391338af80</anchor>
      <arglist>(const IntVector &amp;min_value)</arglist>
    </member>
    <member kind="function">
      <type>tbox::Dimension</type>
      <name>getPatchDataDim</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>a3bb38c6916012ab9a7f7e9d54c0b3117</anchor>
      <arglist>(int data_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>a0c0ebe0aa8894936b466eaba0cd89575</anchor>
      <arglist>(std::ostream &amp;stream=tbox::plog) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchFactory</name>
    <filename>classSAMRAI_1_1hier_1_1PatchFactory.html</filename>
    <member kind="function">
      <type></type>
      <name>PatchFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchFactory.html</anchorfile>
      <anchor>acac5edd26ae2ea85767b871a2a932abe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchFactory.html</anchorfile>
      <anchor>aa5939f49b0b449c201d456c9045286de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Patch &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchFactory.html</anchorfile>
      <anchor>a3c607e66c1f6bf7d609f4334f52d351e</anchor>
      <arglist>(const Box &amp;box_level_box, const boost::shared_ptr&lt; PatchDescriptor &gt; &amp;descriptor) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchGeometry</name>
    <filename>classSAMRAI_1_1hier_1_1PatchGeometry.html</filename>
    <class kind="class">SAMRAI::hier::PatchGeometry::TwoDimBool</class>
    <member kind="function">
      <type></type>
      <name>PatchGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>aca7cbef6bb1f112d312f1af5f26f5549</anchor>
      <arglist>(const IntVector &amp;ratio_to_level_zero, const TwoDimBool &amp;touches_regular_bdry, const BlockId &amp;block_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>aee40d589e791a9336e4956fd19aa6bb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; BoundaryBox &gt; &gt; &amp;</type>
      <name>getPatchBoundaries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>aa4d11ac6ce12a33d8a56a927e55ebfc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaryBoxesOnPatch</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>aa60d5976bfec8cf60c6acf57df8c785a</anchor>
      <arglist>(const std::vector&lt; std::vector&lt; BoundaryBox &gt; &gt; &amp;bdry)</arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>getRatio</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a33f7eba227955cd15f6c9dea44ec11a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectsPhysicalBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a2bb3736a4c23013367681dcd00cd8b44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; BoundaryBox &gt; &amp;</type>
      <name>getNodeBoundaries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a47b71e65866b58b8432e463deb99cb81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; BoundaryBox &gt; &amp;</type>
      <name>getEdgeBoundaries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a75dae082993cac07437cf09aa141d582</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; BoundaryBox &gt; &amp;</type>
      <name>getFaceBoundaries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>abeface9390bf64f5e011471cf2f90ee9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; BoundaryBox &gt; &amp;</type>
      <name>getCodimensionBoundaries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>acfd5128a1b1783481269ef25033c8cc5</anchor>
      <arglist>(const int codim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCodimensionBoundaries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>acb245fad57101d59972479f05301d8df</anchor>
      <arglist>(const std::vector&lt; BoundaryBox &gt; &amp;bdry_boxes, const int codim)</arglist>
    </member>
    <member kind="function">
      <type>Box</type>
      <name>getBoundaryFillBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a5369be58f768ce83baf376251414f6d0</anchor>
      <arglist>(const BoundaryBox &amp;bbox, const Box &amp;patch_box, const IntVector &amp;gcw) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTouchesRegularBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a2b263cb5c2e209f140347b974df7dc6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTouchesPeriodicBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a954fdb8887d080a32869dfcd6548ff53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTouchesRegularBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>aff8ea43681a9bd6c53fd0a73bc95935b</anchor>
      <arglist>(int axis, int upperlower) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a4dd7671af58b920b3744218f8c416dc9</anchor>
      <arglist>(std::ostream &amp;stream) const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a95faf99187865e1284c50dc8dbd5a7ea</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchGeometry::TwoDimBool</name>
    <filename>classSAMRAI_1_1hier_1_1PatchGeometry_1_1TwoDimBool.html</filename>
    <member kind="function">
      <type></type>
      <name>TwoDimBool</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry_1_1TwoDimBool.html</anchorfile>
      <anchor>ab06f235e775b191dc2b90808c2d2be99</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TwoDimBool</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry_1_1TwoDimBool.html</anchorfile>
      <anchor>a3d237c4b5aa231a198bdfa5d2d3627ef</anchor>
      <arglist>(const tbox::Dimension &amp;dim, bool v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAll</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry_1_1TwoDimBool.html</anchorfile>
      <anchor>a85292938e2413da7145a69fc9c90ff13</anchor>
      <arglist>(bool v)</arglist>
    </member>
    <member kind="function">
      <type>bool &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry_1_1TwoDimBool.html</anchorfile>
      <anchor>ac934339a1b927cd572c53366e24f4f3b</anchor>
      <arglist>(int dim, int side)</arglist>
    </member>
    <member kind="function">
      <type>const bool &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry_1_1TwoDimBool.html</anchorfile>
      <anchor>aa2d845ba0a446a689ec63d7ef458cb19</anchor>
      <arglist>(int dim, int side) const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry_1_1TwoDimBool.html</anchorfile>
      <anchor>aa12aad249d7c3c90c787b2a5e2c768f3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchHierarchy</name>
    <filename>classSAMRAI_1_1hier_1_1PatchHierarchy.html</filename>
    <base>SAMRAI::tbox::Serializable</base>
    <class kind="class">SAMRAI::hier::PatchHierarchy::ConnectorWidthRequestorStrategy</class>
    <member kind="function">
      <type></type>
      <name>PatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a680cce6e2f535222aeb1547290bc98cf</anchor>
      <arglist>(const std::string &amp;object_name, const boost::shared_ptr&lt; BaseGridGeometry &gt; &amp;geometry, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db=boost::shared_ptr&lt; tbox::Database &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a27ec44e902d27364987a86c1b6d6a5ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; PatchHierarchy &gt;</type>
      <name>makeRefinedPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>aefb8835ee9dd0d2258babd0b28010ac5</anchor>
      <arglist>(const std::string &amp;fine_hierarchy_name, const IntVector &amp;refine_ratio) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; PatchHierarchy &gt;</type>
      <name>makeCoarsenedPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a1fd8481481dd59c84647d15b9a016b57</anchor>
      <arglist>(const std::string &amp;coarse_hierarchy_name, const IntVector &amp;coarsen_ratio) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>makeNewPatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a5a520a044dcaacd2c312cef5a8536c83</anchor>
      <arglist>(const int level_number, const BoxLevel &amp;new_box_level)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>makeNewPatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a38d647039f310b23534fa875c81b13b0</anchor>
      <arglist>(const int level_number, const boost::shared_ptr&lt; BoxLevel &gt; new_box_level)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removePatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>ab6516f43f72ba37d77a81efc62239edf</anchor>
      <arglist>(const int level)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; PatchLevel &gt;</type>
      <name>getPatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>aea43670fac0f0635f169614442cf99f0</anchor>
      <arglist>(const int level) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; PatchDescriptor &gt;</type>
      <name>getPatchDescriptor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a2ca05e5ae9748ca35976d5b74d13ccb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>levelExists</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>ab0ce02bf675cbfc31a90ba7b9d816860</anchor>
      <arglist>(const int level) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>finerLevelExists</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a67ea751cab95861b3e42c1980952d413</anchor>
      <arglist>(const int level) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfLevels</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a02b4cab2de98f95da4ad856f83f5dcc7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFinestLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>acb22b97091d5bc6c5c84cd5a9b59329d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumberBlocks</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>af9aa2ca00161068afcf5b87ff14dbc29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>levelCanBeRefined</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a6e06aec8398e991707edba36ccd8181c</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; BoxLevel &gt; &amp;</type>
      <name>getBoxLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a8bbf7b6f757433dbff8dbcb2b49f19be</anchor>
      <arglist>(const int level) const </arglist>
    </member>
    <member kind="function">
      <type>const BoxLevel &amp;</type>
      <name>getDomainBoxLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a43642b21b906419dbde0d69d1585d63d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::SAMRAI_MPI &amp;</type>
      <name>getMPI</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>acce6992de5cdad05cd49dd1423cc4e73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>aa73315731b0e711e4f70b1799d7f8b1e</anchor>
      <arglist>(const boost::shared_ptr&lt; PatchFactory &gt; &amp;factory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchLevelFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>ab16d819c38f0370b28304e71a528ad68</anchor>
      <arglist>(const boost::shared_ptr&lt; PatchLevelFactory &gt; &amp;factory)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BaseGridGeometry &gt;</type>
      <name>getGridGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a3486b34cdc69f143734eba95ea64e51c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logMetadataStatistics</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>afa2d18224e3675aec23a7193e4302f32</anchor>
      <arglist>(const char *note, int ln, int cycle, double level_time, bool log_fine_connector, bool log_coarse_connector) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a14f01d6036ca0e86e072e5c15f305272</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a77437768e81ab35956e5e1c6e9dbc94f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a68c6127dd45b86a1d74c7ca0da23867d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recursivePrint</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a925812d58056958a2f83f9f4196679d3</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;border=std::string(), int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a22724e00331cd7c31fc8da964fbd3c6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UncoveredBoxIterator</type>
      <name>beginUncovered</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a81c2122017dd42c4894547a33aecf168</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UncoveredBoxIterator</type>
      <name>endUncovered</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a199b5d88c5a5b2644cff776f96397d6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNumberOfLevels</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>af9ff252f4477f4305478218c8eff9635</anchor>
      <arglist>(int max_levels)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxNumberOfLevels</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a0fe841aaeaa9d21e8e9bddf38542a381</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRatioToCoarserLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>ac4d9706076407019169f67fe84219640</anchor>
      <arglist>(const IntVector &amp;ratio, int level)</arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>getRatioToCoarserLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>aa63bf925e9af6327001befc4d9c877b1</anchor>
      <arglist>(int level) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSmallestPatchSize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>ae4fbe090d84d570f728b65af572dc0f1</anchor>
      <arglist>(const IntVector &amp;size, int level)</arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>getSmallestPatchSize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a445875318f9b0772998f901de897a6e0</anchor>
      <arglist>(int level) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLargestPatchSize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a94a628920731ccdbf51344c6cea2b3f4</anchor>
      <arglist>(const IntVector &amp;size, int level)</arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>getLargestPatchSize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a4f77810a64584e9a2f286af6191074e4</anchor>
      <arglist>(int level) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getProperNestingBuffer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a84abf1421e9913d13d78dadafc8cc823</anchor>
      <arglist>(int ln) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allowPatchesSmallerThanGhostWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a5bb42f5d353f87a5dc089bd87dd93acf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allowPatchesSmallerThanMinimumSize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a5dd7936f5362e4c126c7cb57a9ef98c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerConnectorWidthRequestor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a3685131ffdf41ca44cc4a3c26bb7856b</anchor>
      <arglist>(const ConnectorWidthRequestorStrategy &amp;cwrs)</arglist>
    </member>
    <member kind="function">
      <type>IntVector</type>
      <name>getRequiredConnectorWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a9bf844ebbd58ba89a54dd308c5d5485a</anchor>
      <arglist>(int base_ln, int head_ln, bool commit=false) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerAutoConnectorWidthRequestorStrategy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a51de1f1dadbd7be42be216db3d99feb2</anchor>
      <arglist>(const ConnectorWidthRequestorStrategy &amp;cwrs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchHierarchy::ConnectorWidthRequestorStrategy</name>
    <filename>classSAMRAI_1_1hier_1_1PatchHierarchy_1_1ConnectorWidthRequestorStrategy.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectorWidthRequestorStrategy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy_1_1ConnectorWidthRequestorStrategy.html</anchorfile>
      <anchor>a4003a5a712b4507f33394cdf7aa91721</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeRequiredConnectorWidths</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy_1_1ConnectorWidthRequestorStrategy.html</anchorfile>
      <anchor>ad3c4f3a9a289dd3c13652c479b9000b6</anchor>
      <arglist>(std::vector&lt; IntVector &gt; &amp;self_connector_widths, std::vector&lt; IntVector &gt; &amp;fine_connector_widths, const PatchHierarchy &amp;patch_hierarchy) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchLevel</name>
    <filename>classSAMRAI_1_1hier_1_1PatchLevel.html</filename>
    <class kind="class">SAMRAI::hier::PatchLevel::Iterator</class>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>af828d5b9bac89dcb085810dce3f7058a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>ad0348ef26e985a1b3d4cf9ca290d1088</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a03f5a47850ff9e8e98083e66d272027d</anchor>
      <arglist>(const BoxLevel &amp;box_level, const boost::shared_ptr&lt; BaseGridGeometry &gt; &amp;grid_geometry, const boost::shared_ptr&lt; PatchDescriptor &gt; &amp;descriptor, const boost::shared_ptr&lt; PatchFactory &gt; &amp;factory=boost::shared_ptr&lt; PatchFactory &gt;(), bool defer_boundary_box_creation=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a645bd16af8f4dab30a69171684d4959d</anchor>
      <arglist>(const boost::shared_ptr&lt; BoxLevel &gt; box_level, const boost::shared_ptr&lt; BaseGridGeometry &gt; &amp;grid_geometry, const boost::shared_ptr&lt; PatchDescriptor &gt; &amp;descriptor, const boost::shared_ptr&lt; PatchFactory &gt; &amp;factory=boost::shared_ptr&lt; PatchFactory &gt;(), bool defer_boundary_box_creation=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a17b6e7d8bd12d92ccd54e52fd5a6dd11</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_database, const boost::shared_ptr&lt; BaseGridGeometry &gt; &amp;grid_geometry, const boost::shared_ptr&lt; PatchDescriptor &gt; &amp;descriptor, const boost::shared_ptr&lt; PatchFactory &gt; &amp;factory, bool defer_boundary_box_creation=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a1f3db6588e7601e9b782849a5687169f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a4cd9f72c99b60b30eec450d6a27c775c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>abe688ee51c4631e570d6dbd8fb8fa39c</anchor>
      <arglist>(const int level)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNextCoarserHierarchyLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a4508cf92e29690e69ba342d65c7cc8b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextCoarserHierarchyLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>ae7c77a13ee2f6c3a59ed193f9bfb8355</anchor>
      <arglist>(const int level)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a3dad6e7d3597bd8a1a58b429a2744ebe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLevelInHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a7a0a56aa5397fac4b4a969e3ff020b57</anchor>
      <arglist>(bool in_hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfPatches</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a68c2aab7673c3744d575e0e23fed2a74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalNumberOfPatches</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>ae2e144d8ae4981998d0ab47c364f4455</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalNumberOfPatches</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a845b5c07f0701c919b2e0199fed04f23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalNumberOfCells</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a38319b1d0c112404936373b5d2ab21c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>long int</type>
      <name>getGlobalNumberOfCells</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>aae0a6460ae9180e821be6f18c77e9a63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; Patch &gt; &amp;</type>
      <name>getPatch</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a8b2d391d5594c482443ae3e36f89bee6</anchor>
      <arglist>(const GlobalId &amp;gid) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; Patch &gt;</type>
      <name>getPatch</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>abacfebe0f2f71f22af34c34261a9bcd7</anchor>
      <arglist>(const BoxId &amp;mbid) const </arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; Patch &gt; &amp;</type>
      <name>getPatch</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>aab51b806877bad51c1c117007714bac6</anchor>
      <arglist>(size_t index) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; PatchDescriptor &gt;</type>
      <name>getPatchDescriptor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>af177be7d0a488a58cdf5e9daec8fd01d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; PatchFactory &gt;</type>
      <name>getPatchFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a658c4e15140330e996a60ba8427bce0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BaseGridGeometry &gt;</type>
      <name>getGridGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a6c03c7a23cdc7eecd625e22c9c2b198f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefinedPatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>af04a41566ca6be8c70d04a892925e579</anchor>
      <arglist>(const boost::shared_ptr&lt; PatchLevel &gt; &amp;coarse_level, const IntVector &amp;refine_ratio, const boost::shared_ptr&lt; BaseGridGeometry &gt; &amp;fine_grid_geometry=boost::shared_ptr&lt; BaseGridGeometry &gt;(), bool defer_boundary_box_creation=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarsenedPatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a582ce91c35345b72ec4ee4fabef6c8aa</anchor>
      <arglist>(const boost::shared_ptr&lt; PatchLevel &gt; &amp;fine_level, const IntVector &amp;coarsen_ratio, const boost::shared_ptr&lt; BaseGridGeometry &gt; &amp;coarse_grid_geom=boost::shared_ptr&lt; BaseGridGeometry &gt;(), bool defer_boundary_box_creation=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaryBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>af480f2ad7c577a0b85b662e50ec2474a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; BoxContainer &gt; &amp;</type>
      <name>getPhysicalDomainArray</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>ab2c06a41ad6751bc65197ef1c7bfcf37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BoxContainer &amp;</type>
      <name>getPhysicalDomain</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a7e9b1ac5feea148093f27a04c1e94935</anchor>
      <arglist>(const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>const BoxContainer &amp;</type>
      <name>getBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>ad425bff9332a3eb2bbfb7509ccf13dc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>af9ed3d8c743eaac3c17694321e047321</anchor>
      <arglist>(BoxContainer &amp;boxes, const BlockId &amp;block_id) const </arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; BoxLevel &gt; &amp;</type>
      <name>getBoxLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>afce9d462f6678310b805c48d07bcbdc7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BoxLevel &amp;</type>
      <name>getGlobalizedBoxLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a954b07a293e4a4f03fc0f41cc771f0dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ProcessorMapping &amp;</type>
      <name>getProcessorMapping</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a4e358b4dc4e33d55370748a729d1b446</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>getRatioToLevelZero</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a87e56e17e269f0cf2aff1d1834cade5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>getRatioToCoarserLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>ab66986aa787a90d71b604e29b21a6929</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRatioToCoarserLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a7dc303a5d88792ca326d84f2f6396ee9</anchor>
      <arglist>(const IntVector &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMappingForPatch</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>aaffae0e83be68f26e517cd90473b450b</anchor>
      <arglist>(const BoxId &amp;box_id) const </arglist>
    </member>
    <member kind="function">
      <type>const Box &amp;</type>
      <name>getBoxForPatch</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a965b0954aeda930aa5ecfe2e37817b40</anchor>
      <arglist>(const BoxId &amp;box_id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>patchTouchesRegularBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>ac37ca269a9bbef3cb0a2270ac524a9bf</anchor>
      <arglist>(const BoxId &amp;box_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a2a9dcc974e64ea1b6a02fc941b1844a8</anchor>
      <arglist>(const int id, const double timestamp=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>abceb8ae55b8eba81ed2a49defab7e01d</anchor>
      <arglist>(const ComponentSelector &amp;components, const double timestamp=0.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkAllocated</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a42f9cfddcce5f0d51e96b69c5bf90612</anchor>
      <arglist>(const int id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>aee31d7a77e6e2a6bee5d50609634c7f6</anchor>
      <arglist>(const int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>ab53cc7f611afd9f63b1b388e0fd4a649</anchor>
      <arglist>(const ComponentSelector &amp;components)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a5200d3b0e8dcd338f04ff2004d35aaaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a42e02ac07576c719462f81e0687631c3</anchor>
      <arglist>(const double timestamp, const int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>aa3fadbe94d3dcc0a38ff45b8ec41f445</anchor>
      <arglist>(const double timestamp, const ComponentSelector &amp;components)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a1cd7fb8d26f13d4c0a4531068fc6715a</anchor>
      <arglist>(const double timestamp)</arglist>
    </member>
    <member kind="function">
      <type>const Connector &amp;</type>
      <name>findConnector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>adc852855af410b62298de463e6983b18</anchor>
      <arglist>(const PatchLevel &amp;head, const IntVector &amp;min_connector_width, ConnectorNotFoundAction not_found_action, bool exact_width_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>const Connector &amp;</type>
      <name>findConnectorWithTranspose</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>ab27090649ee50d22723b11bebb81c05d</anchor>
      <arglist>(const PatchLevel &amp;head, const IntVector &amp;min_connector_width, const IntVector &amp;transpose_min_connector_width, ConnectorNotFoundAction not_found_action, bool exact_width_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>const Connector &amp;</type>
      <name>createConnector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>ad32ba4dc0e16606b0eff46c26cd1392a</anchor>
      <arglist>(const PatchLevel &amp;head, const IntVector &amp;connector_width) const </arglist>
    </member>
    <member kind="function">
      <type>const Connector &amp;</type>
      <name>createConnectorWithTranspose</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a423b7c4697fa29904aa568bbb3c44db5</anchor>
      <arglist>(const PatchLevel &amp;head, const IntVector &amp;connector_width, const IntVector &amp;transpose_connector_width) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cacheConnector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a0f84183007b29d36126528442322f03d</anchor>
      <arglist>(boost::shared_ptr&lt; Connector &gt; &amp;connector) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasConnector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a82d6df71ac2b7e91dfb2370434c4d223</anchor>
      <arglist>(const PatchLevel &amp;head, const IntVector &amp;min_connector_width) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a68287c9d62a1e476f85886158f5b5d50</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>ac1f34ef1c056d700da367e93e889aad6</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recursivePrint</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a86c4085b7da79b75270b6d203bf829f6</anchor>
      <arglist>(std::ostream &amp;os, const std::string &amp;border=std::string(), int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a3e97dc6dbed720c9971eac2c88ff990c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a4618ce8de633284c16d6260378111ce9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchLevel::Iterator</name>
    <filename>classSAMRAI_1_1hier_1_1PatchLevel_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel_1_1Iterator.html</anchorfile>
      <anchor>a6e153cbebab31e29f260f01047466595</anchor>
      <arglist>(const Iterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel_1_1Iterator.html</anchorfile>
      <anchor>a2ea4a58affd777c4dceafaf633d7b964</anchor>
      <arglist>(const Iterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; Patch &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel_1_1Iterator.html</anchorfile>
      <anchor>abe01300dc0663b7b317b234c73e005ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; Patch &gt; &amp;</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel_1_1Iterator.html</anchorfile>
      <anchor>acdd5ca4af5b5b3a80b2d9891bebc82bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel_1_1Iterator.html</anchorfile>
      <anchor>ae63726f8e12dcd64b69f1b93ecd1e88b</anchor>
      <arglist>(const Iterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel_1_1Iterator.html</anchorfile>
      <anchor>ac456068732cc8fc908cd0edb45e923c7</anchor>
      <arglist>(const Iterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel_1_1Iterator.html</anchorfile>
      <anchor>a58335efe0233fdb5faaad4ad1750572d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel_1_1Iterator.html</anchorfile>
      <anchor>a60bd13b0aa4e2c55af22dcb95d30b7ed</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel_1_1Iterator.html</anchorfile>
      <anchor>a0ae2767cebe8de63435a691d57ad9ca6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchLevelFactory</name>
    <filename>classSAMRAI_1_1hier_1_1PatchLevelFactory.html</filename>
    <member kind="function">
      <type></type>
      <name>PatchLevelFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelFactory.html</anchorfile>
      <anchor>aff4e2e8d847a782e9a1312b7bc620a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchLevelFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelFactory.html</anchorfile>
      <anchor>a060a3cd09375d42af322f16ccb45c01c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; PatchLevel &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelFactory.html</anchorfile>
      <anchor>a56d8f66467c49c709f4969e5b81c9104</anchor>
      <arglist>(const BoxLevel &amp;box_level, const boost::shared_ptr&lt; BaseGridGeometry &gt; &amp;grid_geometry, const boost::shared_ptr&lt; PatchDescriptor &gt; &amp;descriptor, const boost::shared_ptr&lt; PatchFactory &gt; &amp;factory=boost::shared_ptr&lt; PatchFactory &gt;()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; PatchLevel &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelFactory.html</anchorfile>
      <anchor>a1ea51492be1f73c2fa552004d553c772</anchor>
      <arglist>(const boost::shared_ptr&lt; BoxLevel &gt; box_level, const boost::shared_ptr&lt; BaseGridGeometry &gt; &amp;grid_geometry, const boost::shared_ptr&lt; PatchDescriptor &gt; &amp;descriptor, const boost::shared_ptr&lt; PatchFactory &gt; &amp;factory=boost::shared_ptr&lt; PatchFactory &gt;()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; PatchLevel &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelFactory.html</anchorfile>
      <anchor>a7c1502cd5647cf0b22edb881cf372fca</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;database, const boost::shared_ptr&lt; BaseGridGeometry &gt; &amp;grid_geometry, const boost::shared_ptr&lt; PatchDescriptor &gt; &amp;descriptor, const boost::shared_ptr&lt; PatchFactory &gt; &amp;factory=boost::shared_ptr&lt; PatchFactory &gt;(), const bool defer_boundary_box_creation=false) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PeriodicId</name>
    <filename>classSAMRAI_1_1hier_1_1PeriodicId.html</filename>
    <member kind="function">
      <type></type>
      <name>PeriodicId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicId.html</anchorfile>
      <anchor>a54ab22983d6d57e2804ca7a381b4b3f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeriodicId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicId.html</anchorfile>
      <anchor>a36e4f11f3118b7b1fbd5e2ce39c8992f</anchor>
      <arglist>(const PeriodicId &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeriodicId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicId.html</anchorfile>
      <anchor>aa70c0f302c974d95c30529f19f383338</anchor>
      <arglist>(const int &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PeriodicId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicId.html</anchorfile>
      <anchor>ad3db5699fc1547644940c510554125df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PeriodicId &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicId.html</anchorfile>
      <anchor>a28e4649ecaee6444870c4d47c69985e4</anchor>
      <arglist>(const PeriodicId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PeriodicId &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicId.html</anchorfile>
      <anchor>a97fcba4d91dbb269ae15dcf8ce5e89a9</anchor>
      <arglist>(const int &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>getPeriodicValue</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicId.html</anchorfile>
      <anchor>ab7a66355c7a95d140f83bdf9cb003163</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicId.html</anchorfile>
      <anchor>a422fc34c69880c728d761ede62bc7545</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicId.html</anchorfile>
      <anchor>a34a47e32ae744e97d5f619d22c9d5c57</anchor>
      <arglist>(const PeriodicId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicId.html</anchorfile>
      <anchor>ab6e1a291ce3242fba187f4c95270c3fc</anchor>
      <arglist>(const PeriodicId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicId.html</anchorfile>
      <anchor>a6e4049068d7b5f9c7066346bdf19f61a</anchor>
      <arglist>(const PeriodicId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicId.html</anchorfile>
      <anchor>a3388c4a33d450432cebfbd7933c65efc</anchor>
      <arglist>(const PeriodicId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicId.html</anchorfile>
      <anchor>a5e5013c40e5192c1fdbc3ce9b7349da0</anchor>
      <arglist>(const PeriodicId &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicId.html</anchorfile>
      <anchor>abfa64a65fe3b580c5e7a7649d05b5f90</anchor>
      <arglist>(const PeriodicId &amp;rhs) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const PeriodicId &amp;</type>
      <name>zero</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicId.html</anchorfile>
      <anchor>a6fcea58a544ddfb1d6c1e67579135489</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const PeriodicId &amp;</type>
      <name>invalidId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicId.html</anchorfile>
      <anchor>a1f03b38dccfba6856db7b37762b4529b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicId.html</anchorfile>
      <anchor>a7807e0bdfcdc6dcccd0d44d15c672c89</anchor>
      <arglist>(std::ostream &amp;co, const PeriodicId &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PeriodicShiftCatalog</name>
    <filename>classSAMRAI_1_1hier_1_1PeriodicShiftCatalog.html</filename>
    <member kind="function">
      <type></type>
      <name>PeriodicShiftCatalog</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicShiftCatalog.html</anchorfile>
      <anchor>a6e0df4042b74e67caca3c40684a52799</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PeriodicShiftCatalog</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicShiftCatalog.html</anchorfile>
      <anchor>a3d2749e83d96966de7206b53374826cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>shiftNumberToShiftDistance</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicShiftCatalog.html</anchorfile>
      <anchor>a1596012b34b5a5b3c556f8409de2c3fa</anchor>
      <arglist>(const PeriodicId &amp;shift_number) const </arglist>
    </member>
    <member kind="function">
      <type>PeriodicId</type>
      <name>shiftDistanceToShiftNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicShiftCatalog.html</anchorfile>
      <anchor>aa6faec011413c025147b3a65b0ba7807</anchor>
      <arglist>(const IntVector &amp;shift_distance) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInvalidShiftNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicShiftCatalog.html</anchorfile>
      <anchor>ab05f9a9d578914b4e911f437b620785c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PeriodicId &amp;</type>
      <name>getOppositeShiftNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicShiftCatalog.html</anchorfile>
      <anchor>a384d4ab1a4e01df8944f854563fda752</anchor>
      <arglist>(const PeriodicId &amp;shift_number) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPeriodic</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicShiftCatalog.html</anchorfile>
      <anchor>a8b0434b0778d645fd52ea29226f0c859</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfShifts</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicShiftCatalog.html</anchorfile>
      <anchor>ae893471acf3f1f380f80c96f1f4b6a85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PeriodicId &amp;</type>
      <name>getZeroShiftNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicShiftCatalog.html</anchorfile>
      <anchor>a574d3b67d81d6e6b2b6e0a2ac453d808</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeShiftsByIndexDirections</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PeriodicShiftCatalog.html</anchorfile>
      <anchor>abeb7af47546120c5b3053fbaeffd62bf</anchor>
      <arglist>(const IntVector &amp;shift_distance_along_index_directions)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PersistentOverlapConnectors</name>
    <filename>classSAMRAI_1_1hier_1_1PersistentOverlapConnectors.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setCreateEmptyNeighborContainers</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PersistentOverlapConnectors.html</anchorfile>
      <anchor>ad328af9c8d1480ca6aed2dca8c52bf3d</anchor>
      <arglist>(bool create_empty_neighbor_containers)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoxLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PersistentOverlapConnectors.html</anchorfile>
      <anchor>ade5148e6656171aa69a94e41b1dff87f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::ProcessorMapping</name>
    <filename>classSAMRAI_1_1hier_1_1ProcessorMapping.html</filename>
    <member kind="function">
      <type></type>
      <name>ProcessorMapping</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>ad3cdc665d003fa13a1774d032b871bf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProcessorMapping</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a002826deb8cd3a3ccba52baa5c179a5c</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProcessorMapping</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a6ea1196eeab517860bd6f565948f65a9</anchor>
      <arglist>(const ProcessorMapping &amp;mapping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProcessorMapping</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a65c156ea31019baad65f04265668fc03</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;mapping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ProcessorMapping</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a3c3f4b155f51aecabe44cf93c75a6edb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMappingSize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>ad4c39d86a041f5ebd3f7cbc892d875f9</anchor>
      <arglist>(const size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberNodes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a8ca56ffa014904bd29660754548cee86</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getProcessorAssignment</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a2e9c9112d6b63f1eba59ada2864c120b</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProcessorAssignment</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a252884616c15fe8c57db6a38db7f048b</anchor>
      <arglist>(const int i, const int p)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>getProcessorMapping</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a8eec4fdee40bef794d749d9a77c07a80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProcessorMapping</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>aacbae77ec4a724a6c5cdcf2f6612b947</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;mapping)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfLocalIndices</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a618031a3a3ac77988b59ba654c2ffd82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; int &gt; &amp;</type>
      <name>getLocalIndices</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>ae70f73af5fa31420ed8c259cf8dccf2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSizeOfMappingArray</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a588c1b6da70ec3067ec185fee9b2808a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMappingLocal</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>aadfeae6bef094f675cd5c50e8addf274</anchor>
      <arglist>(const int i) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::RealBoxConstIterator</name>
    <filename>classSAMRAI_1_1hier_1_1RealBoxConstIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>~RealBoxConstIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1RealBoxConstIterator.html</anchorfile>
      <anchor>a580a16e16da9d8efac90e7b37a6d723b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealBoxConstIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1RealBoxConstIterator.html</anchorfile>
      <anchor>a7a113b53f2849876048eacc655dc38e0</anchor>
      <arglist>(const RealBoxConstIterator &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>const Box &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1RealBoxConstIterator.html</anchorfile>
      <anchor>a6d86cc7271f08f82ad95de647a159689</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Box *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1RealBoxConstIterator.html</anchorfile>
      <anchor>ab0f6e7bdbd5ec4769e13e94f6d2cd302</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1RealBoxConstIterator.html</anchorfile>
      <anchor>a2a24b195da8baffd10cf725c37104c23</anchor>
      <arglist>(const RealBoxConstIterator &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1RealBoxConstIterator.html</anchorfile>
      <anchor>a8f416c32e71cfaf005d0d9733ba5bb1a</anchor>
      <arglist>(const RealBoxConstIterator &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>RealBoxConstIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1RealBoxConstIterator.html</anchorfile>
      <anchor>a9d68e3fb7e09ce97c30bfef45bf2eec3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealBoxConstIterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1RealBoxConstIterator.html</anchorfile>
      <anchor>ae764f403910501c69d65553adb1bf69b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoxContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1RealBoxConstIterator.html</anchorfile>
      <anchor>a933a65eeafeeba91e73c10528dfcfa43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::RefineOperator</name>
    <filename>classSAMRAI_1_1hier_1_1RefineOperator.html</filename>
    <member kind="function">
      <type></type>
      <name>RefineOperator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1RefineOperator.html</anchorfile>
      <anchor>aa056c1e7d8fa17ae34d4f528f73ec6df</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RefineOperator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1RefineOperator.html</anchorfile>
      <anchor>a11109d1a81b61a9677b9a7ea82228f2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1hier_1_1RefineOperator.html</anchorfile>
      <anchor>a7b6cf3ce3217284f99c58e509041a36c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1hier_1_1RefineOperator.html</anchorfile>
      <anchor>a4d5cd6681138c872f1d0c3c45b2be910</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1RefineOperator.html</anchorfile>
      <anchor>a9b79bf81d5724e5edb15558c785335bf</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1hier_1_1RefineOperator.html</anchorfile>
      <anchor>a995e263e7704a882e8ebb827e6809f94</anchor>
      <arglist>(Patch &amp;fine, const Patch &amp;coarse, const int dst_component, const int src_component, const BoxOverlap &amp;fine_overlap, const IntVector &amp;ratio) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntVector</type>
      <name>getMaxRefineOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1RefineOperator.html</anchorfile>
      <anchor>ab717d66fb0f270aee349dc6ae160f5c6</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::SequentialLocalIdGenerator</name>
    <filename>classSAMRAI_1_1hier_1_1SequentialLocalIdGenerator.html</filename>
    <member kind="function">
      <type></type>
      <name>SequentialLocalIdGenerator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1SequentialLocalIdGenerator.html</anchorfile>
      <anchor>a0cbe36b80a4a7f8ab1292cebe9e2c6ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SequentialLocalIdGenerator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1SequentialLocalIdGenerator.html</anchorfile>
      <anchor>af456926e37ca7acc5a7be30ae0157744</anchor>
      <arglist>(const LocalId &amp;last_value, const LocalId &amp;increment=LocalId(1))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SequentialLocalIdGenerator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1SequentialLocalIdGenerator.html</anchorfile>
      <anchor>a49bfa4e32c4d097884a32e04e6342559</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LocalId</type>
      <name>nextValue</name>
      <anchorfile>classSAMRAI_1_1hier_1_1SequentialLocalIdGenerator.html</anchorfile>
      <anchor>a242b0ff10c0850064c9a9f544f08bd20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLastValue</name>
      <anchorfile>classSAMRAI_1_1hier_1_1SequentialLocalIdGenerator.html</anchorfile>
      <anchor>aa14e707b594459bf59134a32b3073a8b</anchor>
      <arglist>(const LocalId &amp;last_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIncrement</name>
      <anchorfile>classSAMRAI_1_1hier_1_1SequentialLocalIdGenerator.html</anchorfile>
      <anchor>a2f728f1984a53043b1f0c865ef440c14</anchor>
      <arglist>(const LocalId &amp;increment)</arglist>
    </member>
    <member kind="friend">
      <type>friend tbox::MessageStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1SequentialLocalIdGenerator.html</anchorfile>
      <anchor>a76ee5eb94ea488010c5c0f5afeaf7c72</anchor>
      <arglist>(tbox::MessageStream &amp;msg, const SequentialLocalIdGenerator &amp;id_gen)</arglist>
    </member>
    <member kind="friend">
      <type>friend tbox::MessageStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1SequentialLocalIdGenerator.html</anchorfile>
      <anchor>a92ec90a3d3ffe83a5e9a510fbd3a3cce</anchor>
      <arglist>(tbox::MessageStream &amp;msg, SequentialLocalIdGenerator &amp;id_gen)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::SingularityFinder</name>
    <filename>classSAMRAI_1_1hier_1_1SingularityFinder.html</filename>
    <member kind="function">
      <type></type>
      <name>SingularityFinder</name>
      <anchorfile>classSAMRAI_1_1hier_1_1SingularityFinder.html</anchorfile>
      <anchor>ab903d05e453238e57d877a202dcf24d3</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SingularityFinder</name>
      <anchorfile>classSAMRAI_1_1hier_1_1SingularityFinder.html</anchorfile>
      <anchor>a52b7bd4794eb077f3c753c506673c9c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findSingularities</name>
      <anchorfile>classSAMRAI_1_1hier_1_1SingularityFinder.html</anchorfile>
      <anchor>a4dde8f84891a510033d0768e4f6a720d</anchor>
      <arglist>(std::set&lt; std::set&lt; BlockId &gt; &gt; &amp;singularity_blocks, const BoxContainer &amp;domain_boxes, const BaseGridGeometry &amp;grid_geometry, const std::map&lt; BoxId, std::map&lt; BoxId, int &gt; &gt; &amp;face_neighbors)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::TimeInterpolateOperator</name>
    <filename>classSAMRAI_1_1hier_1_1TimeInterpolateOperator.html</filename>
    <member kind="function">
      <type></type>
      <name>TimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1TimeInterpolateOperator.html</anchorfile>
      <anchor>a07767ed0a43192189b72d7bf809e27aa</anchor>
      <arglist>(const std::string &amp;name=&quot;STD_LINEAR_TIME_INTERPOLATE&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1TimeInterpolateOperator.html</anchorfile>
      <anchor>aaf0e129b94e64d0a6831e370feee2a96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1hier_1_1TimeInterpolateOperator.html</anchorfile>
      <anchor>a91670a4e4923a2f1b4bcf30f76b7d468</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1hier_1_1TimeInterpolateOperator.html</anchorfile>
      <anchor>af7ac3ecd1a073a9ece9b805940807d02</anchor>
      <arglist>(PatchData &amp;dst_data, const Box &amp;where, const PatchData &amp;src_data_old, const PatchData &amp;src_data_new) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::TransferOperatorRegistry</name>
    <filename>classSAMRAI_1_1hier_1_1TransferOperatorRegistry.html</filename>
    <member kind="function">
      <type></type>
      <name>TransferOperatorRegistry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1TransferOperatorRegistry.html</anchorfile>
      <anchor>a8e794c7caf58509cc065aff880649be4</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransferOperatorRegistry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1TransferOperatorRegistry.html</anchorfile>
      <anchor>a27feb899d4da000f9422d77164866a9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1TransferOperatorRegistry.html</anchorfile>
      <anchor>a8e44ba5f20cfe437f174e240b7917f1f</anchor>
      <arglist>(const char *var_type_name, const boost::shared_ptr&lt; CoarsenOperator &gt; &amp;coarsen_op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRefineOperator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1TransferOperatorRegistry.html</anchorfile>
      <anchor>aa7a8f2d7f55d286e73f46e44ddb64fc0</anchor>
      <arglist>(const char *var_type_name, const boost::shared_ptr&lt; RefineOperator &gt; &amp;refine_op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1TransferOperatorRegistry.html</anchorfile>
      <anchor>afa5486c68731c3622826e062a43dc6aa</anchor>
      <arglist>(const char *var_type_name, const boost::shared_ptr&lt; TimeInterpolateOperator &gt; &amp;time_op)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; CoarsenOperator &gt;</type>
      <name>lookupCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1TransferOperatorRegistry.html</anchorfile>
      <anchor>ab5183b63ce098adbb3ec66bbcdb66505</anchor>
      <arglist>(const boost::shared_ptr&lt; Variable &gt; &amp;var, const std::string &amp;op_name)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RefineOperator &gt;</type>
      <name>lookupRefineOperator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1TransferOperatorRegistry.html</anchorfile>
      <anchor>ab26458f00de2bc28ec57f03c1dee9b52</anchor>
      <arglist>(const boost::shared_ptr&lt; Variable &gt; &amp;var, const std::string &amp;op_name)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; TimeInterpolateOperator &gt;</type>
      <name>lookupTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1TransferOperatorRegistry.html</anchorfile>
      <anchor>a04f5577fb19ef25dd3486c9f234c0229</anchor>
      <arglist>(const boost::shared_ptr&lt; Variable &gt; &amp;var, const std::string &amp;op_name=&quot;STD_LINEAR_TIME_INTERPOLATE&quot;)</arglist>
    </member>
    <member kind="function">
      <type>IntVector</type>
      <name>getMaxTransferOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1TransferOperatorRegistry.html</anchorfile>
      <anchor>ad0313d44098608cae8571b58e43e550d</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinTransferOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1TransferOperatorRegistry.html</anchorfile>
      <anchor>a62b21b62d55a025040b74dc2b49f921c</anchor>
      <arglist>(const IntVector &amp;min_value)</arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>getMinTransferOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1TransferOperatorRegistry.html</anchorfile>
      <anchor>a969e8f3ac47a3a845ffdaf52d61dc220</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOperators</name>
      <anchorfile>classSAMRAI_1_1hier_1_1TransferOperatorRegistry.html</anchorfile>
      <anchor>afad3c235fd0a705718774ecdc2639740</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1TransferOperatorRegistry.html</anchorfile>
      <anchor>adc4286950684df6806a333e9dbe68700</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::Transformation</name>
    <filename>classSAMRAI_1_1hier_1_1Transformation.html</filename>
    <member kind="enumeration">
      <name>RotationIdentifier</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_ROTATE</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8da62bee633bcba93e0ca4197540020d93a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IUP</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8dac73353bdb981b2e4f23b4cf35a9545c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDOWN</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8dad3a729e414a9a2904db31c1218122fbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IUP_JUP</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8da79aa1211d35b6feed53a05f2b1b1f561</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JUP_IDOWN</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8daef24958b2528112cabb4d72185a0a7cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDOWN_JDOWN</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8da7603aa792605343e9f27099f9ef53108</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JDOWN_IUP</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8daef19e328e62f4f2c0cf68e5c5a52d7e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IUP_JUP_KUP</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8da849215242e6154fe0278b92a13c955de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KUP_IUP_JUP</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8da0274c8e6316067db3abd9e04cadc117d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JUP_KUP_IUP</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8da1e29888f9fa90490a16ed753ffd67813</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDOWN_KUP_JUP</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8daa9c80b16f0ad4bf1e31d9e7fe0115ddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KUP_JUP_IDOWN</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8dac0b696752da3b8b3bcd49a27910a7153</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JUP_IDOWN_KUP</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8da69791d7160186d8c040c56738c62a38a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KDOWN_JUP_IUP</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8da3ef8f5fff1d35a58201ce800a93c2cb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IUP_KDOWN_JUP</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8dadf3f12b2b9f097c40eced6a8fbb1a2a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JUP_IUP_KDOWN</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8da5b2459cd7a0b512302b66bd145404772</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KDOWN_IDOWN_JUP</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8daf243d593dab86f3fa2d25752a2b426ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDOWN_JUP_KDOWN</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8daa5033519807c895c9eaa088f387f222b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JUP_KDOWN_IDOWN</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8da2a05229a4db52f8317d17ba2d4a20e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JDOWN_IUP_KUP</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8da3b2758f1749004cfe9369c6424a2fc48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IUP_KUP_JDOWN</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8daef7cbc7a22d7a363763c331bcb4b5fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KUP_JDOWN_IUP</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8da99fb759b9a48251a8b8af21db8311d8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JDOWN_KUP_IDOWN</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8da9477e6e99903c70c81605f320a98b575</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDOWN_JDOWN_KUP</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8da57cd81c3df3e08d30399a13492aacda2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KUP_IDOWN_JDOWN</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8da654d61e0a42f7bf93d8f16e36695ffdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JDOWN_KDOWN_IUP</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8da2cce711a1e187038c732949fb43d30f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KDOWN_IUP_JDOWN</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8dafae8dc680751629ca32f32db86121f3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IUP_JDOWN_KDOWN</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8dabafa0c4d33e34ecf8a430b333320e3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JDOWN_IDOWN_KDOWN</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8dacb29dbeda9008082b38cc7a555fcdacb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KDOWN_JDOWN_IDOWN</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8dae347dda12b083e3948572f5cd27bf448</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDOWN_KDOWN_JDOWN</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a2dd7d97a19db7c8e97402e8518c0af8da8990f1b823e0dacd89be5911d8684e08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transformation</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>aba8ac78536004e487a57559281e43a72</anchor>
      <arglist>(const RotationIdentifier rotation, const IntVector &amp;offset, const BlockId &amp;begin_block, const BlockId &amp;end_block)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transformation</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a4e35edccb9f7bc4112381a192cb2c3dc</anchor>
      <arglist>(const IntVector &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transformation</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a22846157ae06fef7afb2b2cfaf8f9b7e</anchor>
      <arglist>(const Transformation &amp;copy_trans)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Transformation</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a54e0fd5b80195777ca96142132da4d9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RotationIdentifier</type>
      <name>getRotation</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a9861432b6060810e655cdbca3297ec77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IntVector &amp;</type>
      <name>getOffset</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a179f996cf5ba6c0ed367b94b0092b122</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a401ab3187c1745bb77831c4a66cda4ff</anchor>
      <arglist>(Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inverseTransform</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>afc72e127d65cccdf298ac13741bcef1c</anchor>
      <arglist>(Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>Transformation</type>
      <name>getInverseTransformation</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>aa4e621be02a746d79240aa88a69a94b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Transformation &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a9cba5fefdcc6221d42249316b002c0ee</anchor>
      <arglist>(const Transformation &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const BlockId &amp;</type>
      <name>getBeginBlock</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a093926b9dbae259207d43fe853375751</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BlockId &amp;</type>
      <name>getEndBlock</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>adc6743f4059ab40bc3720469fbac1b69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RotationIdentifier</type>
      <name>getRotationIdentifier</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a12cbca1ff256a76bf7e73145e0d0200a</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;rotation_string, const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RotationIdentifier</type>
      <name>getReverseRotationIdentifier</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>ab66c08fc1effcb8750eff1c8b6bb16b0</anchor>
      <arglist>(const RotationIdentifier rotation, const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>calculateReverseShift</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>abea12e25fee2193703d52a82694a159c</anchor>
      <arglist>(IntVector &amp;back_shift, const IntVector &amp;shift, const RotationIdentifier rotation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>rotateIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a8dd74566eb5d8a98af2bf9424c64caf2</anchor>
      <arglist>(int *index, const tbox::Dimension &amp;dim, const RotationIdentifier rotation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>rotateIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Transformation.html</anchorfile>
      <anchor>a96cbf945644a5307cfde664cc8459099</anchor>
      <arglist>(Index &amp;index, const RotationIdentifier rotation)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::UncoveredBoxIterator</name>
    <filename>classSAMRAI_1_1hier_1_1UncoveredBoxIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>UncoveredBoxIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1UncoveredBoxIterator.html</anchorfile>
      <anchor>a62c13f0136f1bf8bcaf9e6f95f9ff5b0</anchor>
      <arglist>(const UncoveredBoxIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UncoveredBoxIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1UncoveredBoxIterator.html</anchorfile>
      <anchor>ae3c7c6bcbb868849f9b4fb246000c490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UncoveredBoxIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1UncoveredBoxIterator.html</anchorfile>
      <anchor>ac268aafff8cdc15b44932445f9dbfbc6</anchor>
      <arglist>(const UncoveredBoxIterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const std::pair&lt; boost::shared_ptr&lt; Patch &gt;, Box &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1hier_1_1UncoveredBoxIterator.html</anchorfile>
      <anchor>ad58a5255114824335bcc99335beed36d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::pair&lt; boost::shared_ptr&lt; Patch &gt;, Box &gt; *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1UncoveredBoxIterator.html</anchorfile>
      <anchor>a473f6dbc35f44995899fb55e4c69863d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1UncoveredBoxIterator.html</anchorfile>
      <anchor>a550e0229be80ffca76077530630852c0</anchor>
      <arglist>(const UncoveredBoxIterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1UncoveredBoxIterator.html</anchorfile>
      <anchor>a9fcabafda7e8bd4862764e3328aab86d</anchor>
      <arglist>(const UncoveredBoxIterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>UncoveredBoxIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1UncoveredBoxIterator.html</anchorfile>
      <anchor>acc4c7399e855a0f6f6bb3c77d9e6ea04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UncoveredBoxIterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1UncoveredBoxIterator.html</anchorfile>
      <anchor>a9a27ce96da4f42dcf0c625759cf124cd</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1UncoveredBoxIterator.html</anchorfile>
      <anchor>a24a894cb308b0effe82dea1feb013ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>FlattenedHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1UncoveredBoxIterator.html</anchorfile>
      <anchor>adaa19afa535b2bf84ed102426e958a5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::Variable</name>
    <filename>classSAMRAI_1_1hier_1_1Variable.html</filename>
    <member kind="function">
      <type></type>
      <name>Variable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Variable.html</anchorfile>
      <anchor>adb92d5ac0450da5a7dfbf76c45633504</anchor>
      <arglist>(const std::string &amp;name, const boost::shared_ptr&lt; PatchDataFactory &gt; &amp;factory)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Variable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Variable.html</anchorfile>
      <anchor>acbf418a8b38f4eb9be92240f6548ad3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInstanceIdentifier</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Variable.html</anchorfile>
      <anchor>a7a59bdd18e29f76cfe9ccf6b05cff1e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Variable.html</anchorfile>
      <anchor>ac89d12e0ad090f04afd7c3b4da075bea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Variable.html</anchorfile>
      <anchor>ade475c6b4d21594c00a21ce389c9a5e7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Variable.html</anchorfile>
      <anchor>af9ee6b4f933a9fbe84c431c24a5f0673</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchDataFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Variable.html</anchorfile>
      <anchor>a834e3f0d9d69146b35ccae650ec5fe13</anchor>
      <arglist>(const boost::shared_ptr&lt; PatchDataFactory &gt; &amp;factory)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; PatchDataFactory &gt;</type>
      <name>getPatchDataFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Variable.html</anchorfile>
      <anchor>ad8c1bc8f6507dcb7294c92d89477c92b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Variable.html</anchorfile>
      <anchor>af7674af0073a3eed425ab4aba204a021</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getCurrentMaximumInstanceNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Variable.html</anchorfile>
      <anchor>a5ef0a35d8d775dc8dc24345931811ef4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::VariableContext</name>
    <filename>classSAMRAI_1_1hier_1_1VariableContext.html</filename>
    <member kind="function">
      <type></type>
      <name>VariableContext</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableContext.html</anchorfile>
      <anchor>ad6e3094f13f7335f0500849366eef79b</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VariableContext</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableContext.html</anchorfile>
      <anchor>a5ff3991b6f69a59956a24c76eff50270</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableContext.html</anchorfile>
      <anchor>a52f3588114d4fe50c4f61a641065bb82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableContext.html</anchorfile>
      <anchor>a370e98a1981e4d1c42240f5d83a33cb9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableContext.html</anchorfile>
      <anchor>a201d2ecdee35939761d54ec13574e5b8</anchor>
      <arglist>(const VariableContext &amp;other) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getCurrentMaximumInstanceNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableContext.html</anchorfile>
      <anchor>afb8706e6d5ab1dffae4ed21dc146acb8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::VariableDatabase</name>
    <filename>classSAMRAI_1_1hier_1_1VariableDatabase.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumberOfRegisteredPatchDataIndices</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>ab9660c61a219148b3d3ab062b1ca21f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumberOfRegisteredVariableContexts</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a25495b9223fd304aa4ee761b070e7528</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; PatchDescriptor &gt;</type>
      <name>getPatchDescriptor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a4c64a52fa7678279d8b258a436c593e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; VariableContext &gt;</type>
      <name>getContext</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>ae30de9dae77ec15ffcd544d6a9182ecd</anchor>
      <arglist>(const std::string &amp;context_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkContextExists</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>af44d3ebcf1060e38a3b473284950c296</anchor>
      <arglist>(const std::string &amp;context_name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addVariable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>af1a2b8f12b6e20d9b05c2af9b1617503</anchor>
      <arglist>(const boost::shared_ptr&lt; Variable &gt; &amp;variable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeVariable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a579c171fabffa6219521e0d8236a8b8d</anchor>
      <arglist>(const std::string &amp;variable_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Variable &gt;</type>
      <name>getVariable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a60197bcf3327b00945bd48bfc9ff9d60</anchor>
      <arglist>(const std::string &amp;variable_name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkVariableExists</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a77761462172002ac3ae87e67458da4ba</anchor>
      <arglist>(const std::string &amp;variable_name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>registerClonedPatchDataIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a10e24c5f33aa74d7cdbe3306bfe16531</anchor>
      <arglist>(const boost::shared_ptr&lt; Variable &gt; &amp;variable, int old_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>registerPatchDataIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a16e2eca69f22fe1ef8c3f10d15ffb1d7</anchor>
      <arglist>(const boost::shared_ptr&lt; Variable &gt; &amp;variable, int data_id=idUndefined())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removePatchDataIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a6a70a2153dc838c7ef2c8275ba41ccb4</anchor>
      <arglist>(int data_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkVariablePatchDataIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a5b304de8c1364084b6ca502f823c01ab</anchor>
      <arglist>(const boost::shared_ptr&lt; Variable &gt; &amp;variable, int data_id) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkVariablePatchDataIndexType</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>ae53d77a60abffe65619b15c43862c919</anchor>
      <arglist>(const boost::shared_ptr&lt; Variable &gt; &amp;variable, int data_id) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>registerVariableAndContext</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a4485d7bcbab5514f7eba44d9de6119f3</anchor>
      <arglist>(const boost::shared_ptr&lt; Variable &gt; &amp;variable, const boost::shared_ptr&lt; VariableContext &gt; &amp;context, const IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>mapVariableAndContextToIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a4d0f6bb5994d9b4be211e37628070930</anchor>
      <arglist>(const boost::shared_ptr&lt; Variable &gt; &amp;variable, const boost::shared_ptr&lt; VariableContext &gt; &amp;context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>mapIndexToVariable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a80d4aed97b7f0df553489750bbc168cf</anchor>
      <arglist>(const int index, boost::shared_ptr&lt; Variable &gt; &amp;variable) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>mapIndexToVariableAndContext</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a073a3204473486b1d13213f8f0612c17</anchor>
      <arglist>(const int index, boost::shared_ptr&lt; Variable &gt; &amp;variable, boost::shared_ptr&lt; VariableContext &gt; &amp;context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>ae2978ee164561572cb4721f7ab108671</anchor>
      <arglist>(std::ostream &amp;os=tbox::plog, bool print_only_user_defined_variables=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>registerInternalSAMRAIVariable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>aac431a9975180d66247787e30c9a3eef</anchor>
      <arglist>(const boost::shared_ptr&lt; Variable &gt; &amp;variable, const IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeInternalSAMRAIVariablePatchDataIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a922fe5e2ba66b21500131bc58e1ce462</anchor>
      <arglist>(int data_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VariableDatabase *</type>
      <name>getDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a9a9b3b6122833db2716a3a600dfa12e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VariableDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>aec7d5db2c8bb695010dafb980df495c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~VariableDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>ac8c25e2554193384ee3d537ba1eb8ec4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getVariableId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a2a4971a4aeb42593895ba187d45f00f1</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerSingletonSubclassInstance</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a3c35c6ccdf74110a4ccbfbe075f90761</anchor>
      <arglist>(VariableDatabase *subclass_instance)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>idUndefined</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>af351b2e50510718aed7fb760c4584b73</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::math</name>
    <filename>namespaceSAMRAI_1_1math.html</filename>
    <class kind="class">SAMRAI::math::ArrayDataBasicOps</class>
    <class kind="class">SAMRAI::math::ArrayDataMiscellaneousOpsReal</class>
    <class kind="class">SAMRAI::math::ArrayDataNormOpsComplex</class>
    <class kind="class">SAMRAI::math::ArrayDataNormOpsInteger</class>
    <class kind="class">SAMRAI::math::ArrayDataNormOpsReal</class>
    <class kind="class">SAMRAI::math::HierarchyCellDataOpsComplex</class>
    <class kind="class">SAMRAI::math::HierarchyCellDataOpsInteger</class>
    <class kind="class">SAMRAI::math::HierarchyCellDataOpsReal</class>
    <class kind="class">SAMRAI::math::HierarchyDataOpsComplex</class>
    <class kind="class">SAMRAI::math::HierarchyDataOpsInteger</class>
    <class kind="class">SAMRAI::math::HierarchyDataOpsManager</class>
    <class kind="class">SAMRAI::math::HierarchyDataOpsReal</class>
    <class kind="class">SAMRAI::math::HierarchyEdgeDataOpsComplex</class>
    <class kind="class">SAMRAI::math::HierarchyEdgeDataOpsInteger</class>
    <class kind="class">SAMRAI::math::HierarchyEdgeDataOpsReal</class>
    <class kind="class">SAMRAI::math::HierarchyFaceDataOpsComplex</class>
    <class kind="class">SAMRAI::math::HierarchyFaceDataOpsInteger</class>
    <class kind="class">SAMRAI::math::HierarchyFaceDataOpsReal</class>
    <class kind="class">SAMRAI::math::HierarchyNodeDataOpsComplex</class>
    <class kind="class">SAMRAI::math::HierarchyNodeDataOpsInteger</class>
    <class kind="class">SAMRAI::math::HierarchyNodeDataOpsReal</class>
    <class kind="class">SAMRAI::math::HierarchySideDataOpsComplex</class>
    <class kind="class">SAMRAI::math::HierarchySideDataOpsInteger</class>
    <class kind="class">SAMRAI::math::HierarchySideDataOpsReal</class>
    <class kind="class">SAMRAI::math::PatchCellDataBasicOps</class>
    <class kind="class">SAMRAI::math::PatchCellDataMiscellaneousOpsReal</class>
    <class kind="class">SAMRAI::math::PatchCellDataNormOpsComplex</class>
    <class kind="class">SAMRAI::math::PatchCellDataNormOpsReal</class>
    <class kind="class">SAMRAI::math::PatchCellDataOpsComplex</class>
    <class kind="class">SAMRAI::math::PatchCellDataOpsInteger</class>
    <class kind="class">SAMRAI::math::PatchCellDataOpsReal</class>
    <class kind="class">SAMRAI::math::PatchEdgeDataBasicOps</class>
    <class kind="class">SAMRAI::math::PatchEdgeDataMiscellaneousOpsReal</class>
    <class kind="class">SAMRAI::math::PatchEdgeDataNormOpsComplex</class>
    <class kind="class">SAMRAI::math::PatchEdgeDataNormOpsReal</class>
    <class kind="class">SAMRAI::math::PatchEdgeDataOpsComplex</class>
    <class kind="class">SAMRAI::math::PatchEdgeDataOpsInteger</class>
    <class kind="class">SAMRAI::math::PatchEdgeDataOpsReal</class>
    <class kind="class">SAMRAI::math::PatchFaceDataBasicOps</class>
    <class kind="class">SAMRAI::math::PatchFaceDataMiscellaneousOpsReal</class>
    <class kind="class">SAMRAI::math::PatchFaceDataNormOpsComplex</class>
    <class kind="class">SAMRAI::math::PatchFaceDataNormOpsReal</class>
    <class kind="class">SAMRAI::math::PatchFaceDataOpsComplex</class>
    <class kind="class">SAMRAI::math::PatchFaceDataOpsInteger</class>
    <class kind="class">SAMRAI::math::PatchFaceDataOpsReal</class>
    <class kind="class">SAMRAI::math::PatchNodeDataBasicOps</class>
    <class kind="class">SAMRAI::math::PatchNodeDataMiscellaneousOpsReal</class>
    <class kind="class">SAMRAI::math::PatchNodeDataNormOpsComplex</class>
    <class kind="class">SAMRAI::math::PatchNodeDataNormOpsReal</class>
    <class kind="class">SAMRAI::math::PatchNodeDataOpsComplex</class>
    <class kind="class">SAMRAI::math::PatchNodeDataOpsInteger</class>
    <class kind="class">SAMRAI::math::PatchNodeDataOpsReal</class>
    <class kind="class">SAMRAI::math::PatchSideDataBasicOps</class>
    <class kind="class">SAMRAI::math::PatchSideDataMiscellaneousOpsReal</class>
    <class kind="class">SAMRAI::math::PatchSideDataNormOpsComplex</class>
    <class kind="class">SAMRAI::math::PatchSideDataNormOpsReal</class>
    <class kind="class">SAMRAI::math::PatchSideDataOpsComplex</class>
    <class kind="class">SAMRAI::math::PatchSideDataOpsInteger</class>
    <class kind="class">SAMRAI::math::PatchSideDataOpsReal</class>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::ArrayDataBasicOps</name>
    <filename>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>ArrayDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a0719a3d82c2eb5a4186e4248ed199218</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a5625df76ea93590884ce1cddc282b2f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a8031309a0a242acac217acba55222969</anchor>
      <arglist>(pdat::ArrayData&lt; TYPE &gt; &amp;dst, const TYPE &amp;alpha, const pdat::ArrayData&lt; TYPE &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a4d93b4e0c2f933fcf985d0ea76443840</anchor>
      <arglist>(pdat::ArrayData&lt; TYPE &gt; &amp;dst, const pdat::ArrayData&lt; TYPE &gt; &amp;src, const TYPE &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a5f312a6a946d999dc3915459079b60e2</anchor>
      <arglist>(pdat::ArrayData&lt; TYPE &gt; &amp;dst, const pdat::ArrayData&lt; TYPE &gt; &amp;src1, const pdat::ArrayData&lt; TYPE &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>ad9ab5f6a726281f9b9747be766483263</anchor>
      <arglist>(pdat::ArrayData&lt; TYPE &gt; &amp;dst, const pdat::ArrayData&lt; TYPE &gt; &amp;src1, const pdat::ArrayData&lt; TYPE &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>ad8f60a0870580400c35365d8635599e7</anchor>
      <arglist>(pdat::ArrayData&lt; TYPE &gt; &amp;dst, const pdat::ArrayData&lt; TYPE &gt; &amp;src1, const pdat::ArrayData&lt; TYPE &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>ac6be6860c20beda963e3c5e828fafd06</anchor>
      <arglist>(pdat::ArrayData&lt; TYPE &gt; &amp;dst, const pdat::ArrayData&lt; TYPE &gt; &amp;src1, const pdat::ArrayData&lt; TYPE &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a1380e7665155be961c7653d50faaa318</anchor>
      <arglist>(pdat::ArrayData&lt; TYPE &gt; &amp;dst, const pdat::ArrayData&lt; TYPE &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>ad84ff865c1ff2363215e5786be590ffc</anchor>
      <arglist>(pdat::ArrayData&lt; TYPE &gt; &amp;dst, const TYPE &amp;alpha, const pdat::ArrayData&lt; TYPE &gt; &amp;src1, const TYPE &amp;beta, const pdat::ArrayData&lt; TYPE &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>acc64cde574367fdf1be352592f45e07f</anchor>
      <arglist>(pdat::ArrayData&lt; TYPE &gt; &amp;dst, const TYPE &amp;alpha, const pdat::ArrayData&lt; TYPE &gt; &amp;src1, const pdat::ArrayData&lt; TYPE &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>ad6bd53b58cc885bc2d3751e27f5bdf25</anchor>
      <arglist>(pdat::ArrayData&lt; TYPE &gt; &amp;dst, const TYPE &amp;alpha, const pdat::ArrayData&lt; TYPE &gt; &amp;src1, const pdat::ArrayData&lt; TYPE &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a8223a07798c3c142d8e9bb7a2463fcf7</anchor>
      <arglist>(const pdat::ArrayData&lt; TYPE &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a0df3eb4ca84f162419f898676d43e11d</anchor>
      <arglist>(const pdat::ArrayData&lt; TYPE &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a2833a63358ec5cac92b5d902f1778bc9</anchor>
      <arglist>(pdat::ArrayData&lt; TYPE &gt; &amp;dst, const TYPE &amp;width, const TYPE &amp;low, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::ArrayDataMiscellaneousOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ArrayDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a8afb4bc162190381a1ddfc8513f824fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a7126b516c75b80524497f6c7504e98de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPosWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a7d80fd3527bc65df14b6911d5c2547f4</anchor>
      <arglist>(const pdat::ArrayData&lt; TYPE &gt; &amp;data1, const pdat::ArrayData&lt; TYPE &gt; &amp;data2, const pdat::ArrayData&lt; double &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>abb8668ea1808d6daee793bdd27b63f23</anchor>
      <arglist>(const pdat::ArrayData&lt; TYPE &gt; &amp;data1, const pdat::ArrayData&lt; TYPE &gt; &amp;data2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalarWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>aa4ed0f1f416fdd0534b8a96b18ae4a18</anchor>
      <arglist>(pdat::ArrayData&lt; TYPE &gt; &amp;dst, const pdat::ArrayData&lt; TYPE &gt; &amp;src, const TYPE &amp;alpha, const pdat::ArrayData&lt; double &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a24f4c37c152e72eb26c9a6d920370a0c</anchor>
      <arglist>(pdat::ArrayData&lt; TYPE &gt; &amp;dst, const pdat::ArrayData&lt; TYPE &gt; &amp;src, const TYPE &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocalWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>ae23a8dc1b58293491f4e1c2bab7d75c8</anchor>
      <arglist>(pdat::ArrayData&lt; TYPE &gt; &amp;dst, const pdat::ArrayData&lt; TYPE &gt; &amp;src, const pdat::ArrayData&lt; double &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>afbd6a522c3bf69780841bb023548a884</anchor>
      <arglist>(pdat::ArrayData&lt; TYPE &gt; &amp;dst, const pdat::ArrayData&lt; TYPE &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a7ecfdf4a66455982509b499b93bf916e</anchor>
      <arglist>(const pdat::ArrayData&lt; TYPE &gt; &amp;numer, const pdat::ArrayData&lt; TYPE &gt; &amp;denom, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>ae27cc5efc59f06f7c6b5d47c8cc34c6d</anchor>
      <arglist>(const pdat::ArrayData&lt; TYPE &gt; &amp;numer, const pdat::ArrayData&lt; TYPE &gt; &amp;denom, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::ArrayDataNormOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</filename>
    <member kind="function">
      <type></type>
      <name>ArrayDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a791375c9772529aa734a94aac4e8dd32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>aaab03e4166f41c688f87d3faf3f13df1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>abb3fd656f4d5a888637c0d9c8e54b49c</anchor>
      <arglist>(pdat::ArrayData&lt; double &gt; &amp;dst, const pdat::ArrayData&lt; dcomplex &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a4e35580eaac466833d408b552c931180</anchor>
      <arglist>(const pdat::ArrayData&lt; dcomplex &gt; &amp;data, const pdat::ArrayData&lt; double &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1NormWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>ac949edffb04e30e7507b2af2f518a479</anchor>
      <arglist>(const pdat::ArrayData&lt; dcomplex &gt; &amp;data, const pdat::ArrayData&lt; double &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>ad4159e6fd232f4cb15f2a9563055cfa8</anchor>
      <arglist>(const pdat::ArrayData&lt; dcomplex &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2NormWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a5af3b982b53109d221ebe658197a4a3b</anchor>
      <arglist>(const pdat::ArrayData&lt; dcomplex &gt; &amp;data, const pdat::ArrayData&lt; double &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a8897c9d45de8f9f62cc6bc75ea82bce4</anchor>
      <arglist>(const pdat::ArrayData&lt; dcomplex &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2NormWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a331e5ec013ef30c67393d79c10b4f60b</anchor>
      <arglist>(const pdat::ArrayData&lt; dcomplex &gt; &amp;data, const pdat::ArrayData&lt; dcomplex &gt; &amp;wgt, const pdat::ArrayData&lt; double &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a065620f8e41ac2af2189d4f1184f8952</anchor>
      <arglist>(const pdat::ArrayData&lt; dcomplex &gt; &amp;data, const pdat::ArrayData&lt; dcomplex &gt; &amp;wgt, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNormWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>ada45955733143c72cc195a4464f7c9a3</anchor>
      <arglist>(const pdat::ArrayData&lt; dcomplex &gt; &amp;data, const pdat::ArrayData&lt; double &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>ad27fb636142ae908a62d8af93995292b</anchor>
      <arglist>(const pdat::ArrayData&lt; dcomplex &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dotWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a923db26889ed3d9d73aa7d5f65f1d43b</anchor>
      <arglist>(const pdat::ArrayData&lt; dcomplex &gt; &amp;data1, const pdat::ArrayData&lt; dcomplex &gt; &amp;data2, const pdat::ArrayData&lt; double &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a297e5ea9dff8f432d1eba47a64a2cb1b</anchor>
      <arglist>(const pdat::ArrayData&lt; dcomplex &gt; &amp;data1, const pdat::ArrayData&lt; dcomplex &gt; &amp;data2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a96d56bc01f4f9581918b4759f0d38139</anchor>
      <arglist>(const pdat::ArrayData&lt; dcomplex &gt; &amp;data, const pdat::ArrayData&lt; double &gt; &amp;vol, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::ArrayDataNormOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1ArrayDataNormOpsInteger.html</filename>
    <member kind="function">
      <type></type>
      <name>ArrayDataNormOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsInteger.html</anchorfile>
      <anchor>ab894e0ef7947ca99c30d97faa332d603</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayDataNormOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsInteger.html</anchorfile>
      <anchor>a0fc13fcbd09dda3c3eac93717b56603a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsInteger.html</anchorfile>
      <anchor>acce1a7f2f59d45cdce37ea8f11786217</anchor>
      <arglist>(pdat::ArrayData&lt; int &gt; &amp;dst, const pdat::ArrayData&lt; int &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::ArrayDataNormOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>ArrayDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a59b297b680d836e23cd52125c753fa31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a0299c92b891f8eca662ac03efb6b8988</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a1e097a78ed33f2624d8b74cc7e96fbb7</anchor>
      <arglist>(const pdat::ArrayData&lt; TYPE &gt; &amp;data, const pdat::ArrayData&lt; double &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a9075b676ffdf15a3a1dfe200c90f47a9</anchor>
      <arglist>(pdat::ArrayData&lt; TYPE &gt; &amp;dst, const pdat::ArrayData&lt; TYPE &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1NormWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a5d05d8cdaff0afab39cc08caf8928c07</anchor>
      <arglist>(const pdat::ArrayData&lt; TYPE &gt; &amp;data, const pdat::ArrayData&lt; double &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a8041a6e6eab36899643d1d4e599a3868</anchor>
      <arglist>(const pdat::ArrayData&lt; TYPE &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2NormWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>aaf732163bee8c90f16c43abeae25f7dd</anchor>
      <arglist>(const pdat::ArrayData&lt; TYPE &gt; &amp;data, const pdat::ArrayData&lt; double &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a2b75135e753d67ea9706e763811f4895</anchor>
      <arglist>(const pdat::ArrayData&lt; TYPE &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2NormWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a775eed308ef6b994ba6a74cc14664ed8</anchor>
      <arglist>(const pdat::ArrayData&lt; TYPE &gt; &amp;data, const pdat::ArrayData&lt; TYPE &gt; &amp;weight, const pdat::ArrayData&lt; double &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a3dae235b425cbeed09043a3c37e60d3b</anchor>
      <arglist>(const pdat::ArrayData&lt; TYPE &gt; &amp;data, const pdat::ArrayData&lt; TYPE &gt; &amp;weight, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNormWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>ab5fdb630861eb67154111a15f37842de</anchor>
      <arglist>(const pdat::ArrayData&lt; TYPE &gt; &amp;data, const pdat::ArrayData&lt; double &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a34c03524b57139c46f3a29f4e9ec49aa</anchor>
      <arglist>(const pdat::ArrayData&lt; TYPE &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dotWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a83f8cdc864bc72472ba3d661e4a6efb6</anchor>
      <arglist>(const pdat::ArrayData&lt; TYPE &gt; &amp;data1, const pdat::ArrayData&lt; TYPE &gt; &amp;data2, const pdat::ArrayData&lt; double &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a7751ee904edd62fd15df69279c1aeece</anchor>
      <arglist>(const pdat::ArrayData&lt; TYPE &gt; &amp;data1, const pdat::ArrayData&lt; TYPE &gt; &amp;data2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a1d316d903260725e81a0c21a77dc1f57</anchor>
      <arglist>(const pdat::ArrayData&lt; TYPE &gt; &amp;data, const pdat::ArrayData&lt; double &gt; &amp;vol, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyCellDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</filename>
    <base>SAMRAI::math::HierarchyDataOpsComplex</base>
    <member kind="function">
      <type></type>
      <name>HierarchyCellDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a569f0612bb3d0acd5d7c40b022160ce0</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyCellDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a88eb6017c8b9478010612e6cc49230cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>ad0aaaea32a740e5c210286988de9c2d3</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a5bde26d6e2da8a610e27722cd90267bc</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>ad946bd9b12b10dbdcab2dc66e4658796</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a79449a22df51f4e2b93f18d67a066606</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a0453422f0f0c131ea131180b13c6bc77</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a7d660c861cedbb98ad99f73252618159</anchor>
      <arglist>(const int data_id, std::ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>ae4b41644bd970a9af6632703720e7f71</anchor>
      <arglist>(const int data_id, const dcomplex &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>ad57224b0e5ad0197bcf94858347eb8c0</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a967a9587257d622d85e991c4a4042c1d</anchor>
      <arglist>(const int dst_id, const int src_id, const dcomplex &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>af5bcbdc853c6a2427dcfcad9e3686ae2</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>ad12af074753dc8efb988e9c71bea2538</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>ab79d6ee3230e78fcb21ea59292ecb8f1</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a79197efe0468adebafdc076b7ab83376</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>ac49bd17656a38c429a1104f93f9532a3</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a056313ffad515a9ee935905dc0208181</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const dcomplex &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>af9817c5940276df752c5194735732b29</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a3034ef5ddfd9f662a22c03016e0f6676</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a12ff05ed95065b835325382a859e9f85</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a4e2e889c16034e911bacbb752c901a3f</anchor>
      <arglist>(const int data_id, const dcomplex &amp;width, const dcomplex &amp;low, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>af171ac4d8a313f05d3370fd52bddd327</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a670975713470ffa56874dfd4c2cecf81</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a9dc4a2047f70da3911250f35e1e10c3a</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a973b6221bb1cac7eec339f22ccdbcf94</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a82754758d974a3e4fdec7f0e85474512</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>aad0a43d268cc045c6c029a7235db3e7e</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a74990074d1b48e4ca7ad4ab98a653ed2</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>ad057e036caa741cc184745f802214a08</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>aca7f629c19e565429a76978e24290c70</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a47415205d77ec02317eb2808a2222ff8</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyCellDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</filename>
    <base>SAMRAI::math::HierarchyDataOpsInteger</base>
    <member kind="function">
      <type></type>
      <name>HierarchyCellDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>acdfb07d4c08e9e88c98112c8d8494e88</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyCellDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a25262c3821fe158480a2a74bd244a134</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a0e506e503b0e799d808c81adc1027ef3</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>ac74f7a09d3e47beca9cfd6595eec9167</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>ab6101a8cb2d021545481a10f48071474</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a75cfce6e657c796633c7a1c8b7f0d57f</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a5801489d84b706c9856aae702b7e3d37</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a5973929e582dd90b672bcbf23cbb7ba9</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>ad13122f0ea4ce6927a939dd2c788cb2c</anchor>
      <arglist>(const int data_id, std::ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a817b55e41ce09c4e12c80192c4e0c5b8</anchor>
      <arglist>(const int data_id, const int &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>afca2a6a55b5cc996df7d2854ef19894f</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>ae6f712cb30a34872894484f0eb41d277</anchor>
      <arglist>(const int dst_id, const int src_id, const int &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a63d2f60b8c0ac39cf3283caeda8cc814</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>af39bbeaa258e5b85cdd8f7a1823b54b0</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>aa3d077ae61364db9ee7bf0b7dca7ef60</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a02087f39f02151ae512b1f23f6facdfa</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a94ed29ca0cca3af3f2f7fb09138d5a6a</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a42851c909b8a78e7f2e00bece8f2b51b</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a706a4e295789084da66f8b2ee7752e23</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a8bd6c0c469f5f7bcfd4b57bb245a1f55</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>aa0a0ea69dfd4d52ceb0166a410aad16a</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a8f64b055a9043d0867b0855db5c4c19c</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a40f10a541a6d9688d67e6744a7bff98a</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a3d44779bb4b0baa37be79131e3e46204</anchor>
      <arglist>(const int data_id, const int &amp;width, const int &amp;low, const bool interior_only=true) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyCellDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</filename>
    <templarg>TYPE</templarg>
    <base>SAMRAI::math::HierarchyDataOpsReal</base>
    <member kind="function">
      <type></type>
      <name>HierarchyCellDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>ac8e592d13017e1b2894bef47cb8492bb</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyCellDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>afdb55e6e355c55a1c7043f69ada2ddf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>aa169bb48bdc0500cf99813c02011b4c1</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>adc5fe9a524e37ea24d62ba05de4ea2a9</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a25907f7dd4b9362776de9d2f6c2cb7cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a2ab6dcd4b89ac3e8b687ced57c2e314c</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a1c277e9c64335bdec01cfcaa5fdfbf4c</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a8f228561f34f8775892193e27dea7102</anchor>
      <arglist>(const int data_id, std::ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a80ad5059aaff59ecd755d2e35ba18d6d</anchor>
      <arglist>(const int data_id, const TYPE &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a53133ef0e936495f611cb73e10e99733</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>ad06da899df7b44828fb5009c2720adb4</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>ad65c3cc809c284c43a86e0a79be3e240</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a8f63b4a34c6aeddffec91591f49b382d</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a71ac2bbd48c37b02733fc8317dd0a3be</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a7e72d6db6726dcdfe53efa89eb6ab954</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a8b79080cc0afc2d361541caa9f566c53</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a7d723c8bd34a3ea76f03d965ccbb58e5</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const TYPE &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a1e49541b5bd8cdf0ae86e33980ced0a8</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>adb7efb28d87de266927a3cec7eac1335</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a64979741a2afd678b8e200e6000f1617</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a19e3246b54515800d4064f0ef21cf119</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a7cc690e1a9b35bb7ac79ea67316835e4</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>aa28d66ab68c040175112813feda9291c</anchor>
      <arglist>(const int data_id, const TYPE &amp;width, const TYPE &amp;low, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>ad7a805f8dddd99c950544a74e75465dd</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a26879fb2f6083ab189a9946a6928340d</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a4f2ebbc6b65ea40418e9fb48d309b592</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a038f626b624cd49ae99898564ed278ef</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a6365845be39685912f375a89a60cca4f</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a6c4ce7485d2282a0869ae65c25986a56</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>ac5f82659251a8a4882bc547ff4044356</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a7836787d43ae68e52fa51f89bf0b71cc</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a3cd410251f408eefe4677dd697b421aa</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a750ce376b27bbbf1ba2cadcfdd47edf6</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>afdafb1d4b896e0b51f7f62a763d15a62</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>abf62afea8e6ea7b4bc59f0932e77811e</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a30a54e382dd8e59a8f21cb09d802f9a0</anchor>
      <arglist>(const int dst_id, const int src_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a72d17b3f587ada0f2835632a94037fd1</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>ab7d7f5ebf8c1e3944595880d5e368066</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</filename>
    <member kind="function">
      <type></type>
      <name>HierarchyDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a5bd9885cc18ee6e210b5c29f3ccef18b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>afc1f8897ffe0787daf91e5195deda5fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a93a5f21bb52f5479569f5e6233f7e2a6</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a1249b192ebf8915393921e7ad6bc46e0</anchor>
      <arglist>(const int coarsest_level, const int finest_level)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>aa730f7d97d1e0ca1bac615f2f3c33d60</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a74db4302a5c1851995bef184f6ac569d</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a8923ab4c4cc416ad14e5b55457b2c630</anchor>
      <arglist>(const int data1_id, const int data2_id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a171970c55f5509184b602d504b325fb6</anchor>
      <arglist>(const int data_id, std::ostream &amp;s, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a0c2d1d0d1add31593a19164d76cb4b66</anchor>
      <arglist>(const int data_id, const dcomplex &amp;alpha, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a258d3b0d98c9326d3e2c25f9d29119ef</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>aa2a97c9b38c397f9c988ef4de3126f31</anchor>
      <arglist>(const int dst_id, const int src_id, const dcomplex &amp;alpha, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a114c625c6072a35a437f0c33b9526f5f</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a99816228433a364b79fed2fbf717a64b</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a4e0850c2cb631e289782480d7744bc99</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>afa4a8f7f7f85a1cdc81f1491cd36bc3c</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>af14fcf969d76f974f629d772f1b6f0a6</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>aea8b6c272efc453087d9dd0041f7fc63</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const dcomplex &amp;beta, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>ac362e211ced1bc825e5c8d4216e087cb</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>ab056252418b7f0cdcf4a136cdcb72efc</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>af804cb43108804d28875549b0973a173</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>ac69d4c2e878b14b9398461776149fbce</anchor>
      <arglist>(const int data_id, const dcomplex &amp;width, const dcomplex &amp;low, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a10ffb437def92d04ecdac06bdddfe021</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a64ccadaf128a107c337731c32aa96918</anchor>
      <arglist>(const int data_id, const int vol_id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a6e8627b80ee69651aa30e6dee50bff80</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>ab9da9cd709ad746d3e9bc30e6765490d</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a8cd620b005dfd11cd51d22fe2c99fcb5</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a840cac28188cc068c4dd2ccbf1ae58ab</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>affa0dedd17973518bcc043a3773e85f4</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a9bafbe24d7e72d1606fc76385a5979d3</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>af9006473c0ce2846d9c8d4af4a2dc046</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</filename>
    <member kind="function">
      <type></type>
      <name>HierarchyDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a1423a71fed4759e806129d458d283df9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>abcdf03bf3e1ba5938efbb7aa15c6983e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>aa580ef0090f6f266456aa5ca7bf921db</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a7404ad14b10d5d3ad5afb9dc60160ea7</anchor>
      <arglist>(const int coarsest_level, const int finest_level)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>af946cf144f628fae7798e9e8746bbb8a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>afcf9405d36d51f2c3b3472eabf90d3d1</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a51164cf54016e897f5bcfeab89510ef2</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a45d74aba377f4b2068f56327ca101759</anchor>
      <arglist>(const int data1_id, const int data2_id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>af98f76de4c36a1acc715027fe3a0ec18</anchor>
      <arglist>(const int data_id, std::ostream &amp;s, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a9e8e74c6878143a05a3dcacb4c93586b</anchor>
      <arglist>(const int data_id, const int &amp;alpha, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a5984d39730b8c6ab6d1ce41898570a98</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a36b468f62085a3542d60e2d696ee66dd</anchor>
      <arglist>(const int dst_id, const int src_id, const int &amp;alpha, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>af4f780f76bd325b6b782136488998224</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a91befafabba309973c8d4a8e93ec71c8</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>adc85ef1e8825c76e2fe373c5ae800b25</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>ad31e07402bcec5b749bdfaf50856106f</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a5a5dc74c71933142044c0ee4350261f6</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a4d6691fa2e415529940f34e3ab713a56</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int &amp;beta, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a08d8b4be7e30e7c7ddb7a40a7cdcb68b</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a2ead1688912f3373c6300d09e8fac1fb</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a62fc412ecb093c997fec02ac1559a06c</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>abcdcc538ffbe57f0e3011139de7dcbf4</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>af04a9d180bf8bfe19c7d5d5e6807b30d</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>ae731b68508ccb3d126a9052a6cbf3695</anchor>
      <arglist>(const int data_id, const int &amp;width, const int &amp;low, const bool interior_only=true) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyDataOpsManager</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyDataOpsManager.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; HierarchyDataOpsReal&lt; double &gt; &gt;</type>
      <name>getOperationsDouble</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsManager.html</anchorfile>
      <anchor>a5a35f53eba9fce9a81db93c49b93af5e</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Variable &gt; &amp;variable, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, bool get_unique=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; HierarchyDataOpsReal&lt; float &gt; &gt;</type>
      <name>getOperationsFloat</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsManager.html</anchorfile>
      <anchor>a38a439e4224c4ffcd83ede9d569f4d2d</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Variable &gt; &amp;variable, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, bool get_unique=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; HierarchyDataOpsComplex &gt;</type>
      <name>getOperationsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsManager.html</anchorfile>
      <anchor>a926250e3c6bd2c602d8cc2329ef7cb85</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Variable &gt; &amp;variable, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, bool get_unique=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; HierarchyDataOpsInteger &gt;</type>
      <name>getOperationsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsManager.html</anchorfile>
      <anchor>af41782cbca0c30fcd018a8f055f934b5</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Variable &gt; &amp;variable, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, bool get_unique=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HierarchyDataOpsManager *</type>
      <name>getManager</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsManager.html</anchorfile>
      <anchor>a91ffce642aa44153a5daa0213579009c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HierarchyDataOpsManager</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsManager.html</anchorfile>
      <anchor>adc5af006b88a52e1b74e133ee816bdb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyDataOpsManager</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsManager.html</anchorfile>
      <anchor>a11d171c33ed86d44f432476c91bf2eb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerSingletonSubclassInstance</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsManager.html</anchorfile>
      <anchor>a4e8d2157f324eecc117fb78e2cc8cd7a</anchor>
      <arglist>(HierarchyDataOpsManager *subclass_instance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>HierarchyDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>aeb9d3891c433629cd4a7e7d65387a32d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a09bedeea15fa6422437865629ebf8751</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a21762593b728794618914b52fe0a918c</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>ada8ed5e9636dd157d6e2c0968515bb6c</anchor>
      <arglist>(const int coarsest_level, const int finest_level)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a503885be5259b23be9676f208d648533</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>ac0f3dcf08002c6f896e7152eb4704557</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a2d2b58b765d97e2a1dfc9dfb5f789845</anchor>
      <arglist>(const int data1_id, const int data2_id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a151b07d2aacf5ecc03b779e5d3f9cf9d</anchor>
      <arglist>(const int data_id, std::ostream &amp;s, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>ae20007665e68f5a2aea5c8056b8164fb</anchor>
      <arglist>(const int data_id, const TYPE &amp;alpha, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a3c7b8ecb03df301ad4f5bcb175651f81</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a448e815693cde9b39f800dff93fc36db</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>ab5fb74dd6fd0c9b4aed1ff7aa67a748d</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>ae4e6a8faff041348b702f237915fab33</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a8f513b3f642d66996f5d1fbb83218891</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a40d0f0f7ad24dac333c362fdb46da571</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a02e99d13ea8205104222d8e6f44b5d87</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>ad9ee5cf710f8a5d6c33e8c88199811aa</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const TYPE &amp;beta, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a3ac5631ec26d0aff55523187f728a254</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a8cea0668c1880227a65ee56bd602c749</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>aafbc29e1dc07a1a531b53e8e6ae74405</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a67cc50d084e62c93061af2b3e9f54443</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a57d756a0bdc0cf91024fbd07009afd55</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a06aced8b3258e6e1916ad61a9f9732af</anchor>
      <arglist>(const int data_id, const TYPE &amp;width, const TYPE &amp;low, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a6062b5d10f7706744b0b7ea0bb6729eb</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a45dc7182885e3b43d17d8427d17e6320</anchor>
      <arglist>(const int data_id, const int vol_id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a58f9b0706ca4d2f548dc25b426034ef5</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a1f9ce4bad63f1c1347382c142e470b94</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>ad31f9a6508450250347b8a05f50cfeb5</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a7da2c27f588bc96407f70b93cbc6f51a</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a5e0257dc6556ad6688bd7a42cfd27843</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a06d241d08634d39d05fd0f04e1981ae2</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>aed7c18f92a0e37d89eb89ac74bfe8791</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1, bool local_only=false) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a45413d5e64cbb157284163467c0dacb1</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a8dec0f21b051edc02b55f7dfe669c89b</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>af5d6a1c8735d85d8b585af96980ba44a</anchor>
      <arglist>(const int dst_id, const int src_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>ae2ce00a00591643fc606a839809ba980</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a7aff74407d8c870861fc08f98e48ef3e</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyEdgeDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</filename>
    <base>SAMRAI::math::HierarchyDataOpsComplex</base>
    <member kind="function">
      <type></type>
      <name>HierarchyEdgeDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>aaebc6eebf974f75b0e9215969558ddcf</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyEdgeDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a5af57e6af0e9992d2c84918512875da3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>aafafc3d59c57c423477c091a5afa51d1</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a80c095e61a363fa65b77cd39e9b71728</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>aec1b0dc0508ba168fa82c78991994611</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>aeeed41006a490b701883d2a3b97d875e</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>aecaae06eac8085bae65f2ab39ab3578a</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>abedbe18b10b4f6a725740c1477daf613</anchor>
      <arglist>(const int data_id, std::ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a521ffca6208cf9b869b953a021340ed1</anchor>
      <arglist>(const int data_id, const dcomplex &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a018ed7c7ec55b3a38d819461a369001e</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a318c1f401d5851b83b02a7826611cc54</anchor>
      <arglist>(const int dst_id, const int src_id, const dcomplex &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a7788fe8cba1b61df695f45ce22f2381c</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a565fda6bc8255c79132df78e642e4278</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a8433673fa80db03e3b2ae90684ec1b27</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a201da5005e13f169aff074b95d0a76df</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a31c08b0476fe9b1186154644a09689ea</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a9e820e40bb579e84fc9ea7c579371740</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const dcomplex &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>ab6198f77d96589c919c4ae8a299fb95a</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a3cc75aac32e201c035144700cbb4d2b6</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a7b36a3a287770bc6821eadb705161cdf</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a7ad08d3a98ac4dfa44376bdb60a9b225</anchor>
      <arglist>(const int data_id, const dcomplex &amp;width, const dcomplex &amp;low, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a7fec2eb5c743dcac8b47208bbc5d17d0</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>acced2515171363d645d24aa869a4ca47</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a5e23d1ab60d483260c0e5926e638d1c6</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a68829f64d42fd59354112620337d32dc</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a2536b3a3eeb4a7570df1d0aa68dcf967</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a760e7f0c9063655099c5080965fb5d76</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a1ca8bdb6ff0df486b1b7f862da432e14</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>ad7ea60b889c8a11230fed6ee94f2b26f</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a56bad37a7199597d91b62bcc6d3b2a10</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a1e773f4f03269b899b5d1e4de59b9f9c</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyEdgeDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</filename>
    <base>SAMRAI::math::HierarchyDataOpsInteger</base>
    <member kind="function">
      <type></type>
      <name>HierarchyEdgeDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a36232eb7b1c39f27960e8c7c6991d257</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyEdgeDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a4a460384fa3f99159e641b42d8c81a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a6c8a2f9e3bcc3a1a7a779a448709894a</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a40b924d369d1bae6b56cd75940b9366a</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a5513f99e4524228fba60f82695bb2692</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a59e77a3d7c7271f9684f699be37ad3d5</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a1ff458439388f34b1261d21d7c23dd96</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a3749873041737f98e606d8dbba4f9c95</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a04ebcc5cf2fed3032454174240541fc6</anchor>
      <arglist>(const int data_id, std::ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>ae4dd7267d48e9342567ea11b57266929</anchor>
      <arglist>(const int data_id, const int &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>aadbf6206e669861755da1d2506b7a634</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a79071d30b66eaf0e9c62f2757f0247c7</anchor>
      <arglist>(const int dst_id, const int src_id, const int &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a9ca756812a0bca339c31fb782e9b83d5</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>ad528335ad25039ec32762aada15452a8</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a147b71992b754417ac239f5ad4ef425b</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>aaed40e072a99b6dcd252de34dbaa2398</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>aaec5a41eec69a407463d187ad67c38f6</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a0f15d77cf7a7566b68f4d20df8e67378</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a4864867bda36fbb88baeb7787442066e</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a9ad34f227bdcae849583aee17788fa2c</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a455ab6057c6ede6ea3a2be096bd73ede</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>aa30a906dabb57427e82cec8a5757d1fa</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a38b8825a2a4b9e8b57cc1e9c859aff62</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a6767017db72de41d0af7ff6246ced5ad</anchor>
      <arglist>(const int data_id, const int &amp;width, const int &amp;low, const bool interior_only=true) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyEdgeDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</filename>
    <templarg></templarg>
    <base>SAMRAI::math::HierarchyDataOpsReal</base>
    <member kind="function">
      <type></type>
      <name>HierarchyEdgeDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a20f3c4d61181bf3f36f7b5edf1957f20</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyEdgeDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a1d78aed37739de93a5f1192337d9fc92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a65608f712f9ceabecfd3a2ee11a41590</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>af053933745fe91a2d7e68b817d13bd3c</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a5d2ab2bffc79aa78d3dd4836fff080a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>acd6b96a6a04e817f9bbe07cc56867736</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a144159bb59bf0bbcd4d9c36d7669d79d</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>af9f5a41f3fb997ea7997b5077e5741de</anchor>
      <arglist>(const int data_id, std::ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>add0956947369fb1e041f39f3fb4a70fc</anchor>
      <arglist>(const int data_id, const TYPE &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a4f313539ca232304e4d2e38d39587bd0</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>ac98723aa1a6ba880d4535dcbdd0f1cef</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a365f2c7d2efaab72e0d2993ef119220b</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>ad07f49f2051f62329961489d1070297b</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>adb6ce61b949719deb8f2f3d897d7236e</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>ab9f3e29e7624d30ecbf5fb308c2c63a7</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>acc9df2e45e3537e5ecd762023fe3aa38</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a5702476643702c32ee62b6dbf899125a</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const TYPE &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a0b9897b29d471f0bfcd8aa3383db9f74</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a56f41e92535f28f3a267280bf0c33e10</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a41b2dc3df79ecff04b46e158f3f1984e</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a88473d6e44359245e483f879e59aafea</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a8c7b38a1fdf5f3c481b77bd32e5b1b90</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a6bf5e8d428b0c1524053e80b1e5f554a</anchor>
      <arglist>(const int data_id, const TYPE &amp;width, const TYPE &amp;low, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>adddbc966a7442c72158d25d01e378d7f</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a8cf47fe0365588e186d1f347826722b5</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a137e18eaf31966e8b163e834b0e37683</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a9d4f0fbf8afbce1e31cea7ceb874c019</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a1da9e7cf7d5cb42bf3a92750cfb2d0bc</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>acfdf5f0e837bd5da84e43d236171a8ab</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a3917b2b7b67e4f1c5a9643e23c900464</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a40772941be2a857503dc4a6d41343369</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>abd96e8a6506fb8934b769892dcd997af</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>ae961f7b0488fc7ef1ce1df5b3ae8cb5d</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a30d7f1753602386eaf73c0111c00df1c</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a0d93be516e618f5d8465e6f198a6930e</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a93f42912a220aada24290fdd36b1275d</anchor>
      <arglist>(const int dst_id, const int src_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a654c8e6f7d6792ede51c29c847fcab3a</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a2c7d37f75d60030b98e906150bdfdd35</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyFaceDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</filename>
    <base>SAMRAI::math::HierarchyDataOpsComplex</base>
    <member kind="function">
      <type></type>
      <name>HierarchyFaceDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a0c9e66d6cc71e531c30afdba2571cc1c</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyFaceDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a81651ae07a5006f2592553e163205418</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a8a9dfe40373a7a6616c277190ddc3b96</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a8ffa9feba58413aed44a49d75de28a44</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>ad16c97c87cc814c0deee6f3a3786145b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a3813c4a562571eba93f29fd6bec3eaf7</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a33c812be4ecedae48db5e75b1438060b</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a7d5acd64015544afff1c926bad393e7c</anchor>
      <arglist>(const int data_id, std::ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a14793f3a94f08d6d37f6504814e6206f</anchor>
      <arglist>(const int data_id, const dcomplex &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a1b1b73a5a5717f6df40b95372e0c8eea</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a4b93a440f4d7ea9ec267de85bd43417a</anchor>
      <arglist>(const int dst_id, const int src_id, const dcomplex &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>af925fed812c993dc68d25bb8ba2d9bd1</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>aa59dee3807312aea578e2e0d540cebef</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a53cde5324d10979bde9b7234d94f9e14</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>ab2f3a09689c5b79a8bc8064438f9f1af</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a18af0afec32635f40dc32cda9fa17104</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a84a6b7a5c561cd95d0359b0fe3059084</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const dcomplex &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>af222a4dc85a1b17d9528137efe4ccc10</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a5320db40bc5db650ab0b2915fd80fee3</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a7fb64d20ff09964478c58ac451b3295f</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>aeb5137f07678837bb148dfd32255dbac</anchor>
      <arglist>(const int data_id, const dcomplex &amp;width, const dcomplex &amp;low, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a660f673f64a501bd7fb6574fa14ae5dd</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>aace1ff620ac767d585e9c3a215255c90</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a976858558ee3f01198ff322c32a5eb56</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>adbb143ca8839e38a05551c6938ce7136</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>ad850a73707c729d6961b69ff8edf4471</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a08c7462a01dc414124d50135c2241794</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a374cbe20e7c6f2b1154c86fc2830bfcc</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>ae4c5f3da56458c3dbc0d5c0e93ca40f7</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a488ea67523c1f43fa0dd4b74b2ef7683</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a6b7549187bc168db029a8173adc161ac</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyFaceDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</filename>
    <base>SAMRAI::math::HierarchyDataOpsInteger</base>
    <member kind="function">
      <type></type>
      <name>HierarchyFaceDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a60e7f919183429b4790e930174fd0da6</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyFaceDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>ad01a5b7c5351ddc67ae9f08c9070d61a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>abfa6abeb260cfae453cfe600d8b790ee</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a52132dcf242d96a12038f33d91ec8674</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a43ccd47dd0d37c251059f151085a5275</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a129fa21b319429d42b4a48a68374d2db</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a19fb75fe03b620c1861e9bf7a6f57a7a</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>aaffa84b84706bbde21ff615ac074b1fa</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>abc59060e85d04318f0566cb8c4a11361</anchor>
      <arglist>(const int data_id, std::ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a9769c27203064371a2563081ba33cc7f</anchor>
      <arglist>(const int data_id, const int &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a9fd2089fc31fa3e332c287c1700c83f6</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a60db88a20537c3065e5e895b72fb1964</anchor>
      <arglist>(const int dst_id, const int src_id, const int &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a57e7213bb66d2cefa94624c910555a02</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>ab35b8b288d4db5fe40c47f4b6d5343c6</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>ae9dae1aba6b29254ac33268473420b69</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a09693daa0ed578d72a3c5f4a2165ea83</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a110bc8f2e5ef81fe0d519e96af7daef3</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a0aa9f0db02ff33cdb271010192bc6e83</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a27ab9a553bd47797862f509ee446eaa2</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a473e6f019299965e04433683b4854542</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a19de21554cdb4366b6a8dcfd9603665c</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a032e8811b2d47f433682d6af0f154414</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a0b5739be8df866945f088ed984f58a2e</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a701bf96374db44ad3a0a66f0cdcc49ab</anchor>
      <arglist>(const int data_id, const int &amp;width, const int &amp;low, const bool interior_only=true) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyFaceDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</filename>
    <templarg></templarg>
    <base>SAMRAI::math::HierarchyDataOpsReal</base>
    <member kind="function">
      <type></type>
      <name>HierarchyFaceDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>aa289b01627b456f3c64b10e6ed6c2bd7</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyFaceDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>ab1b3383f34d8c9a4df88a0631ef31e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a4c9fd80cae3516f42bcfde61d6bda42d</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a63876dca16f20b55f6863e930f83d3f9</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>ac459fb85a9b5fa73c054782487640f62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>adb3e552341b53492273e2a2e9c6b6d29</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a09d623a85c31a3a88f820c27855b6504</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a0f2de16140b85b48e39614c508024b46</anchor>
      <arglist>(const int data_id, std::ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a59d93f24e93e672eaaf618e81bab53ec</anchor>
      <arglist>(const int data_id, const TYPE &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a242a8a4ce4895edb583bb1908566cdca</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a34c917e8648193d355725b7ad630cbac</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>abf245b68db2ef92f5459cb0705b7b116</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>ab85f6cdac7b52a0c6dc6da6bd3d2212e</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a750f0bfdd9090f26a880ee2c3b8a67a6</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>adf21b9c63c4e2d8d37ebd453f24de921</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a087510c4b489441dedb042b42b771ec3</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>adc3ab3adf7fd7c7b2bd475bb356f7663</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const TYPE &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a37c388dd6c29d1cb85ae5c5b1fa80d4d</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>af4a9372db0fb59ab0b400791b2360e1f</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a75f88f0e0af40817d5d2a6e46cf528e4</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>af577a50ceee25d643f0bca6a2e4cd6f1</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a8647144e795f4334cf21d0df8d183bcf</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>ad4e3ea4dba1577fa57580854060a096a</anchor>
      <arglist>(const int data_id, const TYPE &amp;width, const TYPE &amp;low, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a916d51343884a15c01a6bf1b3779b036</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a1dad635585e21de4a49fc0c933b8f34b</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a3a21e7b7d677731c48ca4022cbf7f0b6</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a3efbb17f0734ae7c9a586532d7e2b28b</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>ad282761784df579786a36139ce9a1a82</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a951942259efe15295ea5330e8d0bfaf0</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a2fa1720f030dcd226ab5bd11d5d1c266</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a3bf52f9f84e9a3ca5736ad2f82c8aab7</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a8bbce79b4e2fc367b26affb9520cffcf</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a1d242b41a238adde5b71811a5c4b4afd</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a277559c10a3be0d933155f4e91c569ec</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a0939543426f00af84e0868221612600d</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a93a0f90bd34f820f71fc7bb4aaf8716b</anchor>
      <arglist>(const int dst_id, const int src_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a1c98645c4c0a2a18b933f65b1c0824b7</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a963e53bee5cda73160f4372932d0f63f</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyNodeDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</filename>
    <base>SAMRAI::math::HierarchyDataOpsComplex</base>
    <member kind="function">
      <type></type>
      <name>HierarchyNodeDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a2da7d5cc435b050658c2ea478b13374e</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyNodeDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>aa5253f73dc67ee77c0fdbd7f7d0bfee2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a7c287783e6a8b2018dff3a320d31ef68</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a04c72e335af7d0834cc3e7fc49b2eafd</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a5fb95f13500e9f3cfc1d34cfc2b7e802</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a0187fa0d43ddb644350524eede0a0067</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>ae2eb571186623080a4b0804f108f435c</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>ac23a84cad80fc2609513d2bb19f05f12</anchor>
      <arglist>(const int data_id, std::ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>ab7228b6fb364f8d8ef466173ef5bd2eb</anchor>
      <arglist>(const int data_id, const dcomplex &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a0296789ef07b6ee55edb6bb5bffb984f</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a5d9bd13e74ffd1a5219a6fecea833afb</anchor>
      <arglist>(const int dst_id, const int src_id, const dcomplex &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>ac44d4d80b4a27c56dfb24dc2b687fb9f</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>aa65e6c8925219838cbc302a4e96039e5</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a7708fdfeb3403854219d1e551b9a160e</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a3a1b4ddb7c09ec3be0056cf99903cc53</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a4c738cba518ec6a9c9ff7cf4386767aa</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a1246268000e114ab2d79c42d2cdb49c3</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const dcomplex &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a6f24f957ab445f3e98533e6e9aa6fdc1</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a877d188204719574ce2134cb3bf36c8a</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a0ba68d6fc6c0223f4fa750f31dcab609</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a13850e6aa23b18e4f27a7c5f34c7600b</anchor>
      <arglist>(const int data_id, const dcomplex &amp;width, const dcomplex &amp;low, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>aba9a368a1b60f99f87745062e4440890</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>aa412a1391c708d4c639d905468351c98</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a846caebf1a1bae0b8ec08754903774d3</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>af498601168080b0720cc19878fd1a01c</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a43cd751476b061e50d1dc0e8abd6ed06</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a57f07a5dd21fd624c209f79722aacc5d</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a9bdd2986d79ef940db618285514e3467</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>ad1557614ebd3269d5cbe79aaad659421</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a45307f48c7540b1600bfe93cac2a268f</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a5b3865471faef38dc7bea8c6c927f11f</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyNodeDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</filename>
    <base>SAMRAI::math::HierarchyDataOpsInteger</base>
    <member kind="function">
      <type></type>
      <name>HierarchyNodeDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a3275c24ad7ca3f121b19abe6223d4c4e</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyNodeDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a4642c7484f6f9f8a05f863c848f7798f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a927bc5b487a05076c52a2a7c353cda56</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a5c15c94dbd9dcd992f0c7977e8d6518c</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a1fd79364232268766027e7002dc78a09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>af8c265b8978ffb732b575418af2ed85e</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a2e6410335efe2e189f59b2a47cd50560</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a6532efe56964a3502cff55d4f4b1998c</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a17b617b0a34e9609862619fc94ab1bd3</anchor>
      <arglist>(const int data_id, std::ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a5bb95bfa24ff2e5379223012f1d3db4e</anchor>
      <arglist>(const int data_id, const int &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a0d2d12d37d03427a455af5380d51b1d7</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a0d6d7cf199e37bec36869f6e2b231a34</anchor>
      <arglist>(const int dst_id, const int src_id, const int &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>ab30c727811300a8a73b6ac77202e13fe</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a916394f1c2896f79220a9c07f9f026f2</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>aca5cb1b7d7a6778bd6a87b5cb84e1ff8</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a548aac984f014ea5d9b1369d03a5232c</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a55a6ef9136cad8df4c57e796a6f3c6b8</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a4ab19463fea1bf1d88a24b91b41473c4</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a707e31c3fcb076b3ee12f1cfadc42845</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a054d740ea9917444865849163b09753f</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a133a35bf4aff1618bca28a83130953a0</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a5d3e36a9e1fb93abfcd378ec67d79463</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a86955b2deff89d6733b58788be3ab693</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a7244976364606679444b9dd24029171e</anchor>
      <arglist>(const int data_id, const int &amp;width, const int &amp;low, const bool interior_only=true) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyNodeDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</filename>
    <templarg></templarg>
    <base>SAMRAI::math::HierarchyDataOpsReal</base>
    <member kind="function">
      <type></type>
      <name>HierarchyNodeDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a70a7728beab92900d0bf29410d0b03e8</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyNodeDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a11bb2a6bdee921a9bf7287730c006813</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>abbe91296e18a024e39713309a156ac8a</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a4f2eab8c8418d9423df1f26c9af0b810</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a8695e5eb4ad2b1a0470f344fe8a13224</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a2903f7f3f61d00deb07e6772ba8d54d1</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a6758a1eaa8cec93de3a52f0aee3f5232</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>ac90c647081dad92d851b3ef26db1639e</anchor>
      <arglist>(const int data_id, std::ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>acc1efa78dfded7e95da2e422c74f05d7</anchor>
      <arglist>(const int data_id, const TYPE &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a7e34da5612b53c1091387eece0a47a7b</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a3101a33fb5f2f334fb9f5d99513fb80a</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a427d1fdb51c42616c54a1fe0077f0240</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a8c86b5b7d77e54ed8f741b9ab601be84</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>ad8cdc88cb1ebe34c1419556d15483866</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a10cc9c5d8fe409bc01b21aa29d95f3e0</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a2eef717907c91c40d3c518b483a9e242</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>aaa6f6c85e223b9f2a5bd1db71e188e93</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const TYPE &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a63c079841f35df97c07adeebaf392455</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>ae11002aa21c0fa754c68473848939233</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a1db297193a947806dc70231491251f68</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a00f104b5b6f5f6cf2f61894fb71315f4</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a8778277b11fd0d4b77e0d8cc5da4a7a2</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a618d8d2f4d1252b842d6f70798cbe5bf</anchor>
      <arglist>(const int data_id, const TYPE &amp;width, const TYPE &amp;low, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a610a0367240c121f5fd02d429ae8007a</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>ade8ae91c5db400f1fa68673129f7d477</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>ab2a7561c69e4ceba982789e1922eb7da</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a552b9a3c451f57a0dbf4d155f576ff2e</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a474d0a9a10d8580e904ca0234cb57f9d</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a0575094e82c0e83d9eccc28ecaeb9bbb</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>ab1bef22f8f862633da82054889520687</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>aac90e4e94fa82ccb256f44fea6236de2</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>abfed0d65be40df0de986bd36dab1aa94</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a2cade51512ac6b836e04e42c004e8817</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a839530b8d05e041d8fba93c0cee85562</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a0f15a397740a5c231eb979f037689e8a</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a790527fe8cdd5d234c75c584e71479a9</anchor>
      <arglist>(const int dst_id, const int src_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>aa78cf11cf06c50a42c5cf8378a933b29</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>ab131cc1bb7a5997f211872b08d06d530</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchySideDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</filename>
    <base>SAMRAI::math::HierarchyDataOpsComplex</base>
    <member kind="function">
      <type></type>
      <name>HierarchySideDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a36216c376c9c596e4c3ded9e853d9f18</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchySideDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a2094b5ddd205e7c5d5cccba03d4b1cba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>afc8a08ade6640541ef692acab6061bf2</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a4d263ab2906c0a561d202cc94e63eda5</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a20b7759ff42366f09b1996e403f6710d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>ad7b7c8dedbf3813d7cecccbd10496350</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>ac1330266ec3b72cfbea181e2be3666a6</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>af94534ab1b656f97d4f018b1b531c1cb</anchor>
      <arglist>(const int data_id, std::ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a80255894ef186fc3485afa8412d6e38e</anchor>
      <arglist>(const int data_id, const dcomplex &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>aa79926201b1f8c6cdb848a647d68ebb8</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a4990c299912e9635c945f48160e64970</anchor>
      <arglist>(const int dst_id, const int src_id, const dcomplex &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a6b3efb5744fa8b27b74b3f0723cd9e31</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a0f75dea64a8e1b572c54018620c06e4f</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>adfe8c42907585ec494dc8fd1092d6328</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a9c0ea43171c39ff78ebe7fca835ea265</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>adee633da5a13603d5981a85c73141a93</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>aa7231b7af2b21dc8e4b463a41df45915</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const dcomplex &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a039d241c627cd72747dc7fa546c25880</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>aef88ca7b18166883a8feb0575f657589</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a2c580a79595b6f499c11a724a714f597</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a202caf35ca9d184287125000e25ee1c2</anchor>
      <arglist>(const int data_id, const dcomplex &amp;width, const dcomplex &amp;low, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>ad3b177fd592856e37245b4e41c3bc919</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>ace001f87c72b1de3206bb47d7c912569</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>adc2c13b1fde0158121c450ac4d492f95</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>ad933fcd26ac21b210b6233e0d1d0afec</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a5ec11bb40b0b79fc0b384042a9f8b8e1</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>ad4636a4fadb1197a9de2249464bdeacc</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a920739db8b497d275a96a34a8f88451d</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>abf3edf45bad257f9f6754ae95be46557</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a07b58e0669e6bb4eec26ea0f77bf5da2</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a4108c4d2cbeac49b84bb5ac40ede43c7</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchySideDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</filename>
    <base>SAMRAI::math::HierarchyDataOpsInteger</base>
    <member kind="function">
      <type></type>
      <name>HierarchySideDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>abfed9b0181f2174e842aa52b203b72bf</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchySideDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a99b7aa69491206a6655f00a215bfeee3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a422fe12b2513fae42173194b18c19a49</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>ae1bcf7b3ada63eeea7340b4dce3b221f</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>ad34d64728ef6ca5f61793f39e8efd1a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a3faa4c2e0b58d942e6eafedb634f5009</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a16684f27f909f1958d66c952979aafb3</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>ad0d41364f571bf3e49dd7728f6546829</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>afef65514d4f599f164860ce254030750</anchor>
      <arglist>(const int data_id, std::ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a1d160d4a607b3864944d0e9c0359c1e1</anchor>
      <arglist>(const int data_id, const int &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>aa0756c30d35703b4e698d6a30292203c</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a58381abd4744577feaedb5118ba2dcb7</anchor>
      <arglist>(const int dst_id, const int src_id, const int &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a743f42376106eab047389bbe25ca651d</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>ab39e8c113162c0a9bd3902890849a809</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>afa2fcee74ba471d7158b41446d04646d</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a3e74489fda54e6ad9e6fbb6012105dad</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a740a8ab828f81eea2b5c65dd9ac80d18</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a5464f75a482181510415b9304fde43e7</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>ac3c810413e56f5d8551bb69acb3a3599</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>afb4d59350f89b976bc820ea5ed65152f</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a0c807ce46adc2950131402b2302c9d1b</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>ae83dcc6a2e74653ea59771367b8f72e7</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a24666f8d031f1787854bc1a7634b2bf8</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>abd34ccce14d44dd42fcedb515923f916</anchor>
      <arglist>(const int data_id, const int &amp;width, const int &amp;low, const bool interior_only=true) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchySideDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</filename>
    <templarg></templarg>
    <base>SAMRAI::math::HierarchyDataOpsReal</base>
    <member kind="function">
      <type></type>
      <name>HierarchySideDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a1aa25b129b147958264e74c295116d11</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchySideDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a085e6e11d7cfacf4115ec9e865fab1c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a03e8cde294280d382359d090c8340e4c</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a2f485f877abf6024517b73de9ac5df7e</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a3e61a50c47f54efb09a4d071af80dbf1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a240f568340e7f6f6f59b85a41deb4e22</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a0db3992829c843d45fbd7114c4d44603</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>aeac6c231ea37569864c14778adf535fe</anchor>
      <arglist>(const int data_id, std::ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a0b0b20deda1b5964ebbaf12683535591</anchor>
      <arglist>(const int data_id, const TYPE &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a748e9d2786d74f1c16f32053a38f7d01</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>ab2cc0b0f60008aa756732a917849cd19</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a69c5dff81742654b62d542c31409d681</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>ab4afe56cf917345c8d283fe64ea93fe9</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a85a0496096585fc9b35b145356264f8d</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a60f6542603c859dda5ab38144ca2b033</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a86a179150ead45dfaf8b364a3a595509</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a3c927744e9ea4a819d860c47833b0059</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const TYPE &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a37f0610fcfa486b27cf84cfbe948135e</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>afafc7cf69fc96039a534c6717940b5f4</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a2075711f6370c6d64d1a60f4798b0429</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>ae2efe77f686c9b3190190cad5fbfeec8</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a645211c88a0a36a4344f6252b8f25ee7</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a0b1cf29c2574bf531df6580a73b89a66</anchor>
      <arglist>(const int data_id, const TYPE &amp;width, const TYPE &amp;low, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a90b69e61d1a0fe4165e8d68b15ef895c</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>aa2e03739199f704f5095fab7d41b4bb1</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a14753f1a7879752f34c04fca03d0a712</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a72b6231d731fabd7272714a7dd21b220</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a8637a6bd1c2dc9bb555b8c2f96f919c3</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>ad20e18ad8d71c0fdae75c201b618aa9a</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>af4ff7a94186593e037807acc972b62ce</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a74c51f374d0bf269a39b91c214248d73</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a9483a67069146fb81d9c0dec2cf6de88</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>af89d17e966900c4e72c1f40c34a69ac0</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>abcbebebff5eef94a03461dca1324c658</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a6366867801402eccb3ca5c7c6d7a1682</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>ade236b6ce1fa557cc3a81fc869ad8627</anchor>
      <arglist>(const int dst_id, const int src_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a686bd3d7ac8f12e1d6883fb0f8956935</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>aa8669067239a0427444df06c02010595</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchCellDataBasicOps</name>
    <filename>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchCellDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a7030d05ebfaad85ae17a515130fd02e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchCellDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a3e9ef6d7d8f61f642174764409a55602</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>abf0d20a26c88a08e3bcab15242c736dd</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>ae3396db2929c201eab316c47a9aa33f7</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src, const TYPE &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>ac38e2089f283c16c24b1a200ed3b1696</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a03860fdce5f65596b92421bb5259e5c2</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a0156d3258ef8b57974597e358532ed09</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>ae8776b7677c33a162f473a42293689b7</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>aad1e194f4cac28e05572e3b59d658491</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a7ebf780ad79bcadf4b7ed6e428e625e9</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src1, const TYPE &amp;beta, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a8d747e5d120d38747755ba678b1499a8</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a4c516a2718e0f278c76abbc323d9c6f6</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a89443e099c839b01491c0cb75741a03a</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>ac3513fc56b9b4aa2952b341c49a0a299</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a393428541cf14836a6f6fef587d616fd</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;width, const TYPE &amp;low, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchCellDataMiscellaneousOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchCellDataMiscellaneousOpsReal.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>PatchCellDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a01a2a2c673f16c428b45cce8ad89e0c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchCellDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a60b49237a39038837fcadfb0cb621ca7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>af6af05a1ff93219290c9395b7e189073</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;data1, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;data2, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a62e3a35a9ebf37e7d329e1939b3283b4</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src, const TYPE &amp;alpha, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a2a19c7b52eff4c97bcd091ee6d27aeb4</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>af091aa2206c2d329d0cd34e625f8d0dd</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;numer, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;denom, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a6217b6ccf8151ece6425b8ebd8a9b05c</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;numer, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;denom, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchCellDataNormOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</filename>
    <member kind="function">
      <type></type>
      <name>PatchCellDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>ae18f120be23ab56f8fa2a748ae2088b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchCellDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a3f91810cc9c2d03af6e6b65323f2bde3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>aaa2d65dfdee245c4ae1f422addaa674d</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a229df82293514a770870f4d9ed270c75</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; dcomplex &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a2b48f6f5b87c4ac518980f3514bfa826</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::CellData&lt; dcomplex &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>aa16e428a02d33667b297c0f9c21a9626</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a87155122259be109a3c1a2782e31af76</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a4102ece5172e3a6705532f01b902ab24</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; dcomplex &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::CellData&lt; dcomplex &gt; &gt; &amp;weight, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>af57fa2436adf5761fe4a7ffb10edd654</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a5794d2a1822495f0e9fd612811f82e55</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; dcomplex &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::CellData&lt; dcomplex &gt; &gt; &amp;weight, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a637011636076e33d9c11629d8e5421ec</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>abd693f818dcdc6d1aa329f2830ecbb13</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; dcomplex &gt; &gt; &amp;data1, const boost::shared_ptr&lt; pdat::CellData&lt; dcomplex &gt; &gt; &amp;data2, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a2eb52df2a103792646344400c9eceec1</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;vol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchCellDataNormOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchCellDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a95ecfe8d3b595b413e0d5d23d3784077</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchCellDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a66d6ff7c4e50aea87f0db8eac68eae72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a9c4f2a6fa14a9fea62fbea53ac1b314c</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a937653a9da130ebb74ca764b84ae32b4</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>aebca4e27e59104e35312726d0fa7cfc4</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>af423c8504f560b1fa6b493070356c861</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>af083bdaf305b138b03f173156c66fbb6</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>ab6eee8969c6ec8797ddb2816eb87ed15</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;weight, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a5c4141f140272563942a4db227fbebbf</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a1891418475bb22f416e332a952ad3e74</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;weight, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a9011bdd049b342a48ffe9df84fb17aa3</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a9f65ee561ef0a3cc50e9e8f227e867a9</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;data1, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;data2, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a21d44b1d7bac354c7f0c168ca618f895</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::CellData&lt; double &gt; &gt; &amp;vol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchCellDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1PatchCellDataOpsComplex.html</filename>
    <base>PatchCellDataBasicOps&lt; dcomplex &gt;</base>
    <base>SAMRAI::math::PatchCellDataNormOpsComplex</base>
    <member kind="function">
      <type></type>
      <name>PatchCellDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsComplex.html</anchorfile>
      <anchor>a2533c626fa14e3e6fb0c56617cbc2060</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchCellDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsComplex.html</anchorfile>
      <anchor>af17e61b97a3668495047a031fb2b7d57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsComplex.html</anchorfile>
      <anchor>a8cc2ce7bf9cf3ad476901bb5f8553eac</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; dcomplex &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::CellData&lt; dcomplex &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsComplex.html</anchorfile>
      <anchor>a5026a58528d3ffed566e5e8ac1e70004</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Patch &gt; &amp;patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsComplex.html</anchorfile>
      <anchor>a8d8bb92e89da025490653d990788cee3</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, std::ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsComplex.html</anchorfile>
      <anchor>af4d08e22781516d47dad613efd8ccd80</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; dcomplex &gt; &gt; &amp;dst, const dcomplex &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchCellDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1PatchCellDataOpsInteger.html</filename>
    <base>PatchCellDataBasicOps&lt; int &gt;</base>
    <member kind="function">
      <type></type>
      <name>PatchCellDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsInteger.html</anchorfile>
      <anchor>aff89f8edcad5819c762df7da19aa665c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchCellDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsInteger.html</anchorfile>
      <anchor>a7a5b42bbc8ad15971fc266450f951e69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsInteger.html</anchorfile>
      <anchor>abce723623ec0e1b10666dc21176bde97</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; int &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsInteger.html</anchorfile>
      <anchor>af7e150d0a6c207dadc2e1223421cb83e</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; int &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::CellData&lt; int &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsInteger.html</anchorfile>
      <anchor>ab952d06cbcb829b286274645cf778955</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Patch &gt; &amp;patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsInteger.html</anchorfile>
      <anchor>a1e1fa246732ad60c40b1343175a45cd0</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; int &gt; &gt; &amp;data, const hier::Box &amp;box, std::ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsInteger.html</anchorfile>
      <anchor>add955da8afc4cd9d3db3e2b29c6ac117</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; int &gt; &gt; &amp;dst, const int &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsInteger.html</anchorfile>
      <anchor>a11deb4b2d8045ad1f48d2281c9d35eb5</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; int &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::CellData&lt; int &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchCellDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchCellDataOpsReal.html</filename>
    <templarg></templarg>
    <base>SAMRAI::math::PatchCellDataBasicOps</base>
    <base>SAMRAI::math::PatchCellDataMiscellaneousOpsReal</base>
    <base>SAMRAI::math::PatchCellDataNormOpsReal</base>
    <member kind="function">
      <type></type>
      <name>PatchCellDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsReal.html</anchorfile>
      <anchor>a98001f4fc9b90bc90b09579b318b0748</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchCellDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsReal.html</anchorfile>
      <anchor>afd73413be1029ed29d1042dc6428a7d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsReal.html</anchorfile>
      <anchor>a3c45d01f2d38e0dbb58bc387c932b6c7</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsReal.html</anchorfile>
      <anchor>a39712d6d18045bb3ac5060ae89e810e3</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Patch &gt; &amp;patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsReal.html</anchorfile>
      <anchor>ac2506c493571faa51b50dc0ec8fd991a</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, std::ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsReal.html</anchorfile>
      <anchor>a337cbbf9b641123bd2821a0374f0cae5</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::CellData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchEdgeDataBasicOps</name>
    <filename>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchEdgeDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>ae9fa5309edd7a18ca237584a44e98393</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchEdgeDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>aab510ba9b0fd5a6b7f1e74aa5b1a4569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>adeb77a9eefd5d2aecfa53bfe1ca739ec</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>ad052c2c517f9920dd023b00b59da285f</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src, const TYPE &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>abdaa5b52e73a7cdad79026f784d549a7</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a9f02171cf659e73f3ebddc68f83df8a8</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>ac7351870ef844af50aaaffed003be66c</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a366bca871c45de6db0eb25277cca7fca</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a1080fab8dc9d13e0735a381a9815b7c4</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>ace637efb53008d1c6887172f17dcccc1</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src1, const TYPE &amp;beta, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a458dda2046330095ea38ab19658dd599</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a958f499ea70768a77181b345e008a458</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a1cd01366a47ea35e6a6667cbaad359b7</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>ae8400dc35b0e648ae6d326a46de3e6d5</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a3019b2454dd66b890ce1611c4f4110f6</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;width, const TYPE &amp;low, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchEdgeDataMiscellaneousOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchEdgeDataMiscellaneousOpsReal.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>PatchEdgeDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a78aff180449404f37517c36d70fa8306</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchEdgeDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a62592041f604f0127bf343d50acbee22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>ad7d531d3a8f8a04c0a77ce183c1fc590</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;data1, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;data2, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>add3440932566143b6645706543defa02</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src, const TYPE &amp;alpha, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a086ecbea45f332e9f2807aca572c4dd0</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a7f59910d82903e8b83225b34ed63fc2d</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;numer, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;denom, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>ad84d1e8f69b1c112c73dd95e02602436</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;numer, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;denom, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchEdgeDataNormOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</filename>
    <member kind="function">
      <type></type>
      <name>PatchEdgeDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>abfd09e29071d0dc9021cf9722950eedc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchEdgeDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a1c714225a3d75cb97061b3814e0bceb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a9a29211ba9b328c7278ecfa53f261223</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>afd5955311e517aff1de6564ff773a268</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; dcomplex &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>ae30032371bdc207b2b832600219dbc07</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::EdgeData&lt; dcomplex &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a3bb5cd4afb7cad58900ee52240d31ae5</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a4fbca56fcb72c5d835f2b994beef1bb0</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a50071ff9506939212d5c857a3070ba8a</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; dcomplex &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::EdgeData&lt; dcomplex &gt; &gt; &amp;weight, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a90e1818bb637a72cab0efb4b845bce3e</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a3ef9000a677cbbae010b0b2f7867769a</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; dcomplex &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::EdgeData&lt; dcomplex &gt; &gt; &amp;weight, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a8132c1820121c28353eb3d1306c5086a</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a888f28e9d1e3863589dc143484eeff5e</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; dcomplex &gt; &gt; &amp;data1, const boost::shared_ptr&lt; pdat::EdgeData&lt; dcomplex &gt; &gt; &amp;data2, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>ae16c7a475217a9fa74a550793fd188b9</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;vol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchEdgeDataNormOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>PatchEdgeDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a62b70cd456af26b9974a907d95bda944</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchEdgeDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a0ed6ae419badc46f7728f85925086d4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a7fb44ca2c6e33613919638c29e6d0e47</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>abe00f4e4283773bf1111124526e0386b</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>ac13b2f5270c356c5ec0786d27ffba950</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a277bb633c6fc3d95583ae7fe6567b0bc</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a111127d83aedd2ba72b5b6fa966dcf92</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a071b484c6bdf043669fc865729dfb2b2</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;weight, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>aaabd63a73932dac9f8a900b077855b4b</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a042b34e3f53472f1a1049a8b7093358d</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;weight, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a9883f6f12797f6014f7986efb54ac53f</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>ad499342c951da30caeb7997353148941</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;data1, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;data2, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>af07c5c492ff34a8218387ab40a0558ef</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::EdgeData&lt; double &gt; &gt; &amp;vol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchEdgeDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1PatchEdgeDataOpsComplex.html</filename>
    <base>PatchEdgeDataBasicOps&lt; dcomplex &gt;</base>
    <base>SAMRAI::math::PatchEdgeDataNormOpsComplex</base>
    <member kind="function">
      <type></type>
      <name>PatchEdgeDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsComplex.html</anchorfile>
      <anchor>a272c7c866a96d6e0e9c62b4a16333b82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchEdgeDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsComplex.html</anchorfile>
      <anchor>ac665c589b1cac7aed8d863eaf1760fbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsComplex.html</anchorfile>
      <anchor>a6a54517757e6f56ac2d9b0753878afb1</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; dcomplex &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::EdgeData&lt; dcomplex &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsComplex.html</anchorfile>
      <anchor>a7dd8f788b8bdcc12d63248640a94f033</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Patch &gt; &amp;patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsComplex.html</anchorfile>
      <anchor>a039d31e90bc24794405f991e4d040d2f</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, std::ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsComplex.html</anchorfile>
      <anchor>a2a72fff339abd79c7d010875b48689c7</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; dcomplex &gt; &gt; &amp;dst, const dcomplex &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchEdgeDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1PatchEdgeDataOpsInteger.html</filename>
    <base>PatchEdgeDataBasicOps&lt; int &gt;</base>
    <member kind="function">
      <type></type>
      <name>PatchEdgeDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsInteger.html</anchorfile>
      <anchor>a419961c9233c4f487580c692e4ec6034</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchEdgeDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsInteger.html</anchorfile>
      <anchor>a8580db8b2c609773616796c84c1c1508</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsInteger.html</anchorfile>
      <anchor>a91f0bdfd4e1750b6d8d8fe117ef512f1</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; int &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsInteger.html</anchorfile>
      <anchor>aa6e3309fca49cb1db58c215c26ea6f6c</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; int &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::EdgeData&lt; int &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsInteger.html</anchorfile>
      <anchor>ae819cfe31c0dca3c80df68527d4d2b22</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Patch &gt; &amp;patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsInteger.html</anchorfile>
      <anchor>adf390c1480a840bfb529b9c3156f7cc3</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; int &gt; &gt; &amp;data, const hier::Box &amp;box, std::ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsInteger.html</anchorfile>
      <anchor>aaa385743c7b18f9d6ae7ef29fe8f8031</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; int &gt; &gt; &amp;dst, const int &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsInteger.html</anchorfile>
      <anchor>a9b6234ee76c3226554ad4be2a834d330</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; int &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::EdgeData&lt; int &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchEdgeDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchEdgeDataOpsReal.html</filename>
    <templarg></templarg>
    <base>SAMRAI::math::PatchEdgeDataBasicOps</base>
    <base>SAMRAI::math::PatchEdgeDataMiscellaneousOpsReal</base>
    <base>SAMRAI::math::PatchEdgeDataNormOpsReal</base>
    <member kind="function">
      <type></type>
      <name>PatchEdgeDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsReal.html</anchorfile>
      <anchor>a00a9cbc4301ff38c9218ee3d7abf635a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchEdgeDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsReal.html</anchorfile>
      <anchor>a86d61bd0f3659cedc2ec52da2b5627d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsReal.html</anchorfile>
      <anchor>a65761e64af4d869fc3306c364e9fcfc5</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsReal.html</anchorfile>
      <anchor>acb1440f5ec6c2016d403b6f62316f0bc</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Patch &gt; &amp;patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsReal.html</anchorfile>
      <anchor>a7155b19bd2de12aad67ccaae1c2d2977</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, std::ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsReal.html</anchorfile>
      <anchor>a44e50130a2b2d40c3e9e1c4de63ee5b0</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::EdgeData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchFaceDataBasicOps</name>
    <filename>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchFaceDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a2f837f03346e701f2d93aedf2a4ab625</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchFaceDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a62116a4e5071d37d7fc389dc9216ef54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>adce3767e573d93a24dded7a0521b90df</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a90be0b0883a93298018c9b0272010bbd</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src, const TYPE &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>ae8f9441047157392a1d9f3747f710366</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a3c9b747325e307991ef8e9e6bcdd0180</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a72f6245f99b89986282dcecce013e019</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a063cc41b48fe9d1faadfd4443a38ce71</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a6f18c3a3c654052fbf208fbb9224b080</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>ac944056272990f43a9358e83a5800e04</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src1, const TYPE &amp;beta, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a07c2794e0276ec805cb180f35c805e42</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a91345529e5e754f9b6bd7fb56cf1c7a2</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a0b3efdb19ef4c718e3adc90979c2734c</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a605232c077d91f1f359c09e49b91832a</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>ae0a96591a51ae0d181b3ca0ccd7e3979</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;width, const TYPE &amp;low, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchFaceDataMiscellaneousOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchFaceDataMiscellaneousOpsReal.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>PatchFaceDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>ab70afac249f5a4843b42e8e95b3a93d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchFaceDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>aaf078ad786fe1ce99b2f57043f2157c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a3b2c89552f3bb8286d924f1756da5a00</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;data1, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;data2, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>abf56a4ae7cd4ad1425ec91448b17e665</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src, const TYPE &amp;alpha, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a738e8047ef4a962fcc142a9f90090289</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>ade48b5b478aad8430e5d1a8540a238d8</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;numer, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;denom, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a77fb779f66da5816dadb2dccb08f1362</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;numer, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;denom, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchFaceDataNormOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</filename>
    <member kind="function">
      <type></type>
      <name>PatchFaceDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>aacedf6416ed03bd16072f49afcc54b06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchFaceDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a7237504c56a7d97ae592802f3b806672</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>acd6c9e5c4b170833b20190292e7c02f9</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>aab466747bff8a925d6c6a87cf4bd1793</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; dcomplex &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a8aa279a9471eeaf7a9799fe88f17d20c</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::FaceData&lt; dcomplex &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a3f9b23cc77e83724dc004975882af021</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a1ada6250a965bd34813354c6c259b804</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a730e37f066af75ff2b43774c852fd0e9</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; dcomplex &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::FaceData&lt; dcomplex &gt; &gt; &amp;weight, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a9eb3304a69baa8c6606028eac08aaab8</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a6e226cbd82284eee79f5529febfb0e1f</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; dcomplex &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::FaceData&lt; dcomplex &gt; &gt; &amp;weight, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>ab69b7078e19bd696ff0ed5dc21977121</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>af20e4a97ecd6942656913e35552ca2f7</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; dcomplex &gt; &gt; &amp;data1, const boost::shared_ptr&lt; pdat::FaceData&lt; dcomplex &gt; &gt; &amp;data2, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a4536f193a3f8074fdb948b672964da47</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;vol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchFaceDataNormOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>PatchFaceDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a45053a60e01e66eeb242c379a65ac29f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchFaceDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>abc53bdec35acb50820a3e4d62d01d41f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a2a9bf4d7b7e7864b9e5bf91db8dec2c8</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a45affe87ff8acf78d2525050ae79b71a</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a5143da39cb583fbfc7c71b6adc10cffe</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>ae85a137d10b3f13a82e2199e4ada24fe</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a3a3c33c4b245c8edc195360d97d24678</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a5daabe2e1eb2d7816a5765ed34818b37</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;weight, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a5b0483e7d7e85ac7308b3dd1178d5aa3</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a106d3bfeb9b1f18b5bc4261e8203bb81</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;weight, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>ae00cfb1623b3c9cb27963de3db1cbe43</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>adadcaa2246a1c4894f36b6dc4e4147d9</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;data1, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;data2, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>ad7cb488255cf3c1d9de970df13f2c2bc</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::FaceData&lt; double &gt; &gt; &amp;vol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchFaceDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1PatchFaceDataOpsComplex.html</filename>
    <base>PatchFaceDataBasicOps&lt; dcomplex &gt;</base>
    <base>SAMRAI::math::PatchFaceDataNormOpsComplex</base>
    <member kind="function">
      <type></type>
      <name>PatchFaceDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsComplex.html</anchorfile>
      <anchor>a4bd950275c976de6d15164b39b30c98b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchFaceDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsComplex.html</anchorfile>
      <anchor>aad9d6f2f022b0dc4090155ddfe6a6f43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsComplex.html</anchorfile>
      <anchor>aed2b2c1849f6c6476bcf9dfd43c397cf</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; dcomplex &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::FaceData&lt; dcomplex &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsComplex.html</anchorfile>
      <anchor>a330ae0400bd61d8d91744a2a294af063</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Patch &gt; &amp;patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsComplex.html</anchorfile>
      <anchor>ab40413073dbf27f344b9928aad9a567d</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, std::ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsComplex.html</anchorfile>
      <anchor>a437bf2f006dc3ca255f67da25531a6ff</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; dcomplex &gt; &gt; &amp;dst, const dcomplex &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchFaceDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1PatchFaceDataOpsInteger.html</filename>
    <base>PatchFaceDataBasicOps&lt; int &gt;</base>
    <member kind="function">
      <type></type>
      <name>PatchFaceDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsInteger.html</anchorfile>
      <anchor>ab143b3340babe26b0268f20215da13f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchFaceDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsInteger.html</anchorfile>
      <anchor>ad3df30b54035bae5cffc4defa841492a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsInteger.html</anchorfile>
      <anchor>ae0884a4b445b5071697c0b16d8b78aba</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; int &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsInteger.html</anchorfile>
      <anchor>a8922c5f6856307aa48e83b4ce1214431</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; int &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::FaceData&lt; int &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsInteger.html</anchorfile>
      <anchor>aea00d162f742d2953817de032ba6659f</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Patch &gt; &amp;patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsInteger.html</anchorfile>
      <anchor>a3bd606fec548436e72e4ba44d4b6f99d</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; int &gt; &gt; &amp;data, const hier::Box &amp;box, std::ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsInteger.html</anchorfile>
      <anchor>a58495beb388ba2c5339dcf05816185e1</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; int &gt; &gt; &amp;dst, const int &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsInteger.html</anchorfile>
      <anchor>ae142019b8f1302ceef795727e498124a</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; int &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::FaceData&lt; int &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchFaceDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchFaceDataOpsReal.html</filename>
    <templarg></templarg>
    <base>SAMRAI::math::PatchFaceDataBasicOps</base>
    <base>SAMRAI::math::PatchFaceDataMiscellaneousOpsReal</base>
    <base>SAMRAI::math::PatchFaceDataNormOpsReal</base>
    <member kind="function">
      <type></type>
      <name>PatchFaceDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsReal.html</anchorfile>
      <anchor>ae2cab18bb76b157b58d1f164bfab38e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchFaceDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsReal.html</anchorfile>
      <anchor>a74ee463825408d2afa8bf73f22403b1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsReal.html</anchorfile>
      <anchor>ae324c5cc9ba7a26622e7e85d61f4610d</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsReal.html</anchorfile>
      <anchor>a022af55d8b5d17be466e24b6ab5944d3</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Patch &gt; &amp;patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsReal.html</anchorfile>
      <anchor>ad483dc88368b123514044727685964ce</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, std::ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsReal.html</anchorfile>
      <anchor>aeb754eb5465e8557edb61ef8133fde92</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::FaceData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchNodeDataBasicOps</name>
    <filename>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchNodeDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a00e9a9e969cf0a3010ebec42d2ba68d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchNodeDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a1f1be645f5d660dcb45a11d3b3d237b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>acfe5577164fd756802ba737ec0f3f14c</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a524342784b1f0e88107ce40b43676611</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src, const TYPE &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a78809712cbaa2b9cd337e2e99b1bc004</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>ab29d6417a3982cb78647c982f99f4a63</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a943b790e7f4c5b32b3b7a621296285e6</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a692fffa1e27334e1c9b892b46510f0c2</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>ac4c864dea47f53b08d8e29ecd9dbceac</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a00c12a509d1a60f96c688847e8705844</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src1, const TYPE &amp;beta, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a75aeba066826903a36b200fcc7bdadb0</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a25d3ca87e33b2b1febf11a19799d96ea</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>ab22e15662c863eb51076e7b7f81f5481</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a3198802fb19552f572d0a4534bd0a885</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a8f1de8228ec6b392c461eb77eace8cc7</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;width, const TYPE &amp;low, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchNodeDataMiscellaneousOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchNodeDataMiscellaneousOpsReal.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>PatchNodeDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>aa768132645987d8c2df88cbe055f6651</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchNodeDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a43dd4d8c3cdd1d98d45164abe2607c7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a764eb3baa72ff913323b527d42c5438d</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;data1, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;data2, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a04901a5b756df08b9747ca557abedd24</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src, const TYPE &amp;alpha, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>aafa18ae6a4a40a0822c5d50a6dac9cb0</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a89cbc3b130700c31dfa8b2a3943bdbca</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;numer, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;denom, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>afe472de7195077e3b50afc1019541c39</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;numer, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;denom, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchNodeDataNormOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</filename>
    <member kind="function">
      <type></type>
      <name>PatchNodeDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a7765f182fac61ac04be9e433986f4865</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchNodeDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a0369a9d0c5933c9ee8fc572b1ea82ff4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>ad89af34c07bd28238670db4b50d68510</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a5563516877c7f441e1fe725181eec025</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; dcomplex &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a5c5464ee6e0f2412134e678ce2473314</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::NodeData&lt; dcomplex &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a4255bc7dbf5be845d12f518be417fca4</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>af04163550941cb434dddaf145f171dcc</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a95c93611c90da16f954e0f62491dd094</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; dcomplex &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::NodeData&lt; dcomplex &gt; &gt; &amp;weight, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a56bb96df6445e094bd29a00e8516da63</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a572ef008032af55f4ed03d3c8bbcb09b</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; dcomplex &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::NodeData&lt; dcomplex &gt; &gt; &amp;weight, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a51b3654d2ea13416747d0e051c403dd8</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>ac30f97f6371e12dbd156446e03c08174</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; dcomplex &gt; &gt; &amp;data1, const boost::shared_ptr&lt; pdat::NodeData&lt; dcomplex &gt; &gt; &amp;data2, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a7fe27b9607e9e7e2e004effe749c54d4</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;vol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchNodeDataNormOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>PatchNodeDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a27038b8d8b8683e7aac9c6cea847cfec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchNodeDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a78a53942a470492a7ecbbb4313b8d51e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>ab64672924ebb0131bece7bfd37614513</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>ad42a8e6dbeee4a7f2df5752710845c04</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a6d8d48b5e03aec74099d7e947572643e</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a831b14c36a1c2b740c9ec752add1b2fc</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a86d27e03d374dddf40da930c52e104bb</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a9960e03db7d5cf4962b2e508acac7abb</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;weight, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a09ad15bd70dcbdb6122d9fd16fabf6af</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a21a064406236196f3d2093604d3488a9</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;weight, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a45cf3f6f11ef42050f9184f39067729a</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a296d1293aab3e1d9dad0ae5ed19ba5dc</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;data1, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;data2, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>aede2017db366e1104609c2aa758e7961</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::NodeData&lt; double &gt; &gt; &amp;vol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchNodeDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1PatchNodeDataOpsComplex.html</filename>
    <base>PatchNodeDataBasicOps&lt; dcomplex &gt;</base>
    <base>SAMRAI::math::PatchNodeDataNormOpsComplex</base>
    <member kind="function">
      <type></type>
      <name>PatchNodeDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsComplex.html</anchorfile>
      <anchor>a824e85ee8c2c07b605ed3940f28cd242</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchNodeDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsComplex.html</anchorfile>
      <anchor>a10158a5c2ceab4d4b04e20213d85483a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsComplex.html</anchorfile>
      <anchor>af3f40631c6ed731a3db20a5f75de6911</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; dcomplex &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::NodeData&lt; dcomplex &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsComplex.html</anchorfile>
      <anchor>a11ba6ffe719afa2764fe50fc0d1930f3</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Patch &gt; &amp;patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsComplex.html</anchorfile>
      <anchor>ada23c9ef5213efe130a8101456c612a1</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, std::ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsComplex.html</anchorfile>
      <anchor>a2a891a29850d147124a2981458765fff</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; dcomplex &gt; &gt; &amp;dst, const dcomplex &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchNodeDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1PatchNodeDataOpsInteger.html</filename>
    <base>PatchNodeDataBasicOps&lt; int &gt;</base>
    <member kind="function">
      <type></type>
      <name>PatchNodeDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsInteger.html</anchorfile>
      <anchor>ace73805fd736e4dff0f7be1f69e657cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchNodeDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsInteger.html</anchorfile>
      <anchor>aa31af0021eb27b517b7d40c72ad05e8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsInteger.html</anchorfile>
      <anchor>aae360bad6e772550b45fa824ae73036d</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; int &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsInteger.html</anchorfile>
      <anchor>abf736f31ccf80f77f4b92696bf629dca</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; int &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::NodeData&lt; int &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsInteger.html</anchorfile>
      <anchor>a34a73e739b9ccaf10b83313b81b27b66</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Patch &gt; &amp;patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsInteger.html</anchorfile>
      <anchor>a7743ff502fdf431c656327821c85f70e</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; int &gt; &gt; &amp;data, const hier::Box &amp;box, std::ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsInteger.html</anchorfile>
      <anchor>a0ab3d0a930b69cfa1e29fd25bcf26f59</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; int &gt; &gt; &amp;dst, const int &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsInteger.html</anchorfile>
      <anchor>ae8e4a6ac5db045fc53e19654a90b756e</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; int &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::NodeData&lt; int &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchNodeDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchNodeDataOpsReal.html</filename>
    <templarg></templarg>
    <base>SAMRAI::math::PatchNodeDataBasicOps</base>
    <base>SAMRAI::math::PatchNodeDataMiscellaneousOpsReal</base>
    <base>SAMRAI::math::PatchNodeDataNormOpsReal</base>
    <member kind="function">
      <type></type>
      <name>PatchNodeDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsReal.html</anchorfile>
      <anchor>a02592f39f921205dec612250ed90a26e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchNodeDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsReal.html</anchorfile>
      <anchor>a76ce9ae8cbc3571e768323e4b7e63f8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsReal.html</anchorfile>
      <anchor>a065b6bce902fa96017499827a4e3c51e</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsReal.html</anchorfile>
      <anchor>a8f64ec60399924104ec3ede0b44bbcbe</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Patch &gt; &amp;patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsReal.html</anchorfile>
      <anchor>ac134cbd4efaa1e3616e720bdb82e7fb0</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, std::ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsReal.html</anchorfile>
      <anchor>a1afa08a54afccc1853a89cb922183be8</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::NodeData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchSideDataBasicOps</name>
    <filename>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchSideDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a957038f459a7869abe1c9b264d1b6c2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchSideDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a3ec01161b626e572749a27547fe7a5b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>aa9899c95afac0220a80c3762159fa139</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>ad8f5786c4257c1f4ad409dd618010f11</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src, const TYPE &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a1f44237fd1302eb7b5245de9e2a472e1</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a5e756a6b617e8ec3656a5c96d8ff77ad</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a20f4ba928ed2bc97010f2aa350fdcc01</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a72af46ce0370ac2c7901b43d9f2106f5</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>ae12715daab684b8ce8e129380ba3fef2</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a7a3b554b035db02158fa266e0016716a</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src1, const TYPE &amp;beta, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a31b5f4ca671875a6a53810685ca0b5dc</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a6a9537d432fc4a1c3b58a9c7eec1d2c9</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src1, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src2, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a81327086d7668746e1d751eacec253e7</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>ae350cbf64c086f6033b4fb604bd7a279</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a2227ef6eb878f87785b48b08d172ce1e</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;width, const TYPE &amp;low, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchSideDataMiscellaneousOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchSideDataMiscellaneousOpsReal.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>PatchSideDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a2349f9633018895f52ed44083034c505</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchSideDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>acfb1b2bb4b7a9f87f24b2f1e557112fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a836f0e9c72c3c9033f9ae64518ca73f5</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;data1, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;data2, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a7ee5b696290188413f372cf5af2666f5</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src, const TYPE &amp;alpha, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a3cf5587dee022b30c4e15ca092d3cdf2</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a62f541862849621e921cd7666b3ec95c</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;numer, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;denom, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a7c8365de99f53326b81bc53ea7a8dcd9</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;numer, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;denom, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchSideDataNormOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</filename>
    <member kind="function">
      <type></type>
      <name>PatchSideDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>aec6dbd425216378750b3e6a8464b1802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchSideDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>ac681212ac55e8166754b4f9b7485639f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a5bf5268c8730bb8c6e5203d8f349d82a</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a6ff521ca50ca08d09797e28bb9ce54c3</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; dcomplex &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a06c1ca4c2200367cdc4abcd35246d07a</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::SideData&lt; dcomplex &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a7bfdc748982b2ee0c89bff713966dc86</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a80970754495dd85cb65ed8b95cef591a</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>aa20f49ec3dbaa9260ba35d26ec7989dd</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; dcomplex &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::SideData&lt; dcomplex &gt; &gt; &amp;weight, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a2948e25e255c5d1ea3c5d5695c1d4c3c</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a3f6e1eb49a467037164268990c2be73f</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; dcomplex &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::SideData&lt; dcomplex &gt; &gt; &amp;weight, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a56ac38f7b16db363329dc376272462a9</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a815f89d4c9917ee3c84d655a9dcc1978</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; dcomplex &gt; &gt; &amp;data1, const boost::shared_ptr&lt; pdat::SideData&lt; dcomplex &gt; &gt; &amp;data2, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a53b7ef885eb0d3b1948726bd3d5d185a</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;vol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchSideDataNormOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>PatchSideDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a435ad742fda66db7e3432b9b7ec80562</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchSideDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>ac22a0364795a802ded560722d8451e0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>ae152410d9d14a427ab2990ffe6c56a92</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a17c33dc298d82cba119783bd70bb1f27</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;cvol, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a4945f7828f0ef94145c5ba3203629c6b</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a47adfffb4160650db3de1cdfbfd8682e</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a72be35471bcc059fca6250d4c6375be1</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a5f3b81cd13cd5e0f4cd1d8e534616847</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;weight, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>af3b674af9bfce3f134553dd51ee82309</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a6b61591ad6bda73494892ca08ac85672</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;data, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;weight, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a262b4769d4fefd02ff4d7eaffe7aa813</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a4ded42f824cc5abcfed55d465b10f529</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;data1, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;data2, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;cvol=boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a258a62d9f5759f677abbab97d94f56d2</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, const boost::shared_ptr&lt; pdat::SideData&lt; double &gt; &gt; &amp;vol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchSideDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1PatchSideDataOpsComplex.html</filename>
    <base>PatchSideDataBasicOps&lt; dcomplex &gt;</base>
    <base>SAMRAI::math::PatchSideDataNormOpsComplex</base>
    <member kind="function">
      <type></type>
      <name>PatchSideDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsComplex.html</anchorfile>
      <anchor>a701a025299fdb60cff320f2be3db447c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchSideDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsComplex.html</anchorfile>
      <anchor>a8702f767a073ec8d8f39e25ec738ffd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsComplex.html</anchorfile>
      <anchor>aeceeed181d7fba447ee7c881a639e551</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; dcomplex &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::SideData&lt; dcomplex &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsComplex.html</anchorfile>
      <anchor>a2e40a6c6afad8bfd9a5d696400b1991e</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Patch &gt; &amp;patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsComplex.html</anchorfile>
      <anchor>a9d8b779816de5e9aad2026919ae9794c</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; dcomplex &gt; &gt; &amp;data, const hier::Box &amp;box, std::ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsComplex.html</anchorfile>
      <anchor>a07c6318abbfc94b9d79d806e7d7e47ef</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; dcomplex &gt; &gt; &amp;dst, const dcomplex &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchSideDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1PatchSideDataOpsInteger.html</filename>
    <base>PatchSideDataBasicOps&lt; int &gt;</base>
    <member kind="function">
      <type></type>
      <name>PatchSideDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsInteger.html</anchorfile>
      <anchor>ab9e8cf54dc26e62e31ce86b412a5454e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchSideDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsInteger.html</anchorfile>
      <anchor>abecbb54cf481922dc9b59defee956750</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsInteger.html</anchorfile>
      <anchor>a9aa2167b8883590c035cd47e884046bc</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; int &gt; &gt; &amp;data, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsInteger.html</anchorfile>
      <anchor>a50819d583fe4c2ce2a2a6831bb3cb012</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; int &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::SideData&lt; int &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsInteger.html</anchorfile>
      <anchor>ae2381bfe03008a88a1454bc33c6d2938</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Patch &gt; &amp;patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsInteger.html</anchorfile>
      <anchor>aa9f2b8ba9fec395e33b77edf292e04af</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; int &gt; &gt; &amp;data, const hier::Box &amp;box, std::ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsInteger.html</anchorfile>
      <anchor>a76886b78515809823f314ac2ae63ea19</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; int &gt; &gt; &amp;dst, const int &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsInteger.html</anchorfile>
      <anchor>a4f7510e14d91492c66c7351fc378f8a2</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; int &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::SideData&lt; int &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchSideDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchSideDataOpsReal.html</filename>
    <templarg></templarg>
    <base>SAMRAI::math::PatchSideDataBasicOps</base>
    <base>SAMRAI::math::PatchSideDataMiscellaneousOpsReal</base>
    <base>SAMRAI::math::PatchSideDataNormOpsReal</base>
    <member kind="function">
      <type></type>
      <name>PatchSideDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsReal.html</anchorfile>
      <anchor>a107c674693369be3cb5116a9eae0fd3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchSideDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsReal.html</anchorfile>
      <anchor>a10933bc757bfcbfb5a2fff8d9e0be9f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsReal.html</anchorfile>
      <anchor>a7ea6e348e7efe97b78006f037441107c</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;dst, const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;src, const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsReal.html</anchorfile>
      <anchor>a6e09585acac21aa7c5686bc23eae25c3</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Patch &gt; &amp;patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsReal.html</anchorfile>
      <anchor>a7b246e5afe6c81324b68414313cc89d0</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;data, const hier::Box &amp;box, std::ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsReal.html</anchorfile>
      <anchor>ae6cc30403600d0c6a28ddb7beda9c87b</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::SideData&lt; TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const hier::Box &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::mesh</name>
    <filename>namespaceSAMRAI_1_1mesh.html</filename>
    <class kind="class">SAMRAI::mesh::BalanceBoxBreaker</class>
    <class kind="struct">SAMRAI::mesh::BalanceUtilities</class>
    <class kind="class">SAMRAI::mesh::BergerRigoutsos</class>
    <class kind="class">SAMRAI::mesh::BergerRigoutsosNode</class>
    <class kind="class">SAMRAI::mesh::BoxGeneratorStrategy</class>
    <class kind="struct">SAMRAI::mesh::BoxInTransit</class>
    <class kind="class">SAMRAI::mesh::BoxTransitSet</class>
    <class kind="class">SAMRAI::mesh::CascadePartitioner</class>
    <class kind="class">SAMRAI::mesh::CascadePartitionerTree</class>
    <class kind="class">SAMRAI::mesh::ChopAndPackLoadBalancer</class>
    <class kind="class">SAMRAI::mesh::GraphLoadBalancer</class>
    <class kind="class">SAMRAI::mesh::GriddingAlgorithm</class>
    <class kind="class">SAMRAI::mesh::GriddingAlgorithmConnectorWidthRequestor</class>
    <class kind="class">SAMRAI::mesh::GriddingAlgorithmStrategy</class>
    <class kind="class">SAMRAI::mesh::LoadBalanceStrategy</class>
    <class kind="class">SAMRAI::mesh::MultiblockGriddingTagger</class>
    <class kind="class">SAMRAI::mesh::PartitioningParams</class>
    <class kind="class">SAMRAI::mesh::SpatialKey</class>
    <class kind="class">SAMRAI::mesh::StandardTagAndInitialize</class>
    <class kind="class">SAMRAI::mesh::StandardTagAndInitializeConnectorWidthRequestor</class>
    <class kind="class">SAMRAI::mesh::StandardTagAndInitStrategy</class>
    <class kind="class">SAMRAI::mesh::TagAndInitializeStrategy</class>
    <class kind="class">SAMRAI::mesh::TileClustering</class>
    <class kind="class">SAMRAI::mesh::TransitLoad</class>
    <class kind="class">SAMRAI::mesh::TreeLoadBalancer</class>
    <class kind="class">SAMRAI::mesh::VoucherTransitLoad</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1mesh.html</anchorfile>
      <anchor>aa3c65f953eb2f054a992b170e51e2976</anchor>
      <arglist>(std::ostream &amp;co, const BalanceBoxBreaker::TrialBreak &amp;tb)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1mesh.html</anchorfile>
      <anchor>a9ac62d0c6188a1e6103cae1e8979ffc8</anchor>
      <arglist>(std::ostream &amp;os, const PartitioningParams &amp;pp)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1mesh.html</anchorfile>
      <anchor>a9c82905b5f96e24b85545ce47c3e18ff</anchor>
      <arglist>(std::ostream &amp;s, const SpatialKey &amp;spatial_key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GCD</name>
      <anchorfile>namespaceSAMRAI_1_1mesh.html</anchorfile>
      <anchor>ae1fa4be093def34c110b92efdd8da30d</anchor>
      <arglist>(const int a, const int b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::BalanceBoxBreaker</name>
    <filename>classSAMRAI_1_1mesh_1_1BalanceBoxBreaker.html</filename>
    <member kind="function">
      <type></type>
      <name>BalanceBoxBreaker</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BalanceBoxBreaker.html</anchorfile>
      <anchor>a41cce240b3be62737a241bf81a3c1b95</anchor>
      <arglist>(const PartitioningParams &amp;pparams, bool print_break_steps=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BalanceBoxBreaker</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BalanceBoxBreaker.html</anchorfile>
      <anchor>a28eb45f4d6366e5bca4a88cdf42b1d94</anchor>
      <arglist>(const BalanceBoxBreaker &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>breakOffLoad</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BalanceBoxBreaker.html</anchorfile>
      <anchor>aaa14c18e477421b75fd5af8ff283f7bc</anchor>
      <arglist>(hier::BoxContainer &amp;breakoff, hier::BoxContainer &amp;leftover, double &amp;brk_load, const hier::Box &amp;box, double ideal_load, double low_load, double high_load, double threshold_width) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrintBreakSteps</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BalanceBoxBreaker.html</anchorfile>
      <anchor>a10c5871c08e7c56842defbe6a8b76bd0</anchor>
      <arglist>(bool print_break_steps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>burstBox</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BalanceBoxBreaker.html</anchorfile>
      <anchor>a96d65a55b4eac5e1236e0693580db551</anchor>
      <arglist>(hier::BoxContainer &amp;boxes, const hier::Box &amp;bursty, const hier::Box &amp;solid)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>computeBalancePenalty</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BalanceBoxBreaker.html</anchorfile>
      <anchor>a0ad955c8c3a47aaa046f9594c185e741</anchor>
      <arglist>(double imbalance)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>computeWidthScore</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BalanceBoxBreaker.html</anchorfile>
      <anchor>aa4e6cd662de78726c141929a216fff27</anchor>
      <arglist>(const hier::IntVector &amp;box_size, double threshold_width)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>computeWidthScore</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BalanceBoxBreaker.html</anchorfile>
      <anchor>a06325847ad6f921562c3d00b0846c999</anchor>
      <arglist>(const hier::BoxContainer &amp;boxes, double threshold_width)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BalanceBoxBreaker.html</anchorfile>
      <anchor>a73adfbcf440c052243c687e2c4d8fa9d</anchor>
      <arglist>(std::ostream &amp;os, const TrialBreak &amp;tb)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::mesh::BalanceUtilities</name>
    <filename>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</filename>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>binPack</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>a9cf29c89fc3719cb605055c75d03cb48</anchor>
      <arglist>(hier::ProcessorMapping &amp;mapping, std::vector&lt; double &gt; &amp;weights, int nproc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>spatialBinPack</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>a2f830e0fe5db6e51f868fafacdd65ad8</anchor>
      <arglist>(hier::ProcessorMapping &amp;mapping, std::vector&lt; double &gt; &amp;weights, hier::BoxContainer &amp;boxes, const int nproc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>recursiveBisectionUniform</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>af5c89c6c3e18619fec4ea501598b535f</anchor>
      <arglist>(hier::BoxContainer &amp;out_boxes, std::list&lt; double &gt; &amp;out_workloads, const hier::BoxContainer &amp;in_boxes, double ideal_workload, const double workload_tolerance, const hier::IntVector &amp;min_size, const hier::IntVector &amp;cut_factor, const hier::IntVector &amp;bad_interval, const hier::BoxContainer &amp;physical_domain)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>recursiveBisectionNonuniform</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>a91743b7dae52696baf20837ad5df2dbf</anchor>
      <arglist>(hier::BoxContainer &amp;out_boxes, std::list&lt; double &gt; &amp;out_workloads, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;in_level, int work_id, double ideal_workload, const double workload_tolerance, const hier::IntVector &amp;min_size, const hier::IntVector &amp;cut_factor, const hier::IntVector &amp;bad_interval, const hier::BoxContainer &amp;physical_domain)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>computeDomainDependentProcessorLayout</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>a96a40c7af2adca69a5a77261e30ce5cd</anchor>
      <arglist>(hier::IntVector &amp;proc_dist, int num_procs, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>computeDomainIndependentProcessorLayout</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>a0daffa849931598823d3f8a4f6be32c0</anchor>
      <arglist>(hier::IntVector &amp;proc_dist, int num_procs, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sortDescendingBoxWorkloads</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>a1df6f03ad8e5a3b8bc1d5f36986d160a</anchor>
      <arglist>(hier::BoxContainer &amp;boxes, std::vector&lt; double &gt; &amp;workload)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>computeNonUniformWorkload</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>a60465fbe335ac50e582163db963f2994</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Patch &gt; &amp;patch, int wrk_indx, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findSmallBoxesInPostbalance</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>a080df275619b7acb4544858bbed78ab7</anchor>
      <arglist>(std::ostream &amp;co, const std::string &amp;border, const hier::MappingConnector &amp;post_to_pre, const hier::IntVector &amp;min_width, size_t min_vol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findSmallBoxesInPostbalance</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>a8061561064f2f3065dfee4495fcc6894</anchor>
      <arglist>(std::ostream &amp;co, const std::string &amp;border, const hier::BoxLevel &amp;pre, const hier::BoxLevel &amp;post, const hier::IntVector &amp;min_width, size_t min_vol)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>compareLoads</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>a727df1a3a6776b897ca0a76c0e0205d1</anchor>
      <arglist>(int flags[], double current_load, double new_load, double ideal_load, double low_load, double high_load, const PartitioningParams &amp;pparams)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>computeLoadBalanceEfficiency</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>a05fb541a77a1274dbf2cbb886eae3b2d</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, std::ostream &amp;os, int workload_data_id=-1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>constrainMaxBoxSizes</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>ab769d7080e3c73dacd83521ec598e9b0</anchor>
      <arglist>(hier::BoxLevel &amp;box_level, hier::Connector *anchor_to_level, const PartitioningParams &amp;pparams)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>prebalanceBoxLevel</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>ae86ce230485c42da007e8003ddf75edf</anchor>
      <arglist>(hier::BoxLevel &amp;balance_box_level, hier::Connector *balance_to_anchor, const tbox::RankGroup &amp;rank_group)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>reduceAndReportLoadBalance</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>af35d39c4f2c79ea9fe32b1623c4e8ae9</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;local_loads, const tbox::SAMRAI_MPI &amp;mpi, std::ostream &amp;output_stream=tbox::plog)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>BalanceUtilities_PREBALANCE0</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>a4c3a6051043afc497fcdfc3a978e2631</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>BalanceUtilities_PREBALANCE1</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>ae20a69522f8e4d46f96b7df8e0a04e69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::BergerRigoutsos</name>
    <filename>classSAMRAI_1_1mesh_1_1BergerRigoutsos.html</filename>
    <base>SAMRAI::mesh::BoxGeneratorStrategy</base>
    <member kind="function">
      <type></type>
      <name>BergerRigoutsos</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BergerRigoutsos.html</anchorfile>
      <anchor>a077015df5b4550d8c0a49c34d5aa4c9e</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db=boost::shared_ptr&lt; tbox::Database &gt;())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BergerRigoutsos</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BergerRigoutsos.html</anchorfile>
      <anchor>aad317b5cf9b2ae09c549dbfbbcac6de0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findBoxesContainingTags</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BergerRigoutsos.html</anchorfile>
      <anchor>a5358bf6c0948ac12e0337cb93047ea01</anchor>
      <arglist>(boost::shared_ptr&lt; hier::BoxLevel &gt; &amp;new_box_level, boost::shared_ptr&lt; hier::Connector &gt; &amp;tag_to_new, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;tag_level, const int tag_data_index, const int tag_val, const hier::BoxContainer &amp;bound_boxes, const hier::IntVector &amp;min_box, const hier::IntVector &amp;tag_to_new_width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>useDuplicateMPI</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BergerRigoutsos.html</anchorfile>
      <anchor>abae8d588e9798e8da53333862afb0d15</anchor>
      <arglist>(const tbox::SAMRAI_MPI &amp;mpi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimerPrefix</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BergerRigoutsos.html</anchorfile>
      <anchor>aa5fe7541da89b5b88ba2f1f0675a5a18</anchor>
      <arglist>(const std::string &amp;timer_prefix)</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BergerRigoutsos.html</anchorfile>
      <anchor>a1741ca7d64e70b035b6a1359da849b3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEfficiencyTolerance</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BergerRigoutsos.html</anchorfile>
      <anchor>ac0d014121704a1b234d6bd7e769b0530</anchor>
      <arglist>(const double efficiency_tolerance, const int level_number)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEfficiencyTolerance</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BergerRigoutsos.html</anchorfile>
      <anchor>ac1688fe43586dc48de49d8a0435d4cfa</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCombineEfficiency</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BergerRigoutsos.html</anchorfile>
      <anchor>ab78dfb92d65f099aff0942f8aa73bca0</anchor>
      <arglist>(const double combine_efficiency, const int level_number)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCombineEfficiency</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BergerRigoutsos.html</anchorfile>
      <anchor>abd2f3e07b29544e92db12bdac419a3eb</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getFromInput</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BergerRigoutsos.html</anchorfile>
      <anchor>a50e60dd265a642318586706697340a52</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BergerRigoutsosNode</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BergerRigoutsos.html</anchorfile>
      <anchor>a628a2ccf88fe8b593594bbd8d1596d5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::BergerRigoutsosNode</name>
    <filename>classSAMRAI_1_1mesh_1_1BergerRigoutsosNode.html</filename>
    <base protection="private">SAMRAI::tbox::AsyncCommStage::Handler</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BergerRigoutsosNode</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BergerRigoutsosNode.html</anchorfile>
      <anchor>a1835ea51f722200e4c78dead8c4a3134</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BergerRigoutsos</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BergerRigoutsosNode.html</anchorfile>
      <anchor>a213d363bac432fe47ce8d5789f01f90e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::BoxGeneratorStrategy</name>
    <filename>classSAMRAI_1_1mesh_1_1BoxGeneratorStrategy.html</filename>
    <member kind="function">
      <type></type>
      <name>BoxGeneratorStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxGeneratorStrategy.html</anchorfile>
      <anchor>a3b0be96fcf15fe7d7d19bce9ba0a9dfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoxGeneratorStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxGeneratorStrategy.html</anchorfile>
      <anchor>a368ab115138f4b08e36109fc7a83c3da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>findBoxesContainingTags</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxGeneratorStrategy.html</anchorfile>
      <anchor>acf8c6dc992df070e31714cd3df84fe17</anchor>
      <arglist>(boost::shared_ptr&lt; hier::BoxLevel &gt; &amp;new_box_level, boost::shared_ptr&lt; hier::Connector &gt; &amp;tag_to_new, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;tag_level, const int tag_data_index, const int tag_val, const hier::BoxContainer &amp;bound_boxes, const hier::IntVector &amp;min_box, const hier::IntVector &amp;tag_to_new_width)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::mesh::BoxInTransit</name>
    <filename>structSAMRAI_1_1mesh_1_1BoxInTransit.html</filename>
    <member kind="function">
      <type></type>
      <name>BoxInTransit</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BoxInTransit.html</anchorfile>
      <anchor>ae71ba46cb9da5933708ac25623e33dc9</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxInTransit</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BoxInTransit.html</anchorfile>
      <anchor>ad89e9b02bc2ab492ca9d58d070e23697</anchor>
      <arglist>(const hier::Box &amp;origin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxInTransit</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BoxInTransit.html</anchorfile>
      <anchor>ae568f752e912e238e9fafe87af21bfe6</anchor>
      <arglist>(const BoxInTransit &amp;other, const hier::Box &amp;box, int rank, hier::LocalId local_id, double load=-1.)</arglist>
    </member>
    <member kind="function">
      <type>BoxInTransit &amp;</type>
      <name>operator=</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BoxInTransit.html</anchorfile>
      <anchor>aa663c52965bcaeeb09dc8a8361a5b0b0</anchor>
      <arglist>(const BoxInTransit &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOwnerRank</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BoxInTransit.html</anchorfile>
      <anchor>ad3902ed335d78feeacbd2419a2c75150</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::LocalId</type>
      <name>getLocalId</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BoxInTransit.html</anchorfile>
      <anchor>a241c7a0ae680e3d648ae3d9175d487a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::Box &amp;</type>
      <name>getBox</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BoxInTransit.html</anchorfile>
      <anchor>aa484d1d02e79854db7913bb639e9aa57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const hier::Box &amp;</type>
      <name>getBox</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BoxInTransit.html</anchorfile>
      <anchor>a5b23579c5a461eb6cfbfa55315bf58d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::Box &amp;</type>
      <name>getOrigBox</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BoxInTransit.html</anchorfile>
      <anchor>a5332b50baa9bd71cc566def982665965</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const hier::Box &amp;</type>
      <name>getOrigBox</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BoxInTransit.html</anchorfile>
      <anchor>ad048c4e69352e1b5e773a479ce54834a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLoad</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BoxInTransit.html</anchorfile>
      <anchor>ab4705f801bcd0cbae532db79ebb28336</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLoad</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BoxInTransit.html</anchorfile>
      <anchor>abb3ecb3c152fded8e156d7c65a6b1a2e</anchor>
      <arglist>(double boxload)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOriginal</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BoxInTransit.html</anchorfile>
      <anchor>ad3dda40f7bb921f90917862721d13e76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToMessageStream</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BoxInTransit.html</anchorfile>
      <anchor>a88ecaf6850536dc6d5ee544117b2b5d5</anchor>
      <arglist>(tbox::MessageStream &amp;mstream) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromMessageStream</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BoxInTransit.html</anchorfile>
      <anchor>a5f1deb4e0304154f58b54cacb0a6ca56</anchor>
      <arglist>(tbox::MessageStream &amp;mstream)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BoxInTransit.html</anchorfile>
      <anchor>a0d6e84cb8642a5203c4e1cd802383d91</anchor>
      <arglist>(std::ostream &amp;co, const BoxInTransit &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::BoxTransitSet</name>
    <filename>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</filename>
    <base>SAMRAI::mesh::TransitLoad</base>
    <class kind="class">SAMRAI::mesh::BoxTransitSet::Outputter</class>
    <member kind="typedef">
      <type>double</type>
      <name>LoadType</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a3d6e3d112422c0eec198af61e3aebce9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reassignOwnership</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a8010ed679539e59a90933bce6afda9b9</anchor>
      <arglist>(hier::SequentialLocalIdGenerator &amp;id_gen, int new_owner_rank)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putInBoxLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>ae6bd26437ccc23d78a4037770812e614</anchor>
      <arglist>(hier::BoxLevel &amp;box_level) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateLocalBasedMapEdges</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a432d0ad3b028c385f6590255056da0b3</anchor>
      <arglist>(hier::MappingConnector &amp;unbalanced_to_balanced, hier::MappingConnector &amp;balanced_to_unbalanced) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimerPrefix</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>ab923977f63e74a2ed762b7c259f3d798</anchor>
      <arglist>(const std::string &amp;timer_prefix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrintFlags</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a3934b828bb104bc6c4be702f55e8bc22</anchor>
      <arglist>(bool steps, bool pop_steps, bool swap_steps, bool break_steps, bool edge_steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recursivePrint</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a031da993050353f74fe9099645a5efcf</anchor>
      <arglist>(std::ostream &amp;co=tbox::plog, const std::string &amp;border=std::string(), int detail_depth=1) const </arglist>
    </member>
    <member kind="function">
      <type>Outputter</type>
      <name>format</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>ac90fabfa45130c45c32a3d7641bfc87a</anchor>
      <arglist>(const std::string &amp;border=std::string(), int detail_depth=2) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxTransitSet</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>af330a25e354160e170b9daca4503da92</anchor>
      <arglist>(const PartitioningParams &amp;pparams)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxTransitSet</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a1338b5b4f9c6e647491ff4527bdeb305</anchor>
      <arglist>(const BoxTransitSet &amp;other, bool copy_load=true)</arglist>
    </member>
    <member kind="function">
      <type>BoxTransitSet *</type>
      <name>clone</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a0d4cba685b074c44b399646d12436756</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a70b49c15ff9f3bb1dba3603f2a1c4323</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LoadType</type>
      <name>getSumLoad</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a2a7bd7e398e6d4a2dc1b5cd067f846d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertAll</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a72ba240597139f5dd3f8514ab6d277f4</anchor>
      <arglist>(const hier::BoxContainer &amp;box_container)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertAll</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a47417e0dda4275b0c62f73d95829fb44</anchor>
      <arglist>(TransitLoad &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumberOfItems</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>aeaae1e7f61b90714816f06ac6dbab8eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumberOfOriginatingProcesses</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>aac4e247b706192cc6dca1b76471dbaa1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToMessageStream</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>acb0e36ce5c3722fb9d256557924e468e</anchor>
      <arglist>(tbox::MessageStream &amp;msg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromMessageStream</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a43c661d4bbaddad0ce64eb16487ea612</anchor>
      <arglist>(tbox::MessageStream &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>LoadType</type>
      <name>adjustLoad</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a8ff3e33acaf25a32f85bdf1871e0147b</anchor>
      <arglist>(TransitLoad &amp;hold_bin, LoadType ideal_load, LoadType low_load, LoadType high_load)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignToLocal</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a38d938ed0b8e7a441808209c63599549</anchor>
      <arglist>(hier::BoxLevel &amp;balanced_box_level, const hier::BoxLevel &amp;unbalanced_box_level, double flexible_load_tol=0.0, const tbox::SAMRAI_MPI &amp;alt_mpi=tbox::SAMRAI_MPI(MPI_COMM_NULL))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignToLocalAndPopulateMaps</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a4a9bfd66bd8b0e207d61087bf3624b8b</anchor>
      <arglist>(hier::BoxLevel &amp;balanced_box_level, hier::MappingConnector &amp;balanced_to_unbalanced, hier::MappingConnector &amp;unbalanced_to_balanced, double flexible_load_tol=0.0, const tbox::SAMRAI_MPI &amp;alt_mpi=tbox::SAMRAI_MPI(MPI_COMM_NULL))</arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; BoxInTransit, BoxInTransitMoreLoad &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>af010e83e37e29856ed0851fd43a2e3ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; BoxInTransit, BoxInTransitMoreLoad &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a7adb2a19ee61674112a0c295d40576a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; BoxInTransit, BoxInTransitMoreLoad &gt;::reverse_iterator</type>
      <name>reverse_iterator</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a8b9e08c676cd5a5cedebd94101c0301a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; BoxInTransit, BoxInTransitMoreLoad &gt;::key_type</type>
      <name>key_type</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>afca83d4fb19f155408d5b4f1c1dbbd69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; BoxInTransit, BoxInTransitMoreLoad &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a879f5570e79e01a9283ed71e7276633a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a596dd062c373a11903a344db04391151</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a225513a074f3452397d86dbd4324b281</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a5f8402b04eff1ded657e112aa321289f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>aa5633975591157d2eab05248b4ab55b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>af30d9a5c1d85a54718d6ba42963f68a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a83862f275de28b20a116daa3c9f16849</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a4433480006ad42549722647933a25734</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a2759114e6d4efea7cb63375df09e0911</anchor>
      <arglist>(const value_type &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>aa41eb7ca9735bfc55f89c22f5e87b54d</anchor>
      <arglist>(iterator pos)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>erase</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a04f4cb2b74d4a94c5d73e6b8f15a779c</anchor>
      <arglist>(const key_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>ae305846aaa91e95174ab63ab4f83d0fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>a7edf7d618a15954fd223a2ba3b16073e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>aa900a61324312b65c2b91c61ed83b190</anchor>
      <arglist>(BoxTransitSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lower_bound</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>ad2328d0350e0cf499830df42ec1b1e75</anchor>
      <arglist>(const key_type &amp;k) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>upper_bound</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet.html</anchorfile>
      <anchor>adfe8bfe439bb48ac5a9d76f8f999150d</anchor>
      <arglist>(const key_type &amp;k) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::BoxTransitSet::Outputter</name>
    <filename>classSAMRAI_1_1mesh_1_1BoxTransitSet_1_1Outputter.html</filename>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BoxTransitSet</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet_1_1Outputter.html</anchorfile>
      <anchor>a3043dfbc642d53620f167072b86a4525</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxTransitSet_1_1Outputter.html</anchorfile>
      <anchor>afe0b40cec06244091a28e181566588c3</anchor>
      <arglist>(std::ostream &amp;s, const Outputter &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::CascadePartitioner</name>
    <filename>classSAMRAI_1_1mesh_1_1CascadePartitioner.html</filename>
    <base>SAMRAI::mesh::LoadBalanceStrategy</base>
    <member kind="function">
      <type></type>
      <name>CascadePartitioner</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1CascadePartitioner.html</anchorfile>
      <anchor>a143cef8d3e0e0d88e549862fcd1fa078</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;name, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db=boost::shared_ptr&lt; tbox::Database &gt;())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CascadePartitioner</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1CascadePartitioner.html</anchorfile>
      <anchor>a6e839ee2c8c4fbd6d9b5dd290a731980</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSAMRAI_MPI</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1CascadePartitioner.html</anchorfile>
      <anchor>ab1c33f6a247c8e0d28b718365ea1365a</anchor>
      <arglist>(const tbox::SAMRAI_MPI &amp;samrai_mpi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeMPICommunicator</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1CascadePartitioner.html</anchorfile>
      <anchor>a549aa54ee73d30dcd6089dca661e4cf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadBalanceBoxLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1CascadePartitioner.html</anchorfile>
      <anchor>a458871a2c15bc9a1d8cbfb6d82412b33</anchor>
      <arglist>(hier::BoxLevel &amp;balance_box_level, hier::Connector *balance_to_anchor, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const hier::IntVector &amp;min_size, const hier::IntVector &amp;max_size, const hier::BoxLevel &amp;domain_box_level, const hier::IntVector &amp;bad_interval, const hier::IntVector &amp;cut_factor, const tbox::RankGroup &amp;rank_group=tbox::RankGroup()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStatistics</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1CascadePartitioner.html</anchorfile>
      <anchor>ae254e7bec4e2dab59e91c25128e6fa82</anchor>
      <arglist>(std::ostream &amp;output_stream=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1CascadePartitioner.html</anchorfile>
      <anchor>a1ce283a3904dd729cadffd4dc36b2341</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkloadPatchDataIndex</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1CascadePartitioner.html</anchorfile>
      <anchor>a63ed88fe11c46bcddad860f23463cc7e</anchor>
      <arglist>(int data_id, int level_number=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLoadBalanceDependsOnPatchData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1CascadePartitioner.html</anchorfile>
      <anchor>a132a7972786a2230b6035a3dbf2cd07d</anchor>
      <arglist>(int level_number) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CascadePartitionerTree</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1CascadePartitioner.html</anchorfile>
      <anchor>a5c31968636b34bf25ed3aa27b5444f76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::CascadePartitionerTree</name>
    <filename>classSAMRAI_1_1mesh_1_1CascadePartitionerTree.html</filename>
    <member kind="function">
      <type></type>
      <name>CascadePartitionerTree</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1CascadePartitionerTree.html</anchorfile>
      <anchor>a6cddf6e7446481e689e315d4a8ec595f</anchor>
      <arglist>(const CascadePartitioner &amp;partitioner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CascadePartitionerTree</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1CascadePartitionerTree.html</anchorfile>
      <anchor>a7b5c2c374c4f53ef336e3bfc0d4a932a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distributeLoad</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1CascadePartitionerTree.html</anchorfile>
      <anchor>a96c9e00a2aa77a0bfc53fdc3bb63b152</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1CascadePartitionerTree.html</anchorfile>
      <anchor>a9d5bde8e8600be435ed54d8eb6084e0d</anchor>
      <arglist>(std::ostream &amp;co, const std::string &amp;border) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>generationNum</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1CascadePartitionerTree.html</anchorfile>
      <anchor>af1bb4215c89ef21dfa9707930ecea9bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1CascadePartitionerTree.html</anchorfile>
      <anchor>a25d3b899b2fefe51c53d547a938dbe3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsRank</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1CascadePartitionerTree.html</anchorfile>
      <anchor>a1fd9488fcf4bc9845599a2e8422383a9</anchor>
      <arglist>(int rank) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::ChopAndPackLoadBalancer</name>
    <filename>classSAMRAI_1_1mesh_1_1ChopAndPackLoadBalancer.html</filename>
    <base>SAMRAI::mesh::LoadBalanceStrategy</base>
    <member kind="function">
      <type></type>
      <name>ChopAndPackLoadBalancer</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1ChopAndPackLoadBalancer.html</anchorfile>
      <anchor>a6db69c687ed9baa903d80f197e7f6fea</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;name, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db=boost::shared_ptr&lt; tbox::Database &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChopAndPackLoadBalancer</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1ChopAndPackLoadBalancer.html</anchorfile>
      <anchor>aaa24ea7743cbc21e29f765155bcb07de</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db=boost::shared_ptr&lt; tbox::Database &gt;())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ChopAndPackLoadBalancer</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1ChopAndPackLoadBalancer.html</anchorfile>
      <anchor>acd41326c1c4d12e357dc650d157fb5ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxWorkloadFactor</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1ChopAndPackLoadBalancer.html</anchorfile>
      <anchor>aab2e2831967c3e4482ed2eaef2ef8999</anchor>
      <arglist>(double factor, int level_number=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkloadTolerance</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1ChopAndPackLoadBalancer.html</anchorfile>
      <anchor>adeec05d7ac32c2468e3963192a87551e</anchor>
      <arglist>(double tolerance, int level_number=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkloadPatchDataIndex</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1ChopAndPackLoadBalancer.html</anchorfile>
      <anchor>a9524bc66b85f61dbd26c479196c10158</anchor>
      <arglist>(int data_id, int level_number=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniformWorkload</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1ChopAndPackLoadBalancer.html</anchorfile>
      <anchor>af503a774c77b183266a33e6652cc266d</anchor>
      <arglist>(int level_number=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBinPackMethod</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1ChopAndPackLoadBalancer.html</anchorfile>
      <anchor>a50508f23058665b53d34f29415f23865</anchor>
      <arglist>(const std::string &amp;method, int level_number=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIgnoreLevelDomainIsSingleBox</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1ChopAndPackLoadBalancer.html</anchorfile>
      <anchor>a8452f55919adee2a7465e590e7b0a05b</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLoadBalanceDependsOnPatchData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1ChopAndPackLoadBalancer.html</anchorfile>
      <anchor>a2156edcd6cccc24337965fddf91d69b1</anchor>
      <arglist>(int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadBalanceBoxLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1ChopAndPackLoadBalancer.html</anchorfile>
      <anchor>abc7bae6426d7934de9794bdfce19d0b8</anchor>
      <arglist>(hier::BoxLevel &amp;balance_box_level, hier::Connector *balance_to_anchor, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const hier::IntVector &amp;min_size, const hier::IntVector &amp;max_size, const hier::BoxLevel &amp;domain_box_level, const hier::IntVector &amp;bad_interval, const hier::IntVector &amp;cut_factor, const tbox::RankGroup &amp;rank_group=tbox::RankGroup()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1ChopAndPackLoadBalancer.html</anchorfile>
      <anchor>ada9d5dcc91582715f5a3b9d5390240ee</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1ChopAndPackLoadBalancer.html</anchorfile>
      <anchor>a1f7831930b73ba20d8345e7e1289d4a8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::GraphLoadBalancer</name>
    <filename>classSAMRAI_1_1mesh_1_1GraphLoadBalancer.html</filename>
    <base>SAMRAI::mesh::LoadBalanceStrategy</base>
    <member kind="function">
      <type></type>
      <name>GraphLoadBalancer</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GraphLoadBalancer.html</anchorfile>
      <anchor>aed803937969b84096d82778bc187662c</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;name, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db=boost::shared_ptr&lt; tbox::Database &gt;())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GraphLoadBalancer</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GraphLoadBalancer.html</anchorfile>
      <anchor>a6d6e7451827741ac70b43c165f8bee96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkloadPatchDataIndex</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GraphLoadBalancer.html</anchorfile>
      <anchor>abcb3d34d99e2ac6d5453f3bc2b689c43</anchor>
      <arglist>(int data_id, int level_number=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLoadBalanceDependsOnPatchData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GraphLoadBalancer.html</anchorfile>
      <anchor>affaef96d0e746207afe9f5852936cd07</anchor>
      <arglist>(int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadBalanceBoxLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GraphLoadBalancer.html</anchorfile>
      <anchor>a30120e79facbc939074be8c4640cadb1</anchor>
      <arglist>(hier::BoxLevel &amp;balance_box_level, hier::Connector *balance_to_anchor, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const hier::IntVector &amp;min_size, const hier::IntVector &amp;max_size, const hier::BoxLevel &amp;domain_box_level, const hier::IntVector &amp;bad_interval, const hier::IntVector &amp;cut_factor, const tbox::RankGroup &amp;rank_group=tbox::RankGroup()) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GraphLoadBalancer.html</anchorfile>
      <anchor>a62a26760cc5e89461da48c19539e3d42</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::GriddingAlgorithm</name>
    <filename>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</filename>
    <base>SAMRAI::mesh::GriddingAlgorithmStrategy</base>
    <base>SAMRAI::tbox::Serializable</base>
    <member kind="function">
      <type></type>
      <name>GriddingAlgorithm</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>adc6377fd56368ad17dae103901540c17</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const std::string &amp;object_name, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db, const boost::shared_ptr&lt; TagAndInitializeStrategy &gt; &amp;level_strategy, const boost::shared_ptr&lt; BoxGeneratorStrategy &gt; &amp;generator, const boost::shared_ptr&lt; LoadBalanceStrategy &gt; &amp;balancer, const boost::shared_ptr&lt; LoadBalanceStrategy &gt; &amp;balancer_zero=boost::shared_ptr&lt; LoadBalanceStrategy &gt;())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GriddingAlgorithm</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a7b3401878060600679ef361620847624</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCoarsestLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a0dc18630ab497fca0bdfd135bf35d9cb</anchor>
      <arglist>(const double level_time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeFinerLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a890bae2dd741f14a04160ec5861c9f0a</anchor>
      <arglist>(const int tag_buffer, const bool initial_cycle, const int cycle, const double level_time, const double regrid_start_time=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>regridAllFinerLevels</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>ad2d95b00ed6bf6b3b600565034ec4b22</anchor>
      <arglist>(const int level_number, const std::vector&lt; int &gt; &amp;tag_buffer, const int cycle, const double level_time, const std::vector&lt; double &gt; &amp;regrid_start_time=std::vector&lt; double &gt;(), const bool level_is_coarsest_to_sync=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; TagAndInitializeStrategy &gt;</type>
      <name>getTagAndInitializeStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a5e3807368fa25c7cafa0bf5f3203dafd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; LoadBalanceStrategy &gt;</type>
      <name>getLoadBalanceStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a6e30e25c46601b0c9741cbe24e5c2fdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; LoadBalanceStrategy &gt;</type>
      <name>getLoadBalanceStrategyZero</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a63e2f9d894a6b4bf04d7ae396bf7ea67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a0659732cbfa3531832074b8e1b116c9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSavedTagPatchDataIndex</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a42cafc9906bcfe2ea5fa825a27a3706f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a03626fddf498bb5d5d2a4049f5bf80f2</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>af6f04d9480fc40e6c74e429c52c8e185</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStatistics</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a2ee22b4801e5f37e63447dc7490bf8e0</anchor>
      <arglist>(std::ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a2ae592faf8f7a149ef42970ad83076f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>EXISTING_FINE_PATCHES_TAG_VAL</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>af9be6bfccae71e3f58e2604506c32050</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NEW_FINE_PATCHES_TAG_VAL</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>abdbf7079dbc2db4c1a294ec731714e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>BUFFER_TAG_VAL</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>aa6afb61daf2ec5b609afbc5ed11fcb86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::GriddingAlgorithmConnectorWidthRequestor</name>
    <filename>classSAMRAI_1_1mesh_1_1GriddingAlgorithmConnectorWidthRequestor.html</filename>
    <base>SAMRAI::hier::PatchHierarchy::ConnectorWidthRequestorStrategy</base>
    <member kind="function">
      <type></type>
      <name>GriddingAlgorithmConnectorWidthRequestor</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithmConnectorWidthRequestor.html</anchorfile>
      <anchor>a8bd1dd8d48aa3a236362fff601868775</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeRequiredConnectorWidths</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithmConnectorWidthRequestor.html</anchorfile>
      <anchor>ab29d7f84b05926a980717646e7a16dae</anchor>
      <arglist>(std::vector&lt; hier::IntVector &gt; &amp;self_connector_widths, std::vector&lt; hier::IntVector &gt; &amp;fine_connector_widths, const hier::PatchHierarchy &amp;patch_hierarchy) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTagToClusterWidth</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithmConnectorWidthRequestor.html</anchorfile>
      <anchor>aef3cc88590acfe15984b270fb52080d2</anchor>
      <arglist>(std::vector&lt; hier::IntVector &gt; &amp;tag_to_cluster_width)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::GriddingAlgorithmStrategy</name>
    <filename>classSAMRAI_1_1mesh_1_1GriddingAlgorithmStrategy.html</filename>
    <member kind="function">
      <type></type>
      <name>GriddingAlgorithmStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithmStrategy.html</anchorfile>
      <anchor>ac66a495166fdc78a84fe45848e09bea1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GriddingAlgorithmStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithmStrategy.html</anchorfile>
      <anchor>a0e896b76805fc074e90eae21aa956b85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>makeCoarsestLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithmStrategy.html</anchorfile>
      <anchor>abc3105d7f7328bc1a0b4e99e37924d73</anchor>
      <arglist>(const double level_time)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>makeFinerLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithmStrategy.html</anchorfile>
      <anchor>a2308dc7afdfec02156a3ad9daad1426d</anchor>
      <arglist>(const int tag_buffer, const bool initial_cycle, const int cycle, const double level_time, const double regrid_start_time=0.0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>regridAllFinerLevels</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithmStrategy.html</anchorfile>
      <anchor>a355e9c2c331a4a012370310d88cf96c2</anchor>
      <arglist>(const int level_number, const std::vector&lt; int &gt; &amp;tag_buffer, const int cycle, const double level_time, const std::vector&lt; double &gt; &amp;regrid_start_time=std::vector&lt; double &gt;(), const bool level_is_coarsest_to_sync=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; TagAndInitializeStrategy &gt;</type>
      <name>getTagAndInitializeStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithmStrategy.html</anchorfile>
      <anchor>a9bc169fa1026482c1b24ec63164b9ed0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithmStrategy.html</anchorfile>
      <anchor>a33f42480fc65b0f9d03c795c15be691e</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::LoadBalanceStrategy</name>
    <filename>classSAMRAI_1_1mesh_1_1LoadBalanceStrategy.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LoadBalanceStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1LoadBalanceStrategy.html</anchorfile>
      <anchor>a7886ea19b472581a014744d1fb5ad5a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getLoadBalanceDependsOnPatchData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1LoadBalanceStrategy.html</anchorfile>
      <anchor>a26cddcc6d628372374dd30549800bfc5</anchor>
      <arglist>(int level_number) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>loadBalanceBoxLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1LoadBalanceStrategy.html</anchorfile>
      <anchor>a2a6934691d740a0930f1644d5271d6b2</anchor>
      <arglist>(hier::BoxLevel &amp;balance_box_level, hier::Connector *balance_to_anchor, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const hier::IntVector &amp;min_size, const hier::IntVector &amp;max_size, const hier::BoxLevel &amp;domain_box_level, const hier::IntVector &amp;bad_interval, const hier::IntVector &amp;cut_factor, const tbox::RankGroup &amp;rank_group=tbox::RankGroup()) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LoadBalanceStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1LoadBalanceStrategy.html</anchorfile>
      <anchor>af80c05053dd84aac72b9f0b5d912be33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>markLoadForPostprocessing</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1LoadBalanceStrategy.html</anchorfile>
      <anchor>a4d2509cc7c30c8364dc1de602b05b636</anchor>
      <arglist>(int rank, double load, int nbox)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::MultiblockGriddingTagger</name>
    <filename>classSAMRAI_1_1mesh_1_1MultiblockGriddingTagger.html</filename>
    <base>SAMRAI::xfer::RefinePatchStrategy</base>
    <base>SAMRAI::xfer::SingularityPatchStrategy</base>
    <member kind="function">
      <type></type>
      <name>MultiblockGriddingTagger</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1MultiblockGriddingTagger.html</anchorfile>
      <anchor>a7357973c1e27f5a9169feab47c51aabc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiblockGriddingTagger</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1MultiblockGriddingTagger.html</anchorfile>
      <anchor>aad77f88aa892f34ef12c0bb1e64aed99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScratchTagPatchDataIndex</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1MultiblockGriddingTagger.html</anchorfile>
      <anchor>abc07f67ae2ef738f6bb7a3242e0e2ac4</anchor>
      <arglist>(int buf_tag_indx)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPhysicalBoundaryConditions</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1MultiblockGriddingTagger.html</anchorfile>
      <anchor>addac72566ababdfd15eb95987b89fdb8</anchor>
      <arglist>(hier::Patch &amp;patch, const double fill_time, const hier::IntVector &amp;ghost_width_to_fill)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fillSingularityBoundaryConditions</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1MultiblockGriddingTagger.html</anchorfile>
      <anchor>aebd4b9445003b5df9bca46dccc0dd46b</anchor>
      <arglist>(hier::Patch &amp;patch, const hier::PatchLevel &amp;encon_level, boost::shared_ptr&lt; const hier::Connector &gt; dst_to_encon, const hier::Box &amp;fill_box, const hier::BoundaryBox &amp;boundary_box, const boost::shared_ptr&lt; hier::BaseGridGeometry &gt; &amp;grid_geometry)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual hier::IntVector</type>
      <name>getRefineOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1MultiblockGriddingTagger.html</anchorfile>
      <anchor>aeafa7511570d3a84d7b6edc6532e7525</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessRefine</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1MultiblockGriddingTagger.html</anchorfile>
      <anchor>a071dc0ad3c0fc0918e76ad11ad3532c3</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const hier::Box &amp;fine_box, const hier::IntVector &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessRefine</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1MultiblockGriddingTagger.html</anchorfile>
      <anchor>a203981543aaed716ea9d6b997fb877ab</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const hier::Box &amp;fine_box, const hier::IntVector &amp;ratio)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::PartitioningParams</name>
    <filename>classSAMRAI_1_1mesh_1_1PartitioningParams.html</filename>
    <member kind="function">
      <type></type>
      <name>PartitioningParams</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1PartitioningParams.html</anchorfile>
      <anchor>a4c00dd9a36c48322a9a9c06f0b7f20c3</anchor>
      <arglist>(const hier::BaseGridGeometry &amp;grid_geometry, const hier::IntVector &amp;ratio_to_level_zero, const hier::IntVector &amp;min_size, const hier::IntVector &amp;max_size, const hier::IntVector &amp;bad_interval, const hier::IntVector &amp;cut_factor, double flexible_load_tol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartitioningParams</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1PartitioningParams.html</anchorfile>
      <anchor>ab26349e35a52feca4d8d5c9f45d0aaa3</anchor>
      <arglist>(const PartitioningParams &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinLoad</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1PartitioningParams.html</anchorfile>
      <anchor>a0235e821f433208d3c1810cd5902be37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getMinBoxSize</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1PartitioningParams.html</anchorfile>
      <anchor>a11bf5a3424202474a506669f8fd6350d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getMaxBoxSize</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1PartitioningParams.html</anchorfile>
      <anchor>a9c28838faaabddc4905d5f123746dd5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::BoxContainer &amp;</type>
      <name>getDomainBoxes</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1PartitioningParams.html</anchorfile>
      <anchor>aac98cc04ab74174e7d281c893a0866de</anchor>
      <arglist>(const hier::BlockId &amp;bid) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getBadInterval</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1PartitioningParams.html</anchorfile>
      <anchor>aa01e2ca783410f11cf5c1bdd85f77946</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getCutFactor</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1PartitioningParams.html</anchorfile>
      <anchor>a38e8f6a7ad42b114c698bb038074ef1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1PartitioningParams.html</anchorfile>
      <anchor>aa0678e9197f7812ec7a8cdf1d68b8610</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>getFlexibleLoadTol</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1PartitioningParams.html</anchorfile>
      <anchor>ad87996bd1b42d0646703855aa213a9a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>getLoadComparisonTol</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1PartitioningParams.html</anchorfile>
      <anchor>a6dd3c319559ecb9e806a7e33fc1f1020</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1PartitioningParams.html</anchorfile>
      <anchor>ae3753374ec8a303eef40b3557d07f1ab</anchor>
      <arglist>(std::ostream &amp;os, const PartitioningParams &amp;pp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::SpatialKey</name>
    <filename>classSAMRAI_1_1mesh_1_1SpatialKey.html</filename>
    <member kind="function">
      <type></type>
      <name>SpatialKey</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a07e6a04edf9d082f962c65b3e91a01a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialKey</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a07901ca7bea8fb196d515f2f5acf1189</anchor>
      <arglist>(const unsigned int i, const unsigned int j=0, const unsigned int k=0, const unsigned int level_num=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialKey</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a5e7c2d43017eb3df6fe4c2efb14c759f</anchor>
      <arglist>(const SpatialKey &amp;spatial_key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SpatialKey</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>ae591291d8e5b79313cec6360a90a9ba4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SpatialKey &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>af283cfb5a2efc9f1a6ee52974ad88ac6</anchor>
      <arglist>(const SpatialKey &amp;spatial_key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a08d827efa8327dd2b99de78a387805a0</anchor>
      <arglist>(const SpatialKey &amp;spatial_key) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>ad0fc209603395b256ac768c68d676a15</anchor>
      <arglist>(const SpatialKey &amp;spatial_key) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a320742579299911af4679e7a410cfbe8</anchor>
      <arglist>(const SpatialKey &amp;spatial_key) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a65d1c4f8a4ba94878fee4d9f8dcfe467</anchor>
      <arglist>(const SpatialKey &amp;spatial_key) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a0ff9a42043fae90c0158d8f390f3e2ea</anchor>
      <arglist>(const SpatialKey &amp;spatial_key) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>ac6848eaa9f9215e8c749a7838588abc6</anchor>
      <arglist>(const SpatialKey &amp;spatial_key) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToZero</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a348aa8f58480572c0ea27491ad079c85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKey</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a42f56122d5bfb926d5617a4ea24477a0</anchor>
      <arglist>(const unsigned int i=0, const unsigned int j=0, const unsigned int k=0, const unsigned int level_num=0)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a871dd53761e64ccd765418d20211abe6</anchor>
      <arglist>(std::ostream &amp;s, const SpatialKey &amp;spatial_key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::StandardTagAndInitialize</name>
    <filename>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</filename>
    <base>SAMRAI::mesh::TagAndInitializeStrategy</base>
    <member kind="function">
      <type></type>
      <name>StandardTagAndInitialize</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a30290715c6df13d0bebeecde8a536e41</anchor>
      <arglist>(const std::string &amp;object_name, StandardTagAndInitStrategy *tag_strategy, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db=boost::shared_ptr&lt; tbox::Database &gt;())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StandardTagAndInitialize</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a31bef95da25d18cbaa7f0bc2bd744cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>everUsesTimeIntegration</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a5e036116adceeffc3351ce0de0798ae3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesTimeIntegration</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a2deb77bd55c0b4945b727dfbbbbbf0b8</anchor>
      <arglist>(int cycle, double time)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>everUsesRichardsonExtrapolation</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>ad90dccba36f7468e1af7fb568c904b6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesRichardsonExtrapolation</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>acb70f80952d0ae76455a6b63a85db9df</anchor>
      <arglist>(int cycle, double time)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>everUsesGradientDetector</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>ae1022d06d20449d6756b89138290f0f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesGradientDetector</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a37973fbd7eafac500284e62fad4c87ff</anchor>
      <arglist>(int cycle, double time)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>everUsesRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a6a21505303ab5f3b2289621f3f4f7bed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a00ffc7d351d57143366242960d6a9d24</anchor>
      <arglist>(int cycle, double time)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getErrorCoarsenRatio</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>ac900e49b9cb97cd38c9fbd6afe751f60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCoarsenRatios</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>af319c46f151789db160679aaa64b9f63</anchor>
      <arglist>(const std::vector&lt; hier::IntVector &gt; &amp;ratio_to_coarser)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeLevelData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a58203fcd701433280821f37e7202c4eb</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const double init_data_time, const bool can_be_refined, const bool initial_time, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;old_level=boost::shared_ptr&lt; hier::PatchLevel &gt;(), const bool allocate_data=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetHierarchyConfiguration</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>aa6d152fe6848d4726af682f3e250d12d</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocessErrorEstimation</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a36c7119a796fcfc768995ce469f88339</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const int cycle, const double regrid_time, const double regrid_start_time, const bool initial_time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tagCellsForRefinement</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>af30e191b1a04a9e221ab409d896160dd</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;level, const int level_number, const int regrid_cycle, const double regrid_time, const int tag_index, const bool initial_time, const bool coarsest_sync_level, const bool can_be_refined, const double regrid_start_time=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>coarsestLevelBoxesOK</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>af53f4c1917212a5843340f9bea138c21</anchor>
      <arglist>(const hier::BoxContainer &amp;boxes) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>refineUserBoxInputOnly</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a179f9053507ab09c44cb85c026c8c338</anchor>
      <arglist>(int cycle, double time)</arglist>
    </member>
    <member kind="function">
      <type>const StandardTagAndInitializeConnectorWidthRequestor &amp;</type>
      <name>getConnectorWidthRequestor</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a7dba48eb6753bb799572d6b2a37dddea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUserSuppliedRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>ab8e5446ce4ce447c5bbe4cc31756498f</anchor>
      <arglist>(hier::BoxContainer &amp;refine_boxes, const int level_number, const int cycle, const double time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>ab68fd34ae965ff9b744734a72327c16d</anchor>
      <arglist>(const hier::BoxContainer &amp;refine_boxes, const int level_number)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>turnOnRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a23a805e82aa89b07b723c7c004587299</anchor>
      <arglist>(double time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>turnOffRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a32933bb14164ff1c86f121d9c7fe8ba2</anchor>
      <arglist>(double time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>turnOnGradientDetector</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>aed3207a34dc2ca025c2921b8bb8f453c</anchor>
      <arglist>(double time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>turnOffGradientDetector</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a96e96f040208230afffe267fcdabb280</anchor>
      <arglist>(double time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>turnOnRichardsonExtrapolation</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>abe78497f2ae98766654c62bf2f183809</anchor>
      <arglist>(double time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>turnOffRichardsonExtrapolation</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a5d86d0504e8cfb235c82f06225c7f785</anchor>
      <arglist>(double time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processHierarchyBeforeAddingNewLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a234fd28ed6cc943173ccd18ad3de7c6e</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const boost::shared_ptr&lt; hier::BoxLevel &gt; &amp;new_box_level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>processLevelBeforeRemoval</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>ac4b7d24d3a0b74b8470efead57f0b425</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;old_level=boost::shared_ptr&lt; hier::PatchLevel &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkUserTagData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>ae7a9eaa1764fcd1910916cb64f16152a</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const int regrid_cycle, const double regrid_time, const int tag_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkNewLevelTagData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a0cc6a1ff0983b71b164525aa7c476149</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const int tag_index)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::StandardTagAndInitializeConnectorWidthRequestor</name>
    <filename>classSAMRAI_1_1mesh_1_1StandardTagAndInitializeConnectorWidthRequestor.html</filename>
    <base>SAMRAI::hier::PatchHierarchy::ConnectorWidthRequestorStrategy</base>
    <member kind="function">
      <type></type>
      <name>StandardTagAndInitializeConnectorWidthRequestor</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitializeConnectorWidthRequestor.html</anchorfile>
      <anchor>a3ec4c9baa669a9872922e1d78b270f94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeRequiredConnectorWidths</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitializeConnectorWidthRequestor.html</anchorfile>
      <anchor>a3f11b2f51462417606869467bebfeb82</anchor>
      <arglist>(std::vector&lt; hier::IntVector &gt; &amp;self_connector_widths, std::vector&lt; hier::IntVector &gt; &amp;fine_connector_widths, const hier::PatchHierarchy &amp;patch_hierarchy) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::StandardTagAndInitStrategy</name>
    <filename>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</filename>
    <member kind="function">
      <type></type>
      <name>StandardTagAndInitStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>af50f6ecbfd9602e3d99a2cce964ab480</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StandardTagAndInitStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a12bf9c5051030766b26d4f1817cc8209</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLevelDt</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a3e10caf7f929cf1349af983fd41a47af</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, const double dt_time, const bool initial_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>advanceLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a842a6d80aab2762a9a9cbca11cd64be3</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const double current_time, const double new_time, const bool first_step, const bool last_step, const bool regrid_advance=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetTimeDependentData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a64ffdbc5e045072c85a585ec46c24d36</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, const double new_time, const bool can_be_refined)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetDataToPreadvanceState</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>ac4e1369e40bd23ce2b1eceb95f2d2c49</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeLevelData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>acc3f40925b2fe51dbd5742b2a24b2471</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const double init_data_time, const bool can_be_refined, const bool initial_time, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;old_level=boost::shared_ptr&lt; hier::PatchLevel &gt;(), const bool allocate_data=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetHierarchyConfiguration</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a13d73fc9054fdc7830ebd81c372a2492</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level, const int finest_level)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyGradientDetector</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a3f9be742dabb8dfc770ba0f8a6f8d30c</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const double error_data_time, const int tag_index, const bool initial_time, const bool uses_richardson_extrapolation_too)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyRichardsonExtrapolation</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a637f74455a84fbe39d2318f7a378d65e</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, const double error_data_time, const int tag_index, const double deltat, const int error_coarsen_ratio, const bool initial_time, const bool uses_gradient_detector_too)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>coarsenDataForRichardsonExtrapolation</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>ac7bfba6ff925d93abec9d5c48a876d8e</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;coarser_level, const double coarsen_data_time, const bool before_advance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processHierarchyBeforeAddingNewLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a4001c973ac928989d8c7a1924e278178</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const boost::shared_ptr&lt; hier::BoxLevel &gt; &amp;new_box_level)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processLevelBeforeRemoval</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a1f1ad5fc4a0491c28d18f9d8673975a1</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;old_level=boost::shared_ptr&lt; hier::PatchLevel &gt;())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkUserTagData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>aecfc8653c7457c5099cca148dac18065</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const int tag_index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkNewLevelTagData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a7c32206aa506a1d86ca6a7202c9a4eae</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const int tag_index) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::TagAndInitializeStrategy</name>
    <filename>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</filename>
    <member kind="function">
      <type></type>
      <name>TagAndInitializeStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a448364155474657dda09e5f5fabda75f</anchor>
      <arglist>(const std::string &amp;object_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TagAndInitializeStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a0881bc7aed70fbc3a4b243b0604eeaf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getUserSuppliedRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a95ad532f2a490d9818aa224abd206417</anchor>
      <arglist>(hier::BoxContainer &amp;refine_boxes, const int level_number, const int cycle, const double time)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>adcd8c213a5eea947f067e87fec50dcb6</anchor>
      <arglist>(const hier::BoxContainer &amp;refine_boxes, const int level_number)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeLevelData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a129f0fc0d092df0f3da5886d4f44f6e1</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const double init_data_time, const bool can_be_refined, const bool initial_time, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;old_level=boost::shared_ptr&lt; hier::PatchLevel &gt;(), const bool allocate_data=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetHierarchyConfiguration</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a58a9c2633af59ef28ab6fecf0761dd46</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level, const int finest_level)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>tagCellsForRefinement</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>aff973d31fc926e369ca0b76c06ebff98</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const int regrid_cycle, const double regrid_time, const int tag_index, const bool initial_time, const bool coarsest_sync_level, const bool can_be_refined=true, const double regrid_start_time=0.)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>preprocessErrorEstimation</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a45ad4c95abe2e7eb06a6b156504aaea5</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const int cycle, const double regrid_time, const double regrid_start_time, const bool initial_time)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>usesTimeIntegration</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a446fc5d9ea037b3897068469a768fe6f</anchor>
      <arglist>(int cycle, double time)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>everUsesTimeIntegration</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a2c4202c39c0f978d4b910063298da219</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>coarsestLevelBoxesOK</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a967073f61726ab146b080cf95ec8c781</anchor>
      <arglist>(const hier::BoxContainer &amp;boxes) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getErrorCoarsenRatio</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>abc0948d08ac24bb58fab8aae9428fa08</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkCoarsenRatios</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a200d85a2f21b0e7707b6b5a7c735d267</anchor>
      <arglist>(const std::vector&lt; hier::IntVector &gt; &amp;ratio_to_coarser)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>refineUserBoxInputOnly</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a69bfb31615a8383d51c36993f0cf33b1</anchor>
      <arglist>(int cycle, double time)=0</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a5caddcecc07da768fae619b02b55c5f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>processHierarchyBeforeAddingNewLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a39746df2fc2b547a4f461a2227ae2bc0</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const boost::shared_ptr&lt; hier::BoxLevel &gt; &amp;new_box_level)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>processLevelBeforeRemoval</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a56ebcc4ed40bb2f6b6a89b3e7ce7af2e</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;old_level=boost::shared_ptr&lt; hier::PatchLevel &gt;())=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkUserTagData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>aff33558a785e385e9127844b138dce03</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const int regrid_cycle, const double regrid_time, const int tag_index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkNewLevelTagData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>aa8346054e46d5ca9af2354e69fe06a81</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const int tag_index)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::TileClustering</name>
    <filename>classSAMRAI_1_1mesh_1_1TileClustering.html</filename>
    <base>SAMRAI::mesh::BoxGeneratorStrategy</base>
    <member kind="function">
      <type></type>
      <name>TileClustering</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TileClustering.html</anchorfile>
      <anchor>aa91b210cff01270b4325e9f627925ad2</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db=boost::shared_ptr&lt; tbox::Database &gt;())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TileClustering</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TileClustering.html</anchorfile>
      <anchor>a617f1942bd9da47760274fbb87fb3c97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findBoxesContainingTags</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TileClustering.html</anchorfile>
      <anchor>a66ad4b801c0cb2edafcb5d90265f9014</anchor>
      <arglist>(boost::shared_ptr&lt; hier::BoxLevel &gt; &amp;new_box_level, boost::shared_ptr&lt; hier::Connector &gt; &amp;tag_to_new, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;tag_level, const int tag_data_index, const int tag_val, const hier::BoxContainer &amp;bound_boxes, const hier::IntVector &amp;min_box, const hier::IntVector &amp;max_gcw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimerPrefix</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TileClustering.html</anchorfile>
      <anchor>afabd42ab8bf8a1baf0fcf06d7f2ee479</anchor>
      <arglist>(const std::string &amp;timer_prefix)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getFromInput</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TileClustering.html</anchorfile>
      <anchor>abfac144c5b49bbe9fb21a9e12b74e6b3</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::TransitLoad</name>
    <filename>classSAMRAI_1_1mesh_1_1TransitLoad.html</filename>
    <member kind="function">
      <type></type>
      <name>TransitLoad</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>a6559f63419eeab9db9db35f98f2706ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransitLoad</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>a7f4431705d40603fb605e986e18c2fcf</anchor>
      <arglist>(const TransitLoad &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TransitLoad</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>a84c2cec640f254eb31f7f1ae69c238f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>adjustLoad</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>a25b686e4da587cef70252ec908b86ee2</anchor>
      <arglist>(TransitLoad &amp;hold_bin, double ideal_load, double low_load, double high_load)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>assignToLocal</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>ae64bded64f836423f2f1f377d318b5dc</anchor>
      <arglist>(hier::BoxLevel &amp;balanced_box_level, const hier::BoxLevel &amp;unbalanced_box_level, double flexible_load_tol=0.0, const tbox::SAMRAI_MPI &amp;alt_mpi=tbox::SAMRAI_MPI(MPI_COMM_NULL))=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>assignToLocalAndPopulateMaps</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>ac1fb9621253eabd688c014bd03b85dcb</anchor>
      <arglist>(hier::BoxLevel &amp;balanced_box_level, hier::MappingConnector &amp;balanced_to_unbalanced, hier::MappingConnector &amp;unbalanced_to_balanced, double flexible_load_tol=0.0, const tbox::SAMRAI_MPI &amp;alt_mpi=tbox::SAMRAI_MPI(MPI_COMM_NULL))=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TransitLoad *</type>
      <name>clone</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>a9ab06fe7fbb2ecdfe4b31f018a60455f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>a653612602b1ef9113ff668e3b1ad983c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSumLoad</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>a647168789630076733b4d027d3584484</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertAll</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>a87e2b7cd08578de755826c08d9154c0e</anchor>
      <arglist>(const hier::BoxContainer &amp;other)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertAll</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>ad3f85694570866b2b6bfb7f45a0fe202</anchor>
      <arglist>(TransitLoad &amp;other)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>getNumberOfItems</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>a89bbb90a70565df2fa528704ca03b9a3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>getNumberOfOriginatingProcesses</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>a1e0ede51465599fe446207b37b774886</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>empty</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>ac6d4cc39344a57de1f7503eda09436e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>a58ad7825b4f175f60b22265c9f0e6dca</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllowBoxBreaking</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>ad6267a8746d31516100c0fc2f4b82dbf</anchor>
      <arglist>(bool allow_box_breaking)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAllowBoxBreaking</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>a376beb14f249996d88fec9b169274761</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThresholdWidth</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>ab9feb0fc4250ab04fc12f8aff0e90f37</anchor>
      <arglist>(double threshold_width)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getThresholdWidth</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>a17c62da739bce53e942cae86c121a69b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTimerPrefix</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>a982ccd9d8ddc95eaa2ae00b75e0a86e6</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recursivePrint</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>af9a6e7b0b1b5c43a80440c88f3d2ab1a</anchor>
      <arglist>(std::ostream &amp;co=tbox::plog, const std::string &amp;border=std::string(), int detail_depth=1) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putToMessageStream</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>a22ce0cae81747edcef2e8e5fdb1e2865</anchor>
      <arglist>(tbox::MessageStream &amp;msg) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getFromMessageStream</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>a55a7b39d87f581035b39c8ba2333393c</anchor>
      <arglist>(tbox::MessageStream &amp;msg)=0</arglist>
    </member>
    <member kind="friend">
      <type>friend tbox::MessageStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>a39880ddda0af892e9ec9e1a126412570</anchor>
      <arglist>(tbox::MessageStream &amp;msg, const TransitLoad &amp;transit_load)</arglist>
    </member>
    <member kind="friend">
      <type>friend tbox::MessageStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TransitLoad.html</anchorfile>
      <anchor>ab647e24e9eeabd49f948997c3bf33d84</anchor>
      <arglist>(tbox::MessageStream &amp;msg, TransitLoad &amp;transit_load)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::TreeLoadBalancer</name>
    <filename>classSAMRAI_1_1mesh_1_1TreeLoadBalancer.html</filename>
    <base>SAMRAI::mesh::LoadBalanceStrategy</base>
    <member kind="function">
      <type></type>
      <name>TreeLoadBalancer</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TreeLoadBalancer.html</anchorfile>
      <anchor>a15f6ac877c1d92610095d975e0509c12</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;name, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db=boost::shared_ptr&lt; tbox::Database &gt;(), const boost::shared_ptr&lt; tbox::RankTreeStrategy &gt; &amp;rank_tree=boost::shared_ptr&lt; tbox::RankTreeStrategy &gt;())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TreeLoadBalancer</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TreeLoadBalancer.html</anchorfile>
      <anchor>a7e1a6278260a4eafebd5398fac659f4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSAMRAI_MPI</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TreeLoadBalancer.html</anchorfile>
      <anchor>a04d3cffd4ab53b845f8d30ef9d6ace77</anchor>
      <arglist>(const tbox::SAMRAI_MPI &amp;samrai_mpi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeMPICommunicator</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TreeLoadBalancer.html</anchorfile>
      <anchor>a80ea043fa9206101bebae0be445276be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkloadPatchDataIndex</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TreeLoadBalancer.html</anchorfile>
      <anchor>a276c34aadbf791b21b53d38ca4a3004a</anchor>
      <arglist>(int data_id, int level_number=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLoadBalanceDependsOnPatchData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TreeLoadBalancer.html</anchorfile>
      <anchor>a9e4de5cd3e0abdb81dff88323e7093ad</anchor>
      <arglist>(int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadBalanceBoxLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TreeLoadBalancer.html</anchorfile>
      <anchor>abb213d5d1349c5c4d79c46ad7368531c</anchor>
      <arglist>(hier::BoxLevel &amp;balance_box_level, hier::Connector *balance_to_anchor, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int level_number, const hier::IntVector &amp;min_size, const hier::IntVector &amp;max_size, const hier::BoxLevel &amp;domain_box_level, const hier::IntVector &amp;bad_interval, const hier::IntVector &amp;cut_factor, const tbox::RankGroup &amp;rank_group=tbox::RankGroup()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStatistics</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TreeLoadBalancer.html</anchorfile>
      <anchor>abc235fca30ace51cb343170a4d22d5f8</anchor>
      <arglist>(std::ostream &amp;output_stream=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommGraphWriter</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TreeLoadBalancer.html</anchorfile>
      <anchor>ae2005b027a359ce4a92087d81d2fda9d</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::CommGraphWriter &gt; &amp;comm_graph_writer)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TreeLoadBalancer.html</anchorfile>
      <anchor>a658413fbf9a5c60f87cec077c577101f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::VoucherTransitLoad</name>
    <filename>classSAMRAI_1_1mesh_1_1VoucherTransitLoad.html</filename>
    <base>SAMRAI::mesh::TransitLoad</base>
    <member kind="typedef">
      <type>double</type>
      <name>LoadType</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1VoucherTransitLoad.html</anchorfile>
      <anchor>aeaeff2f070f084dcd9d9ec0ec383592d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimerPrefix</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1VoucherTransitLoad.html</anchorfile>
      <anchor>a8332c012af76a2eb65814404cf384319</anchor>
      <arglist>(const std::string &amp;timer_prefix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recursivePrint</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1VoucherTransitLoad.html</anchorfile>
      <anchor>a438a1163b1a891e4740507ed118b12eb</anchor>
      <arglist>(std::ostream &amp;co=tbox::plog, const std::string &amp;border=std::string(), int detail_depth=1) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoucherTransitLoad</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1VoucherTransitLoad.html</anchorfile>
      <anchor>ab26df9e717bf1d8c9ad1b74356d004cf</anchor>
      <arglist>(const PartitioningParams &amp;pparams)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoucherTransitLoad</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1VoucherTransitLoad.html</anchorfile>
      <anchor>a7f14d0f9e31f1cecaee9e0fec7fca257</anchor>
      <arglist>(const VoucherTransitLoad &amp;other, bool copy_load=true)</arglist>
    </member>
    <member kind="function">
      <type>VoucherTransitLoad *</type>
      <name>clone</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1VoucherTransitLoad.html</anchorfile>
      <anchor>a31ddf45363a1904cba07a4d0df4cac2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1VoucherTransitLoad.html</anchorfile>
      <anchor>a530b918451dd922bfa3ecdeb46ae40cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LoadType</type>
      <name>getSumLoad</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1VoucherTransitLoad.html</anchorfile>
      <anchor>a3456a0440ca485a0115f9954f040f657</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertAll</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1VoucherTransitLoad.html</anchorfile>
      <anchor>aaea9b78378d24ef8890c66fc32cd4683</anchor>
      <arglist>(const hier::BoxContainer &amp;box_container)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertAll</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1VoucherTransitLoad.html</anchorfile>
      <anchor>af10fc0186f3f0928a3a1872919d43b95</anchor>
      <arglist>(TransitLoad &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumberOfItems</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1VoucherTransitLoad.html</anchorfile>
      <anchor>ac9bb6bc830e50bbe214cacbf5d1bf7cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumberOfOriginatingProcesses</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1VoucherTransitLoad.html</anchorfile>
      <anchor>a7cfbdb8a01353a13c601e41b109e5f9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToMessageStream</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1VoucherTransitLoad.html</anchorfile>
      <anchor>ae60edef759c6dca92a9e8f4ac37f9092</anchor>
      <arglist>(tbox::MessageStream &amp;msg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromMessageStream</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1VoucherTransitLoad.html</anchorfile>
      <anchor>a2ca399e8322e4daff251a83e4da68571</anchor>
      <arglist>(tbox::MessageStream &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>LoadType</type>
      <name>adjustLoad</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1VoucherTransitLoad.html</anchorfile>
      <anchor>a3cb5143243af54a31415135ea472fc8f</anchor>
      <arglist>(TransitLoad &amp;hold_bin, LoadType ideal_load, LoadType low_load, LoadType high_load)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignToLocal</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1VoucherTransitLoad.html</anchorfile>
      <anchor>a007c71d9ccc2b35cdc1f62c924ff4f41</anchor>
      <arglist>(hier::BoxLevel &amp;balanced_box_level, const hier::BoxLevel &amp;unbalanced_box_level, double flexible_load_tol=0.0, const tbox::SAMRAI_MPI &amp;alt_mpi=tbox::SAMRAI_MPI(MPI_COMM_NULL))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignToLocalAndPopulateMaps</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1VoucherTransitLoad.html</anchorfile>
      <anchor>ac2df82d4c3f95e89fe3e8c3f3e431e01</anchor>
      <arglist>(hier::BoxLevel &amp;balanced_box_level, hier::MappingConnector &amp;balanced_to_unbalanced, hier::MappingConnector &amp;unbalanced_to_balanced, double flexible_load_tol=0.0, const tbox::SAMRAI_MPI &amp;alt_mpi=tbox::SAMRAI_MPI(MPI_COMM_NULL))</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::pdat</name>
    <filename>namespaceSAMRAI_1_1pdat.html</filename>
    <class kind="class">SAMRAI::pdat::ArrayData</class>
    <class kind="class">SAMRAI::pdat::ArrayDataAccess</class>
    <class kind="class">SAMRAI::pdat::ArrayDataIterator</class>
    <class kind="class">SAMRAI::pdat::ArrayDataOperationUtilities</class>
    <class kind="class">SAMRAI::pdat::CellComplexConstantRefine</class>
    <class kind="class">SAMRAI::pdat::CellComplexLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::CellData</class>
    <class kind="class">SAMRAI::pdat::CellDataFactory</class>
    <class kind="class">SAMRAI::pdat::CellDoubleConstantRefine</class>
    <class kind="class">SAMRAI::pdat::CellDoubleLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::CellFloatConstantRefine</class>
    <class kind="class">SAMRAI::pdat::CellFloatLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::CellGeometry</class>
    <class kind="class">SAMRAI::pdat::CellIndex</class>
    <class kind="class">SAMRAI::pdat::CellIntegerConstantRefine</class>
    <class kind="class">SAMRAI::pdat::CellIterator</class>
    <class kind="class">SAMRAI::pdat::CellOverlap</class>
    <class kind="class">SAMRAI::pdat::CellVariable</class>
    <class kind="class">SAMRAI::pdat::CopyOperation</class>
    <class kind="class">SAMRAI::pdat::DoubleAttributeId</class>
    <class kind="class">SAMRAI::pdat::EdgeComplexConstantRefine</class>
    <class kind="class">SAMRAI::pdat::EdgeComplexLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::EdgeData</class>
    <class kind="class">SAMRAI::pdat::EdgeDataFactory</class>
    <class kind="class">SAMRAI::pdat::EdgeDoubleConstantRefine</class>
    <class kind="class">SAMRAI::pdat::EdgeDoubleLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::EdgeFloatConstantRefine</class>
    <class kind="class">SAMRAI::pdat::EdgeFloatLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::EdgeGeometry</class>
    <class kind="class">SAMRAI::pdat::EdgeIndex</class>
    <class kind="class">SAMRAI::pdat::EdgeIntegerConstantRefine</class>
    <class kind="class">SAMRAI::pdat::EdgeIterator</class>
    <class kind="class">SAMRAI::pdat::EdgeOverlap</class>
    <class kind="class">SAMRAI::pdat::EdgeVariable</class>
    <class kind="class">SAMRAI::pdat::FaceComplexConstantRefine</class>
    <class kind="class">SAMRAI::pdat::FaceComplexLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::FaceData</class>
    <class kind="class">SAMRAI::pdat::FaceDataFactory</class>
    <class kind="class">SAMRAI::pdat::FaceDoubleConstantRefine</class>
    <class kind="class">SAMRAI::pdat::FaceDoubleLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::FaceFloatConstantRefine</class>
    <class kind="class">SAMRAI::pdat::FaceFloatLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::FaceGeometry</class>
    <class kind="class">SAMRAI::pdat::FaceIndex</class>
    <class kind="class">SAMRAI::pdat::FaceIntegerConstantRefine</class>
    <class kind="class">SAMRAI::pdat::FaceIterator</class>
    <class kind="class">SAMRAI::pdat::FaceOverlap</class>
    <class kind="class">SAMRAI::pdat::FaceVariable</class>
    <class kind="class">SAMRAI::pdat::FirstLayerCellNoCornersVariableFillPattern</class>
    <class kind="class">SAMRAI::pdat::FirstLayerCellVariableFillPattern</class>
    <class kind="class">SAMRAI::pdat::FirstLayerEdgeVariableFillPattern</class>
    <class kind="class">SAMRAI::pdat::FirstLayerNodeVariableFillPattern</class>
    <class kind="class">SAMRAI::pdat::FirstLayerSideVariableFillPattern</class>
    <class kind="class">SAMRAI::pdat::IndexData</class>
    <class kind="class">SAMRAI::pdat::IndexDataNode</class>
    <class kind="class">SAMRAI::pdat::IndexIterator</class>
    <class kind="class">SAMRAI::pdat::IndexDataFactory</class>
    <class kind="class">SAMRAI::pdat::IndexVariable</class>
    <class kind="class">SAMRAI::pdat::IntegerAttributeId</class>
    <class kind="class">SAMRAI::pdat::NodeComplexInjection</class>
    <class kind="class">SAMRAI::pdat::NodeComplexLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::NodeData</class>
    <class kind="class">SAMRAI::pdat::NodeDataFactory</class>
    <class kind="class">SAMRAI::pdat::NodeDoubleInjection</class>
    <class kind="class">SAMRAI::pdat::NodeDoubleLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::NodeFloatInjection</class>
    <class kind="class">SAMRAI::pdat::NodeFloatLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::NodeGeometry</class>
    <class kind="class">SAMRAI::pdat::NodeIndex</class>
    <class kind="class">SAMRAI::pdat::NodeIntegerInjection</class>
    <class kind="class">SAMRAI::pdat::NodeIterator</class>
    <class kind="class">SAMRAI::pdat::NodeOverlap</class>
    <class kind="class">SAMRAI::pdat::NodeVariable</class>
    <class kind="class">SAMRAI::pdat::OuteredgeData</class>
    <class kind="class">SAMRAI::pdat::OuteredgeDataFactory</class>
    <class kind="class">SAMRAI::pdat::OuteredgeGeometry</class>
    <class kind="class">SAMRAI::pdat::OuteredgeVariable</class>
    <class kind="class">SAMRAI::pdat::OuterfaceComplexConstantRefine</class>
    <class kind="class">SAMRAI::pdat::OuterfaceComplexLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::OuterfaceData</class>
    <class kind="class">SAMRAI::pdat::OuterfaceDataFactory</class>
    <class kind="class">SAMRAI::pdat::OuterfaceDoubleConstantRefine</class>
    <class kind="class">SAMRAI::pdat::OuterfaceDoubleLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::OuterfaceFloatConstantRefine</class>
    <class kind="class">SAMRAI::pdat::OuterfaceFloatLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::OuterfaceGeometry</class>
    <class kind="class">SAMRAI::pdat::OuterfaceIntegerConstantRefine</class>
    <class kind="class">SAMRAI::pdat::OuterfaceVariable</class>
    <class kind="class">SAMRAI::pdat::OuternodeData</class>
    <class kind="class">SAMRAI::pdat::OuternodeDataFactory</class>
    <class kind="class">SAMRAI::pdat::OuternodeDoubleInjection</class>
    <class kind="class">SAMRAI::pdat::OuternodeGeometry</class>
    <class kind="class">SAMRAI::pdat::OuternodeVariable</class>
    <class kind="class">SAMRAI::pdat::OutersideComplexLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::OutersideData</class>
    <class kind="class">SAMRAI::pdat::OutersideDataFactory</class>
    <class kind="class">SAMRAI::pdat::OutersideDoubleLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::OutersideFloatLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::OutersideGeometry</class>
    <class kind="class">SAMRAI::pdat::OutersideVariable</class>
    <class kind="class">SAMRAI::pdat::SecondLayerNodeNoCornersVariableFillPattern</class>
    <class kind="class">SAMRAI::pdat::SecondLayerNodeVariableFillPattern</class>
    <class kind="class">SAMRAI::pdat::SideComplexConstantRefine</class>
    <class kind="class">SAMRAI::pdat::SideComplexLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::SideData</class>
    <class kind="class">SAMRAI::pdat::SideDataFactory</class>
    <class kind="class">SAMRAI::pdat::SideDoubleConstantRefine</class>
    <class kind="class">SAMRAI::pdat::SideDoubleLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::SideFloatConstantRefine</class>
    <class kind="class">SAMRAI::pdat::SideFloatLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::SideGeometry</class>
    <class kind="class">SAMRAI::pdat::SideIndex</class>
    <class kind="class">SAMRAI::pdat::SideIntegerConstantRefine</class>
    <class kind="class">SAMRAI::pdat::SideIterator</class>
    <class kind="class">SAMRAI::pdat::SideOverlap</class>
    <class kind="class">SAMRAI::pdat::SideVariable</class>
    <class kind="class">SAMRAI::pdat::SumOperation</class>
    <member kind="function">
      <type>MDA_Access&lt; double, DIM, MDA_OrderColMajor&lt; DIM &gt; &gt;</type>
      <name>access</name>
      <anchorfile>namespaceSAMRAI_1_1pdat.html</anchorfile>
      <anchor>a4a10592b19e2f94d5f96161949d7c9c0</anchor>
      <arglist>(ArrayData&lt; double &gt; &amp;array_data, int depth)</arglist>
    </member>
    <member kind="function">
      <type>const MDA_AccessConst&lt; double, DIM, MDA_OrderColMajor&lt; DIM &gt; &gt;</type>
      <name>access</name>
      <anchorfile>namespaceSAMRAI_1_1pdat.html</anchorfile>
      <anchor>a7ed8404e816c1c2cf404d772a870af9b</anchor>
      <arglist>(const ArrayData&lt; double &gt; &amp;array_data, int depth)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::ArrayData</name>
    <filename>classSAMRAI_1_1pdat_1_1ArrayData.html</filename>
    <templarg>TYPE</templarg>
    <member kind="typedef">
      <type>ArrayDataIterator</type>
      <name>iterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a976c6d94322e0d51314326a8b59b1c15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>ab85545f64fea9e646fdedf5465a79690</anchor>
      <arglist>(const hier::Box &amp;box, unsigned int depth)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a35c56024c6c190d0dd8a1d06b3317dc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInitialized</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>ae1615473899d1b85fef64ff6546163d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>undefineData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>ac7a19caf53e71e3f71aff559bdaac39e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const hier::Box &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>ab00f0a1c318b91276ac540ede5b5cc60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a8cdee70250c48be83e9d0fe53c66db0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getOffset</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>ad8530fafba1d6f60d058baae4b81eafb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a51f24a9917363c2208e62987e8a01434</anchor>
      <arglist>(const unsigned int d=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a827655c7333f29686891d0c4a7a68ded</anchor>
      <arglist>(const unsigned int d=0) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>abfaf511a5bc1d533cc1fe74e59af1eec</anchor>
      <arglist>(const hier::Index &amp;i, const unsigned int d)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a043c519055ff49ac7b2ab3e23e5562a5</anchor>
      <arglist>(const hier::Index &amp;i, const unsigned int d) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a1f95dbc4aa63153b64793cff7b5e3245</anchor>
      <arglist>(const ArrayData&lt; TYPE &gt; &amp;src, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a630b971ca04cf416888eb907208dfc0f</anchor>
      <arglist>(const ArrayData&lt; TYPE &gt; &amp;src, const hier::Box &amp;box, const hier::IntVector &amp;src_shift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>aa7f4c8540edaa30f7929643fbbf5512f</anchor>
      <arglist>(const ArrayData&lt; TYPE &gt; &amp;src, const hier::Box &amp;box, const hier::Transformation &amp;transformation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>ac7d9dd6fe2177de262d9a4d7d37d6701</anchor>
      <arglist>(const ArrayData&lt; TYPE &gt; &amp;src, const hier::BoxContainer &amp;boxes, const hier::IntVector &amp;src_shift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a61e0cb2479f6d91b2733fce32638194a</anchor>
      <arglist>(const ArrayData&lt; TYPE &gt; &amp;src, const hier::BoxContainer &amp;boxes, const hier::Transformation &amp;transformation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>afdbdce691025dcd126e29a244db79703</anchor>
      <arglist>(unsigned int dst_depth, const ArrayData&lt; TYPE &gt; &amp;src, unsigned int src_depth, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sum</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>aef60177ead7c3614f062590f7712609f</anchor>
      <arglist>(const ArrayData&lt; TYPE &gt; &amp;src, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sum</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>af41f9d64e0345c2ac79a2dcb0514d779</anchor>
      <arglist>(const ArrayData&lt; TYPE &gt; &amp;src, const hier::Box &amp;box, const hier::IntVector &amp;src_shift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sum</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>acfecc435a4deb40a8d854057e80a6ad0</anchor>
      <arglist>(const ArrayData&lt; TYPE &gt; &amp;src, const hier::BoxContainer &amp;boxes, const hier::IntVector &amp;src_shift)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>afbc700d1f8df66710c83be31d212b37f</anchor>
      <arglist>(const hier::BoxContainer &amp;boxes, const hier::IntVector &amp;src_shift) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a6c5415ec52723f7c3e20ce314b2c574c</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::Box &amp;dest_box, const hier::IntVector &amp;src_shift) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a0915d10aacd00b27f108354421723ea1</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::Box &amp;dest_box, const hier::Transformation &amp;src_shift) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>ae9134265a8087de6f6c253715f2ed5d5</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxContainer &amp;dest_boxes, const hier::IntVector &amp;src_shift) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a8019407ee7bd9dcbaaba72c600723762</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxContainer &amp;dest_boxes, const hier::Transformation &amp;transformation) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a00c34907e10e962adb8282b965a6972b</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::Box &amp;dest_box, const hier::IntVector &amp;src_offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a663216993c878358b0f84dc85274c833</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxContainer &amp;dest_boxes, const hier::IntVector &amp;src_offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpackStreamAndSum</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>abfefa9165703fe930fbf701512b6e039</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::Box &amp;dest_box, const hier::IntVector &amp;src_offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpackStreamAndSum</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a3d2e85ff58edd86fe137912575ded227</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxContainer &amp;dest_boxes, const hier::IntVector &amp;src_offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>aa7761b61f741eeee9f8004f94f7df72f</anchor>
      <arglist>(const TYPE &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>af027bcf7d6a05db1dc10c1151a1383b9</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a1f2c56e4292b31662c0bece4e001a8f5</anchor>
      <arglist>(const TYPE &amp;t, const unsigned int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>acb6dab66a1c885080f69caf657fbb040</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box &amp;box, const unsigned int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a91be5f8fdef47d9c528d64ccaa534014</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a8594e2cf67c90729aeb4adf98faabaaf</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a114ecb99a07fdcce73f49cab9ff0b0a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>afc800893f127830febe13b25b9830b42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a054b804e8d0b0970b78b0153ac51a62d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeOfData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>ac29330cbf66224133871c0d3777a0005</anchor>
      <arglist>(const hier::Box &amp;box, unsigned int depth)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::ArrayDataAccess</name>
    <filename>classSAMRAI_1_1pdat_1_1ArrayDataAccess.html</filename>
    <member kind="function" static="yes">
      <type>static MDA_Access&lt; TYPE, DIM, MDA_OrderColMajor&lt; DIM &gt; &gt;</type>
      <name>access</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataAccess.html</anchorfile>
      <anchor>accb3814242f9c49e6de83b7bba95f01e</anchor>
      <arglist>(ArrayData&lt; TYPE &gt; &amp;array_data, int depth=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MDA_AccessConst&lt; TYPE, DIM, MDA_OrderColMajor&lt; DIM &gt; &gt;</type>
      <name>access</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataAccess.html</anchorfile>
      <anchor>a5e73de2ab27e435c00748f6692b17af6</anchor>
      <arglist>(const ArrayData&lt; TYPE &gt; &amp;array_data, int depth=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::ArrayDataIterator</name>
    <filename>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>ArrayDataIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>ad3d2950febf33a7c938f02bee00bf84e</anchor>
      <arglist>(const hier::Box &amp;box, bool begin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayDataIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>aeee7cc64df05c51ca56cfe62e25d1ee0</anchor>
      <arglist>(const ArrayDataIterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>ArrayDataIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>accee01ece3a10c98f9456a14a7bb5c7d</anchor>
      <arglist>(const ArrayDataIterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayDataIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>aaabbf3e07e8b79be46f612d53cace77a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const hier::Index &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>a7c3f2c7e51fff494952a73beac28f612</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Index *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>a6c5b818fb79d889157b5faf95b3372b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArrayDataIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>aa3748e198f4c0c0bc52382b8201a0af2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArrayDataIterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>a56a26de1935b75c16fed35737ad18239</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>a04a6792d5d7872d67c5ec8065f56d600</anchor>
      <arglist>(const ArrayDataIterator &amp;iterator) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>a1ba109f6391070a287068291ab9af71e</anchor>
      <arglist>(const ArrayDataIterator &amp;iterator) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::ArrayDataOperationUtilities</name>
    <filename>classSAMRAI_1_1pdat_1_1ArrayDataOperationUtilities.html</filename>
    <templarg>TYPE</templarg>
    <templarg>OP</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>doArrayDataOperationOnBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataOperationUtilities.html</anchorfile>
      <anchor>a61c0980f1eb921f2c4ed2e5f74e93c94</anchor>
      <arglist>(ArrayData&lt; TYPE &gt; &amp;dst, const ArrayData&lt; TYPE &gt; &amp;src, const hier::Box &amp;opbox, const hier::IntVector &amp;src_shift, unsigned int dst_start_depth, unsigned int src_start_depth, unsigned int num_depth, const OP &amp;op)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>doArrayDataBufferOperationOnBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataOperationUtilities.html</anchorfile>
      <anchor>ae9206b8841cb32b1e5c4f4473c710a02</anchor>
      <arglist>(const ArrayData&lt; TYPE &gt; &amp;arraydata, const TYPE *buffer, const hier::Box &amp;opbox, bool src_is_buffer, const OP &amp;op)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellComplexConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1CellComplexConstantRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CellComplexConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellComplexConstantRefine.html</anchorfile>
      <anchor>a3f3ed033d53aa3b2d46c4dc19eccb321</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellComplexConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellComplexConstantRefine.html</anchorfile>
      <anchor>a28c2145b07c8ec6cd9d1ec3f5f3eec14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellComplexConstantRefine.html</anchorfile>
      <anchor>aaff84f362f7fe4414bcdda32d195dde2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellComplexConstantRefine.html</anchorfile>
      <anchor>afdcb8c39083f4342570cc9009d368028</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellComplexConstantRefine.html</anchorfile>
      <anchor>a43c767a1d895cca47dafa52f5fc77c7e</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellComplexConstantRefine.html</anchorfile>
      <anchor>ab181292091d63dc4020db0ffb2160dcc</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::Box &amp;fine_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellComplexLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1CellComplexLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>CellComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>ab6e9ebb11b4339f64c410f1b00d81ed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>addc8e97280c817de047d0b4b55fd31f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a7250583e047a4aaaf2ad8e7c4f336575</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellData</name>
    <filename>classSAMRAI_1_1pdat_1_1CellData.html</filename>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchData</base>
    <member kind="typedef">
      <type>CellIterator</type>
      <name>iterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a80584afcb4b09ce07a7750489cd7ba5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CellData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a8aaf5c2cf6d582ab52e33d8fd685d21b</anchor>
      <arglist>(const hier::Box &amp;box, int depth, const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>ae3ef3bbd5cfc9df643316e8c620a5bd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a3c3d48b4f87875f40842f42cef20e2d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a04838f79d6e5f0cd8ddda8209fd7bf48</anchor>
      <arglist>(int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a4c3092781fb23c689d6284da77c129d2</anchor>
      <arglist>(int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>ab60826a6281f185814f90a4ff1231718</anchor>
      <arglist>(const CellIndex &amp;i, int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a917fcd898a598954efa280d39628d0ec</anchor>
      <arglist>(const CellIndex &amp;i, int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayData&lt; TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a7cd36711af16a78797709f1e8c28519d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayData&lt; TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a2bf7a733b751842e1bacd9a6501a998b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a5352ab973bea1faf56cd2653199e80a9</anchor>
      <arglist>(const hier::PatchData &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a482d348ef60bfb012e4ac8a1c954d2a8</anchor>
      <arglist>(hier::PatchData &amp;dst) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a417e7b152a3e73f0cf450b0e32204fab</anchor>
      <arglist>(const hier::PatchData &amp;src, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a3287f963492e74e032f67cffdc33e185</anchor>
      <arglist>(hier::PatchData &amp;dst, const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyOnBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>ab863007f23cd500a52776c2b3d4a27ae</anchor>
      <arglist>(const CellData&lt; TYPE &gt; &amp;src, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>ada47b14c671797ccac95cdfbacbd2f39</anchor>
      <arglist>(int dst_depth, const CellData&lt; TYPE &gt; &amp;src, int src_depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>aee332abaa31d2dd8c13e87a3c6ed5d97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>ade9c17ca206a2c9849f9920bf61cc44f</anchor>
      <arglist>(const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a0f6642d81399dd644e7cbd01af1cb78b</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a1bb304011ddc96a7cd1f1073a2948c6a</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sum</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>ac90f55d55424ddac5d0286e01d901094</anchor>
      <arglist>(const hier::PatchData &amp;src, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStreamAndSum</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a2449526230ddb43686315eb97aee0c4c</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>afe62b44ee4a6c823dec81bd29895c290</anchor>
      <arglist>(const TYPE &amp;t, int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>af54cafc106a3522f049cd2e3db88498d</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box &amp;box, int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a4f816d3ceae7048f7f09c08f5c7ee8ae</anchor>
      <arglist>(const TYPE &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a2c0a18bb36fbd7d3c9f128c7e7e2b1eb</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a63234e470d0e2e1e7aeb188ae917f17f</anchor>
      <arglist>(const hier::Box &amp;box, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>af93f2eee1df7a368ff479b9e102edf91</anchor>
      <arglist>(const hier::Box &amp;box, int depth, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>acc3a24a630593de4b7b73673cb89d373</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a18079c16cb8661005086c7c9aca54661</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeOfData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a1cf4c62f2d72b0da7f707d81b31818df</anchor>
      <arglist>(const hier::Box &amp;box, int depth, const hier::IntVector &amp;ghosts)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellDataFactory</name>
    <filename>classSAMRAI_1_1pdat_1_1CellDataFactory.html</filename>
    <templarg></templarg>
    <base>SAMRAI::hier::PatchDataFactory</base>
    <member kind="function">
      <type></type>
      <name>CellDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a3ba8b9f1dd4a86e913a9879b7a377849</anchor>
      <arglist>(int depth, const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a07a2be2e2e2a95f0c83dd6263c14bfcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::PatchDataFactory &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a76637533ed0ad500868a4bc9a172db56</anchor>
      <arglist>(const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::PatchData &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a31651b39b63f2b417e0cc49c537d6a7a</anchor>
      <arglist>(const hier::Patch &amp;patch) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxGeometry &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a7b5a2cef02415f89bf21e7a4f16e60ec</anchor>
      <arglist>(const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>ab793aff90dec5d92d5939ae6bcc59e79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a39e39dacef5b64e7de1ce589bc33a40d</anchor>
      <arglist>(const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a18f1dcc7c6227f44146b5a0a77571952</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a6d0b6aa976d4e50ba58b56337006149e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a5e815b77d0f5601d6ae11e016daae066</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchDataFactory &gt; &amp;dst_pdf) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellDoubleConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1CellDoubleConstantRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CellDoubleConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDoubleConstantRefine.html</anchorfile>
      <anchor>a75725bcfc6161e10981a75a96d1865f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellDoubleConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDoubleConstantRefine.html</anchorfile>
      <anchor>a1f458ef094264477276b3e4062143690</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDoubleConstantRefine.html</anchorfile>
      <anchor>a6ace9b5e58267745c1da9cec82656ccc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDoubleConstantRefine.html</anchorfile>
      <anchor>a8e5718306649b5552bac07062f576e0e</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDoubleConstantRefine.html</anchorfile>
      <anchor>a5be0459f6eb1bdf59db2ebaa9d4dbeb2</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDoubleConstantRefine.html</anchorfile>
      <anchor>a585398f723def7b0e86e3016eafc123f</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::Box &amp;fine_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellDoubleLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1CellDoubleLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>CellDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>af8a6b928a1e419e556b7957eddbe4b38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3af19b686e92547f141c6774b29ff976</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a5c90dc1db1f0bc2a00a644b99c07fcd1</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellFloatConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1CellFloatConstantRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CellFloatConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellFloatConstantRefine.html</anchorfile>
      <anchor>a1c17632b6f42ea0b38a96416e14b7027</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellFloatConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellFloatConstantRefine.html</anchorfile>
      <anchor>a8a9ceab120f967c8948febfb2fd00d27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellFloatConstantRefine.html</anchorfile>
      <anchor>a67e936cdca584c7959295de121f92a4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellFloatConstantRefine.html</anchorfile>
      <anchor>a9fedc24faa9205423bc91ea09ca1d65d</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellFloatConstantRefine.html</anchorfile>
      <anchor>ab959d6389de0698f76bf1ef79cc172bd</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellFloatConstantRefine.html</anchorfile>
      <anchor>a7c0d6703566df9bfde7315402fd24690</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::Box &amp;fine_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellFloatLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1CellFloatLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>CellFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>aab4559819463f8e9dc5bac6dfa17ac1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a90b4409e72d76a868244395e7af0a994</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3223b71b115e1813190e8f2b9f39c9c2</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellGeometry</name>
    <filename>classSAMRAI_1_1pdat_1_1CellGeometry.html</filename>
    <base>SAMRAI::hier::BoxGeometry</base>
    <member kind="typedef">
      <type>CellOverlap</type>
      <name>Overlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellGeometry.html</anchorfile>
      <anchor>a1bd22fab622eac2124f93e42a3c1a2f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CellGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellGeometry.html</anchorfile>
      <anchor>aab430494556d4306bb47aed9be847686</anchor>
      <arglist>(const hier::Box &amp;box, const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellGeometry.html</anchorfile>
      <anchor>a1f12aefbec6edf8a7244396ab18b17f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellGeometry.html</anchorfile>
      <anchor>a220fd55114cd26601ccc10f9f291ac0b</anchor>
      <arglist>(const hier::BoxGeometry &amp;dst_geometry, const hier::BoxGeometry &amp;src_geometry, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation, const bool retry, const hier::BoxContainer &amp;dst_restrict_boxes=hier::BoxContainer()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeDestinationBoxes</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellGeometry.html</anchorfile>
      <anchor>a37ef8ac79b880cbb576567febd5169c7</anchor>
      <arglist>(hier::BoxContainer &amp;dst_boxes, const CellGeometry &amp;src_geometry, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation, const hier::BoxContainer &amp;dst_restrict_boxes) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>setUpOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellGeometry.html</anchorfile>
      <anchor>a0fe1f887e312d15ba24e809d7e4d894d</anchor>
      <arglist>(const hier::BoxContainer &amp;boxes, const hier::Transformation &amp;transformation) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Box &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellGeometry.html</anchorfile>
      <anchor>a8ad409c19b8f0cfd46afc3818bfbe20a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getGhosts</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellGeometry.html</anchorfile>
      <anchor>a6b0044d1fd86670edb43503f5d1857cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hier::Box</type>
      <name>toCellBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellGeometry.html</anchorfile>
      <anchor>ab893404bd8fc30489b9fd8946e098c82</anchor>
      <arglist>(const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transform</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellGeometry.html</anchorfile>
      <anchor>ae89558da3617e6310cd3ab730d517838</anchor>
      <arglist>(CellIndex &amp;index, const hier::Transformation &amp;transformation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CellIterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellGeometry.html</anchorfile>
      <anchor>a9d0731b69aab8528a698a82ce5e12153</anchor>
      <arglist>(const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CellIterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellGeometry.html</anchorfile>
      <anchor>a0566194da03a14c12c3fc683ca041869</anchor>
      <arglist>(const hier::Box &amp;box)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellIndex</name>
    <filename>classSAMRAI_1_1pdat_1_1CellIndex.html</filename>
    <base>SAMRAI::hier::Index</base>
    <member kind="function">
      <type></type>
      <name>CellIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a05a9b876b22ee6b96ab4ad94a3b6c62f</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CellIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a803da0209f0ab419b8fdd7350399e3c7</anchor>
      <arglist>(const hier::Index &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CellIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>aba365869054d82d3c9cd31bf05666e75</anchor>
      <arglist>(const CellIndex &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CellIndex &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>ac160c63cd822baa0f47f76285ae5de3a</anchor>
      <arglist>(const CellIndex &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CellIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a7125d424c74879000da240f82ad36bf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CellIndex &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a89747cc9bcf27f5d7336a8c978963f86</anchor>
      <arglist>(const hier::IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CellIndex</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>af5768985adb39aa8ff3c99e62cc8f61d</anchor>
      <arglist>(const hier::IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>CellIndex &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>ae2bc60addf174c1d722dc53d34788177</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>CellIndex</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>af3d308a37a89addc262fa7e078baf137</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>CellIndex &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a49612dce59bf638779bae971e35ae2c2</anchor>
      <arglist>(const hier::IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CellIndex</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>aa70d45c53f8cefa89af0326fad7a96bd</anchor>
      <arglist>(const hier::IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>CellIndex &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>afd6219156b0bbc3067d90bc595c443c5</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>CellIndex</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>af1d361dda3d29ecad956491e3efce2e0</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>CellIndex &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a48fe4bea8b303c2dcd78b4263b0b2104</anchor>
      <arglist>(const hier::IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CellIndex</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>aafe834f71fd3bd61315e49aa2f4343a5</anchor>
      <arglist>(const hier::IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>CellIndex &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a3351e081e64595b6b430e93ef96c6f3e</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>CellIndex</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>ae88da54ce70fd04c0fe14281ebf7287d</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>afc3fbd5675c6cc08692aaa887b53f6d0</anchor>
      <arglist>(const CellIndex &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>aa12192a1f5e3d205675a6ed2558d7672</anchor>
      <arglist>(const CellIndex &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellIntegerConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1CellIntegerConstantRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CellIntegerConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIntegerConstantRefine.html</anchorfile>
      <anchor>a2090d44d1d7e695633c5b9ef8cc5bfdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellIntegerConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIntegerConstantRefine.html</anchorfile>
      <anchor>ae20b6f1e3d18b1c0e4fbc13738d240f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIntegerConstantRefine.html</anchorfile>
      <anchor>aa1237d677c976821e0a1403b62270f1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIntegerConstantRefine.html</anchorfile>
      <anchor>a139bc9235eb110b9a9494d918743fe08</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIntegerConstantRefine.html</anchorfile>
      <anchor>a0d932a6e8851230f4b619a564d2ece0c</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIntegerConstantRefine.html</anchorfile>
      <anchor>aa19cb95640c4597418a8bc547484264d</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::Box &amp;fine_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellIterator</name>
    <filename>classSAMRAI_1_1pdat_1_1CellIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>CellIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>a931494f480e91708ce6af6b45162538c</anchor>
      <arglist>(const CellIterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>CellIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>a61075dd242974289bcc6a8774ecdb6e9</anchor>
      <arglist>(const CellIterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CellIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>ade196b045c9dab4f588bf94b5777fa4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CellIndex &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>aace2b9a54f27e89e00989d83a0eaa228</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CellIndex *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>a66629731d69e0ac7da66bb14eb790dfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CellIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>aa9d024ba6ba49d745d1d2b2f03e3916c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CellIterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>a1784c53e4ef9a9f5bea2eeaf7a230970</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>a9c790162602b71b5a4f55c249d91a078</anchor>
      <arglist>(const CellIterator &amp;iterator) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>a3e82ea4692863ed92f7ae0a91675fd3b</anchor>
      <arglist>(const CellIterator &amp;iterator) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend CellIterator</type>
      <name>CellGeometry::begin</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>a5a4a7f196c244efd412a319671069077</anchor>
      <arglist>(const hier::Box &amp;box)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend CellIterator</type>
      <name>CellGeometry::end</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>ac2276f401bbacabd85041ee31762262a</anchor>
      <arglist>(const hier::Box &amp;box)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellOverlap</name>
    <filename>classSAMRAI_1_1pdat_1_1CellOverlap.html</filename>
    <base>SAMRAI::hier::BoxOverlap</base>
    <member kind="function">
      <type></type>
      <name>CellOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellOverlap.html</anchorfile>
      <anchor>a7448cec9a34551dc6eec4bb5d55b806a</anchor>
      <arglist>(const hier::BoxContainer &amp;boxes, const hier::Transformation &amp;transformation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellOverlap.html</anchorfile>
      <anchor>a0164fb1f313797fd08df80e72528ddf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOverlapEmpty</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellOverlap.html</anchorfile>
      <anchor>a6194a82df2fe5bf8ef9b5f2876d91328</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::BoxContainer &amp;</type>
      <name>getDestinationBoxContainer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellOverlap.html</anchorfile>
      <anchor>a1f4372bda74c3c14dc36ccff01c24df7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSourceBoxContainer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellOverlap.html</anchorfile>
      <anchor>a8aa6a4fc3bd7157454172a8dcf42eddf</anchor>
      <arglist>(hier::BoxContainer &amp;src_boxes) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector &amp;</type>
      <name>getSourceOffset</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellOverlap.html</anchorfile>
      <anchor>a50a30a3260ffc515fab49f1ba37fda4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::Transformation &amp;</type>
      <name>getTransformation</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellOverlap.html</anchorfile>
      <anchor>acaef45b223b7b3d5f0b8be4bac4a7ecf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellOverlap.html</anchorfile>
      <anchor>a138e7c78614271da57be98a294828ec2</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellVariable</name>
    <filename>classSAMRAI_1_1pdat_1_1CellVariable.html</filename>
    <templarg></templarg>
    <base>SAMRAI::hier::Variable</base>
    <member kind="function">
      <type></type>
      <name>CellVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellVariable.html</anchorfile>
      <anchor>a6e022fd1718a9ebc0b9f94a97a60ae2b</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;name, int depth=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellVariable.html</anchorfile>
      <anchor>a6dc123d4e7fe205538606a6b9b04a020</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellVariable.html</anchorfile>
      <anchor>a9440ccdc5a8befe334630bc2384dfa3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellVariable.html</anchorfile>
      <anchor>ac2cd24402504024ba5e9e03535b34bd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellVariable.html</anchorfile>
      <anchor>a00bb43cea2510407bb856476a7c6d08f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CopyOperation</name>
    <filename>classSAMRAI_1_1pdat_1_1CopyOperation.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>CopyOperation</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CopyOperation.html</anchorfile>
      <anchor>af89f9097729fb48c2bf7be7561746ee0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CopyOperation</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CopyOperation.html</anchorfile>
      <anchor>a77da28acc0efdf088294aa2fe810c455</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CopyOperation.html</anchorfile>
      <anchor>a912439d23a34a724ff8a7d30751fce12</anchor>
      <arglist>(TYPE &amp;vdst, const TYPE &amp;vsrc) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::DoubleAttributeId</name>
    <filename>classSAMRAI_1_1pdat_1_1DoubleAttributeId.html</filename>
    <member kind="function">
      <type></type>
      <name>DoubleAttributeId</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1DoubleAttributeId.html</anchorfile>
      <anchor>a1a42dba6c7d11076438638730d96424c</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoubleAttributeId</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1DoubleAttributeId.html</anchorfile>
      <anchor>a11eef85889089981025e09e841f65949</anchor>
      <arglist>(const DoubleAttributeId &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DoubleAttributeId</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1DoubleAttributeId.html</anchorfile>
      <anchor>aa642ee6a0dbab1344794b2e3aed18f17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DoubleAttributeId &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1DoubleAttributeId.html</anchorfile>
      <anchor>aad5b8e3c4a127f2919e79c4bc48a26b2</anchor>
      <arglist>(const DoubleAttributeId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1DoubleAttributeId.html</anchorfile>
      <anchor>ae7267e6c029484120cde7c394130627f</anchor>
      <arglist>(const DoubleAttributeId &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1DoubleAttributeId.html</anchorfile>
      <anchor>a456b2b6fa46dac94cc9ec0c270e5ed36</anchor>
      <arglist>(const DoubleAttributeId &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1DoubleAttributeId.html</anchorfile>
      <anchor>a91d984fb65d64734b9ab99fca4d7f9fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Attributes</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1DoubleAttributeId.html</anchorfile>
      <anchor>a6435a569d942a448371bf8107e065164</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeComplexConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeComplexConstantRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>EdgeComplexConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeComplexConstantRefine.html</anchorfile>
      <anchor>a6ad87c05ec325fc0cbb011b16bfe6b35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeComplexConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeComplexConstantRefine.html</anchorfile>
      <anchor>a937afa0381b664a58ea162f8c174ffd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeComplexConstantRefine.html</anchorfile>
      <anchor>a7d979872b3a18373424f7404fda24623</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeComplexConstantRefine.html</anchorfile>
      <anchor>a1d0650c50a6af6a8f0841864adad3e6a</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeComplexConstantRefine.html</anchorfile>
      <anchor>a27662db900fa77ba00949d96524c6532</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeComplexLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeComplexLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>EdgeComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a49d7c61c39930dea5464434a23b0be9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>abc2548065409ad103140abd5f5c9cd23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a099cf656fd72919982af0a9aa9ad00f6</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeData</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeData.html</filename>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchData</base>
    <member kind="typedef">
      <type>EdgeIterator</type>
      <name>iterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a3fb297169460d7c977a551637cd0cc32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>ab5433fa04b62996fde14c07a6e657ae3</anchor>
      <arglist>(const hier::Box &amp;box, int depth, const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a11202fd30fba48fa4cb1c8044fad2c99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a8634a19d407d6329381400efeb473e64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a95c7bed56968ec7d2581fbaf6b9a5e3d</anchor>
      <arglist>(int axis, int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a3b8690a411ef41142a72110a54087fe8</anchor>
      <arglist>(int axis, int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>ad22e5960528f9f79eff78eb75b454039</anchor>
      <arglist>(const EdgeIndex &amp;i, int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a51a79902f467169467a8d0244cb11439</anchor>
      <arglist>(const EdgeIndex &amp;i, int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayData&lt; TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a335184178c68800e8b141a4a5f5e4f9b</anchor>
      <arglist>(int axis)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayData&lt; TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a62bcd76aaad92ce1a6e355ba0229dbf9</anchor>
      <arglist>(int axis) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a51cbb7edf56d38565ddecf7a78823259</anchor>
      <arglist>(const hier::PatchData &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a7c7c7cbdd958c73ff3941dc1638729fc</anchor>
      <arglist>(hier::PatchData &amp;dst) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>ac2f432fdfce0ce06f67e34aa344f317c</anchor>
      <arglist>(const hier::PatchData &amp;src, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a371515be9c432de97192b8090978c14e</anchor>
      <arglist>(hier::PatchData &amp;dst, const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyOnBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>aea58d9adb17860b8860377f16670df5a</anchor>
      <arglist>(const EdgeData&lt; TYPE &gt; &amp;src, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>ac4fa8b17b2ca511ff50b88eecd341b1b</anchor>
      <arglist>(int dst_depth, const EdgeData&lt; TYPE &gt; &amp;src, int src_depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a6702152c33038aa68106aa8f38aa1d9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a8dc5fedfd53aa36c9c01a361122fd56b</anchor>
      <arglist>(const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>aa6067bee17fe87f7625e11bd57ceeda3</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>ac9469ffa5caabec2528a74fa76420ab8</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a99711ccd5bb47ae7f71f1c8ea7ed3463</anchor>
      <arglist>(const TYPE &amp;t, int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a43a7472c1062b6c7e1f1605fd58156c2</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box &amp;box, int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a4a33b8808c81aafb00f0e5b3ab5af269</anchor>
      <arglist>(const TYPE &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a9684211bd0f9031c4defcec97f5d53bd</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>aabcb66a698f63bfa74c935e56e89e8ca</anchor>
      <arglist>(const hier::Box &amp;box, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a2b8e8b0ad522105a458b475045a6c143</anchor>
      <arglist>(const hier::Box &amp;box, int depth, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a1fc3b9ba467c94587b54603e809f20ce</anchor>
      <arglist>(int axis, const hier::Box &amp;box, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a8e1c47bfbc79045c13719cd62cffd102</anchor>
      <arglist>(int axis, const hier::Box &amp;box, int depth, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>ab4a6272ecff6704a459e6ca1f264a531</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a453668f0989fc7c792280de9e385ecf8</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeOfData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a9b946825852f3c08712ca2b458b5625f</anchor>
      <arglist>(const hier::Box &amp;box, int depth, const hier::IntVector &amp;ghosts)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeDataFactory</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</filename>
    <templarg></templarg>
    <base>SAMRAI::hier::PatchDataFactory</base>
    <member kind="function">
      <type></type>
      <name>EdgeDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a0bde5e530dd7570de15161b35a77e5d4</anchor>
      <arglist>(int depth, const hier::IntVector &amp;ghosts, bool fine_boundary_represents_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a43621685dc94bd7fe5bf68a7101101bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::PatchDataFactory &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>aa3ee5457d60b4de6957443608bbbed6f</anchor>
      <arglist>(const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::PatchData &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a4edd754a4aacb9ba55e0ad0487d573a9</anchor>
      <arglist>(const hier::Patch &amp;patch) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxGeometry &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a86e99f39b9d724defacf9ababfc68f8a</anchor>
      <arglist>(const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>af13a651d133cceda153df39b65090319</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a54251aee03f86499be2e2a615b13ee1f</anchor>
      <arglist>(const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a9246b6e9ab8f8c447a039ed20a023fc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a8943c74102432af10aa804ecce030673</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a410df66843974f1f7c81f0f11df66332</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchDataFactory &gt; &amp;dst_pdf) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeDoubleConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeDoubleConstantRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>EdgeDoubleConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDoubleConstantRefine.html</anchorfile>
      <anchor>a989dc035f32c0110999ea9821cad69a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeDoubleConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDoubleConstantRefine.html</anchorfile>
      <anchor>afb4877ccbd1a3cf444f19414a0879418</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDoubleConstantRefine.html</anchorfile>
      <anchor>a4b0b071ee18df3da3ff2b209357bfe16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDoubleConstantRefine.html</anchorfile>
      <anchor>af35e8112b6875668383eeb229d7099cb</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDoubleConstantRefine.html</anchorfile>
      <anchor>a2578fd4e331f4e37d086feca5d6d362f</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeDoubleLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeDoubleLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>EdgeDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a13b4df22e6d4a2661d5ceb1ac56c4796</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a884815e5302132541c75d0916d6bd7b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>abb12ceab121c047a4e7962eaf49a5b36</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeFloatConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeFloatConstantRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>EdgeFloatConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeFloatConstantRefine.html</anchorfile>
      <anchor>af6f6c79c8fafc2f677571af541f9d1c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeFloatConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeFloatConstantRefine.html</anchorfile>
      <anchor>a5c7f7bc5abf009b7d194287314dfbd00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeFloatConstantRefine.html</anchorfile>
      <anchor>acfedcfb10878b784c44a8dbb805474d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeFloatConstantRefine.html</anchorfile>
      <anchor>a57c7ee7ed94ba96fd5ef7321b27df3ec</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeFloatConstantRefine.html</anchorfile>
      <anchor>a113ce07ba9b592e083998c65a04289e3</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeFloatLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeFloatLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>EdgeFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a806246354dcd19c10915ec2f7b52264f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a12f498cf96d6359b8ba39e653895b49b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a90b0838961a593b673bc226237928c44</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeGeometry</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</filename>
    <base>SAMRAI::hier::BoxGeometry</base>
    <member kind="typedef">
      <type>EdgeOverlap</type>
      <name>Overlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</anchorfile>
      <anchor>aab3b9f4695be64913c518787015fe1c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</anchorfile>
      <anchor>a26c09563057050c8a011259deee9a356</anchor>
      <arglist>(const hier::Box &amp;box, const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</anchorfile>
      <anchor>afd2a4a632f69be98411a2f59304d2c49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</anchorfile>
      <anchor>afd67c9c6258008a3af4eb971852e23c8</anchor>
      <arglist>(const hier::BoxGeometry &amp;dst_geometry, const hier::BoxGeometry &amp;src_geometry, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation, const bool retry, const hier::BoxContainer &amp;dst_restrict_boxes=hier::BoxContainer()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeDestinationBoxes</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</anchorfile>
      <anchor>a4be871cde07b5ecd2015d7650ccd5c0f</anchor>
      <arglist>(std::vector&lt; hier::BoxContainer &gt; &amp;dst_boxes, const EdgeGeometry &amp;src_geometry, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation, const hier::BoxContainer &amp;dst_restrict_boxes=hier::BoxContainer()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>setUpOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</anchorfile>
      <anchor>af1be8182edca8ef82b1765cbf4038c41</anchor>
      <arglist>(const hier::BoxContainer &amp;boxes, const hier::Transformation &amp;transformation) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Box &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</anchorfile>
      <anchor>a7f32ff00ac8ed32a05fa291c1a825999</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getGhosts</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</anchorfile>
      <anchor>ada42561faa1fe17a90f5df9bd16aba06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hier::Box</type>
      <name>toEdgeBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</anchorfile>
      <anchor>a88c1b2262beb8406983c3b97073e1edb</anchor>
      <arglist>(const hier::Box &amp;box, int axis_direction)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transform</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</anchorfile>
      <anchor>a0e471eeb05c3f108f7fcd1bba926be9d</anchor>
      <arglist>(hier::Box &amp;box, int &amp;axis_direction, const hier::Transformation &amp;transformation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transform</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</anchorfile>
      <anchor>a0a354c7941bcd51c2eb8da8bd1469f93</anchor>
      <arglist>(EdgeIndex &amp;index, const hier::Transformation &amp;transformation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EdgeIterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</anchorfile>
      <anchor>ad9be9a60753a47e4b680f39c21238239</anchor>
      <arglist>(const hier::Box &amp;box, int axis)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EdgeIterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</anchorfile>
      <anchor>a87e2ae677ff665a2ee5be24f7cf944c4</anchor>
      <arglist>(const hier::Box &amp;box, int axis)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeIndex</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeIndex.html</filename>
    <base>SAMRAI::hier::Index</base>
    <member kind="enumvalue">
      <name>X</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>adf42a6032f97506727a703ff209ac909aa095151de9a081c35789103ba9b1dfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Y</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>adf42a6032f97506727a703ff209ac909a3758aa073d401b1541c6e025ec1e2b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Z</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>adf42a6032f97506727a703ff209ac909a01e0854d1152d8b5cf575c54feed1101</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Lower</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>adf42a6032f97506727a703ff209ac909a0554408a93cf75f430bbde74d9899768</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Upper</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>adf42a6032f97506727a703ff209ac909acb7b841b07a1f08d94e8584b686d4eb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LowerLeft</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>adf42a6032f97506727a703ff209ac909addc32e8f6700d22f421514e84f822a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LowerRight</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>adf42a6032f97506727a703ff209ac909a1cde45b9a1f622a0e97e69e20504fcbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UpperLeft</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>adf42a6032f97506727a703ff209ac909a344c713f7ac0f6dd44856f8907d24853</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UpperRight</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>adf42a6032f97506727a703ff209ac909ab463bfe253a424b2d04a62825a2ad9f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>aedd693c8be5b34bfc239d9ccca088a58</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>ab6f4733fcf942a055fa468ca275b3803</anchor>
      <arglist>(const hier::Index &amp;rhs, const int axis, const int edge)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>acf10625672c97d4299f4ecc706f2f103</anchor>
      <arglist>(const EdgeIndex &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>aba94e86327c7e07057087acce3e6995f</anchor>
      <arglist>(const EdgeIndex &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EdgeIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a0b8fbc6a1822ca01843e6bb2cb244551</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a837ec126d3292ee073b829b4c1ed4ae0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a1a8eef63c9f30734ed8bab904f212734</anchor>
      <arglist>(const int axis)</arglist>
    </member>
    <member kind="function">
      <type>hier::Index</type>
      <name>toCell</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>ab4cc723bfb4c7c8fbd7f551d08c12db6</anchor>
      <arglist>(const int edge) const </arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a47b174ab7ae371e5b459ebc2f6f06c30</anchor>
      <arglist>(const hier::IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a416971bf0ef5ee9f0e82a0630faa510f</anchor>
      <arglist>(const hier::IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a13d4a2e057c088f42802056a6cbbbd54</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a50af2549daf9f1abbd4abb3855d344be</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a56447eb3a7ecee94ba66439a6e5023d5</anchor>
      <arglist>(const hier::IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>adc46df0e18379e39f7370aa20a93a41c</anchor>
      <arglist>(const hier::IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a1eb7a69936b7acc80f80fe9c8ed56b43</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a8919639134a2acd7a0eeb0c4629c9d18</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a16748e8d7b1fbd9376754bda257efd9a</anchor>
      <arglist>(const hier::IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a4fc17192ea62932c07f677e05c5b4f25</anchor>
      <arglist>(const hier::IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>aa409a5598f3d3c2a64c48322f96c894f</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>ac2a3e39337baa7fac15310577c09567a</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>ad12f9de8380344b687b99070ad011f9a</anchor>
      <arglist>(const EdgeIndex &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>afc4fb1ddee7f7e3e09e946372af06985</anchor>
      <arglist>(const EdgeIndex &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeIntegerConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeIntegerConstantRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>EdgeIntegerConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIntegerConstantRefine.html</anchorfile>
      <anchor>a3aa124d29eaa7debaa15e262cf258e87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeIntegerConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIntegerConstantRefine.html</anchorfile>
      <anchor>ae0cb26352e02cf1c25eff39133a48178</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIntegerConstantRefine.html</anchorfile>
      <anchor>a98e90a20ef59e18891c5cec221977faf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIntegerConstantRefine.html</anchorfile>
      <anchor>aee034f8bbef1bb122899547d3f49c9d1</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIntegerConstantRefine.html</anchorfile>
      <anchor>aab5a3c7d71cb01cc03fbb57306a660f9</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeIterator</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>EdgeIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>ab496977dd6efa1ad44c2627ee2e1fa94</anchor>
      <arglist>(const EdgeIterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>aaf6735efdbdbbca4293d8c28ee0326f5</anchor>
      <arglist>(const EdgeIterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EdgeIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>afce11de6751602ff607fb8090cd5dbb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EdgeIndex &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>af5d532136f09723659fba6934a3c1e56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const EdgeIndex *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>af6c1006bb5f99d791c033aceafedb5ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EdgeIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>a54943cf5d9c69f1ce0cb4cbb55d7e5d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EdgeIterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>aadef01caa464780ee471d8b46ca1570e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>ae4bcc483fa8a8d1f792a17187f192ba3</anchor>
      <arglist>(const EdgeIterator &amp;iterator) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>a37a1da5f9546f6994bbaaff49b45a9b0</anchor>
      <arglist>(const EdgeIterator &amp;iterator) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend EdgeIterator</type>
      <name>EdgeGeometry::begin</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>aeec5202bd2552dae8071e841d58f7410</anchor>
      <arglist>(const hier::Box &amp;box, int axis)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend EdgeIterator</type>
      <name>EdgeGeometry::end</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>a9ce6a3a43f7d3662c44e9c03930a208c</anchor>
      <arglist>(const hier::Box &amp;box, int axis)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeOverlap</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeOverlap.html</filename>
    <base>SAMRAI::hier::BoxOverlap</base>
    <member kind="function">
      <type></type>
      <name>EdgeOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeOverlap.html</anchorfile>
      <anchor>a5f9b2385ab45babce6fa9bed48426f0c</anchor>
      <arglist>(const std::vector&lt; hier::BoxContainer &gt; &amp;boxes, const hier::Transformation &amp;transformation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeOverlap.html</anchorfile>
      <anchor>af922d2f58964c07cf96ed36b4617d5c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOverlapEmpty</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeOverlap.html</anchorfile>
      <anchor>a900bb6c729821a8b99cad7d1c1c66174</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::BoxContainer &amp;</type>
      <name>getDestinationBoxContainer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeOverlap.html</anchorfile>
      <anchor>a7b62a1af8232d2c981a5fbad76555278</anchor>
      <arglist>(const int axis) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSourceBoxContainer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeOverlap.html</anchorfile>
      <anchor>a839561d8cf9cf93073eb63c2d99bdbe6</anchor>
      <arglist>(hier::BoxContainer &amp;src_boxes, int &amp;axis_direction) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector &amp;</type>
      <name>getSourceOffset</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeOverlap.html</anchorfile>
      <anchor>acdda7b6b541df72c80e9b513281e5e23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::Transformation &amp;</type>
      <name>getTransformation</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeOverlap.html</anchorfile>
      <anchor>a9370365448fa3a58fdbf4f951340c508</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeVariable</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeVariable.html</filename>
    <templarg></templarg>
    <base>SAMRAI::hier::Variable</base>
    <member kind="function">
      <type></type>
      <name>EdgeVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeVariable.html</anchorfile>
      <anchor>a3100e4bf08d30ff2c08a2f9842ec4f8a</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;name, int depth=1, bool fine_boundary_represents_var=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeVariable.html</anchorfile>
      <anchor>ae21fdf580d3df51330904afd240bf001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeVariable.html</anchorfile>
      <anchor>a8cd7b4335cb2dc09a548da2e82de63eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeVariable.html</anchorfile>
      <anchor>a5daba89636f11723309c4a4eaf70ca06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeVariable.html</anchorfile>
      <anchor>a26aabd05fa0b9b5211f7143b5c357f58</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceComplexConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceComplexConstantRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>FaceComplexConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceComplexConstantRefine.html</anchorfile>
      <anchor>a483b70108da8f98e3406b50550b65994</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceComplexConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceComplexConstantRefine.html</anchorfile>
      <anchor>ae8c90ccb72835a4bb28223bd78fc78db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceComplexConstantRefine.html</anchorfile>
      <anchor>aad86aa2c8dbf35792bab94f18fcc81f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceComplexConstantRefine.html</anchorfile>
      <anchor>a4951feed234b9571d545a3c672b29dcc</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceComplexConstantRefine.html</anchorfile>
      <anchor>ab551ebb15e805eb03005a9e5c8171c6a</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceComplexLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceComplexLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>FaceComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0423e197af5ddc159c2ad8edf85439b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>aaa0595c8294718888d7c5948f824c2d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>afbc5f39d290255cc1900f107799a4c0c</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceData</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceData.html</filename>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchData</base>
    <member kind="typedef">
      <type>FaceIterator</type>
      <name>iterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>ac9cf80fcc0b06ab2b6056bbd6e637089</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FaceData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a1de9badbcd61ef81d5bc4236760cefd2</anchor>
      <arglist>(const hier::Box &amp;box, int depth, const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>abd10e51187c8ff31fc41016f6527461b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>af4f11c9ada9a1496e7207f8ea353c3ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>ad7f491eec828a05c8f76390e487abf29</anchor>
      <arglist>(int face_normal, int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>abf88c1d6c16cf0f556f16eac9ba137e0</anchor>
      <arglist>(int face_normal, int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a57a30ac4ed18dfed3b11ff3ba250d94f</anchor>
      <arglist>(const FaceIndex &amp;i, int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a46ab861c7eb014cf20fd0dece701b478</anchor>
      <arglist>(const FaceIndex &amp;i, int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayData&lt; TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a59a199a9205d7be275aa78dbb4a0eca6</anchor>
      <arglist>(int face_normal)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayData&lt; TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>ad6f7fda25d7ec5c51b48511c91ab4736</anchor>
      <arglist>(int face_normal) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>adaf444f217a123e56e4603e283bbe327</anchor>
      <arglist>(const hier::PatchData &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a4619040185e4f392d477351843db3f06</anchor>
      <arglist>(hier::PatchData &amp;dst) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>abbfae31501540902bba99145085b9d27</anchor>
      <arglist>(const hier::PatchData &amp;src, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a301fd5b5372328bc943f7c63fa927dbb</anchor>
      <arglist>(hier::PatchData &amp;dst, const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyOnBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a10eb940717d716a75e8822d1465bb863</anchor>
      <arglist>(const FaceData&lt; TYPE &gt; &amp;src, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a86ddb488764ded2ad0de94dfa5b33fc8</anchor>
      <arglist>(int dst_depth, const FaceData&lt; TYPE &gt; &amp;src, int src_depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>aa3150192ec08c55f8c5d5b1ab4727f1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a92f51713da60bf28c02613b6f0319462</anchor>
      <arglist>(const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>adaac55e65df871c52a79f8e0410a0efc</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a7535898c38f52bb5e713548f50f24f8f</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a5a3af7e106c34bf6cc73caf746cc2817</anchor>
      <arglist>(const TYPE &amp;t, int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a99713ccc6ae9719814537736a8428634</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box &amp;box, int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a6baaecfefd040b5ddb02e6f2dd6d4308</anchor>
      <arglist>(const TYPE &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>acf1665b94d4f2ed6dbbdf9a73015a9a0</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>ac585617ce11ca3e6cace6083800c6518</anchor>
      <arglist>(const hier::Box &amp;box, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a66110fb111860c6106e1fb672f9e8ea6</anchor>
      <arglist>(const hier::Box &amp;box, int depth, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>ae225d957ed800015cf4ee57e0a130470</anchor>
      <arglist>(tbox::Dimension::dir_t face_normal, const hier::Box &amp;box, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a3a0a261d1d3dc906492d80b889ceac5c</anchor>
      <arglist>(tbox::Dimension::dir_t face_normal, const hier::Box &amp;box, int depth, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a5ddb3eb92b8805c387f2371896252fd2</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a1711b39e29880233043a3c3062573a54</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeOfData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a8eb05ad2195632e5c37f1976494a9871</anchor>
      <arglist>(const hier::Box &amp;box, int depth, const hier::IntVector &amp;ghosts)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceDataFactory</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</filename>
    <templarg></templarg>
    <base>SAMRAI::hier::PatchDataFactory</base>
    <member kind="function">
      <type></type>
      <name>FaceDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>a8d6fa32cde233a870ec394b7e57cce13</anchor>
      <arglist>(int depth, const hier::IntVector &amp;ghosts, bool fine_boundary_represents_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>a238fc005c4df93d53afb656391d34f4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::PatchDataFactory &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>a19f7c8cc50010592c5afa4318c9754cf</anchor>
      <arglist>(const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::PatchData &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>abc0fe4ecb7086de5d00043eead936a83</anchor>
      <arglist>(const hier::Patch &amp;patch) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxGeometry &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>adea2708e87d1ef49818ae37ed86c1875</anchor>
      <arglist>(const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>aebfda29a014091ca61ec29b7c5912de3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>a60f81790ee8ba98c6e8a604801a36814</anchor>
      <arglist>(const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>ac948b5b4535b3138f5ea2e350cb9a261</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>a410080ef35652ced2b9901fdb71e1596</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>a16b9bd0892ab3a7dd604e49a34a56421</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchDataFactory &gt; &amp;dst_pdf) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceDoubleConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceDoubleConstantRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>FaceDoubleConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDoubleConstantRefine.html</anchorfile>
      <anchor>ac0c634b0b84e9433ed2352cc816cb530</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceDoubleConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDoubleConstantRefine.html</anchorfile>
      <anchor>a7127f7d3ef43dddabbe6d47d6de8d16f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDoubleConstantRefine.html</anchorfile>
      <anchor>adc85706f6da373fda8c73338c7e3ff0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDoubleConstantRefine.html</anchorfile>
      <anchor>a0fa00b7456d6b4b68f04df210d7790f2</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDoubleConstantRefine.html</anchorfile>
      <anchor>ab7e48423c20fe61e24ca563fb8bbd9a7</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceDoubleLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceDoubleLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>FaceDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>afbc6ec7a1da9fbe624f2b9ca8aac5423</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a4959e3f35bb758e550f0ce0781c2d549</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0d598087a93c633b58fdd942e37bd480</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceFloatConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceFloatConstantRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>FaceFloatConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceFloatConstantRefine.html</anchorfile>
      <anchor>a0a1620431253bcee61ff15a9b5c64968</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceFloatConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceFloatConstantRefine.html</anchorfile>
      <anchor>a77cd7f86f0770ae1b01ba0d0230b5c37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceFloatConstantRefine.html</anchorfile>
      <anchor>a6976cabe7e0c30927c8bf8e9a86f769e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceFloatConstantRefine.html</anchorfile>
      <anchor>a4a6c622a52c36630aa1390295a7e0ed2</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceFloatConstantRefine.html</anchorfile>
      <anchor>ab3cf2ba41321f282e7633f755405113e</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceFloatLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceFloatLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>FaceFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a58d72d8d2b24454daa57bcd6e94d21c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a4b10d638e66c2e5f974f32e4ee7deb43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>aef4e7b19915a2896429433ed8b475402</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceGeometry</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceGeometry.html</filename>
    <base>SAMRAI::hier::BoxGeometry</base>
    <member kind="typedef">
      <type>FaceOverlap</type>
      <name>Overlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceGeometry.html</anchorfile>
      <anchor>a4fcff948f04bca4721d5455a38161f03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FaceGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceGeometry.html</anchorfile>
      <anchor>aa7eff1fcbc6c2dc83d681ea8f29eb753</anchor>
      <arglist>(const hier::Box &amp;box, const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceGeometry.html</anchorfile>
      <anchor>a201a87873a4839ee5f233600e6f9afb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceGeometry.html</anchorfile>
      <anchor>a2b9a290680f5cff1b190b6c68e60b38b</anchor>
      <arglist>(const hier::BoxGeometry &amp;dst_geometry, const hier::BoxGeometry &amp;src_geometry, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation, const bool retry, const hier::BoxContainer &amp;dst_restrict_boxes=hier::BoxContainer()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeDestinationBoxes</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceGeometry.html</anchorfile>
      <anchor>a4d178e463bec3c24529d72b106374492</anchor>
      <arglist>(std::vector&lt; hier::BoxContainer &gt; &amp;dst_boxes, const FaceGeometry &amp;src_geometry, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation, const hier::BoxContainer &amp;dst_restrict_boxes=hier::BoxContainer()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>setUpOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceGeometry.html</anchorfile>
      <anchor>ae9eeccbd19d2bef1b00674122288cf43</anchor>
      <arglist>(const hier::BoxContainer &amp;boxes, const hier::Transformation &amp;transformation) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Box &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceGeometry.html</anchorfile>
      <anchor>a848edc7177788b0b25ef3c5b1acd6953</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getGhosts</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceGeometry.html</anchorfile>
      <anchor>a6a8e26573747c411cc810ca75517f2b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hier::Box</type>
      <name>toFaceBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceGeometry.html</anchorfile>
      <anchor>a47b0ef8ae0ad6b566a5a5c7b8b8f863d</anchor>
      <arglist>(const hier::Box &amp;box, tbox::Dimension::dir_t face_normal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transform</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceGeometry.html</anchorfile>
      <anchor>aa08eeeea407ff401455228e0dde983e4</anchor>
      <arglist>(hier::Box &amp;box, int &amp;normal_direction, const hier::Transformation &amp;transformation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transform</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceGeometry.html</anchorfile>
      <anchor>a900f9af24eb717eae301546b37e78d0b</anchor>
      <arglist>(FaceIndex &amp;index, const hier::Transformation &amp;transformation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FaceIterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceGeometry.html</anchorfile>
      <anchor>ad2135ce301caad644de8716286d216b1</anchor>
      <arglist>(const hier::Box &amp;box, tbox::Dimension::dir_t axis)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FaceIterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceGeometry.html</anchorfile>
      <anchor>ae348f0a9723f023d0e936ab504818a1a</anchor>
      <arglist>(const hier::Box &amp;box, tbox::Dimension::dir_t axis)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceIndex</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceIndex.html</filename>
    <base>SAMRAI::hier::Index</base>
    <member kind="enumvalue">
      <name>X</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a4839d873aa5728a45d20acef6fd8f90da34bde75e2cfa3c2b05e0f5bb3138ce70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Y</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a4839d873aa5728a45d20acef6fd8f90daa71ad72d1e7d4b6b642308315f6ff3d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Z</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a4839d873aa5728a45d20acef6fd8f90da4ca33453cf3da3ce17255131f27044f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Lower</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a4839d873aa5728a45d20acef6fd8f90da2e0049bb80381b1fea69047d3dc5e9c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Upper</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a4839d873aa5728a45d20acef6fd8f90dad8096d79ee935875a97cbd30e2d84f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FaceIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a6786140b37f899ee8c31a9affdc8bfd5</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FaceIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a3845be1113d5c43f12b78664b1841b56</anchor>
      <arglist>(const hier::Index &amp;rhs, const int axis, const int face)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FaceIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a58e3f0565518ea268b741498a5af3943</anchor>
      <arglist>(const FaceIndex &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>FaceIndex &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>acd20a9d86233a1cee47fb70062b1d740</anchor>
      <arglist>(const FaceIndex &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FaceIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>aa84a851f7c2b5bb3ad42081854428486</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>aa02931c5b9e8161760d80c01a2403c51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>ac844e9c1fcc68da85fd109a6dfeb3a62</anchor>
      <arglist>(const int axis)</arglist>
    </member>
    <member kind="function">
      <type>hier::Index</type>
      <name>toCell</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>af349851ea778b110f2170ab617d71059</anchor>
      <arglist>(const int face) const </arglist>
    </member>
    <member kind="function">
      <type>FaceIndex &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a6081a904b77c0b4423d23af5f43c6a7a</anchor>
      <arglist>(const hier::IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>FaceIndex</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>abfeef4cc89d1a3781fc82a9a911dbf0c</anchor>
      <arglist>(const hier::IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>FaceIndex &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a7d4ea1ea20d174a7214b7ca12bb91672</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>FaceIndex</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a251ba52e42ff454ec4f9874c84e50786</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>FaceIndex &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a4798b1aee043fce5302553be1cee5554</anchor>
      <arglist>(const hier::IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>FaceIndex</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a1d731367aa48500d77102c488e5a5936</anchor>
      <arglist>(const hier::IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>FaceIndex &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>aff6e5fadb376246b4075ea0c56dbedb5</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>FaceIndex</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a86ae2507342bbc1890b100eec9b25036</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>FaceIndex &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a6e51acc76ac521239806cf850f2037f2</anchor>
      <arglist>(const hier::IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>FaceIndex</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a0c70bdc5fcf273fd443a697d83360655</anchor>
      <arglist>(const hier::IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>FaceIndex &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a35ba6ee759622a7edd3fcf9bdd31c6d8</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>FaceIndex</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>af2189da6bbddcd67328deed50b8bded2</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a11291386be840abcc8a4e941f22aa631</anchor>
      <arglist>(const FaceIndex &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a43e9e0c0ea0c4a088cf6f4a38c9112a5</anchor>
      <arglist>(const FaceIndex &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceIntegerConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceIntegerConstantRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>FaceIntegerConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIntegerConstantRefine.html</anchorfile>
      <anchor>ac1847a30cc41d5a4688d7f5d006717bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceIntegerConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIntegerConstantRefine.html</anchorfile>
      <anchor>abe731088409f9de8285854e46d9c5bac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIntegerConstantRefine.html</anchorfile>
      <anchor>a0a972d99bac7748f1dc51f115bb9c8b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIntegerConstantRefine.html</anchorfile>
      <anchor>ad1942a600788b2088bd13075a137a677</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIntegerConstantRefine.html</anchorfile>
      <anchor>addca2841d332a0bf4fdf9d65f2efa53c</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceIterator</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>FaceIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>a61d8c2409593b866b66f4bbdfdb06a3c</anchor>
      <arglist>(const FaceIterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>FaceIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>a3f94e8a3b72fe28b79dfe57bdbccfb56</anchor>
      <arglist>(const FaceIterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FaceIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>ae38e649a8dd4c6d6cb6265b119a70561</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FaceIndex &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>ad5666c138851d42e4abe388fd085431a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FaceIndex *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>a236ae1b4d8cf73fe8bf918ed43dc5cb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FaceIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>ae77949b5e009e63ce07715890937ae4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FaceIterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>acd5ee3df0adfc6ea705a6e529ae5a549</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>af64146241f1c674c38bb4f8ce68dfd5c</anchor>
      <arglist>(const FaceIterator &amp;iterator) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>a239da8aada09e1cef74caa15c705aba7</anchor>
      <arglist>(const FaceIterator &amp;iterator) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend FaceIterator</type>
      <name>FaceGeometry::begin</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>ac5fc9fae65c5e001890f0a7333f2d30e</anchor>
      <arglist>(const hier::Box &amp;box, tbox::Dimension::dir_t axis)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend FaceIterator</type>
      <name>FaceGeometry::end</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>adba11abe79c22bbffa5daca17e06c729</anchor>
      <arglist>(const hier::Box &amp;box, tbox::Dimension::dir_t axis)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceOverlap</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceOverlap.html</filename>
    <base>SAMRAI::hier::BoxOverlap</base>
    <member kind="function">
      <type></type>
      <name>FaceOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceOverlap.html</anchorfile>
      <anchor>a7cb479252ca977dbc06ac80b079b7c27</anchor>
      <arglist>(const std::vector&lt; hier::BoxContainer &gt; &amp;boxes, const hier::Transformation &amp;transformation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceOverlap.html</anchorfile>
      <anchor>a89103ed7e985e852ae3b14694b87df2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOverlapEmpty</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceOverlap.html</anchorfile>
      <anchor>abb86615fcc3edf5f03715c32b2badf52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::BoxContainer &amp;</type>
      <name>getDestinationBoxContainer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceOverlap.html</anchorfile>
      <anchor>a7cf9d7a05cba9916c6e6e70b426d2025</anchor>
      <arglist>(const int axis) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSourceBoxContainer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceOverlap.html</anchorfile>
      <anchor>ade35161dc6e24c5bcc5580de0119a1b3</anchor>
      <arglist>(hier::BoxContainer &amp;src_boxes, int &amp;normal_direction) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector &amp;</type>
      <name>getSourceOffset</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceOverlap.html</anchorfile>
      <anchor>a5e73c6267a45cfcd94a0431ea6d4f8b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::Transformation &amp;</type>
      <name>getTransformation</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceOverlap.html</anchorfile>
      <anchor>ab219fe39f919b8a959b38f0f1b52af6e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceVariable</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceVariable.html</filename>
    <templarg></templarg>
    <base>SAMRAI::hier::Variable</base>
    <member kind="function">
      <type></type>
      <name>FaceVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceVariable.html</anchorfile>
      <anchor>ab43a5ec9de4cebed006a48fcc4a4880e</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;name, int depth=1, bool fine_boundary_represents_var=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceVariable.html</anchorfile>
      <anchor>a4379f485f0324ed673a41bf1983a42a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceVariable.html</anchorfile>
      <anchor>a4e80d32c6671a6962097824d6b06d2d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceVariable.html</anchorfile>
      <anchor>a04e05aa8e52dca5d6a8fc923bf326b23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceVariable.html</anchorfile>
      <anchor>a479824c5598f3553a945477168cd6ada</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FirstLayerCellNoCornersVariableFillPattern</name>
    <filename>classSAMRAI_1_1pdat_1_1FirstLayerCellNoCornersVariableFillPattern.html</filename>
    <base>SAMRAI::xfer::VariableFillPattern</base>
    <member kind="function">
      <type></type>
      <name>FirstLayerCellNoCornersVariableFillPattern</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerCellNoCornersVariableFillPattern.html</anchorfile>
      <anchor>a84d1cc7bf84f8a7236c00d04541904c8</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FirstLayerCellNoCornersVariableFillPattern</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerCellNoCornersVariableFillPattern.html</anchorfile>
      <anchor>ab87dfa947253c251a2dd962ec33f8ab7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerCellNoCornersVariableFillPattern.html</anchorfile>
      <anchor>a8bf31f808c98e7a2d481d39f0d07a911</anchor>
      <arglist>(const hier::BoxGeometry &amp;dst_geometry, const hier::BoxGeometry &amp;src_geometry, const hier::Box &amp;dst_patch_box, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>computeFillBoxesOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerCellNoCornersVariableFillPattern.html</anchorfile>
      <anchor>a4ebfef873698d255c326e0e73a3858b4</anchor>
      <arglist>(const hier::BoxContainer &amp;fill_boxes, const hier::BoxContainer &amp;node_fill_boxes, const hier::Box &amp;patch_box, const hier::Box &amp;data_box, const hier::PatchDataFactory &amp;pdf) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerCellNoCornersVariableFillPattern.html</anchorfile>
      <anchor>a7968564d0f9b033ac1388fef8a0ec895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPatternName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerCellNoCornersVariableFillPattern.html</anchorfile>
      <anchor>aaaabe21e83134ef935a00beae93110b8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FirstLayerCellVariableFillPattern</name>
    <filename>classSAMRAI_1_1pdat_1_1FirstLayerCellVariableFillPattern.html</filename>
    <base>SAMRAI::xfer::VariableFillPattern</base>
    <member kind="function">
      <type></type>
      <name>FirstLayerCellVariableFillPattern</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerCellVariableFillPattern.html</anchorfile>
      <anchor>a34e2628f3d40a2316381b7e3cc15f15a</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FirstLayerCellVariableFillPattern</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerCellVariableFillPattern.html</anchorfile>
      <anchor>a86b8d00550eec9491dbb44183c8fad21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerCellVariableFillPattern.html</anchorfile>
      <anchor>a541609e9bfad02478ee8936474a71c31</anchor>
      <arglist>(const hier::BoxGeometry &amp;dst_geometry, const hier::BoxGeometry &amp;src_geometry, const hier::Box &amp;dst_patch_box, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>computeFillBoxesOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerCellVariableFillPattern.html</anchorfile>
      <anchor>a4e01dd7b30c86dd5b2f1b7d508590c07</anchor>
      <arglist>(const hier::BoxContainer &amp;fill_boxes, const hier::BoxContainer &amp;node_fill_boxes, const hier::Box &amp;patch_box, const hier::Box &amp;data_box, const hier::PatchDataFactory &amp;pdf) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerCellVariableFillPattern.html</anchorfile>
      <anchor>a9d1d45be99bc59f5bf3b0439534648cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPatternName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerCellVariableFillPattern.html</anchorfile>
      <anchor>a859e750b4967ec25ea15a451b99b018b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FirstLayerEdgeVariableFillPattern</name>
    <filename>classSAMRAI_1_1pdat_1_1FirstLayerEdgeVariableFillPattern.html</filename>
    <base>SAMRAI::xfer::VariableFillPattern</base>
    <member kind="function">
      <type></type>
      <name>FirstLayerEdgeVariableFillPattern</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerEdgeVariableFillPattern.html</anchorfile>
      <anchor>a16a2293a7294322b9f4de3d1921c640f</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FirstLayerEdgeVariableFillPattern</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerEdgeVariableFillPattern.html</anchorfile>
      <anchor>ad31b7455ab62559bd95a1cc11dcf9f14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerEdgeVariableFillPattern.html</anchorfile>
      <anchor>a58d4e678698e4f96088e4e9b0828a04b</anchor>
      <arglist>(const hier::BoxGeometry &amp;dst_geometry, const hier::BoxGeometry &amp;src_geometry, const hier::Box &amp;dst_patch_box, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>computeFillBoxesOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerEdgeVariableFillPattern.html</anchorfile>
      <anchor>a2a5eec99f450652d0ffeb64b61c43d74</anchor>
      <arglist>(const hier::BoxContainer &amp;fill_boxes, const hier::BoxContainer &amp;node_fill_boxes, const hier::Box &amp;patch_box, const hier::Box &amp;data_box, const hier::PatchDataFactory &amp;pdf) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerEdgeVariableFillPattern.html</anchorfile>
      <anchor>ad291737b485655f82dcc9c9ca8a5e7b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPatternName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerEdgeVariableFillPattern.html</anchorfile>
      <anchor>a17cfb4b8eae08b6bf738ebe3847c26c8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FirstLayerNodeVariableFillPattern</name>
    <filename>classSAMRAI_1_1pdat_1_1FirstLayerNodeVariableFillPattern.html</filename>
    <base>SAMRAI::xfer::VariableFillPattern</base>
    <member kind="function">
      <type></type>
      <name>FirstLayerNodeVariableFillPattern</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerNodeVariableFillPattern.html</anchorfile>
      <anchor>aacaa90f9b524a7100d441e0cb0a3baa9</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FirstLayerNodeVariableFillPattern</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerNodeVariableFillPattern.html</anchorfile>
      <anchor>a0b25fb6b59a48db0e9be838757d6cbff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerNodeVariableFillPattern.html</anchorfile>
      <anchor>aebcda23ab141b06d22ba4f5e7b52091b</anchor>
      <arglist>(const hier::BoxGeometry &amp;dst_geometry, const hier::BoxGeometry &amp;src_geometry, const hier::Box &amp;dst_patch_box, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>computeFillBoxesOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerNodeVariableFillPattern.html</anchorfile>
      <anchor>ac1ccb75d9790e13ccf0bc35e964c7198</anchor>
      <arglist>(const hier::BoxContainer &amp;fill_boxes, const hier::BoxContainer &amp;node_fill_boxes, const hier::Box &amp;patch_box, const hier::Box &amp;data_box, const hier::PatchDataFactory &amp;pdf) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerNodeVariableFillPattern.html</anchorfile>
      <anchor>a3bd3e92a3d7192284b1139d3c6b96d38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPatternName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerNodeVariableFillPattern.html</anchorfile>
      <anchor>a402c9595adfd58a30934008f6d3bb69e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FirstLayerSideVariableFillPattern</name>
    <filename>classSAMRAI_1_1pdat_1_1FirstLayerSideVariableFillPattern.html</filename>
    <base>SAMRAI::xfer::VariableFillPattern</base>
    <member kind="function">
      <type></type>
      <name>FirstLayerSideVariableFillPattern</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerSideVariableFillPattern.html</anchorfile>
      <anchor>a8682804d18aa05037f1099c976fc75bf</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FirstLayerSideVariableFillPattern</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerSideVariableFillPattern.html</anchorfile>
      <anchor>a5ab3dbff0474ff701e886eb20119e398</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerSideVariableFillPattern.html</anchorfile>
      <anchor>a4d4c8de63da8dea2cfddb393ee44860d</anchor>
      <arglist>(const hier::BoxGeometry &amp;dst_geometry, const hier::BoxGeometry &amp;src_geometry, const hier::Box &amp;dst_patch_box, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>computeFillBoxesOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerSideVariableFillPattern.html</anchorfile>
      <anchor>a35e98cd7ed3795360c99b6e54430d37a</anchor>
      <arglist>(const hier::BoxContainer &amp;fill_boxes, const hier::BoxContainer &amp;node_fill_boxes, const hier::Box &amp;patch_box, const hier::Box &amp;data_box, const hier::PatchDataFactory &amp;pdf) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerSideVariableFillPattern.html</anchorfile>
      <anchor>acb2ec36033dc32e59de3a4e393892017</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPatternName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FirstLayerSideVariableFillPattern.html</anchorfile>
      <anchor>af3c065dd047152306d92063981350bb4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::IndexData</name>
    <filename>classSAMRAI_1_1pdat_1_1IndexData.html</filename>
    <templarg>TYPE</templarg>
    <templarg>BOX_GEOMETRY</templarg>
    <base>SAMRAI::hier::PatchData</base>
    <member kind="typedef">
      <type>IndexIterator&lt; TYPE, BOX_GEOMETRY &gt;</type>
      <name>iterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a276e3298906a966d1339323461bab6ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>ad25afd61eed259cd2939f1bf63aa40da</anchor>
      <arglist>(const hier::Box &amp;box, const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IndexData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a6b07c138f212dda39f6687eaf4484c83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>abad8eeab874b36bd742717b2dfa3b604</anchor>
      <arglist>(const hier::PatchData &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>ac5a794f5382370d79636ccd7a0d2346f</anchor>
      <arglist>(hier::PatchData &amp;dst) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a783668a670f8670f6abe44d95fdbfdf7</anchor>
      <arglist>(const hier::PatchData &amp;src, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a16d1e1fa67694b8436d6227d81e49a02</anchor>
      <arglist>(hier::PatchData &amp;dst, const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>ae3f83e42f45ec7a0ada7cf37b1891b47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a855cfd8cc4b4d4e2061ac7d293b99889</anchor>
      <arglist>(const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>aa65a4529dba173d4e15c2b8074f93406</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a93cd47ba0dd29264f7c08163a58aa6dd</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendItem</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>ac8c2a5fcd8eebfaeffb94f2252430c42</anchor>
      <arglist>(const hier::Index &amp;index, const TYPE &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendItemPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a24266abe951aa6d638f56b262c30ee04</anchor>
      <arglist>(const hier::Index &amp;index, TYPE *item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItem</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a5f1274ba909e98c7a7613d8022ac2f01</anchor>
      <arglist>(const hier::Index &amp;index, const TYPE &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItemPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a73b3c3b8e498919850456f2c73438ab1</anchor>
      <arglist>(const hier::Index &amp;index, TYPE *item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceAddItem</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a252835ce846eb490af3469a5db72e074</anchor>
      <arglist>(const hier::Index &amp;index, const TYPE &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceAddItemPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a499ef0534ddbd04c52c2a8f0074bf59f</anchor>
      <arglist>(const hier::Index &amp;index, TYPE *item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceAppendItem</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a4ad2ee1b92fc104d366069ea0ad2a3dd</anchor>
      <arglist>(const hier::Index &amp;index, const TYPE &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceAppendItemPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a7d1158a59d3f9d6a78a31b45e34a077d</anchor>
      <arglist>(const hier::Index &amp;index, TYPE *item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeItem</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a24b91487eb39e85f6e98847bb8ececb5</anchor>
      <arglist>(const hier::Index &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumberOfItems</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a93b988428cd67cf07a42ec5959d21bd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeInsideBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a6e06c5fac816fce6403fdfaa83539225</anchor>
      <arglist>(const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeOutsideBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>ad39269d851f7a469fa6f41c0b99dcc46</anchor>
      <arglist>(const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeGhostItems</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a144b1148c739fd9e6b50d3012f85bc38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllItems</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a275639b560e4f86afda769e80196a3f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isElement</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a2259154309a002325966caf50905c82e</anchor>
      <arglist>(const hier::Index &amp;index) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getItem</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a544059db74c87a01106c044f5c34280d</anchor>
      <arglist>(const hier::Index &amp;index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>ad66772a1cf583d5eeb625149a93bb22e</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a3556e640725f7fdc94160922d7de73ad</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IndexIterator&lt; TYPE, BOX_GEOMETRY &gt;</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>aad8c12f0e86ea2cbf823261482d7827c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::IndexDataNode</name>
    <filename>classSAMRAI_1_1pdat_1_1IndexDataNode.html</filename>
    <templarg>TYPE</templarg>
    <templarg>BOX_GEOMETRY</templarg>
    <member kind="function">
      <type></type>
      <name>IndexDataNode</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataNode.html</anchorfile>
      <anchor>ac52e89ae93184c4f2a6dcc2e259b1681</anchor>
      <arglist>(const hier::Index &amp;index, const size_t d_offset, TYPE &amp;t, IndexDataNode&lt; TYPE, BOX_GEOMETRY &gt; *n, IndexDataNode&lt; TYPE, BOX_GEOMETRY &gt; *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IndexDataNode</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataNode.html</anchorfile>
      <anchor>aaab94b74cc23698af0c5c60eb519d88f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>IndexData&lt; TYPE, BOX_GEOMETRY &gt;</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataNode.html</anchorfile>
      <anchor>a0aa91d1de3e5f7ce82afe3a8519b755c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>IndexIterator&lt; TYPE, BOX_GEOMETRY &gt;</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataNode.html</anchorfile>
      <anchor>aad8c12f0e86ea2cbf823261482d7827c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::IndexIterator</name>
    <filename>classSAMRAI_1_1pdat_1_1IndexIterator.html</filename>
    <templarg>TYPE</templarg>
    <templarg>BOX_GEOMETRY</templarg>
    <member kind="function">
      <type></type>
      <name>IndexIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>aa1b2317f42013614c7c59e093d6c58d1</anchor>
      <arglist>(const IndexData&lt; TYPE, BOX_GEOMETRY &gt; &amp;data, bool begin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a44f872de16a97d32173eff44d2ce14d9</anchor>
      <arglist>(const IndexIterator&lt; TYPE, BOX_GEOMETRY &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>IndexIterator&lt; TYPE, BOX_GEOMETRY &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a4ceefa1d178c5cb05997afbf68261e7c</anchor>
      <arglist>(const IndexIterator&lt; TYPE, BOX_GEOMETRY &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IndexIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a3a26cc7693ab537f0e7275c747ba06bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>af84032bd04f53076423f49e918f49719</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>adf6d36843261a4166d733014f9bc4d13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a3679d550f16f8a67fec6116a44efabd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>abd418b2f08b66a1efa83b92c2a6547f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Index &amp;</type>
      <name>getIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a18905465cb7af744272905dfa4af24af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IndexIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>ab81b42ce7c41de0ccbc98f7a579b2e48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexIterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a23fd01ac2532c19487b29b6f5841cb2b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>IndexIterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a5b081005716ff4798b5d8b70c85222d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexIterator</type>
      <name>operator--</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a5e5a70fdf70730415b561d9c94e02966</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>afc2c40cd71451545666ba0e09c45b867</anchor>
      <arglist>(const IndexIterator&lt; TYPE, BOX_GEOMETRY &gt; &amp;iterator) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>ac4a5e5bc276a49297464402c1d09f5b3</anchor>
      <arglist>(const IndexIterator&lt; TYPE, BOX_GEOMETRY &gt; &amp;iterator) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IndexData&lt; TYPE, BOX_GEOMETRY &gt;</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a0aa91d1de3e5f7ce82afe3a8519b755c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::IndexDataFactory</name>
    <filename>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>SAMRAI::hier::PatchDataFactory</base>
    <member kind="function">
      <type></type>
      <name>IndexDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</anchorfile>
      <anchor>a126fbe7db8f2cc20b6e0de2b4db739d3</anchor>
      <arglist>(const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IndexDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</anchorfile>
      <anchor>ae65c92ac836b51f11a1da75968b859be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::PatchDataFactory &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</anchorfile>
      <anchor>a76637f39a3aa64370cce0fcfc60d8b72</anchor>
      <arglist>(const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::PatchData &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</anchorfile>
      <anchor>a92f925976d6410f0717039dd7abf17aa</anchor>
      <arglist>(const hier::Patch &amp;patch) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxGeometry &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</anchorfile>
      <anchor>a8c391100057938d52717298e4522f7f3</anchor>
      <arglist>(const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</anchorfile>
      <anchor>ad172f8eea5fef2193c352cfa3d256dee</anchor>
      <arglist>(const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</anchorfile>
      <anchor>a0a67b144a9a81d1c335a171f6f5074fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</anchorfile>
      <anchor>a6b88e895c4894f4f7297a7466f93ba3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</anchorfile>
      <anchor>a1ba73dd7880b68bcb2f6ba71caa0aed2</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchDataFactory &gt; &amp;dst_pdf) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::IndexVariable</name>
    <filename>classSAMRAI_1_1pdat_1_1IndexVariable.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>SAMRAI::hier::Variable</base>
    <member kind="function">
      <type></type>
      <name>IndexVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexVariable.html</anchorfile>
      <anchor>a045aa1a2da3b1a5fbc90e123df26da26</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IndexVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexVariable.html</anchorfile>
      <anchor>a295b81ad0f73d5b1a70ee5e7894549ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexVariable.html</anchorfile>
      <anchor>a7f96b3b114ab55ce714325cf721c7efa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexVariable.html</anchorfile>
      <anchor>a87a4891c459c62180dfd6463ef9d6d4b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::IntegerAttributeId</name>
    <filename>classSAMRAI_1_1pdat_1_1IntegerAttributeId.html</filename>
    <member kind="function">
      <type></type>
      <name>IntegerAttributeId</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IntegerAttributeId.html</anchorfile>
      <anchor>a833c230f860f9c862399079b878aa0ea</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntegerAttributeId</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IntegerAttributeId.html</anchorfile>
      <anchor>a595b06fec43e90ecef63bfbf44794d32</anchor>
      <arglist>(const IntegerAttributeId &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntegerAttributeId</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IntegerAttributeId.html</anchorfile>
      <anchor>aa9a27c8721d5cd9e71e813f646b3e3bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IntegerAttributeId &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IntegerAttributeId.html</anchorfile>
      <anchor>a4615322af61f249d0869212a6b4fc439</anchor>
      <arglist>(const IntegerAttributeId &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IntegerAttributeId.html</anchorfile>
      <anchor>a9b4be4670da49c4c9ab02690d974a7cb</anchor>
      <arglist>(const IntegerAttributeId &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IntegerAttributeId.html</anchorfile>
      <anchor>a6c5bd61f23f9e053fd562858677ef46a</anchor>
      <arglist>(const IntegerAttributeId &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IntegerAttributeId.html</anchorfile>
      <anchor>afbf6f095fa5a272a55af736a85b84087</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Attributes</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IntegerAttributeId.html</anchorfile>
      <anchor>a6435a569d942a448371bf8107e065164</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeComplexInjection</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeComplexInjection.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>NodeComplexInjection</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeComplexInjection.html</anchorfile>
      <anchor>ab6b520c00ec3bc4810170fa715cd77d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeComplexInjection</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeComplexInjection.html</anchorfile>
      <anchor>a920c1eb65b394cb44d284a0a5b43077b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeComplexInjection.html</anchorfile>
      <anchor>aa25f771b65a349ecabb9e3111308c092</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeComplexInjection.html</anchorfile>
      <anchor>a571be31d10b838b0903f6da8025c380f</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeComplexInjection.html</anchorfile>
      <anchor>acedf1810b448eb9fb8a25655f934e428</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeComplexLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeComplexLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>NodeComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1cac8ee27d89b6790269aca27d94f524</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1435f7ecf123924f6de47fbc4cfde617</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>aa77d2895292dc6558be3c20aec621255</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeData</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeData.html</filename>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchData</base>
    <member kind="typedef">
      <type>NodeIterator</type>
      <name>iterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a5d5ca44615f21fa2fd081524a869d97d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a13481b4626e3bca0ed6c977c16b8dfc5</anchor>
      <arglist>(const hier::Box &amp;box, int depth, const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a43d5fd7ae99a5764573ebf493768d404</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a866f52134c03dc9b03914dd7969352cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>aa1fc6c9b9ebfe0a4bc21f26157b10b54</anchor>
      <arglist>(int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a0d63dc5586b6cb0d5e5f9b975667a3a0</anchor>
      <arglist>(int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>ab7ac43790e46c9a39ef7a52de0ac456d</anchor>
      <arglist>(const NodeIndex &amp;i, int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a7d9c185c5afe15e2ce014787d1a47050</anchor>
      <arglist>(const NodeIndex &amp;i, int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayData&lt; TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>abb6c6a5e97c1e7765cf393d46a09e362</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayData&lt; TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a8b85ee120f7ff0f1458c589cf32fc9bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>ae115145e15ea77533a5a0be3986a5db6</anchor>
      <arglist>(const hier::PatchData &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a3b66256c285a9c51c5e5519a00347232</anchor>
      <arglist>(hier::PatchData &amp;dst) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>af3761eb6c05ba8574cb6a784ef17c4fe</anchor>
      <arglist>(const hier::PatchData &amp;src, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a2385aab74b607f0501a2c9adbd4ecd63</anchor>
      <arglist>(hier::PatchData &amp;dst, const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyOnBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a7689dc4385cf3d6c5f9bdd0f38c46b12</anchor>
      <arglist>(const NodeData&lt; TYPE &gt; &amp;src, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>af4843b126109cd78e8c0a8804efc5a64</anchor>
      <arglist>(int dst_depth, const NodeData&lt; TYPE &gt; &amp;src, int src_depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>adbe844b0f2ee7e7024e8f988bf7f0d1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a36e002bd298a7d77c9ed9dc010fb9448</anchor>
      <arglist>(const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a27846f11bc1e06a055d387ebea0bc80a</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a4359530e98f293858f3ee47d0182334c</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>acd93d5cf79cef142d8173dbb7e99c941</anchor>
      <arglist>(const TYPE &amp;t, int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a2ed68a9a8ac2d6b6f1c2f183be219f39</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box &amp;box, int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a501c2f2d67149c0388a1418e4b4cfcfe</anchor>
      <arglist>(const TYPE &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a482a45c5e80c245abf1476eb101d9dbe</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>aa367c3c99d0792a4b1d454d0e68e5578</anchor>
      <arglist>(const hier::Box &amp;box, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>afeab3e6907f07ad76812473525cc6c89</anchor>
      <arglist>(const hier::Box &amp;box, int depth, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a0c931b01563cd509b4edebf147bb9244</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a7966e9ea652a87ebd0a5a33cd6d8677d</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeOfData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a4dac5065bff53526765ed8b20683f260</anchor>
      <arglist>(const hier::Box &amp;box, int depth, const hier::IntVector &amp;ghosts)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeDataFactory</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</filename>
    <templarg></templarg>
    <base>SAMRAI::hier::PatchDataFactory</base>
    <member kind="function">
      <type></type>
      <name>NodeDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>afc5ba39fcbf43188f28214ff90a3c0f7</anchor>
      <arglist>(int depth, const hier::IntVector &amp;ghosts, bool fine_boundary_represents_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>ac473550c5797d05abae3252ce45665af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::PatchDataFactory &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>aa9722cf09fddad954b8b6631fbd95f13</anchor>
      <arglist>(const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::PatchData &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>a0baebf9f667b4489fd2a84b218fa7299</anchor>
      <arglist>(const hier::Patch &amp;patch) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxGeometry &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>a9dee6eeac88c228cca274c3e8d7f7eef</anchor>
      <arglist>(const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>a5fa0db1951bdd85c0c3e58dbbbc4e63d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>a7a94107d940f9bde283dd6a346bfb3b8</anchor>
      <arglist>(const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>a19ae6bf8091e89c13ac4fe47742aeb99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>a1d2dddefcebedf2b3abfd7bb08cdd8a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>aafa564c46959f186e7c5703c34718059</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchDataFactory &gt; &amp;dst_pdf) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeDoubleInjection</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeDoubleInjection.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>NodeDoubleInjection</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDoubleInjection.html</anchorfile>
      <anchor>a8038c2dc7e43d7e8895a9d2aff274610</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeDoubleInjection</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDoubleInjection.html</anchorfile>
      <anchor>a5232117ea1a8590378252549e4a3ad46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDoubleInjection.html</anchorfile>
      <anchor>a2657f2a496ac1afec59754900bfdb233</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDoubleInjection.html</anchorfile>
      <anchor>aeb7f92e8d701513d36922f55549048de</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDoubleInjection.html</anchorfile>
      <anchor>a6d12a6debe5ac1dc7679fbd57c744bcf</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeDoubleLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeDoubleLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>NodeDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>af4098b97de78f297b2f8dce2e08e6bdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>ad173be0a9c6d03a4a6ec5dd1fc006136</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>ad51d7ed92897593ba0960e76e604d37c</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeFloatInjection</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeFloatInjection.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>NodeFloatInjection</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeFloatInjection.html</anchorfile>
      <anchor>a2a56b4e2c44a8bcb5375752fe7dacf6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeFloatInjection</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeFloatInjection.html</anchorfile>
      <anchor>a813265ccbe79a49dca12d4b47f3091c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeFloatInjection.html</anchorfile>
      <anchor>a971afcae0c7a32e591d6809a0f40eaca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeFloatInjection.html</anchorfile>
      <anchor>a7ecad067ef3b71a4ee3ed992ad3b1943</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeFloatInjection.html</anchorfile>
      <anchor>a66dd2222962f655d51e1c1ddfbf7c483</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeFloatLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeFloatLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>NodeFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>ab251121b844a38fb0e4f9faccc19df2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a853812ce2f96ca22906b52731fd92040</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a6f2f15fbd2335b9df1ecb11e52502442</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeGeometry</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeGeometry.html</filename>
    <base>SAMRAI::hier::BoxGeometry</base>
    <member kind="typedef">
      <type>NodeOverlap</type>
      <name>Overlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeGeometry.html</anchorfile>
      <anchor>a913f9ed8b357a4d36a4e43af39bfb528</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeGeometry.html</anchorfile>
      <anchor>a4e41a6a5962c5e6c5f53b59b376ac4dc</anchor>
      <arglist>(const hier::Box &amp;box, const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeGeometry.html</anchorfile>
      <anchor>ad8ffa2fabfcd1b8e7e6b14caab4237c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeGeometry.html</anchorfile>
      <anchor>a5297167625c20c967b6b74f76d9f1ca7</anchor>
      <arglist>(const hier::BoxGeometry &amp;dst_geometry, const hier::BoxGeometry &amp;src_geometry, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation, const bool retry, const hier::BoxContainer &amp;dst_restrict_boxes=hier::BoxContainer()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeDestinationBoxes</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeGeometry.html</anchorfile>
      <anchor>af37db72bd2a2835668df6d58f425bf35</anchor>
      <arglist>(hier::BoxContainer &amp;dst_boxes, const NodeGeometry &amp;src_geometry, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation, const hier::BoxContainer &amp;dst_restrict_boxes=hier::BoxContainer()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>setUpOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeGeometry.html</anchorfile>
      <anchor>a65661f8fd80df55f8e7222808003b12a</anchor>
      <arglist>(const hier::BoxContainer &amp;boxes, const hier::Transformation &amp;transformation) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Box &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeGeometry.html</anchorfile>
      <anchor>ad8de64b6c75856677a02827442cace2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getGhosts</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeGeometry.html</anchorfile>
      <anchor>af58338d96ba18fd55faaaf5165f59635</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hier::Box</type>
      <name>toNodeBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeGeometry.html</anchorfile>
      <anchor>a5e911f92e2ecf58d79b4e285e5ab33fc</anchor>
      <arglist>(const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transform</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeGeometry.html</anchorfile>
      <anchor>a54cfaf01b7475fa3c26a2e119e05594a</anchor>
      <arglist>(hier::Box &amp;box, const hier::Transformation &amp;transformation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeIterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeGeometry.html</anchorfile>
      <anchor>a66f352de569d783c9f59a4c12390f0b5</anchor>
      <arglist>(const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeIterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeGeometry.html</anchorfile>
      <anchor>a976de603fe706e26705eb1b76c6c8fe3</anchor>
      <arglist>(const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transform</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeGeometry.html</anchorfile>
      <anchor>a4f79ac74087a687d2d2b4fe4559c43d0</anchor>
      <arglist>(NodeIndex &amp;index, const hier::Transformation &amp;transformation)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeIndex</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeIndex.html</filename>
    <base>SAMRAI::hier::Index</base>
    <member kind="enumeration">
      <name>Corner</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>ab378de6757245444a06d3a721df6ab98</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Left</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>ab378de6757245444a06d3a721df6ab98a6f852bace5d86cd3c8e8eb3dd6a896d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Right</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>ab378de6757245444a06d3a721df6ab98a73ccc38686e6ee69c245f51e25fdd8c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LowerLeft</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>ab378de6757245444a06d3a721df6ab98af8f8770af7a60af40ed20260bb89bd15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LowerRight</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>ab378de6757245444a06d3a721df6ab98a23b185f977d1f9bff3db043c532151df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UpperLeft</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>ab378de6757245444a06d3a721df6ab98a16f7c660f95083df18fdc7f6c16d19d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UpperRight</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>ab378de6757245444a06d3a721df6ab98afaf133cb79ca040f5580b3c29dcaff66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LLL</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>ab378de6757245444a06d3a721df6ab98a5a60d1973c300401b41245b155658812</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ULL</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>ab378de6757245444a06d3a721df6ab98a15919bece9531ddb4c6b17ddcc75690f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LUL</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>ab378de6757245444a06d3a721df6ab98ad81a418efba38b7cc75e2f7c275c593a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UUL</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>ab378de6757245444a06d3a721df6ab98af5fe90cdf369a1c8270de87b5972c11e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LLU</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>ab378de6757245444a06d3a721df6ab98a137334f8d206960b308ed6c490e0c28f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ULU</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>ab378de6757245444a06d3a721df6ab98a3718f4bb2197737b58fde19da3f4782e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LUU</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>ab378de6757245444a06d3a721df6ab98a6147763dff3483a9985bb4b192d66da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UUU</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>ab378de6757245444a06d3a721df6ab98aefeca885144a56e8f470b0fa91e2b9b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>ad10cc69da6baef5619d039a2de5d2492</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>af79e278c3b065f2dac3898c6cc30411b</anchor>
      <arglist>(const hier::Index &amp;rhs, const Corner corner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a621f32e9dcb63f1300332ebf5c5e7712</anchor>
      <arglist>(const hier::Index &amp;rhs, const hier::IntVector &amp;corner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a77650ffadb38dcaf8a28db705206e7eb</anchor>
      <arglist>(const NodeIndex &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a15b7781ccd5e5dc0cdd7b279f0eefae8</anchor>
      <arglist>(const NodeIndex &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NodeIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>af40f252ede1730da3bb28f8761372978</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a92814b5ccd1dea507f6fe840ea3783f5</anchor>
      <arglist>(const hier::IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>ade39cc600c2c9689ee8a97065621fed3</anchor>
      <arglist>(const hier::IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>NodeIndex &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a85519242e45ec7e8e31f36ed863e4351</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a5f77465b99f2d6a2c353ddd1e0f6b8de</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>NodeIndex &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a2ae99bafc2f5c9c538200b9322b86d8c</anchor>
      <arglist>(const hier::IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a28956644c6e0fcfe6f98f80a3f94c001</anchor>
      <arglist>(const hier::IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>NodeIndex &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>adcc957d49781340f8924cd229597a76b</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a78b165a12822edaefba3beee712ca512</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>NodeIndex &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a5dc7ed9db2de72ae7c4b8f89a0990774</anchor>
      <arglist>(const hier::IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>af0843143f98d93d3b19d5699566aa2e7</anchor>
      <arglist>(const hier::IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>NodeIndex &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a3a83253f8cb32a6ddfe76a8b4f09ac8d</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>ae650f6ced8f4ccd6aab4cf1692c6931f</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a8414c8ef076bfd42fe4ee0d19dae99ae</anchor>
      <arglist>(const NodeIndex &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a5f6e4ff64e409840c4c023ba253ccec5</anchor>
      <arglist>(const NodeIndex &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeIntegerInjection</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeIntegerInjection.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>NodeIntegerInjection</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIntegerInjection.html</anchorfile>
      <anchor>a679173af2aee9223de604159909cfa32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeIntegerInjection</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIntegerInjection.html</anchorfile>
      <anchor>a10612041b22e0f7a42b001a74726fa53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIntegerInjection.html</anchorfile>
      <anchor>a9137dcfd9de592376e80b2df414833a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIntegerInjection.html</anchorfile>
      <anchor>a18a2d9245f529e34eff5fae95d323a58</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIntegerInjection.html</anchorfile>
      <anchor>af8d9e4ffc64b4739fea2b277f7731319</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeIterator</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>NodeIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>a165bd54d6684a1160c6bc17c9ba4d674</anchor>
      <arglist>(const NodeIterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>NodeIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>a3262d3e96152c9bc7706554acba39c97</anchor>
      <arglist>(const NodeIterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NodeIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>ab82c800e9a7022399a4e3e26f16cdd22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeIndex &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>aaf9319561c59421e634f530215702743</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NodeIndex *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>ae748cb58c3faa7e0f9d8a668e0e4c950</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>a85030ca5b9ffdf28f7499bb719478105</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodeIterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>a0488b20ca6a1f3f1aa0c80ab67ba7ab2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>a4072e0a61943900fb4ad6e43cf330b09</anchor>
      <arglist>(const NodeIterator &amp;iterator) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>aa641cba6e4ce2e0feeeb3edf653685e0</anchor>
      <arglist>(const NodeIterator &amp;iterator) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend NodeIterator</type>
      <name>NodeGeometry::begin</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>a85b26b3f955d41306179a5cedeb95a2f</anchor>
      <arglist>(const hier::Box &amp;box)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend NodeIterator</type>
      <name>NodeGeometry::end</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>a90fe8d7fe125c3ea3047236e8abf094d</anchor>
      <arglist>(const hier::Box &amp;box)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeOverlap</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeOverlap.html</filename>
    <base>SAMRAI::hier::BoxOverlap</base>
    <member kind="function">
      <type></type>
      <name>NodeOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeOverlap.html</anchorfile>
      <anchor>a1d6941e8a798398e01f8087d6db489ad</anchor>
      <arglist>(const hier::BoxContainer &amp;boxes, const hier::Transformation &amp;transformation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeOverlap.html</anchorfile>
      <anchor>afb4f2d9c5415f2d26c8ccf3eba6868b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOverlapEmpty</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeOverlap.html</anchorfile>
      <anchor>a755a7d6081bf3755fb0d4fe04bcfc83c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::BoxContainer &amp;</type>
      <name>getDestinationBoxContainer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeOverlap.html</anchorfile>
      <anchor>a43e3f8dda7e12a111b37f4ae4205356c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSourceBoxContainer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeOverlap.html</anchorfile>
      <anchor>abfc7e8d9273619540e0ce90cd802f20b</anchor>
      <arglist>(hier::BoxContainer &amp;src_boxes) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector &amp;</type>
      <name>getSourceOffset</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeOverlap.html</anchorfile>
      <anchor>a97cd95afd06407ce6f90fde157752b6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::Transformation &amp;</type>
      <name>getTransformation</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeOverlap.html</anchorfile>
      <anchor>a1b49608084a82e7f0c2bb252f77bf8b6</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeVariable</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeVariable.html</filename>
    <templarg></templarg>
    <base>SAMRAI::hier::Variable</base>
    <member kind="function">
      <type></type>
      <name>NodeVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeVariable.html</anchorfile>
      <anchor>a718ea8b88bd10269dd03358510aac7da</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;name, int depth=1, bool fine_boundary_represents_var=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeVariable.html</anchorfile>
      <anchor>adf77044e3a4e350fb279cf0b9c8b863b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeVariable.html</anchorfile>
      <anchor>a8a676942aa5f2f8367cb7763822e20d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeVariable.html</anchorfile>
      <anchor>ac2b83b52781a7cb0134f5f019f37c78b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeVariable.html</anchorfile>
      <anchor>adfe1d52faaa8455b3a465d8c7fd17690</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuteredgeData</name>
    <filename>classSAMRAI_1_1pdat_1_1OuteredgeData.html</filename>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchData</base>
    <member kind="function">
      <type></type>
      <name>OuteredgeData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>ae93a939a339960ebd8fe23619c3443f2</anchor>
      <arglist>(const hier::Box &amp;box, int depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuteredgeData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>ab56f6467748e4007a15d1a598196fbb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a2db481c0309f63b1ece6d08f901e8d05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataExists</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>ab04993f56aa09953f85577313f7f6875</anchor>
      <arglist>(int axis, int face_normal) const </arglist>
    </member>
    <member kind="function">
      <type>hier::Box</type>
      <name>getDataBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a22bbf4cf4c3dde390cda398d531dd630</anchor>
      <arglist>(int axis, int face_normal, int side)</arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a6fb5d3242802fe803acf4a2b1e856d04</anchor>
      <arglist>(int axis, int face_normal, int side, int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a719d1ce135d91cf272d2330752262a56</anchor>
      <arglist>(int axis, int face_normal, int side, int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>ac6ba60b1b735e37dec764f28f2d4c8b1</anchor>
      <arglist>(const EdgeIndex &amp;i, int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>ac0399edb3082f867eae38364a17512ca</anchor>
      <arglist>(const EdgeIndex &amp;i, int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayData&lt; TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a9cc40a571cf5d2f952e021778d8ed74e</anchor>
      <arglist>(int axis, int face_normal, int side)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayData&lt; TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a16e76dc60dda8d5be4351ee9bcb9dfd4</anchor>
      <arglist>(int axis, int face_normal, int side) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>aac5d8c13ca05c50b5f88c80c3f78ea92</anchor>
      <arglist>(const hier::PatchData &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a3592bba5724b619b798d09502d044e1c</anchor>
      <arglist>(hier::PatchData &amp;dst) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a4acd765a71de212834ea6a7b9160f259</anchor>
      <arglist>(const hier::PatchData &amp;src, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>af3547603fe16d66e57dc2eb095c4348d</anchor>
      <arglist>(hier::PatchData &amp;dst, const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a800ee1a498d93679f9c72f764a1d890b</anchor>
      <arglist>(int dst_depth, const EdgeData&lt; TYPE &gt; &amp;src, int src_depth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a0ae546bb2d9d0a3b5ff37e2562f8d636</anchor>
      <arglist>(int dst_depth, EdgeData&lt; TYPE &gt; &amp;dst, int src_depth) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sum</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a21ec1414a34922c6b244d6553a69a6d1</anchor>
      <arglist>(const hier::PatchData &amp;src, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a86ae3f8f198b35afb21cecbf8e97276d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a9ef351b7dd59129b726f0b138ecd657c</anchor>
      <arglist>(const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a87d96f37d474c3416044d92d82b223b2</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>aaf6c8aee86d802d52a2b59f425376a6b</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStreamAndSum</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a698fd4eaa01be7d9c40319f0363bd1e8</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a6ae6fad0878aa0e67d3ad9e11ef6bae5</anchor>
      <arglist>(const TYPE &amp;t, int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a0778a3518e0a599f769e36a28543e1f2</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box &amp;box, int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a54e12b1be7dadf84cd13cdaf9b71d1d2</anchor>
      <arglist>(const TYPE &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>aa3689a92a5a6d18bffb81b757929c68a</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>af7478b2c947ebbd05f0023880ca88e10</anchor>
      <arglist>(const hier::Box &amp;box, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a3bf36ab3bc9936b3b673370261edfa4a</anchor>
      <arglist>(const hier::Box &amp;box, int depth, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxisSide</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a09eecf7259892c6a45a71933986214cf</anchor>
      <arglist>(int axis, int face_normal, int side, const hier::Box &amp;box, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxisSide</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>abbd6412b2c6479cd3d850b52f382bb75</anchor>
      <arglist>(int axis, int face_normal, int side, const hier::Box &amp;box, int depth, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a236cff06aa49cc75f264a35272041c89</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>ab16de422a71c1083869efaa33001d2b8</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeOfData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a63aff3cf6a833dfe90eaef9b0749ff40</anchor>
      <arglist>(const hier::Box &amp;box, int depth)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuteredgeDataFactory</name>
    <filename>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</filename>
    <templarg></templarg>
    <base>SAMRAI::hier::PatchDataFactory</base>
    <member kind="function">
      <type></type>
      <name>OuteredgeDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>ab4a024cbd5542a5eac00aa528a71a2ef</anchor>
      <arglist>(const tbox::Dimension &amp;dim, int depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuteredgeDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>a997c59ed8634bb0a0051c9fadae5fe60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::PatchDataFactory &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>a0fd33fd6cb19cf7f04fb4649b39309ad</anchor>
      <arglist>(const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::PatchData &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>abf23cec5b955ba06dae227c00399cc40</anchor>
      <arglist>(const hier::Patch &amp;patch) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxGeometry &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>a23b5796e6c9491634564726fe908229b</anchor>
      <arglist>(const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>ab97584204065f47e3569fe4b1c607083</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>ab4b4bf005ec2e5f55b9283f5cb18797b</anchor>
      <arglist>(const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>aa682d83d00849986669fdbd021913615</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>a8e1a2d29d7fe58eaf2db8224006ae237</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>a8a2f3e3c599eaada36978c53a48fffed</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchDataFactory &gt; &amp;dst_pdf) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuteredgeGeometry</name>
    <filename>classSAMRAI_1_1pdat_1_1OuteredgeGeometry.html</filename>
    <base>SAMRAI::hier::BoxGeometry</base>
    <member kind="typedef">
      <type>EdgeOverlap</type>
      <name>Overlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeGeometry.html</anchorfile>
      <anchor>a63dfcd3c5f023a92de6e6a082212892a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OuteredgeGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeGeometry.html</anchorfile>
      <anchor>ae576225e1a7307d777d19e6db0c170d7</anchor>
      <arglist>(const hier::Box &amp;box, const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuteredgeGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeGeometry.html</anchorfile>
      <anchor>a64da0615bd9baa74c8f0c5084ac9d1ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeGeometry.html</anchorfile>
      <anchor>a8b8239f4eb8778784998bbae19a5cb1c</anchor>
      <arglist>(const hier::BoxGeometry &amp;dst_geometry, const hier::BoxGeometry &amp;src_geometry, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation, const bool retry, const hier::BoxContainer &amp;dst_restrict_boxes=hier::BoxContainer()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>setUpOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeGeometry.html</anchorfile>
      <anchor>ad6f696837df38391eafa3f653f5f709a</anchor>
      <arglist>(const hier::BoxContainer &amp;boxes, const hier::Transformation &amp;transformation) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Box &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeGeometry.html</anchorfile>
      <anchor>a29344661942cbd74af1e10f21be9d878</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getGhosts</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeGeometry.html</anchorfile>
      <anchor>a289bc16c08d47bcce88e3ee3202d6303</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hier::Box</type>
      <name>toOuteredgeBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeGeometry.html</anchorfile>
      <anchor>afc9bebd01105137ecf430522142373f7</anchor>
      <arglist>(const hier::Box &amp;box, tbox::Dimension::dir_t axis, tbox::Dimension::dir_t face_normal, int side)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuteredgeVariable</name>
    <filename>classSAMRAI_1_1pdat_1_1OuteredgeVariable.html</filename>
    <templarg></templarg>
    <base>SAMRAI::hier::Variable</base>
    <member kind="function">
      <type></type>
      <name>OuteredgeVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeVariable.html</anchorfile>
      <anchor>af4f9b55cca68700dddb9b7932f37274b</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;name, int depth=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuteredgeVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeVariable.html</anchorfile>
      <anchor>a075ff315719e18f1690be7714b55b428</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeVariable.html</anchorfile>
      <anchor>a58c225af7fdde75c6b6ffc3aa7243282</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeVariable.html</anchorfile>
      <anchor>a091387a5ab24114e0869c1b3f224d7ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeVariable.html</anchorfile>
      <anchor>a18327e4328bb288e40ddd7b102d23983</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceComplexConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceComplexConstantRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceComplexConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceComplexConstantRefine.html</anchorfile>
      <anchor>ab770b9e6243d0f1dfa6477f061d8ec67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceComplexConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceComplexConstantRefine.html</anchorfile>
      <anchor>ac2e8311188b332f4590d31b17f480e47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceComplexConstantRefine.html</anchorfile>
      <anchor>a1a936ecd30a29cdcc4fb7d47d8aac378</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceComplexConstantRefine.html</anchorfile>
      <anchor>ad47ec3246f92760dbb2858c12926d3cd</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceComplexConstantRefine.html</anchorfile>
      <anchor>a32667913499cf880c14e2c60e985c7d9</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceComplexLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceComplexLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a638f62cc11fddaab7dd5ea6642100401</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a949370263f693719df654814968cf5f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>ad91c58fbfbc807b9b907d8502dc08cdb</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceData</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceData.html</filename>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchData</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a94fcaba560254c423bdabafa316396af</anchor>
      <arglist>(const hier::Box &amp;box, int depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>afdccc0522f8d632b0bf438aaafccfb26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a0ca4a7d6dbf1a32fb89c9873e62a986a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a0a66696f6a1f111135be156cf638147b</anchor>
      <arglist>(int face_normal, int side, int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>ac0e3ad7bba88b94c0f9e39b034321a6f</anchor>
      <arglist>(int face_normal, int side, int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>ad48a9dd8b975e090758e0b1eeb105711</anchor>
      <arglist>(const FaceIndex &amp;i, int side, int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a7cfb8ef553d251f882e2e6d4db8da644</anchor>
      <arglist>(const FaceIndex &amp;i, int side, int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayData&lt; TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a594e59510dfe868d20ed40c7062b4faf</anchor>
      <arglist>(int face_normal, int side)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayData&lt; TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>ae4b97ccca703ff890eaef3a081b4cb60</anchor>
      <arglist>(int face_normal, int side) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a4bb8a3cc7cf4137e1c2999c732bccc14</anchor>
      <arglist>(const hier::PatchData &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a960411cf88d31ca4c40f80c63a49d351</anchor>
      <arglist>(hier::PatchData &amp;dst) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a9101df7477ea5dea507d714e2f4668e0</anchor>
      <arglist>(const hier::PatchData &amp;src, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a14c827b8e8b29b771884025c848156bf</anchor>
      <arglist>(hier::PatchData &amp;dst, const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a5e86cfb24a2f8364be3750aaa8c2a112</anchor>
      <arglist>(int dst_depth, const FaceData&lt; TYPE &gt; &amp;src, int src_depth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a92d331d694747a97d57b363627c9a2b2</anchor>
      <arglist>(int dst_depth, FaceData&lt; TYPE &gt; &amp;dst, int src_depth) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a9dd89d4744a8db9b8bff2839865ee816</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a1a76fc2f0a1b5e42ebe8672d00e2908a</anchor>
      <arglist>(const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a4a23bd0dbe30c2507938511455db545f</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a8d924c3ecf7ec9d85d02337a533c545c</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a5967795f55e3310928ee737eb709cd46</anchor>
      <arglist>(const TYPE &amp;t, int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a7fc9aba6642effb1774b85db9891a984</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box &amp;box, int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>ac6da9f8f7c25acbc14ece18120818043</anchor>
      <arglist>(const TYPE &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>ac6e767f808b40d90b9232c07f1835ddf</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a79b4e2069385d746d38ce80106758df1</anchor>
      <arglist>(const hier::Box &amp;box, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a9c4891e6167dfa374314d2a5de71d1a5</anchor>
      <arglist>(const hier::Box &amp;box, int depth, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxisFace</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a1804ad82333747c4e2ad1d39b05e0172</anchor>
      <arglist>(tbox::Dimension::dir_t face_normal, int side, const hier::Box &amp;box, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxisFace</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a4d697830ee4fff4e0fdc1b6e4ebf8a08</anchor>
      <arglist>(tbox::Dimension::dir_t face_normal, int side, const hier::Box &amp;box, int depth, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a6de52e4683cb7a13da37133f0f655906</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>ad6fcd732345c914437deb2ce388ec41c</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeOfData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>ae312867ccc7b2d5462c76b2fcd33586e</anchor>
      <arglist>(const hier::Box &amp;box, int depth)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceDataFactory</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</filename>
    <templarg></templarg>
    <base>SAMRAI::hier::PatchDataFactory</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a2adb258db4e458f45e3473c86d109558</anchor>
      <arglist>(const tbox::Dimension &amp;dim, int depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a58febafa4d6129beeb13a4b60f53a0e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::PatchDataFactory &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a75a09fcd561fb0fe2dda7713755e74c0</anchor>
      <arglist>(const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::PatchData &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a88bf2e23db75ab2b6aee817d9c4d93ce</anchor>
      <arglist>(const hier::Patch &amp;patch) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxGeometry &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a1eac370a922b1b50d5738b83b1be1544</anchor>
      <arglist>(const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a13d3a1c7cd8460c990b7f2eefce98b50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a7c8af7ec9abf3fdf18045083123c6fd0</anchor>
      <arglist>(const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a135d87a00bc0bcb0a92ff8f32838d25e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a0ba947e0e9e43a5308c3e5fe8423bd3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a102a084d7ae132a6c2dafb775cc9a3c1</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchDataFactory &gt; &amp;dst_pdf) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceDoubleConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceDoubleConstantRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceDoubleConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDoubleConstantRefine.html</anchorfile>
      <anchor>ae7cd141ca9a8cece3afc06bcaa0ade8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceDoubleConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDoubleConstantRefine.html</anchorfile>
      <anchor>a832983f0adac05afce653d69ee70afa0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDoubleConstantRefine.html</anchorfile>
      <anchor>aef9b8b4e325b5921c5e37a3ded8eb2d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDoubleConstantRefine.html</anchorfile>
      <anchor>a1600e98865c0ab58b5c4dd717ea26ee6</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDoubleConstantRefine.html</anchorfile>
      <anchor>ae57c049498537b70e5c07f997424223f</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceDoubleLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceDoubleLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a8713ee01d0656c5cfd2aa6e287767cc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>ae0a91013315ee7a0b5c363d53086c1a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>aa5368ed4f1a52c9297dd5ba74840ea1a</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceFloatConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceFloatConstantRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceFloatConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceFloatConstantRefine.html</anchorfile>
      <anchor>ade5d0715f2a33c70a66656850df73cdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceFloatConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceFloatConstantRefine.html</anchorfile>
      <anchor>a1be5b08d41703fa76130bc664905443f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceFloatConstantRefine.html</anchorfile>
      <anchor>a7cdafdeb21ebe7187ef8d74baecf619e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceFloatConstantRefine.html</anchorfile>
      <anchor>aaba3fd73b7395f8c686f54c2f883bb4a</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceFloatConstantRefine.html</anchorfile>
      <anchor>aaa6aaa9f7d03dca255174ed4101f6160</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceFloatLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceFloatLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>ab49f81c9c7669d40d290a2daaff857ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a5230c7b66166c1984bc3e3ad88aed5c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>aba1a0c7b68652a40df30ba83a0869bc1</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceGeometry</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceGeometry.html</filename>
    <base>SAMRAI::hier::BoxGeometry</base>
    <member kind="typedef">
      <type>FaceOverlap</type>
      <name>Overlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceGeometry.html</anchorfile>
      <anchor>ad7c552dd7540ee2cb8c620c31839d2c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OuterfaceGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceGeometry.html</anchorfile>
      <anchor>add5184020e2604ef087e05a1ad544d94</anchor>
      <arglist>(const hier::Box &amp;box, const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceGeometry.html</anchorfile>
      <anchor>abe5003331dbc5ae4faba6be3aeb6c4e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceGeometry.html</anchorfile>
      <anchor>aae35a5e32706bff29da4bfd64f31d6ca</anchor>
      <arglist>(const hier::BoxGeometry &amp;dst_geometry, const hier::BoxGeometry &amp;src_geometry, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation, const bool retry, const hier::BoxContainer &amp;dst_restrict_boxes=hier::BoxContainer()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>setUpOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceGeometry.html</anchorfile>
      <anchor>ae22b2dc6361c900ce579f07581ff4abd</anchor>
      <arglist>(const hier::BoxContainer &amp;boxes, const hier::Transformation &amp;transformation) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Box &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceGeometry.html</anchorfile>
      <anchor>a2df8c0f8a6b28a92d5516b0538a8c80b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getGhosts</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceGeometry.html</anchorfile>
      <anchor>acc5c7ae21ff69a69ae684df3dc207150</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceIntegerConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceIntegerConstantRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceIntegerConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceIntegerConstantRefine.html</anchorfile>
      <anchor>a9da80a36eee43a0b26e92d40c09908c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceIntegerConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceIntegerConstantRefine.html</anchorfile>
      <anchor>acd4048334fa97db1a64e14721c513f71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceIntegerConstantRefine.html</anchorfile>
      <anchor>acfde52d722b5a89beec154015aedcb05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceIntegerConstantRefine.html</anchorfile>
      <anchor>a57e0d7b672e45153093465857793a3de</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceIntegerConstantRefine.html</anchorfile>
      <anchor>a456676b2129ec30708c3e532f1fd54bc</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceVariable</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceVariable.html</filename>
    <templarg></templarg>
    <base>SAMRAI::hier::Variable</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceVariable.html</anchorfile>
      <anchor>a9ce23e724b419b7b3f0f939fd263549d</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;name, int depth=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceVariable.html</anchorfile>
      <anchor>a6ae81086dd3e1d6611498913ddf96b3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceVariable.html</anchorfile>
      <anchor>a855a8a9372c0e15c86dfda38b848d84b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceVariable.html</anchorfile>
      <anchor>ac40f24f7a6eb23d06aa6f437b0bba1c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceVariable.html</anchorfile>
      <anchor>aeddfabaaa662af55167115a49a65facc</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuternodeData</name>
    <filename>classSAMRAI_1_1pdat_1_1OuternodeData.html</filename>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchData</base>
    <member kind="function">
      <type></type>
      <name>OuternodeData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>adfe0542fb7f4523c4b7fdfe3bf077667</anchor>
      <arglist>(const hier::Box &amp;box, int depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuternodeData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a0128045397f487384663467089024916</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>adca47c6ba56eaf421c642b7c912f2d61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataExists</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a8087bc5ea3e12e14b358398136b44f21</anchor>
      <arglist>(int face_normal) const </arglist>
    </member>
    <member kind="function">
      <type>hier::Box</type>
      <name>getDataBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>aae7cd692c3a21156f5c6efee9458d2bf</anchor>
      <arglist>(tbox::Dimension::dir_t face_normal, int side)</arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a4350c2a4c29d2b9d1abeccbc916958ab</anchor>
      <arglist>(int face_normal, int side, int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a83cf1b633041c597cb8c704c5286b13f</anchor>
      <arglist>(int face_normal, int side, int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a3968697214b0f762689c8b02eb641f6a</anchor>
      <arglist>(const NodeIndex &amp;i, int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a587b53d53d597b6cfe0dab7885669060</anchor>
      <arglist>(const NodeIndex &amp;i, int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayData&lt; TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>aaab00fa605e3b5e2ed1a1c0aa83c08fc</anchor>
      <arglist>(int face_normal, int side)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayData&lt; TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a6b0a2eaadcdab0a51d39e4619b4892ba</anchor>
      <arglist>(int face_normal, int side) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>af2f19218c8a309e1803d46a544717a67</anchor>
      <arglist>(const hier::PatchData &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>afc09a908e16e18fa788f222641c93ed9</anchor>
      <arglist>(hier::PatchData &amp;dst) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>acc8d76911e96fd63e9a027715cb09147</anchor>
      <arglist>(const hier::PatchData &amp;src, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>ae0c852565ad15d3949b05dc6da143029</anchor>
      <arglist>(hier::PatchData &amp;dst, const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>aec59e0f618e85d017208f15392867ad8</anchor>
      <arglist>(int dst_depth, const NodeData&lt; TYPE &gt; &amp;src, int src_depth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a8a41f654d00baf434d440261e28109a7</anchor>
      <arglist>(int dst_depth, NodeData&lt; TYPE &gt; &amp;dst, int src_depth) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sum</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a66ee5a9f492f937485f350471f5a4908</anchor>
      <arglist>(const hier::PatchData &amp;src, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>ab62fa6f731e24022863c68f441e123f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>afd19695d5796c86a5b1a69fe7b7b094a</anchor>
      <arglist>(const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>ab502138bce02588199b2d6280a52ee65</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a4e74709b5561f9f49f4a5a632efcfc13</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStreamAndSum</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a232a93e1a011af7d4be64eda4b075cbd</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>ac48a5d19f6d2b5e5c7083aa1c812cc65</anchor>
      <arglist>(const TYPE &amp;t, int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a2b633081cdf0053bf0fe94fbf4956e00</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box &amp;box, int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>ae25954d8dedc1f39788ca8c720dca63c</anchor>
      <arglist>(const TYPE &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>ab2c87419e10beeebfec2620503c4a102</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>ab88b98e7f0916cca392f5dd8f5471542</anchor>
      <arglist>(const hier::Box &amp;box, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a392458d7953027d935f44b70fa067997</anchor>
      <arglist>(const hier::Box &amp;box, int depth, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxisSide</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a3fae21f57a244e4413aa8f8064d7664f</anchor>
      <arglist>(int face_normal, int side, const hier::Box &amp;box, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxisSide</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a2ee1de2236f289e645017c90b8351ac6</anchor>
      <arglist>(int face_normal, int side, const hier::Box &amp;box, int depth, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>ab941a2716ea42fe2265c563c2bc98945</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a1e6606766f909a14fa2a3e70efcb19bc</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeOfData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a1022258267c7742a64a5364002a2c570</anchor>
      <arglist>(const hier::Box &amp;box, int depth)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuternodeDataFactory</name>
    <filename>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</filename>
    <templarg></templarg>
    <base>SAMRAI::hier::PatchDataFactory</base>
    <member kind="function">
      <type></type>
      <name>OuternodeDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>adcafdcd1c270dd3fd6f04734b0fd77df</anchor>
      <arglist>(const tbox::Dimension &amp;dim, int depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuternodeDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>a8d133d928fbd35b148bf6375a8ab98b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::PatchDataFactory &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>a057d37d99c9f65d83e96ee7dbc624a2e</anchor>
      <arglist>(const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::PatchData &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>afa0781aece8b956fb0e3f6fc4b2b0175</anchor>
      <arglist>(const hier::Patch &amp;patch) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxGeometry &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>a01c6a5b0030e7c8d6ae80816ee8a4a27</anchor>
      <arglist>(const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>a9060b2bdb704484358d13f1253d7901a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>a1f5ecef7793e1642c46e69545d6b9cc7</anchor>
      <arglist>(const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>af8d2ca5576b651ae4046b6a07a030fc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>afd078f8b3764159fd70ea5343f5befaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>a960dadd0557e181ff88b2bfd4474265c</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchDataFactory &gt; &amp;dst_pdf) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuternodeDoubleInjection</name>
    <filename>classSAMRAI_1_1pdat_1_1OuternodeDoubleInjection.html</filename>
    <base>SAMRAI::hier::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>OuternodeDoubleInjection</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDoubleInjection.html</anchorfile>
      <anchor>a4f53787a7ea618336a97b3ac6960d116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuternodeDoubleInjection</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDoubleInjection.html</anchorfile>
      <anchor>ad1d8a8ec475ba1e05b45226a5450b360</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDoubleInjection.html</anchorfile>
      <anchor>a98589e790783815f635da9d5947b2461</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDoubleInjection.html</anchorfile>
      <anchor>a99602f07d3455a4c0f82568c5cf722a3</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDoubleInjection.html</anchorfile>
      <anchor>aa02290fb6906cb409d69774eccf2422a</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const int dst_component, const int src_component, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuternodeGeometry</name>
    <filename>classSAMRAI_1_1pdat_1_1OuternodeGeometry.html</filename>
    <base>SAMRAI::hier::BoxGeometry</base>
    <member kind="typedef">
      <type>NodeOverlap</type>
      <name>Overlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeGeometry.html</anchorfile>
      <anchor>ab9ec7a005655bad7601b00183cf0aca4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OuternodeGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeGeometry.html</anchorfile>
      <anchor>a581950e21acb43cc02537b0a57c3f1d4</anchor>
      <arglist>(const hier::Box &amp;box, const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuternodeGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeGeometry.html</anchorfile>
      <anchor>aa27cb4f7f5587fd7cec3e406e3c5efce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeGeometry.html</anchorfile>
      <anchor>ae376bc93ca3641c3ad512f4786c3cd24</anchor>
      <arglist>(const hier::BoxGeometry &amp;dst_geometry, const hier::BoxGeometry &amp;src_geometry, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation, const bool retry, const hier::BoxContainer &amp;dst_restrict_boxes=hier::BoxContainer()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>setUpOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeGeometry.html</anchorfile>
      <anchor>a1cb894477b72541cbd900b0a80789a81</anchor>
      <arglist>(const hier::BoxContainer &amp;boxes, const hier::Transformation &amp;transformation) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Box &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeGeometry.html</anchorfile>
      <anchor>ad36b05f3a81cf2c7dc1f1fbc07d84c76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getGhosts</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeGeometry.html</anchorfile>
      <anchor>af4e1f336f3a2cc1de1a74a879583cee1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuternodeVariable</name>
    <filename>classSAMRAI_1_1pdat_1_1OuternodeVariable.html</filename>
    <templarg></templarg>
    <base>SAMRAI::hier::Variable</base>
    <member kind="function">
      <type></type>
      <name>OuternodeVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeVariable.html</anchorfile>
      <anchor>a8235cd12e80a49e0a864f3ba0a644eb0</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;name, int depth=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuternodeVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeVariable.html</anchorfile>
      <anchor>ad4e703eab03fb04f677d0f18cff84399</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeVariable.html</anchorfile>
      <anchor>a4aa5ee1dbf8f80dfaf48304856226f24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeVariable.html</anchorfile>
      <anchor>aaaa9fc2d843c0418fc4c34206313d30e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeVariable.html</anchorfile>
      <anchor>abb75d320d5df5276e1762c5aebedeaf8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OutersideComplexLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1OutersideComplexLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>OutersideComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>ae28c6b89d01ea7c819fe59f1dda9e80a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutersideComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a899a94a3ffc914b1a319edde2489326e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>aed14c37d5742234b04f3553d2336ff09</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OutersideData</name>
    <filename>classSAMRAI_1_1pdat_1_1OutersideData.html</filename>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchData</base>
    <member kind="function">
      <type></type>
      <name>OutersideData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>afebe9b78412bc99ab77d445f84478efd</anchor>
      <arglist>(const hier::Box &amp;box, int depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutersideData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a06bc4de3d2c23daec6daad8c78ff7a1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a18091a8ee6f6281604c544bea2d7dc9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a9c8292d342b3109ecbe21e2125fd794a</anchor>
      <arglist>(int side_normal, int side, int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a61cea8be960369498b533e01b44e53fd</anchor>
      <arglist>(int side_normal, int side, int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a65a53ccbe5e70ed87b4c4a9852dc3213</anchor>
      <arglist>(const SideIndex &amp;i, int side, int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a90da073ea35bbb7b3ed47d536a19c7f2</anchor>
      <arglist>(const SideIndex &amp;i, int side, int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayData&lt; TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>ae9a84a75323ff8f754f7895fa98176b4</anchor>
      <arglist>(int side_normal, int side)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayData&lt; TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a5cae6e2176568ae667f104e4250dc58a</anchor>
      <arglist>(int side_normal, int side) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a63a12af01bd8192673bfecf6b5869c15</anchor>
      <arglist>(const hier::PatchData &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>ad791516370418b0bba3ab249b825ede5</anchor>
      <arglist>(hier::PatchData &amp;dst) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>af81c4791f0df548cfa9ef0ce70b39403</anchor>
      <arglist>(const hier::PatchData &amp;src, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>acae756dc17bc40051b29516bc60bb364</anchor>
      <arglist>(hier::PatchData &amp;dst, const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>ac2d2ea596adcea9010d5c7dd4dd00580</anchor>
      <arglist>(int dst_depth, const SideData&lt; TYPE &gt; &amp;src, int src_depth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a50a0a6ad50a9e7e9f9122affbf81c5c4</anchor>
      <arglist>(int dst_depth, SideData&lt; TYPE &gt; &amp;dst, int src_depth) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a6daa5b99476bf5cf151ac98ec7023716</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a486114a8cf5126e2e2a47d171125c3b2</anchor>
      <arglist>(const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a48d748fdb64fd42748b0e88671993636</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a24f67cfa6cd5dee8f89943ed0f882b93</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a122517ec8f2cc3a4fffe72f406bf0c55</anchor>
      <arglist>(const TYPE &amp;t, int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a938d403fef203d22a9e75a9629c4ad2a</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box &amp;box, int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>aeb4d411acf39cb988d0a1ddd1f134082</anchor>
      <arglist>(const TYPE &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a637b423fe179fddcfabd82af53421787</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>af259a0d77b3bfdbf7c1cfc963e30e8e7</anchor>
      <arglist>(const hier::Box &amp;box, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a88d553ba1f1a1707094ab6ae96651ea7</anchor>
      <arglist>(const hier::Box &amp;box, int depth, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxisSide</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a305dca0eb3e324364fb5360abe9c9c7d</anchor>
      <arglist>(tbox::Dimension::dir_t side_normal, int side, const hier::Box &amp;box, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxisSide</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a3d62a20466fe0dc28d4ed4bff4d59aab</anchor>
      <arglist>(tbox::Dimension::dir_t side_normal, int side, const hier::Box &amp;box, int depth, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a756274ee8d322bbbe860bdee39b2457e</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>ab3527e928a05303c627cca8141993f78</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeOfData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a205647cfcd6df34fe98da22c11d239dc</anchor>
      <arglist>(const hier::Box &amp;box, int depth)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OutersideDataFactory</name>
    <filename>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</filename>
    <templarg></templarg>
    <base>SAMRAI::hier::PatchDataFactory</base>
    <member kind="function">
      <type></type>
      <name>OutersideDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>a3d591b37362c035df8f43c31cc781137</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const int depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutersideDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>af3d6b2e356c9322091cc71e6fd5ccfdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::PatchDataFactory &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>ab51b05ad83727a90b423c1ca84c566b3</anchor>
      <arglist>(const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::PatchData &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>aaa0f3951324f8b536b6bc972cb9bd02a</anchor>
      <arglist>(const hier::Patch &amp;patch) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxGeometry &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>a3b70cc705af7e9e2dadbaf21a76eed58</anchor>
      <arglist>(const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>a14f6ec4811e3cf72b631def5f92bd51d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>ab87537c4f8a2ad70e6bd254ef34d53d6</anchor>
      <arglist>(const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>a728006fb75d27f4a22e7107f25d29aea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>a608a47a38e4e89c892ccbc83ea6ae276</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>a259664fcf24a25a49663e24d7ebab055</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchDataFactory &gt; &amp;dst_pdf) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OutersideDoubleLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1OutersideDoubleLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>OutersideDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a80950cce587a4b2cb69d68131a86aec7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutersideDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>abd8488986d04d448ae546157d53db08b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a801d8595a5b1e287fcc9a1c24d4b3c8d</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OutersideFloatLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1OutersideFloatLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>OutersideFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>ad07552b0e8fb25337b3dc27f1ad16bd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutersideFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>ae4e8371c3f8f1b14175b05e7b2384198</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>aeb4f4f42c4e1603849654641166c6471</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OutersideGeometry</name>
    <filename>classSAMRAI_1_1pdat_1_1OutersideGeometry.html</filename>
    <base>SAMRAI::hier::BoxGeometry</base>
    <member kind="typedef">
      <type>SideOverlap</type>
      <name>Overlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideGeometry.html</anchorfile>
      <anchor>afb16fa8ad4aab157f76ac48fb8fdb51c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutersideGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideGeometry.html</anchorfile>
      <anchor>ad4396f4880fb889027aa850c5ccddc60</anchor>
      <arglist>(const hier::Box &amp;box, const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutersideGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideGeometry.html</anchorfile>
      <anchor>a9c353849151da34dd03df194db2c02b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideGeometry.html</anchorfile>
      <anchor>aadbe59d86328aca0c472b610dca7e1c1</anchor>
      <arglist>(const hier::BoxGeometry &amp;dst_geometry, const hier::BoxGeometry &amp;src_geometry, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation, const bool retry, const hier::BoxContainer &amp;dst_restrict_boxes=hier::BoxContainer()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>setUpOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideGeometry.html</anchorfile>
      <anchor>a9598593d87cc96d26589810f5124a1a5</anchor>
      <arglist>(const hier::BoxContainer &amp;boxes, const hier::Transformation &amp;transformation) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Box &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideGeometry.html</anchorfile>
      <anchor>a034fca6506ff66f632d4640545d8282d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getGhosts</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideGeometry.html</anchorfile>
      <anchor>a972e225aabc1aab6e9c5a1f60c3665e4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OutersideVariable</name>
    <filename>classSAMRAI_1_1pdat_1_1OutersideVariable.html</filename>
    <templarg></templarg>
    <base>SAMRAI::hier::Variable</base>
    <member kind="function">
      <type></type>
      <name>OutersideVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideVariable.html</anchorfile>
      <anchor>a0761bd33971681fd294893473f03aff6</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;name, int depth=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutersideVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideVariable.html</anchorfile>
      <anchor>adff3347a1e52756b1f0a7217f256d208</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideVariable.html</anchorfile>
      <anchor>a35d8145fab093fcde87adf06ec8ddc62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideVariable.html</anchorfile>
      <anchor>aa90e2d990da521cfec264d3d946865b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideVariable.html</anchorfile>
      <anchor>a9a9d0ac0bedcd6ca1020570ebb84b44d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SecondLayerNodeNoCornersVariableFillPattern</name>
    <filename>classSAMRAI_1_1pdat_1_1SecondLayerNodeNoCornersVariableFillPattern.html</filename>
    <base>SAMRAI::xfer::VariableFillPattern</base>
    <member kind="function">
      <type></type>
      <name>SecondLayerNodeNoCornersVariableFillPattern</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SecondLayerNodeNoCornersVariableFillPattern.html</anchorfile>
      <anchor>a6e7b3892e5169773782d6e4d9c7a8f20</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SecondLayerNodeNoCornersVariableFillPattern</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SecondLayerNodeNoCornersVariableFillPattern.html</anchorfile>
      <anchor>a388474970703bc21fdbaf1bd1d7c09e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SecondLayerNodeNoCornersVariableFillPattern.html</anchorfile>
      <anchor>a078e6e5126bd87a8398136684f72c9e2</anchor>
      <arglist>(const hier::BoxGeometry &amp;dst_geometry, const hier::BoxGeometry &amp;src_geometry, const hier::Box &amp;dst_patch_box, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>computeFillBoxesOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SecondLayerNodeNoCornersVariableFillPattern.html</anchorfile>
      <anchor>a96476063fe8a745413b764210afadaed</anchor>
      <arglist>(const hier::BoxContainer &amp;fill_boxes, const hier::BoxContainer &amp;node_fill_boxes, const hier::Box &amp;patch_box, const hier::Box &amp;data_box, const hier::PatchDataFactory &amp;pdf) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SecondLayerNodeNoCornersVariableFillPattern.html</anchorfile>
      <anchor>a70667cdd3299d56f85efb625c4229064</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPatternName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SecondLayerNodeNoCornersVariableFillPattern.html</anchorfile>
      <anchor>a34c0a39fd288b011ea27bc861306ed40</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SecondLayerNodeVariableFillPattern</name>
    <filename>classSAMRAI_1_1pdat_1_1SecondLayerNodeVariableFillPattern.html</filename>
    <base>SAMRAI::xfer::VariableFillPattern</base>
    <member kind="function">
      <type></type>
      <name>SecondLayerNodeVariableFillPattern</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SecondLayerNodeVariableFillPattern.html</anchorfile>
      <anchor>a3f060e6254b790247b318f40b26986b8</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SecondLayerNodeVariableFillPattern</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SecondLayerNodeVariableFillPattern.html</anchorfile>
      <anchor>a575cf6d91bb5329c2d81e57dca390436</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SecondLayerNodeVariableFillPattern.html</anchorfile>
      <anchor>aec852925886bdc2c4585485ea960181c</anchor>
      <arglist>(const hier::BoxGeometry &amp;dst_geometry, const hier::BoxGeometry &amp;src_geometry, const hier::Box &amp;dst_patch_box, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>computeFillBoxesOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SecondLayerNodeVariableFillPattern.html</anchorfile>
      <anchor>a2f03a5f4bedf4dc7b322a21efdb6db87</anchor>
      <arglist>(const hier::BoxContainer &amp;fill_boxes, const hier::BoxContainer &amp;node_fill_boxes, const hier::Box &amp;patch_box, const hier::Box &amp;data_box, const hier::PatchDataFactory &amp;pdf) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SecondLayerNodeVariableFillPattern.html</anchorfile>
      <anchor>a2933626c24c34dc8d384c87e6a4f6aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPatternName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SecondLayerNodeVariableFillPattern.html</anchorfile>
      <anchor>a72dc153ccbb1f3139b8a235a293c30be</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideComplexConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1SideComplexConstantRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>SideComplexConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideComplexConstantRefine.html</anchorfile>
      <anchor>aa0856f9895d88ecbc4b4ecf246235d6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideComplexConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideComplexConstantRefine.html</anchorfile>
      <anchor>a384010c8cc4ede51e7cca7e8ed0e8ec3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideComplexConstantRefine.html</anchorfile>
      <anchor>acaf53d07623d1396088e164a91cb68ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideComplexConstantRefine.html</anchorfile>
      <anchor>a56d77d9afca06bbd9808e528c607a2b2</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideComplexConstantRefine.html</anchorfile>
      <anchor>a8ee12bb55c51dc6219a6b47c288541a2</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideComplexLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1SideComplexLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>SideComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a6bfe604975f55eda085fcc48378d6515</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a5f17b59cd200c3745245daff4c6bf8b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a7a72dff1dec3533e31e5864fc77bac19</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideData</name>
    <filename>classSAMRAI_1_1pdat_1_1SideData.html</filename>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchData</base>
    <member kind="typedef">
      <type>SideIterator</type>
      <name>iterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a738761b910ada4847addc9ee29b305c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SideData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a189f2217afc01343aaade9157dc8fd67</anchor>
      <arglist>(const hier::Box &amp;box, int depth, const hier::IntVector &amp;ghosts, const hier::IntVector &amp;directions)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SideData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>aab16042c774f4839c8c427f9e945ee91</anchor>
      <arglist>(const hier::Box &amp;box, int depth, const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a73dfc408cfc9d9efe5a2ca1a7008f2f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getDirectionVector</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a73aeea1942d1342603f758f25bf2537f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>acb833864884e8c550c924137fe953745</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>ad77ca303348bbd7501215ef8240e86ce</anchor>
      <arglist>(int side_normal, int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a53e0f6904c0c33924f43fcd6066e09be</anchor>
      <arglist>(int side_normal, int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>ae6336177ac6b2cd59920e44aa16ab03d</anchor>
      <arglist>(const SideIndex &amp;i, int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>ae1461a96e9dc5158cefae70fe1288b49</anchor>
      <arglist>(const SideIndex &amp;i, int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayData&lt; TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a8cb0b952d8e7118041be90ddcb2b8068</anchor>
      <arglist>(int side_normal)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayData&lt; TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a0d69f8dd7d6a4e78f64a37223e6c0bd7</anchor>
      <arglist>(int side_normal) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>aa734b21163d23fb7fdac69226c2a966c</anchor>
      <arglist>(const hier::PatchData &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a689e4d482edcfd2fccbf59acf8ef6202</anchor>
      <arglist>(hier::PatchData &amp;dst) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a7aab10344503d9c879b0dd3611695eb9</anchor>
      <arglist>(const hier::PatchData &amp;src, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a56edd614bb8fdcbd8691c5d689b5ae41</anchor>
      <arglist>(hier::PatchData &amp;dst, const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyOnBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a558c2637b2e8b4de33914b166e51082a</anchor>
      <arglist>(const SideData&lt; TYPE &gt; &amp;src, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a54ddf38a3770baef841edfd42ad89673</anchor>
      <arglist>(int dst_depth, const SideData&lt; TYPE &gt; &amp;src, int src_depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a510a7443f5a0b5976f7c86b570b7cf4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a128758f51b647b15429a195f652c840b</anchor>
      <arglist>(const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a72ceb02056871c998c6c7027db2afb8e</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a33625db5acc8a2537b305a766744693f</anchor>
      <arglist>(tbox::MessageStream &amp;stream, const hier::BoxOverlap &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a8be77b0d121e64f47c7c261ba77ab0ec</anchor>
      <arglist>(const TYPE &amp;t, int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a16013f5a7f754f5dfa6599a4a81f4594</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box &amp;box, int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a327a8502304d4f03d23e91b368aa9e68</anchor>
      <arglist>(const TYPE &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a2265ad96ebd890b580af1e9d8660d519</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a5e095c6597a12d0f5d8dbeb8e24d8bb2</anchor>
      <arglist>(const hier::Box &amp;box, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>acd7f2553db6fb5b05f31f63766f7ed0a</anchor>
      <arglist>(const hier::Box &amp;box, int depth, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>ab59534f1fff54fb06a6601e00af7ac68</anchor>
      <arglist>(tbox::Dimension::dir_t side_normal, const hier::Box &amp;box, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a04eefdeeddfda950d6d83b7cfacbdb2b</anchor>
      <arglist>(tbox::Dimension::dir_t side_normal, const hier::Box &amp;box, int depth, std::ostream &amp;os=tbox::plog, int prec=12) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a3af594de4713de31be4f9eebf51fd8ea</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a9930bf246146d869587241476434b816</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeOfData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>adc240e9845e07e8a4bfd71809cffd7e8</anchor>
      <arglist>(const hier::Box &amp;box, int depth, const hier::IntVector &amp;ghosts, const hier::IntVector &amp;directions)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideDataFactory</name>
    <filename>classSAMRAI_1_1pdat_1_1SideDataFactory.html</filename>
    <templarg></templarg>
    <base>SAMRAI::hier::PatchDataFactory</base>
    <member kind="function">
      <type></type>
      <name>SideDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>aa99d674df389fa8706bc3b93a49474f2</anchor>
      <arglist>(int depth, const hier::IntVector &amp;ghosts, bool fine_boundary_represents_var, const hier::IntVector &amp;directions)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SideDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a64a3362a723d61e697ea033337f349d7</anchor>
      <arglist>(int depth, const hier::IntVector &amp;ghosts, bool fine_boundary_represents_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a5ea49b994a02c4275d80d4ed704bedd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::PatchDataFactory &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a39c605ad9519216c4a14bae7b06fdeff</anchor>
      <arglist>(const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::PatchData &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>ae0e61a56d988a87cdf2df423884e6c79</anchor>
      <arglist>(const hier::Patch &amp;patch) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxGeometry &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a7c0dd0d337b55cdc505e0d6bb9e0ade9</anchor>
      <arglist>(const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a7e6532aaf7490ed16a6f2b419d4eecc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getDirectionVector</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a1acdaeda71f869d42e5e48c196b437b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a9552f7d8e709ad0104492c93266806de</anchor>
      <arglist>(const hier::Box &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>af82439edd4446a0d60ac368ecadb83ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a04aba7930cbe31d19f3eb775f2ea490b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a8736c0cf09fe8b2d5ce3fb6608326886</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchDataFactory &gt; &amp;dst_pdf) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideDoubleConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1SideDoubleConstantRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>SideDoubleConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDoubleConstantRefine.html</anchorfile>
      <anchor>ae948c1f2afcaff98060f8d6c8cbba606</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideDoubleConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDoubleConstantRefine.html</anchorfile>
      <anchor>ab62d4811e8bbdf6cb6e7111a3abcc323</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDoubleConstantRefine.html</anchorfile>
      <anchor>ab785706698c3b2940f17c86215fc60bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDoubleConstantRefine.html</anchorfile>
      <anchor>af69f8fa3b5d3ebe4a7d4c92ec7675ea9</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDoubleConstantRefine.html</anchorfile>
      <anchor>a75f9abf3580484492a9fd4d05b313406</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideDoubleLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1SideDoubleLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>SideDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a88339d19cf9f1d7f8d18d8b6c72cf1fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a57e6c941b29601a33c1270c87fe75f80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a494f9dcc5f029a358d6072b425e7c638</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideFloatConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1SideFloatConstantRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>SideFloatConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideFloatConstantRefine.html</anchorfile>
      <anchor>ab4edf1c01cee7f3c7ed80f87c7ce7437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideFloatConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideFloatConstantRefine.html</anchorfile>
      <anchor>adae23ee937be97b4fdbe763ff2165804</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideFloatConstantRefine.html</anchorfile>
      <anchor>a31c7d20425b63c7f7a3726ca3243c0c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideFloatConstantRefine.html</anchorfile>
      <anchor>a67a1535c9a44e026f76c1bc60e1951dd</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideFloatConstantRefine.html</anchorfile>
      <anchor>a1f2ae1baef7e90f749c8bfe6c6fcb923</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideFloatLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1SideFloatLinearTimeInterpolateOp.html</filename>
    <base>SAMRAI::hier::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>SideFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>ad1df5391783b92a9143094a57c75c6ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a19ee7c512d6bff02aa45a824da5c3f7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>aab6b710feb497b02192bda53aa867012</anchor>
      <arglist>(hier::PatchData &amp;dst_data, const hier::Box &amp;where, const hier::PatchData &amp;src_data_old, const hier::PatchData &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideGeometry</name>
    <filename>classSAMRAI_1_1pdat_1_1SideGeometry.html</filename>
    <base>SAMRAI::hier::BoxGeometry</base>
    <member kind="typedef">
      <type>SideOverlap</type>
      <name>Overlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>aaadfee5c3af96df3219fa9ea9ae024bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SideGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>a30cb8cb7af894eb758920333a5ded25f</anchor>
      <arglist>(const hier::Box &amp;box, const hier::IntVector &amp;ghosts, const hier::IntVector &amp;directions)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SideGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>afbcdc5a576e2489eeb32e48f82bc7f0f</anchor>
      <arglist>(const hier::Box &amp;box, const hier::IntVector &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>a01edf94e045c5c064bb95903b62c1f07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>ad51ceb5e1193424d763b3e07673ceeda</anchor>
      <arglist>(const hier::BoxGeometry &amp;dst_geometry, const hier::BoxGeometry &amp;src_geometry, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation, const bool retry, const hier::BoxContainer &amp;dst_restrict_boxes=hier::BoxContainer()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeDestinationBoxes</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>ac88abca6432e0df1e90601851198a47f</anchor>
      <arglist>(std::vector&lt; hier::BoxContainer &gt; &amp;dst_boxes, const SideGeometry &amp;src_geometry, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation, const hier::BoxContainer &amp;dst_restrict_boxes=hier::BoxContainer()) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>setUpOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>a02047e55af6b7996419f285351abda6f</anchor>
      <arglist>(const hier::BoxContainer &amp;boxes, const hier::Transformation &amp;transformation) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Box &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>a5cb58c761fb2254af80ed9056b3776d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getGhosts</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>a16e3bcd215a45c1121b28bdc726dcb9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getDirectionVector</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>a2a81a94417a74ddfe94b725b2e11fe4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hier::Box</type>
      <name>toSideBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>a2127da5a2b6aad243f5963f67f871c2a</anchor>
      <arglist>(const hier::Box &amp;box, tbox::Dimension::dir_t side_normal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transform</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>ae30f8eba58c9bcfd37123e46e1358fa2</anchor>
      <arglist>(hier::Box &amp;box, int &amp;normal_direction, const hier::Transformation &amp;transformation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transform</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>a71bb66d2daf3811a31c0785031b29c94</anchor>
      <arglist>(SideIndex &amp;index, const hier::Transformation &amp;transformation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SideIterator</type>
      <name>begin</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>a0a91ea73c43750ed355c1d7281ce91e3</anchor>
      <arglist>(const hier::Box &amp;box, tbox::Dimension::dir_t axis)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SideIterator</type>
      <name>end</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>a78f64e2af18f15eef90fd4330bd21571</anchor>
      <arglist>(const hier::Box &amp;box, tbox::Dimension::dir_t axis)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideIndex</name>
    <filename>classSAMRAI_1_1pdat_1_1SideIndex.html</filename>
    <base>SAMRAI::hier::Index</base>
    <member kind="enumvalue">
      <name>X</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a84fa5f8364b18685985d168e42ce9f84a8241903704ee9c196753e405db0750c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Y</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a84fa5f8364b18685985d168e42ce9f84aeb2fd5f259284cd3ddbe94159da2d7c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Z</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a84fa5f8364b18685985d168e42ce9f84a3878e0af18d3912d9b0a510e1e6cdb56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Lower</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a84fa5f8364b18685985d168e42ce9f84ae37f8a4fcb685109e96810458b340e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Upper</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a84fa5f8364b18685985d168e42ce9f84a873faa7cf8001e839c5660732882952f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SideIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a059cf1fc65f9c3ee52b4744782cdc3b0</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SideIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a0273d51f86f3878c8e6b667a1849fd84</anchor>
      <arglist>(const hier::Index &amp;rhs, const int axis, const int side)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SideIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a184138b0f81f9329448c1c6c993c00cf</anchor>
      <arglist>(const SideIndex &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>SideIndex &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a5b75227aba0a691fab18a8b8b75670e6</anchor>
      <arglist>(const SideIndex &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SideIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>ad7ec7b0d07d8b7500b145115433b265c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>ab986f0edacb2a06c3ce81ab6b994784d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>aafe7bfd37b240f78907eb852d8787cbc</anchor>
      <arglist>(const int axis)</arglist>
    </member>
    <member kind="function">
      <type>hier::Index</type>
      <name>toCell</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>adb65e8682537be084f25ab3dd6d65924</anchor>
      <arglist>(const int side) const </arglist>
    </member>
    <member kind="function">
      <type>SideIndex &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>ac16dbf6288fe4b6cbfda6d4f3687cbd0</anchor>
      <arglist>(const hier::IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>SideIndex</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>aac3963c21040ba74e6184e811ed44804</anchor>
      <arglist>(const hier::IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>SideIndex &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>ac1ee0aba2a392ae7069ff45a0c6f437b</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>SideIndex</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>ae4f0f90479e36521c5fead526274119d</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>SideIndex &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a893ec50013edfc1386943e89270cdbbe</anchor>
      <arglist>(const hier::IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>SideIndex</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a933767017d9484d1fc65cb354478bf50</anchor>
      <arglist>(const hier::IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>SideIndex &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>ab263628c7620a2600a246bc1529ef507</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>SideIndex</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>af4804667ba7ff14cb3fb9b0693f46a28</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>SideIndex &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a664e4a8e8af0687e6af2222c65d592fd</anchor>
      <arglist>(const hier::IntVector &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>SideIndex</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a23732ea3594f33094fa27dff8deba06c</anchor>
      <arglist>(const hier::IntVector &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>SideIndex &amp;</type>
      <name>operator*=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a54448083728dbbcd012c577bf4eb7e38</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>SideIndex</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>ac31751ed4780ee836f9aaebfa0a216fa</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>abbd8a976d5eac590240b11361699d2a1</anchor>
      <arglist>(const SideIndex &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>af86984e4a0e632c2969b86d2b7cbd647</anchor>
      <arglist>(const SideIndex &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideIntegerConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1SideIntegerConstantRefine.html</filename>
    <base>SAMRAI::hier::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>SideIntegerConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIntegerConstantRefine.html</anchorfile>
      <anchor>a064f6e4542125a4d9b81517dc7525d1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideIntegerConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIntegerConstantRefine.html</anchorfile>
      <anchor>aa9f3c9d56a01baafc0d39195cd358774</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIntegerConstantRefine.html</anchorfile>
      <anchor>a1e281c5bde41693c608240272f7f06de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIntegerConstantRefine.html</anchorfile>
      <anchor>a4e653d2ee33601092429c8f33335e3b6</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIntegerConstantRefine.html</anchorfile>
      <anchor>a7dec9f5d166045139f4d71f895e59cf7</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const int dst_component, const int src_component, const hier::BoxOverlap &amp;fine_overlap, const hier::IntVector &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideIterator</name>
    <filename>classSAMRAI_1_1pdat_1_1SideIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>SideIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a2e3eebb6279f518d70370f115dd65063</anchor>
      <arglist>(const SideIterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>SideIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a4c468e438da2b835988db12ccb0f5497</anchor>
      <arglist>(const SideIterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SideIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a95603a3c86506683b0b193fa4a1e1194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SideIndex &amp;</type>
      <name>operator*</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a799e2036255c14d77dfdd3402b877fbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SideIndex *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>ad9de29fbe8396cfbdfacf4fe4bb5cfe2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SideIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a46031d4db9857f61a6c9f797c4dc63a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SideIterator</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>af9806eba7ef071432f9f4e1ad564a150</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a5a408092ac489de9e6c1b3c50400674e</anchor>
      <arglist>(const SideIterator &amp;iterator) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a32331b297860c264629599c431bf4537</anchor>
      <arglist>(const SideIterator &amp;iterator) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SideIterator</type>
      <name>SideGeometry::begin</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a7bab7aefadc956cc113ed30d5781322a</anchor>
      <arglist>(const hier::Box &amp;box, tbox::Dimension::dir_t axis)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend SideIterator</type>
      <name>SideGeometry::end</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>aac6092ae36ea7824a500f9681aeb19ba</anchor>
      <arglist>(const hier::Box &amp;box, tbox::Dimension::dir_t axis)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideOverlap</name>
    <filename>classSAMRAI_1_1pdat_1_1SideOverlap.html</filename>
    <base>SAMRAI::hier::BoxOverlap</base>
    <member kind="function">
      <type></type>
      <name>SideOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideOverlap.html</anchorfile>
      <anchor>ae859cba07d0ea0146ac66ba112eeab0d</anchor>
      <arglist>(const std::vector&lt; hier::BoxContainer &gt; &amp;boxes, const hier::Transformation &amp;Transformation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideOverlap.html</anchorfile>
      <anchor>a2f1ca26bb24e25b30d8afb50645b351e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOverlapEmpty</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideOverlap.html</anchorfile>
      <anchor>aa691b1a4386779908ac5979d6a40024b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::BoxContainer &amp;</type>
      <name>getDestinationBoxContainer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideOverlap.html</anchorfile>
      <anchor>a994055123c46d256cd27c9411be26a34</anchor>
      <arglist>(const int axis) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSourceBoxContainer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideOverlap.html</anchorfile>
      <anchor>aad05658630fe59134bb2d3520b29af32</anchor>
      <arglist>(hier::BoxContainer &amp;src_boxes, int &amp;normal_direction) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector &amp;</type>
      <name>getSourceOffset</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideOverlap.html</anchorfile>
      <anchor>a9c486f8204a64128ebdd10090ca50e2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::Transformation &amp;</type>
      <name>getTransformation</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideOverlap.html</anchorfile>
      <anchor>a3ce6ebcc8825b25a656dfb302316e71a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideVariable</name>
    <filename>classSAMRAI_1_1pdat_1_1SideVariable.html</filename>
    <templarg></templarg>
    <base>SAMRAI::hier::Variable</base>
    <member kind="function">
      <type></type>
      <name>SideVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideVariable.html</anchorfile>
      <anchor>a24c2fa2ad4f558b71ee0ffe0fba834d4</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;name, const hier::IntVector &amp;directions, int depth=1, bool fine_boundary_represents_var=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SideVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideVariable.html</anchorfile>
      <anchor>a4e1ef43b87e03244aca3a237b724fc46</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;name, int depth=1, bool fine_boundary_represents_var=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideVariable.html</anchorfile>
      <anchor>a5746a8c0b0cbd03d8f71462cf5a62445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getDirectionVector</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideVariable.html</anchorfile>
      <anchor>a39950039019a240b4b7f9b7126e32346</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideVariable.html</anchorfile>
      <anchor>ad39ea6e3602d718f1a206935d38b1427</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideVariable.html</anchorfile>
      <anchor>a62e9d95dd2705eae6277ffd6962cdd59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideVariable.html</anchorfile>
      <anchor>a3468fbc9744e1bf739f59e0f8f491f65</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SumOperation</name>
    <filename>classSAMRAI_1_1pdat_1_1SumOperation.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>SumOperation</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SumOperation.html</anchorfile>
      <anchor>aed334acece3fcee7da2de69157e16c1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SumOperation</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SumOperation.html</anchorfile>
      <anchor>a0c952decb740b712a09009ccbab54196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SumOperation.html</anchorfile>
      <anchor>a49a1939371e03773a798fa3bdc447b64</anchor>
      <arglist>(TYPE &amp;vdst, const TYPE &amp;vsrc) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::solv</name>
    <filename>namespaceSAMRAI_1_1solv.html</filename>
    <class kind="class">SAMRAI::solv::CartesianRobinBcHelper</class>
    <class kind="class">SAMRAI::solv::CellPoissonFACOps</class>
    <class kind="class">SAMRAI::solv::CellPoissonFACSolver</class>
    <class kind="class">SAMRAI::solv::CellPoissonHypreSolver</class>
    <class kind="class">SAMRAI::solv::CVODEAbstractFunctions</class>
    <class kind="class">SAMRAI::solv::CVODESolver</class>
    <class kind="class">SAMRAI::solv::FACOperatorStrategy</class>
    <class kind="class">SAMRAI::solv::FACPreconditioner</class>
    <class kind="class">SAMRAI::solv::GhostCellRobinBcCoefs</class>
    <class kind="class">SAMRAI::solv::KINSOL_SAMRAIContext</class>
    <class kind="class">SAMRAI::solv::KINSOLAbstractFunctions</class>
    <class kind="class">SAMRAI::solv::KINSOLSolver</class>
    <class kind="class">SAMRAI::solv::LocationIndexRobinBcCoefs</class>
    <class kind="class">SAMRAI::solv::NonlinearSolverStrategy</class>
    <class kind="class">SAMRAI::solv::PETSc_SAMRAIVectorReal</class>
    <class kind="class">SAMRAI::solv::PETScAbstractVectorReal</class>
    <class kind="class">SAMRAI::solv::PoissonSpecifications</class>
    <class kind="class">SAMRAI::solv::RobinBcCoefStrategy</class>
    <class kind="class">SAMRAI::solv::SAMRAIVectorReal</class>
    <class kind="class">SAMRAI::solv::SimpleCellRobinBcCoefs</class>
    <class kind="class">SAMRAI::solv::SNES_SAMRAIContext</class>
    <class kind="class">SAMRAI::solv::SNESAbstractFunctions</class>
    <class kind="class">SAMRAI::solv::Sundials_SAMRAIVector</class>
    <class kind="class">SAMRAI::solv::SundialsAbstractVector</class>
    <member kind="function">
      <type>void</type>
      <name>SAMRAI_F77_FUNC</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a054ba1f1e8f88b457d80eaec9e0d6743</anchor>
      <arglist>(compfluxvardc2d, COMPFLUXVARDC2D)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::CartesianRobinBcHelper</name>
    <filename>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</filename>
    <base>SAMRAI::xfer::RefinePatchStrategy</base>
    <member kind="function">
      <type></type>
      <name>CartesianRobinBcHelper</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>acfee23e589d3d1cd053ce7487eb84a16</anchor>
      <arglist>(const tbox::Dimension &amp;dim, std::string object_name=std::string(), RobinBcCoefStrategy *coef_strategy=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianRobinBcHelper</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>ac584bddf584afbd0a76564e8b9e5a2cf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a8ec3c569ab39adcf2a3b975d32c65e2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>aa2188f9160fd7141f3b9b9d3f04eb0fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPhysicalBoundaryConditions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a16446008b3dda2332960e2748d43678e</anchor>
      <arglist>(hier::Patch &amp;patch, const double fill_time, const hier::IntVector &amp;ghost_width_to_fill)</arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>getRefineOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a400adb380f36bda2bc9fa8dcf9a64db6</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>acf86f3a681a534f91f33ad9eeeda18f1</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const hier::BoxContainer &amp;fine_boxes, const hier::IntVector &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessRefine</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a45f34002a8892972bad987f62efb18e8</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const hier::Box &amp;fine_box, const hier::IntVector &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a28c2af4322afcefa6db8fc30897a4ae0</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const hier::BoxContainer &amp;fine_boxes, const hier::IntVector &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessRefine</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a1e6971500c7065980dc23970b850deed</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const hier::Box &amp;fine_box, const hier::IntVector &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaryValuesInCells</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>af9a02fd848d9fc73cac674c9172d9beb</anchor>
      <arglist>(hier::Patch &amp;patch, const double fill_time, const hier::IntVector &amp;ghost_width_to_fill, int target_data_id, bool homogeneous_bc=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaryValuesInCells</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>aeec0686bfbc279bdd0b260682ae5ae6d</anchor>
      <arglist>(hier::PatchLevel &amp;level, const double fill_time, const hier::IntVector &amp;ghost_width_to_fill, int target_data_id, bool homogeneous_bc=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaryValuesAtNodes</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a38993238a738784975b62159f2096927</anchor>
      <arglist>(hier::Patch &amp;patch, const double fill_time, int target_data_id, bool homogeneous_bc=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoefImplementation</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>ae0e190ee02ff0d408d6b5cf5083df3f4</anchor>
      <arglist>(const RobinBcCoefStrategy *coef_strategy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetDataId</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>aabbf8953d2001131ca81cc412e1e9892</anchor>
      <arglist>(int target_data_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHomogeneousBc</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a4d88c097694dd147158cac91e3718aeb</anchor>
      <arglist>(bool homogeneous_bc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::CellPoissonFACOps</name>
    <filename>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</filename>
    <base>SAMRAI::solv::FACOperatorStrategy</base>
    <member kind="function">
      <type></type>
      <name>CellPoissonFACOps</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a8f8e0a412d43fc9c919e181ea72798da</anchor>
      <arglist>(const boost::shared_ptr&lt; CellPoissonHypreSolver &gt; &amp;hypre_solver, const tbox::Dimension &amp;dim, const std::string &amp;object_name=std::string(), const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db=boost::shared_ptr&lt; tbox::Database &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CellPoissonFACOps</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>aa5d3d2934019c449378e1af48fa74b1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoissonSpecifications</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a7cc580e6bfbffffdc9947492f53ee91a</anchor>
      <arglist>(const PoissonSpecifications &amp;spec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhysicalBcCoefObject</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>abf5702f231b825e5bb32d69368033dc6</anchor>
      <arglist>(const RobinBcCoefStrategy *physical_bc_coef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeVectorWeights</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>aa3306861cf8355f9374e372dd8a96561</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, int weight_id, int coarsest_ln=-1, int finest_ln=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreconditioner</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>aa3c056ef1fa85484aeeb4ae12539f78e</anchor>
      <arglist>(const FACPreconditioner *preconditioner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeFluxOnPatch</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a84c366a3490f4eb173f1e3486bf8829a</anchor>
      <arglist>(const hier::Patch &amp;patch, const hier::IntVector &amp;ratio_to_coarser_level, const pdat::CellData&lt; double &gt; &amp;w_data, pdat::SideData&lt; double &gt; &amp;Dgradw_data) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a5ba16397bffad8e27cff8c1e0ef5cb67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFluxId</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>acef5ec67daaf2695319721a75820a27b</anchor>
      <arglist>(int flux_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInputPatchDataIndices</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>add6f2240f4c16d618288864b8a95b925</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getFromInput</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a7ac920307882c4f0476b5eca670291c9</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>restrictSolution</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a519af350efc4c727346d102c9de49c3a</anchor>
      <arglist>(const SAMRAIVectorReal&lt; double &gt; &amp;source, SAMRAIVectorReal&lt; double &gt; &amp;dest, int dest_ln)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>restrictResidual</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a9a76c90308783470ee687e9a68777681</anchor>
      <arglist>(const SAMRAIVectorReal&lt; double &gt; &amp;source, SAMRAIVectorReal&lt; double &gt; &amp;dest, int dest_ln)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>prolongErrorAndCorrect</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a039613b32f29f73b7f2e12f9d14080ac</anchor>
      <arglist>(const SAMRAIVectorReal&lt; double &gt; &amp;source, SAMRAIVectorReal&lt; double &gt; &amp;dest, int dest_ln)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>smoothError</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a83625dda387afc4b50a9359967990b96</anchor>
      <arglist>(SAMRAIVectorReal&lt; double &gt; &amp;error, const SAMRAIVectorReal&lt; double &gt; &amp;residual, int ln, int num_sweeps)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>solveCoarsestLevel</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>af0def579f9a4ffa10dd39f89a4b63245</anchor>
      <arglist>(SAMRAIVectorReal&lt; double &gt; &amp;error, const SAMRAIVectorReal&lt; double &gt; &amp;residual, int coarsest_ln)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeCompositeResidualOnLevel</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a82e1606b80843a097c4d99763a41e232</anchor>
      <arglist>(SAMRAIVectorReal&lt; double &gt; &amp;residual, const SAMRAIVectorReal&lt; double &gt; &amp;solution, const SAMRAIVectorReal&lt; double &gt; &amp;rhs, int ln, bool error_equation_indicator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>computeResidualNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>ab2091fb3e4e044ffdbf773918abcf9b7</anchor>
      <arglist>(const SAMRAIVectorReal&lt; double &gt; &amp;residual, int fine_ln, int coarse_ln)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeOperatorState</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a2da31e44d1cf2f54f7a941b6623fd7be</anchor>
      <arglist>(const SAMRAIVectorReal&lt; double &gt; &amp;solution, const SAMRAIVectorReal&lt; double &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocateOperatorState</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>af48e45974c427278215ae11ee7bba734</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessOneCycle</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a554bf193dfb039a95c9a6e7f9af40d77</anchor>
      <arglist>(int fac_cycle_num, const SAMRAIVectorReal&lt; double &gt; &amp;current_soln, const SAMRAIVectorReal&lt; double &gt; &amp;residual)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::CellPoissonFACSolver</name>
    <filename>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</filename>
    <member kind="function">
      <type></type>
      <name>CellPoissonFACSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a515e2d1f0d79dfca102d027e05b4cece</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;object_name, const boost::shared_ptr&lt; FACPreconditioner &gt; &amp;fac_precond, const boost::shared_ptr&lt; CellPoissonFACOps &gt; &amp;fac_ops, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db=boost::shared_ptr&lt; tbox::Database &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CellPoissonFACSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>abc2ee793aa8277c8ab6827fcb3608728</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveSystem</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a3c0c29fd06d0ccc69a04aaf76d9a227e</anchor>
      <arglist>(const int solution, const int rhs, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, int coarse_ln=-1, int fine_ln=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveSystem</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>afe212d42581fa8eb90e2720a18bf4588</anchor>
      <arglist>(const int solution, const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaries</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a10ba8ef6e09bb7b7107d1fac2fa64357</anchor>
      <arglist>(const std::string &amp;boundary_type, const int fluxes=-1, const int flags=-1, int *bdry_types=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBcObject</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a759f60c6823f3bb41770ecb245ba7061</anchor>
      <arglist>(const RobinBcCoefStrategy *bc_object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeSolverState</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a32daa5602688c39a0064e75ed7d0946b</anchor>
      <arglist>(const int solution, const int rhs, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarse_level=-1, const int fine_level=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocateSolverState</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a6c5f98f4b42b2446883f04752f76a95c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>afe8f84e7a59998876d1ff2b7897f7a28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDPatchDataId</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a02e2265ae025e7a6d25f4d3c30139e8a</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDConstant</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a9d832f909635027d485493549c5f15df</anchor>
      <arglist>(double scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCPatchDataId</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>ad06fc5fe77447208383b32d020823527</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCConstant</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a1a87be7fc6c0c22ad6a0ed6efe00c081</anchor>
      <arglist>(double scalar)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a1473cf46923fc542b71dc67ecc2e6e9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getConvergenceFactors</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a1f76649c08ddb84aa2617672e2653a62</anchor>
      <arglist>(double &amp;avg_factor, double &amp;final_factor) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getResidualNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a0d95e95d2b7e26370b5cfc50964a91e1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::CellPoissonHypreSolver</name>
    <filename>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</filename>
    <member kind="function">
      <type></type>
      <name>CellPoissonHypreSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a5d29ddcfb79770a332e7f54c6136dc9e</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;object_name, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db=boost::shared_ptr&lt; tbox::Database &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CellPoissonHypreSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a09b35d1aa19d26a55bd5673fde493e8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeSolverState</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a9811f250d6fe4fc22cfaaf71ee3f5a45</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, int ln=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocateSolverState</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a657c7d64da8864c13d29aa195772c385</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrixCoefficients</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>abb4f038b8bf890ab367d4496cc8d58b9</anchor>
      <arglist>(const PoissonSpecifications &amp;spec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSolnIdDepth</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>ade811981fb611b422f43bcfe60fc75f0</anchor>
      <arglist>(const int depth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRhsIdDepth</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>af1df26d5e093f9b360bb02a23831551b</anchor>
      <arglist>(const int depth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStoppingCriteria</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>af673ce6767563395fa428b0f992e1759</anchor>
      <arglist>(const int max_iterations=10, const double relative_residual_tol=1.0e-6)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solveSystem</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a593a3c91dbc75cd49403dc21da522905</anchor>
      <arglist>(const int u, const int f, bool homogeneous_bc=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>ac363febdbbf7fb003fb99ed39d51d19f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRelativeResidualNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>aab7fb7db32e9d27dd2336aaf73c7bfa5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaries</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>af289f4c71199b1d98f2f40b2eecbf6b4</anchor>
      <arglist>(const std::string &amp;boundary_type, const int fluxes=-1, const int flags=-1, int *bdry_types=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhysicalBcCoefObject</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a132a9af79508ca10238e75eecb19ad2e</anchor>
      <arglist>(const RobinBcCoefStrategy *physical_bc_coef_strategy, const boost::shared_ptr&lt; hier::Variable &gt; &amp;variable=boost::shared_ptr&lt; hier::Variable &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrintSolverInfo</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>aeebc33c4fdc3ef65022a03d5a9073da4</anchor>
      <arglist>(const bool print)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>afb585a1004156e4f16a7f86ebe006804</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::CVODEAbstractFunctions</name>
    <filename>classSAMRAI_1_1solv_1_1CVODEAbstractFunctions.html</filename>
    <member kind="function">
      <type></type>
      <name>CVODEAbstractFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODEAbstractFunctions.html</anchorfile>
      <anchor>a607f5510414a79a7db0c1c0d32011e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CVODEAbstractFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODEAbstractFunctions.html</anchorfile>
      <anchor>a90eeea6b7ece82bb9ba998a45cf635e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>evaluateRHSFunction</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODEAbstractFunctions.html</anchorfile>
      <anchor>ae9099cb58928379cd76caa82894e344c</anchor>
      <arglist>(double t, SundialsAbstractVector *y, SundialsAbstractVector *y_dot)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>CVSpgmrPrecondSet</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODEAbstractFunctions.html</anchorfile>
      <anchor>aabf8b115ddc8f8e28f9a975cad619506</anchor>
      <arglist>(double t, SundialsAbstractVector *y, SundialsAbstractVector *fy, int jok, int *jcurPtr, double gamma, SundialsAbstractVector *vtemp1, SundialsAbstractVector *vtemp2, SundialsAbstractVector *vtemp3)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>CVSpgmrPrecondSolve</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODEAbstractFunctions.html</anchorfile>
      <anchor>a1f3730352df45d0314b5a230d21bf0b9</anchor>
      <arglist>(double t, SundialsAbstractVector *y, SundialsAbstractVector *fy, SundialsAbstractVector *r, SundialsAbstractVector *z, double gamma, double delta, int lr, SundialsAbstractVector *vtemp)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::CVODESolver</name>
    <filename>classSAMRAI_1_1solv_1_1CVODESolver.html</filename>
    <member kind="function">
      <type></type>
      <name>CVODESolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a994e93ca33b3509da79c1521cd585d02</anchor>
      <arglist>(const std::string &amp;object_name, CVODEAbstractFunctions *my_functions, const bool uses_preconditioner)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CVODESolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>ae745a18a563e0a3c4797e17625dc8445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a2eca6c63dc0cb7e44775b027924256e7</anchor>
      <arglist>(SundialsAbstractVector *solution)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solve</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>aafafa5194788f6ea65b5ae02dadeef34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogFileData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a2cb9574bf1b40bb6be376e55f9f992d8</anchor>
      <arglist>(const std::string &amp;log_fname=std::string())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCVODEFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>aa4a4b2df7174271d3ae98cef26924714</anchor>
      <arglist>(CVODEAbstractFunctions *my_functions, const bool uses_preconditioner)</arglist>
    </member>
    <member kind="function">
      <type>CVODEAbstractFunctions *</type>
      <name>getCVODEFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>add5ae3b9fe062416e0fbfef9378995c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearMultistepMethod</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a483e8188a18e217cfdfe85a8c8867c7d</anchor>
      <arglist>(int linear_multistep_method)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIterationType</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>ab9f4afbe85e2524e68b794b7370d51a9</anchor>
      <arglist>(int iteration_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToleranceType</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>aa1835b9ab1ca17131b1f8c6ff464da1e</anchor>
      <arglist>(int tolerance_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRelativeTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>af8af6c76dc48ab8977b9070319d72765</anchor>
      <arglist>(double relative_tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAbsoluteTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a3ee48a8a4306cf6545ee290182f68c9a</anchor>
      <arglist>(double absolute_tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAbsoluteTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a8059c1b204117e3555a564ba36f46309</anchor>
      <arglist>(SundialsAbstractVector *absolute_tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSteppingMethod</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a8eefb63ac62de5de1c7a21d88e66f116</anchor>
      <arglist>(int stepping_method)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialValueOfIndependentVariable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a26ff3ce64bb8a5451b0dc1651e3c7cc6</anchor>
      <arglist>(double t_0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinalValueOfIndependentVariable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a3297a40ae5620057c1f2413743c111f9</anchor>
      <arglist>(double t_f, bool cvode_needs_initialization)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialConditionVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>ae5482c38c112959b8228fa81745ff47f</anchor>
      <arglist>(SundialsAbstractVector *ic_vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumLinearMultistepMethodOrder</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>aef6dd613232ce5fdeafaaafba3aff11c</anchor>
      <arglist>(int max_order)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumNumberOfInternalSteps</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a1d675750f31268f864ed1792f3b4db31</anchor>
      <arglist>(int max_num_internal_steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumNumberOfNilStepWarnings</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>ababd9c44a9af757b62fd1431532a62fd</anchor>
      <arglist>(int max_num_warnings)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialStepSize</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>afd1525a2b53c0f7fefdf1546054ba139</anchor>
      <arglist>(double init_step_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumAbsoluteStepSize</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a781a3487e2d01ada3b7a5d24520b3bd0</anchor>
      <arglist>(double max_step_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumAbsoluteStepSize</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>afb88d5ec443ebaf001e32034c06dd570</anchor>
      <arglist>(double min_step_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreconditioningType</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a7f888015471a5eb786863e2ba3b1798d</anchor>
      <arglist>(int precondition_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGramSchmidtType</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a6cb5bcfa01f6facb089730b35ec3582d</anchor>
      <arglist>(int gs_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxKrylovDimension</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>ad79a41600de1cda41f02e700d2ab53cf</anchor>
      <arglist>(int max_krylov_dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCVSpgmrToleranceScaleFactor</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a002b124dd4d37c184601b73424de6675</anchor>
      <arglist>(double tol_scale_factor)</arglist>
    </member>
    <member kind="function">
      <type>SundialsAbstractVector *</type>
      <name>getSolutionVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>ac84637ae53b4f02d6b2f67986ffeb72b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDkyVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>aa9a3bb1af084e86000a20ffccdcea19b</anchor>
      <arglist>(double t, int k, SundialsAbstractVector *dky) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getActualFinalValueOfIndependentVariable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>ace651631bb0e5e8ba2214351392f9bf3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStatistics</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>adb387b5a76de72dc1986784942d9c07d</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCVODEStatistics</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a402c0659726349436ced985345627f51</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfInternalStepsTaken</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a90faa0146f9e519f8f36226b324abf33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfRHSFunctionCalls</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a58d4afbb04e329c94745eb250f2498f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfLinearSolverSetupCalls</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a917486e1f7225672581b522f3c32b85c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfNewtonIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>ad62ce2ce1e1be293880b8223fa905551</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfNonlinearConvergenceFailures</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a9a0aba540b1e48739e4883b33c184e38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfLocalErrorTestFailures</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>ac5705e929141d57a72d5db3c8aea3413</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOrderUsedDuringLastInternalStep</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a1003333877d291d2c3c61507f30abfe0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOrderToBeUsedDuringNextInternalStep</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a47cea1f9d0f9c11dfd3b154b9280af21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCVODEMemoryUsageForDoubles</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a32825e406d8f9836d52300127830517c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCVODEMemoryUsageForIntegers</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a2de172137756e4fd476157da164410d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStepSizeForLastInternalStep</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a111cf1695d1519480e74164ddbcc45f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStepSizeForNextInternalStep</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>ad41fd0d4bf5706edfc1f8de1bbb096bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCurrentInternalValueOfIndependentVariable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a9b5feeea80ec3a22c2b1945a46d457a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCVODESuggestedToleranceScalingFactor</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a415a5ebe94e541f3e7a4b88daa8e553d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCVSpgmrStatistics</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a0c4c4c83d8397695a12ae447e03d36e6</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfPreconditionerEvaluations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a8e51d26289ebe158a9985770c1ab3eba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfLinearIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>ad74b72aede08de701c141c487bfb9c43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfPrecondSolveCalls</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a3c7a3d3d22e144af152b47c902389037</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfLinearConvergenceFailures</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>aaba09559b8b38758006fada3de762e96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCVSpgmrMemoryUsageForDoubles</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a3d0306517272384b7aa190f902211090</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCVSpgmrMemoryUsageForIntegers</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a81ac7c05461cd7fbe375cda53b76ee0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>aa02fac50461e40e82d2d68c81f8d1406</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CVODESolver.html</anchorfile>
      <anchor>a13c2ead0e5671dbbaf7ce789828ea3a3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::FACOperatorStrategy</name>
    <filename>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</filename>
    <member kind="function">
      <type></type>
      <name>FACOperatorStrategy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>adfeec8b88ff2587a6673a71031338b20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FACOperatorStrategy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>ae60cb0c7e6819078738665aac8eada15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>restrictSolution</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>a5030937d907996a88c7190d87e2fd89e</anchor>
      <arglist>(const SAMRAIVectorReal&lt; double &gt; &amp;source, SAMRAIVectorReal&lt; double &gt; &amp;dest, int dest_ln)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>restrictResidual</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>a39ad805a6e850d759239166842d02be7</anchor>
      <arglist>(const SAMRAIVectorReal&lt; double &gt; &amp;source, SAMRAIVectorReal&lt; double &gt; &amp;dest, int dest_ln)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>prolongErrorAndCorrect</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>a23e9def6e2f18a274a0636820e96f17a</anchor>
      <arglist>(const SAMRAIVectorReal&lt; double &gt; &amp;source, SAMRAIVectorReal&lt; double &gt; &amp;dest, int dest_ln)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>smoothError</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>aefd99edc26ae9390c63a4f67d03fe280</anchor>
      <arglist>(SAMRAIVectorReal&lt; double &gt; &amp;error, const SAMRAIVectorReal&lt; double &gt; &amp;residual, int ln, int num_sweeps)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>solveCoarsestLevel</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>a2a1b36e8d09e7639541c5bb05e3d33f9</anchor>
      <arglist>(SAMRAIVectorReal&lt; double &gt; &amp;error, const SAMRAIVectorReal&lt; double &gt; &amp;residual, int coarsest_ln)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeCompositeResidualOnLevel</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>a6c5f405d18477a61e41e62d4d68af5c8</anchor>
      <arglist>(SAMRAIVectorReal&lt; double &gt; &amp;residual, const SAMRAIVectorReal&lt; double &gt; &amp;solution, const SAMRAIVectorReal&lt; double &gt; &amp;rhs, int ln, bool error_equation_indicator)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>computeResidualNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>abc03df2bcd01320f9d482aee213a684a</anchor>
      <arglist>(const SAMRAIVectorReal&lt; double &gt; &amp;residual, int fine_ln, int coarse_ln)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>postprocessOneCycle</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>a8bbf9cd1d5417272cfaa20c68f8f90d4</anchor>
      <arglist>(int fac_cycle_num, const SAMRAIVectorReal&lt; double &gt; &amp;current_soln, const SAMRAIVectorReal&lt; double &gt; &amp;residual)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeOperatorState</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>adfa77ec960a1855561aa7bfe7fe3ae4c</anchor>
      <arglist>(const SAMRAIVectorReal&lt; double &gt; &amp;solution, const SAMRAIVectorReal&lt; double &gt; &amp;rhs)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocateOperatorState</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>ab1a9e2eef933ee70d5aed9e7a0274a1a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::FACPreconditioner</name>
    <filename>classSAMRAI_1_1solv_1_1FACPreconditioner.html</filename>
    <member kind="function">
      <type></type>
      <name>FACPreconditioner</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>afb5b533950acbf520d9b56059a03c37e</anchor>
      <arglist>(const std::string &amp;name, boost::shared_ptr&lt; FACOperatorStrategy &gt; user_ops, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db=boost::shared_ptr&lt; tbox::Database &gt;())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FACPreconditioner</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a7b6ed15e90db016986cff8f1991a9604</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveSystem</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a77e53855e38169cdc9e9ebdd256c15c1</anchor>
      <arglist>(SAMRAIVectorReal&lt; double &gt; &amp;solution, SAMRAIVectorReal&lt; double &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeSolverState</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a144d6bbf397572a9dde823a1dbe38762</anchor>
      <arglist>(const SAMRAIVectorReal&lt; double &gt; &amp;solution, const SAMRAIVectorReal&lt; double &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocateSolverState</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a858f92f87e407e1a5f36466765234178</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkVectorStateCompatibility</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a6724b777e306596e843d9d27daaf057c</anchor>
      <arglist>(const SAMRAIVectorReal&lt; double &gt; &amp;solution, const SAMRAIVectorReal&lt; double &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>aadf717ed2ba829a8ab24b19a3d129852</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>aa74a2fc1a1f583bddc402bd6bda9ff1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlgorithmChoice</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a4290ad2b62396b20a2df74ecee85c639</anchor>
      <arglist>(const std::string &amp;choice)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>aa547f89b59ddea100506eac6fc735536</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getConvergenceFactors</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>aaeae45068a74579a27258045f82555d7</anchor>
      <arglist>(double &amp;avg_factor, double &amp;final_factor) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNetConvergenceFactor</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>aae667228924df350cbe93390898a5f0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAvgConvergenceFactor</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a40fbb2d22675c6425ad40a50f8e671cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFinalConvergenceFactor</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a13e4829bcdfeadefded1aba93dcaf6f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getResidualNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a936c80d3da5514f6ddb2b4f577be4474</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::GhostCellRobinBcCoefs</name>
    <filename>classSAMRAI_1_1solv_1_1GhostCellRobinBcCoefs.html</filename>
    <base>SAMRAI::solv::RobinBcCoefStrategy</base>
    <member kind="function">
      <type></type>
      <name>GhostCellRobinBcCoefs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1GhostCellRobinBcCoefs.html</anchorfile>
      <anchor>a2e0b22804059b94df35eb158d893a661</anchor>
      <arglist>(const tbox::Dimension &amp;dim, std::string object_name=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GhostCellRobinBcCoefs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1GhostCellRobinBcCoefs.html</anchorfile>
      <anchor>a80e638b6dcec10fba8403f359990e894</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBcCoefs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1GhostCellRobinBcCoefs.html</anchorfile>
      <anchor>a414c829a0ecd3f80c0a1684eda283179</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::ArrayData&lt; double &gt; &gt; &amp;acoef_data, const boost::shared_ptr&lt; pdat::ArrayData&lt; double &gt; &gt; &amp;bcoef_data, const boost::shared_ptr&lt; pdat::ArrayData&lt; double &gt; &gt; &amp;gcoef_data, const boost::shared_ptr&lt; hier::Variable &gt; &amp;variable, const hier::Patch &amp;patch, const hier::BoundaryBox &amp;bdry_box, double fill_time=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>numberOfExtensionsFillable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1GhostCellRobinBcCoefs.html</anchorfile>
      <anchor>a0a1d11a0c83d38f51f4cd746255bf627</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGhostDataId</name>
      <anchorfile>classSAMRAI_1_1solv_1_1GhostCellRobinBcCoefs.html</anchorfile>
      <anchor>aec3e600ed2b6e0cf4367450d57c19e2b</anchor>
      <arglist>(int ghost_data_id, hier::IntVector extensions_fillable)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1solv_1_1GhostCellRobinBcCoefs.html</anchorfile>
      <anchor>afdf6c8d714d9b4e4143ba57d8ff8bd04</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::KINSOL_SAMRAIContext</name>
    <filename>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</filename>
    <base>SAMRAI::solv::NonlinearSolverStrategy</base>
    <base>SAMRAI::tbox::Serializable</base>
    <member kind="function">
      <type></type>
      <name>KINSOL_SAMRAIContext</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</anchorfile>
      <anchor>ab7edce843bc82e6b8a0826a9a5e21495</anchor>
      <arglist>(const std::string &amp;object_name, KINSOLAbstractFunctions *my_functions, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db=boost::shared_ptr&lt; tbox::Database &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KINSOL_SAMRAIContext</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</anchorfile>
      <anchor>a66ea7a7793c7e9c3cb98d35e5835a265</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</anchorfile>
      <anchor>aa7c8901a042335d68ed4474d18f603d4</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; double &gt; &gt; &amp;solution)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solve</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</anchorfile>
      <anchor>ac073f42fcc7a4c771fef3e28bd6fabdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KINSOLSolver *</type>
      <name>getKINSOLSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</anchorfile>
      <anchor>af6e7dab7c5cdbf2722abf89fd7f5c369</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromInput</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</anchorfile>
      <anchor>aca7a27e72be7983190c6026fe8b9b496</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db, bool is_from_restart)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</anchorfile>
      <anchor>adc2897fa7af0cca22715828f647e3b63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</anchorfile>
      <anchor>a4b1a940b4dfe222ac24dafeedc5d0876</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</anchorfile>
      <anchor>a7a4458a1ff94e72fc648303f6aaa7a82</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</anchorfile>
      <anchor>a383bc7770fbcc4d8bac32d1041a5e7a1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::KINSOLAbstractFunctions</name>
    <filename>classSAMRAI_1_1solv_1_1KINSOLAbstractFunctions.html</filename>
    <member kind="function">
      <type></type>
      <name>KINSOLAbstractFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLAbstractFunctions.html</anchorfile>
      <anchor>a5f6e983466f6d1c274d42b8b4c30275a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KINSOLAbstractFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLAbstractFunctions.html</anchorfile>
      <anchor>a4a45a5dece0b6b1b084f0a85fd79fca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateNonlinearFunction</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLAbstractFunctions.html</anchorfile>
      <anchor>a3b98de3852fed47d580519fce381f65f</anchor>
      <arglist>(SundialsAbstractVector *soln, SundialsAbstractVector *fval)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>precondSetup</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLAbstractFunctions.html</anchorfile>
      <anchor>aedb59b86ef54919f6b21d079df3c6d8f</anchor>
      <arglist>(SundialsAbstractVector *soln, SundialsAbstractVector *soln_scale, SundialsAbstractVector *fval, SundialsAbstractVector *fval_scale, SundialsAbstractVector *vtemp1, SundialsAbstractVector *vtemp2, int &amp;num_feval)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>precondSolve</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLAbstractFunctions.html</anchorfile>
      <anchor>a37ff5d322a031e39d79fedc400dbfc89</anchor>
      <arglist>(SundialsAbstractVector *soln, SundialsAbstractVector *soln_scale, SundialsAbstractVector *fval, SundialsAbstractVector *fval_scale, SundialsAbstractVector *rhs, SundialsAbstractVector *vtemp, int &amp;num_feval)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>jacobianTimesVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLAbstractFunctions.html</anchorfile>
      <anchor>a0a6608ac3c0c16ffdf3a6a47d85edffa</anchor>
      <arglist>(SundialsAbstractVector *vector, SundialsAbstractVector *product, const bool soln_changed, SundialsAbstractVector *soln)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::KINSOLSolver</name>
    <filename>classSAMRAI_1_1solv_1_1KINSOLSolver.html</filename>
    <member kind="function">
      <type></type>
      <name>KINSOLSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a849165c608758eedcefd81dc6b3e5540</anchor>
      <arglist>(const std::string &amp;object_name, KINSOLAbstractFunctions *my_functions, const int uses_preconditioner, const int uses_jac_times_vector)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KINSOLSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a428221b7719d876fdcd0cc4ee679ddc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a593a1b93e1298b37dedd4f63387e2232</anchor>
      <arglist>(SundialsAbstractVector *solution, SundialsAbstractVector *uscale=0, SundialsAbstractVector *fscale=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solve</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a50b81c9a3ab1c83b860c7e839dc25d18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogFileData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>af720d317a9da8471409716d15d1cdafb</anchor>
      <arglist>(const std::string &amp;log_fname, const int flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKINSOLFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>afc39ada43b93a52d9ec5f31653c2874a</anchor>
      <arglist>(KINSOLAbstractFunctions *my_functions, const int uses_preconditioner, const int uses_jac_times_vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreconditioner</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>adae411866c5f022319d76bac6ce56dbc</anchor>
      <arglist>(const int uses_preconditioner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJacobianTimesVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a6025abff16d2d87eb1b4cdc802683aed</anchor>
      <arglist>(const int uses_jac_times_vector)</arglist>
    </member>
    <member kind="function">
      <type>KINSOLAbstractFunctions *</type>
      <name>getKINSOLFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a1331e1f4012319c9fdb6111e61df74c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstraintVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a463d35adaf5c922ecb3e72cb86953f6a</anchor>
      <arglist>(SundialsAbstractVector *constraints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResidualStoppingTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a4f62ac406cfac076d612b2d572187875</anchor>
      <arglist>(const double tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a27e4f1f788424f7a1615b69855ca8b3a</anchor>
      <arglist>(const int maxits)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxKrylovDimension</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a6dc4427f6145561ae0224e00a8d2c880</anchor>
      <arglist>(const int kdim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalStrategy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>aa96506e93b740b6fc49c73a0bb66eb7d</anchor>
      <arglist>(const int global)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNewtonStep</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>aa7f0455ac24ac0fb7d64b298fd5a6d1f</anchor>
      <arglist>(const double maxstep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonlinearStepTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>af83030017ad34f53130ebbf5c9ffba88</anchor>
      <arglist>(const double tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRelativeFunctionError</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a2771e119c00bc362a4d9313427bad71f</anchor>
      <arglist>(const double reserr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearSolverConvergenceTest</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a1de93c8015b79b78c9dcca22014729d5</anchor>
      <arglist>(const int conv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearSolverConstantTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a1cb08c940dd28346f69883fee256c58d</anchor>
      <arglist>(const double tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEisenstatWalkerParameters</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a5672647456156c1d69fd88c97231d839</anchor>
      <arglist>(const double alpha, const double gamma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxStepsWithNoPrecondSetup</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>ae45c3fa5ad5be31e7feb05b4642a400e</anchor>
      <arglist>(const int maxsolv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxLinearSolveRestarts</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a5c9be16b8fa6ce1b0c010085b6ad85f3</anchor>
      <arglist>(const int restarts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxSubSetupCalls</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a3ce8640fa1484b87a34a05b620ca7034</anchor>
      <arglist>(const int maxsub)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResidualMonitoringParams</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a95d6398c6629a61ed3e0099365fa64c2</anchor>
      <arglist>(const double omega_min, const double omega_max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResidualMonitoringConstant</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a5b506e8eb2a24d3b01184a186e62e09a</anchor>
      <arglist>(const double omega)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoMinEps</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>aaf1ff23ad0979bd3875b427c50148a3a</anchor>
      <arglist>(const bool flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxBetaFails</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>ad4478a7b6d815226d105fa9e4df9b42d</anchor>
      <arglist>(const int max_beta_fails)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoInitialSetup</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>abd12b67833658bec99426a29caa256de</anchor>
      <arglist>(const bool flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoResidualMonitoring</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>adb73336e9a93ae52883b743405561609</anchor>
      <arglist>(const bool flag)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNumberOfNonlinearIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>ad7125582d3572dae25f2e0b8e3a5b047</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNumberOfFunctionCalls</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a675c7fe4c42528040b85c4b0688aa91b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNumberOfBetaConditionFailures</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a3d9170403035b4422a2c474a93ac68aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNumberOfBacktracks</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a251b3b72c37b306794816d00cd70dbc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getScaledResidualNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>ae4a135e22b4d60bcf0650f9fad643fbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNewtonStepLength</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a7284f5133819990f9840bd55bc62e680</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>afafc201acb31ee18adc6c59119540882</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeKINSOL</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a5187c05a2e39c263f02a4089df0c83dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a3e11fe6341a41d421dda7071e6c42794</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::LocationIndexRobinBcCoefs</name>
    <filename>classSAMRAI_1_1solv_1_1LocationIndexRobinBcCoefs.html</filename>
    <base>SAMRAI::solv::RobinBcCoefStrategy</base>
    <member kind="function">
      <type></type>
      <name>LocationIndexRobinBcCoefs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1LocationIndexRobinBcCoefs.html</anchorfile>
      <anchor>ab4381336b7d00e692d2d6bddb6867e4c</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;object_name, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db=boost::shared_ptr&lt; tbox::Database &gt;())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocationIndexRobinBcCoefs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1LocationIndexRobinBcCoefs.html</anchorfile>
      <anchor>a8103826e6bb798c3d6d24dd1475a4990</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBcCoefs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1LocationIndexRobinBcCoefs.html</anchorfile>
      <anchor>a596fb1fa4c0192c17ce776a65ed5ca7d</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::ArrayData&lt; double &gt; &gt; &amp;acoef_data, const boost::shared_ptr&lt; pdat::ArrayData&lt; double &gt; &gt; &amp;bcoef_data, const boost::shared_ptr&lt; pdat::ArrayData&lt; double &gt; &gt; &amp;gcoef_data, const boost::shared_ptr&lt; hier::Variable &gt; &amp;variable, const hier::Patch &amp;patch, const hier::BoundaryBox &amp;bdry_box, double fill_time=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>numberOfExtensionsFillable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1LocationIndexRobinBcCoefs.html</anchorfile>
      <anchor>aff02c9f22a97b9e9104f21c0bb82a390</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaryValue</name>
      <anchorfile>classSAMRAI_1_1solv_1_1LocationIndexRobinBcCoefs.html</anchorfile>
      <anchor>a4584beb91fea9b24acbb7ee8c36f4122</anchor>
      <arglist>(int location_index, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundarySlope</name>
      <anchorfile>classSAMRAI_1_1solv_1_1LocationIndexRobinBcCoefs.html</anchorfile>
      <anchor>a30b9a3935ecca875e6a30ed9175fb03a</anchor>
      <arglist>(int location_index, double slope)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRawCoefficients</name>
      <anchorfile>classSAMRAI_1_1solv_1_1LocationIndexRobinBcCoefs.html</anchorfile>
      <anchor>afe65eeb3e1f30254156cf3647f38be3c</anchor>
      <arglist>(int location_index, double a, double b, double g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoefficients</name>
      <anchorfile>classSAMRAI_1_1solv_1_1LocationIndexRobinBcCoefs.html</anchorfile>
      <anchor>ae3c2fcdf666745dd731bef9eeb619753</anchor>
      <arglist>(int location_index, double &amp;a, double &amp;b, double &amp;g) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1solv_1_1LocationIndexRobinBcCoefs.html</anchorfile>
      <anchor>a9a6e1f419f0384a6270d2bc7d8c1fea7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LocationIndexRobinBcCoefs &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1solv_1_1LocationIndexRobinBcCoefs.html</anchorfile>
      <anchor>abd3f8902134b6d07315b65d1d3a3451f</anchor>
      <arglist>(const LocationIndexRobinBcCoefs &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::NonlinearSolverStrategy</name>
    <filename>classSAMRAI_1_1solv_1_1NonlinearSolverStrategy.html</filename>
    <member kind="function">
      <type></type>
      <name>NonlinearSolverStrategy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1NonlinearSolverStrategy.html</anchorfile>
      <anchor>aa0e4ab83da452bb9098b9b74c35703a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NonlinearSolverStrategy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1NonlinearSolverStrategy.html</anchorfile>
      <anchor>a57aa1a90e3d99ff9ae1f56105e2db72a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1solv_1_1NonlinearSolverStrategy.html</anchorfile>
      <anchor>ac1c2a44372d73f0d12c3b4ec89be7605</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; double &gt; &gt; &amp;solution)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>solve</name>
      <anchorfile>classSAMRAI_1_1solv_1_1NonlinearSolverStrategy.html</anchorfile>
      <anchor>a6b06c04a0a263bc876f1e8d8d88aff96</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::PETSc_SAMRAIVectorReal</name>
    <filename>classSAMRAI_1_1solv_1_1PETSc__SAMRAIVectorReal.html</filename>
    <templarg>TYPE</templarg>
    <base>SAMRAI::solv::PETScAbstractVectorReal</base>
    <member kind="function" static="yes">
      <type>static Vec</type>
      <name>createPETScVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETSc__SAMRAIVectorReal.html</anchorfile>
      <anchor>a58013b1d19b88a52bbd3c169af04dad1</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;samrai_vec, MPI_Comm comm=PETSC_COMM_SELF)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyPETScVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETSc__SAMRAIVectorReal.html</anchorfile>
      <anchor>a5e66a1c63f8b1a673a64f2fe3a1ddc1c</anchor>
      <arglist>(Vec petsc_vec)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt;</type>
      <name>getSAMRAIVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETSc__SAMRAIVectorReal.html</anchorfile>
      <anchor>acc31d7d56b114d525a6a81ca6d0c78da</anchor>
      <arglist>(Vec petsc_vec)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PETSc_SAMRAIVectorReal</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETSc__SAMRAIVectorReal.html</anchorfile>
      <anchor>a5a345a93381cd2a86980bb3e92516eee</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;samrai_vector, bool vector_created_via_duplicate, MPI_Comm comm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PETSc_SAMRAIVectorReal</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETSc__SAMRAIVectorReal.html</anchorfile>
      <anchor>a11dfe65b561af48f6711c8aa937c4dff</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::PETScAbstractVectorReal</name>
    <filename>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>PETScAbstractVectorReal</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>af6b9e6225754ad082b31fe446f9cc3aa</anchor>
      <arglist>(bool vector_created_via_duplicate, MPI_Comm comm)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PETScAbstractVectorReal</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>ad9af575feeb961dd2bc61f35e3916b7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vec</type>
      <name>getPETScVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>a10404166c994b47661c769850c60facb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual PETScAbstractVectorReal&lt; TYPE &gt; *</type>
      <name>makeNewVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>a0a5ae4b46c48c46ca265fb6ad0102352</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>freeVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>a69fa2ce2b0a3eaa18cce776b2d00a366</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>viewVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>a9aed3e4e271f882e612b0a96a752d0bc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TYPE</type>
      <name>dotWith</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>a4374e59f611e15a46b7f8f4fab35f29d</anchor>
      <arglist>(const PETScAbstractVectorReal&lt; TYPE &gt; *y, bool local_only=false) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TYPE</type>
      <name>TdotWith</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>a630c854fbad38ccd1e2281973d26286d</anchor>
      <arglist>(const PETScAbstractVectorReal&lt; TYPE &gt; *y, bool local_only=false) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TYPE</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>ab7fa4aac954a12832fcfe4eeef4b1362</anchor>
      <arglist>(bool local_only=false) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TYPE</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>a9fd478f58ff69053be0e57cfdf6c4a20</anchor>
      <arglist>(bool local_only=false) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TYPE</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>a91be42ec607b8221b5fc6dd1db0c258c</anchor>
      <arglist>(bool local_only=false) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>scaleVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>af12d9bf112559ff2930e668f27e1cbe8</anchor>
      <arglist>(const TYPE alpha)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>copyVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>a3408823e0fcefddebc23d9d723026933</anchor>
      <arglist>(const PETScAbstractVectorReal&lt; TYPE &gt; *v_src)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>ad662326dc51e353ad5036d804d2109f5</anchor>
      <arglist>(const TYPE alpha)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>swapWith</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>aa2d695dd761b88b4141267356f3464fb</anchor>
      <arglist>(PETScAbstractVectorReal&lt; TYPE &gt; *v_other)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setAXPY</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>a7d48d6962c4dd5032ef05f16e774ca15</anchor>
      <arglist>(const TYPE alpha, const PETScAbstractVectorReal&lt; TYPE &gt; *x)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setAXPBY</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>a12ec89aa1888db959e2661939efe822b</anchor>
      <arglist>(const TYPE alpha, const PETScAbstractVectorReal&lt; TYPE &gt; *x, const TYPE beta)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setWAXPY</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>a7d487cada617463b16292e9eb4dbe08e</anchor>
      <arglist>(const TYPE alpha, const PETScAbstractVectorReal&lt; TYPE &gt; *x, const PETScAbstractVectorReal&lt; TYPE &gt; *y)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>pointwiseMultiply</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>aaf052c3342c70c51ea73de655d3dbee5</anchor>
      <arglist>(const PETScAbstractVectorReal&lt; TYPE &gt; *x, const PETScAbstractVectorReal&lt; TYPE &gt; *y)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>pointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>afa874c33f8f990e1ced589f6439a1aa8</anchor>
      <arglist>(const PETScAbstractVectorReal&lt; TYPE &gt; *x, const PETScAbstractVectorReal&lt; TYPE &gt; *y)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>a2dfacc68ad0652ae7cd9a2a8aa957331</anchor>
      <arglist>(const PETScAbstractVectorReal&lt; TYPE &gt; *y)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>vecMax</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>acac7751220a839dac55bca12febcf0d6</anchor>
      <arglist>(int &amp;i, TYPE &amp;max) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>vecMin</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>a3bbda9413bbce16260d23ac78d23a5a0</anchor>
      <arglist>(int &amp;i, TYPE &amp;min) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>af1edbfdc6e5e05941c15717c7e7ba247</anchor>
      <arglist>(const TYPE width, const TYPE low)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>getDataArray</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>a20f6152092e34a60d80782ce89a4e703</anchor>
      <arglist>(TYPE **array)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>getDataSize</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>a279ea0e3b0dc57d72dc264424797001e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>getLocalDataSize</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>ae651fec66d6c107053d22b1e3adf1f96</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>restoreDataArray</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>a31d87fb987b781c56da8f6ed0b625de1</anchor>
      <arglist>(TYPE **array)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::PoissonSpecifications</name>
    <filename>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</filename>
    <member kind="function">
      <type></type>
      <name>PoissonSpecifications</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a7691614e64723f4b015c2c21fea505e6</anchor>
      <arglist>(const std::string &amp;object_name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoissonSpecifications</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a536bfdb21e8770561b3670059c2f3b2d</anchor>
      <arglist>(const std::string &amp;object_name, const PoissonSpecifications &amp;r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PoissonSpecifications</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a85772528150f996e3811a52c96fb3fec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PoissonSpecifications &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a498e3bad20e015028ccd0251a7d725af</anchor>
      <arglist>(const PoissonSpecifications &amp;r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a9f8bfe3b50c5094ae4e61188004c3ac8</anchor>
      <arglist>(std::ostream &amp;stream) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>aaffa5d5aaabaa25724fcd0ea511800b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDPatchDataId</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a8f61a34b627bd644a634819f748923b3</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDConstant</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a8945e48254673a5df2d33fe822d24280</anchor>
      <arglist>(double constant)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dIsVariable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a580905ebdfed39e51a27d8e9a80d0d0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dIsConstant</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a8d37576befaf18a022e8b562ee432166</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDPatchDataId</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a5f110dd71f64b1ed32422dfe4b201d8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDConstant</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a7d1dd57eab85a99c5a7060b4328a75ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCPatchDataId</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a14c923fa96fd6f144c81ba4e144fe491</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCConstant</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>aa60990e483c490b0b259c7d329746404</anchor>
      <arglist>(double constant)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCZero</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a84f97959351be32b1d29b672377abbef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cIsVariable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a26b9699907a2ca5011af8134bda75a7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cIsZero</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>af18009cac25189a916f1cc1813b66d1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cIsConstant</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a3d786a9b15e012b3aa725dca5352fc77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCPatchDataId</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a2d5e44cfe1425628c333a42c1f06735d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCConstant</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a45e5aa959662ecc2af17b598be1f6bed</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::RobinBcCoefStrategy</name>
    <filename>classSAMRAI_1_1solv_1_1RobinBcCoefStrategy.html</filename>
    <member kind="function">
      <type></type>
      <name>RobinBcCoefStrategy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1RobinBcCoefStrategy.html</anchorfile>
      <anchor>a6ce6120bcc74eff6a7fc4f813ebe2868</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RobinBcCoefStrategy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1RobinBcCoefStrategy.html</anchorfile>
      <anchor>a7badcb58e0ae2300995d634ceee78261</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setBcCoefs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1RobinBcCoefStrategy.html</anchorfile>
      <anchor>adf2a5a6e621f5f3fa0ac4817d6504e58</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::ArrayData&lt; double &gt; &gt; &amp;acoef_data, const boost::shared_ptr&lt; pdat::ArrayData&lt; double &gt; &gt; &amp;bcoef_data, const boost::shared_ptr&lt; pdat::ArrayData&lt; double &gt; &gt; &amp;gcoef_data, const boost::shared_ptr&lt; hier::Variable &gt; &amp;variable, const hier::Patch &amp;patch, const hier::BoundaryBox &amp;bdry_box, const double fill_time=0.0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual hier::IntVector</type>
      <name>numberOfExtensionsFillable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1RobinBcCoefStrategy.html</anchorfile>
      <anchor>a863faff36d37984903b4661ba49dc848</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::SAMRAIVectorReal</name>
    <filename>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>SAMRAIVectorReal</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a948fab3dbac7d0f0035829c45c7bd1cd</anchor>
      <arglist>(const std::string &amp;name, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SAMRAIVectorReal</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a581070ab4220ad5b2fbc3aa75f1e3eb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a4be703d182bd7fcc3e0f51a927322722</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputStream</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a8e51ed8352f8e2bc18a893e3e5d464b9</anchor>
      <arglist>(std::ostream &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>getOutputStream</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a9977b38622216d183c9db80ff9822a89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a671291b63ea703578b795083ba6bb8fd</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a93680dc20474c0732f63538b7a2b7c14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::PatchHierarchy &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a3f9a08f47ef24d786a32e521452da9ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoarsestLevelNumber</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>af4b3b73a67a1095bcde945e7f5b77936</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFinestLevelNumber</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>ad07315a091a9c33e692c289649abefe0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfComponents</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>aa51ff0c70822b11f1986b97558d68b33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::PatchData &gt;</type>
      <name>getComponentPatchData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>aef9e3db5f110db3ae892aec7250d374b</anchor>
      <arglist>(const int comp_id, const hier::Patch &amp;patch) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::PatchData &gt;</type>
      <name>getComponentPatchData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a5537f677c4764c7a2bfc53419398b14f</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Variable &gt; &amp;var, const hier::Patch &amp;patch) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::Variable &gt;</type>
      <name>getComponentVariable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>aba6ad44e1f9ca56b642a72673e4e8090</anchor>
      <arglist>(const int component) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getComponentDescriptorIndex</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>aedbbedcfba8bcca7ac456f7a6fa38b38</anchor>
      <arglist>(const int component) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getControlVolumeIndex</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>aa791818048ee13f7c156c9250340ec58</anchor>
      <arglist>(const int component) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt;</type>
      <name>cloneVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a25a88f92e5088abfd340741c699f71e9</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeVectorComponents</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>ab77193fdf529f2e4fd367b562ce171ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addComponent</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a61dc105aa13f6118d3c7890099329a96</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::Variable &gt; &amp;var, const int comp_data_id, const int control_vol_id=-1, const boost::shared_ptr&lt; math::HierarchyDataOpsReal&lt; TYPE &gt; &gt; &amp;vop=boost::shared_ptr&lt; math::HierarchyDataOpsReal&lt; TYPE &gt; &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateVectorData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a40d5da5c80161dd33e699a1ad8fe1666</anchor>
      <arglist>(const double timestamp=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocateVectorData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>ab7eb91445678395d0d1cd09d4c234af4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a5d2a65e315281cd26c1017579c5b40f5</anchor>
      <arglist>(std::ostream &amp;s=tbox::plog, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a6d12617e21f053e6c00cbb302f94a5a5</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;src_vec, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapVectors</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>abb8b3d96cad3d31c64c0837175c38800</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a53713e997f15865ad62f59c4eee48ac9</anchor>
      <arglist>(const TYPE &amp;alpha, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>adfa527030ec59ff32daf1bb841c5b4eb</anchor>
      <arglist>(const TYPE &amp;alpha, const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;x, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a3b19117454bb807e952be68b40a2cd34</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;x, const TYPE &amp;alpha, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a90b4a3fe6ff354ca0a1cedbe54bd7356</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;x, const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;y, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a6d25272a3ba500f9c94a5fadaeea2a84</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;x, const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;y, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>aedf8d979f8659ca6e1f9197a2603d058</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;x, const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;y, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>ab0d3493281aeef979354435f893d3fbb</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;x, const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;y, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>abd912c5f708387d842e8bb08fbaef9cb</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;x, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a58877a1b777af428f4cedffb04934e68</anchor>
      <arglist>(const TYPE &amp;alpha, const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;x, const TYPE &amp;beta, const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;y, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a0ff8c68bbb80684ed0206794699118ac</anchor>
      <arglist>(const TYPE &amp;alpha, const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;x, const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;y, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a20855fc232b8820b3294f4ce946be6bb</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;x, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a672582d0e6d1a3d6063e33bc5dfd97d9</anchor>
      <arglist>(const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>afe7fe73730c8eb47bddd07f6939ec7a9</anchor>
      <arglist>(const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a0fbd684b86ff07667e52fbcc8705ff88</anchor>
      <arglist>(const TYPE &amp;width, const TYPE &amp;low, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a800b72b8b29d97562248bf67ce3840d8</anchor>
      <arglist>(bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a202d7dbedb67dca5991b04bdb626e799</anchor>
      <arglist>(bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>af92a17cca5c61291a14286b4c6961d01</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;wgt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a0e926ab1c66e05602ae6fffa60767ad0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a146e8dca22a1b79253abc7cdf19c8eae</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;wgt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a2dd1570845d92cd2a5a89b308416a60f</anchor>
      <arglist>(bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a478983b5fd4987fc70ef840d0feea2a3</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;x, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a9a20b19da24c1ca5885f4c551e668579</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>acd78842ed9238c70f578b45bfe79a9f4</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;x, const TYPE &amp;alpha)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>ab0cd1b991cc38bb53267d6a6208c2f6d</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a07ee22f7ec8f4aa6af5ba818fb7489b1</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; TYPE &gt; &gt; &amp;denom) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::SimpleCellRobinBcCoefs</name>
    <filename>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</filename>
    <base>SAMRAI::solv::RobinBcCoefStrategy</base>
    <member kind="function">
      <type></type>
      <name>SimpleCellRobinBcCoefs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>ab9bbf9220bb5fd73cfdd4b8691d5a4d0</anchor>
      <arglist>(const tbox::Dimension &amp;dim, const std::string &amp;object_name=std::string())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleCellRobinBcCoefs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>af6691de95c90cfd47cff3065a6b0631d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHierarchy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>ab036482d45f88cb78d5e7561234b49a2</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const int ln_min=-1, const int ln_max=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaries</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>a44ecbac571459d7a1c8f2f2252c2bfd1</anchor>
      <arglist>(const std::string &amp;boundary_type, const int fluxes=-1, const int flags=-1, int *bdry_types=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cacheDirichletData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>af3060374dce83a05c929d8773887269d</anchor>
      <arglist>(int dirichlet_data_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreDirichletData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>a5a99d2515f0fc3cd0eff6ea7f1994ead</anchor>
      <arglist>(int dirichlet_data_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDiffusionCoefId</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>abc9747979b0fd9f81ab4d83b20f3ca13</anchor>
      <arglist>(int diffusion_coef_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDiffusionCoefConstant</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>a9a8f6fc3a3b57ce70b91d2040a84694f</anchor>
      <arglist>(double diffusion_coef_value)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>a81c97e8025b2f6d2fe50fa1d92c67109</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBcCoefs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>a8f5c3a60045f50ae4d169bcb2b8a1dac</anchor>
      <arglist>(const boost::shared_ptr&lt; pdat::ArrayData&lt; double &gt; &gt; &amp;acoef_data, const boost::shared_ptr&lt; pdat::ArrayData&lt; double &gt; &gt; &amp;bcoef_data, const boost::shared_ptr&lt; pdat::ArrayData&lt; double &gt; &gt; &amp;gcoef_data, const boost::shared_ptr&lt; hier::Variable &gt; &amp;variable, const hier::Patch &amp;patch, const hier::BoundaryBox &amp;bdry_box, double fill_time=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector</type>
      <name>numberOfExtensionsFillable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>a22518faac3838ee0aa7c70adad45f0a3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::SNES_SAMRAIContext</name>
    <filename>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</filename>
    <base>SAMRAI::solv::NonlinearSolverStrategy</base>
    <base>SAMRAI::tbox::Serializable</base>
    <member kind="function">
      <type></type>
      <name>SNES_SAMRAIContext</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>aea8b98a17497202e3ff25563ebe562f8</anchor>
      <arglist>(const std::string &amp;object_name, SNESAbstractFunctions *my_functions, const boost::shared_ptr&lt; tbox::Database &gt; &amp;input_db=boost::shared_ptr&lt; tbox::Database &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SNES_SAMRAIContext</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>ad784ae7a775f23bbd229479bf45a901c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SNES</type>
      <name>getSNESSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a8c049b4b2ca02c9ae8d6538d4d25bf98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SNESAbstractFunctions *</type>
      <name>getSNESFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>aed1e1fcdb66a35274ea2477261cb8b1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KSP</type>
      <name>getKrylovSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>ac334b80dfaf417bdce16a21be01cca30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Mat</type>
      <name>getJacobianMatrix</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a7499af27c48da55cc01d668279931483</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAbsoluteTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>ae94a16d61f62b70662b2df004e0d01d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAbsoluteTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a3c7f012de51e6d34f71bd22bb4373053</anchor>
      <arglist>(double abs_tol)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRelativeTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>ae966775ffb01cd7e914f4ff5b962e64f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRelativeTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a6f0841cca7aff0dd3fe518d54e405b31</anchor>
      <arglist>(double rel_tol)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStepTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a5d5450e3021b14a4bb0ba5fa2b89ff71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStepTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>ad866eb0a047c813939e0bb5e34e0b876</anchor>
      <arglist>(double step_tol)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxNonlinearIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a8a3f31d1500a4139c7a431431426a669</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNonlinearIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a89fb7173b4f1a344ee6fdb28f29a6078</anchor>
      <arglist>(int max_nli)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxFunctionEvaluations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a41985c2fd05ff925677e258d5dd5ab2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxFunctionEvaluations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a5e0db720c2d05f33569d6f5b83a3171a</anchor>
      <arglist>(int max_feval)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getForcingTermStrategy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a82428967a5bb52b9936df7d445daa842</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForcingTermStrategy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a456dbc7984c2aee1af0b33ccf3999a82</anchor>
      <arglist>(std::string &amp;strategy)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getConstantForcingTerm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>abc85964ebdc1541ba99ae2fbb1333326</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstantForcingTerm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a4702d152f0d224514763056259f10016</anchor>
      <arglist>(double fixed_eta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getInitialForcingTerm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a39b4ca99b5fbf6248d2e56b901695ff0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialForcingTerm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a015103306dd3f22e9589da58b66dd63f</anchor>
      <arglist>(double initial_eta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumForcingTerm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a835121f614e85251c131e960d66b96c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumForcingTerm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>aed62ea8e08640fd1caee8ff0b3ec6cb8</anchor>
      <arglist>(double max_eta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEWChoice2Exponent</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a05dbdfa235ef8829103f6c4d8ad1bd36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEWChoice2Exponent</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>aa02a464a99b2a234af1c7a8e21fb1fa8</anchor>
      <arglist>(double alpha)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEWChoice2SafeguardExponent</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>aff072c350ecd376cf66d8724ada23cd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEWChoice2SafeguardExponent</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>aaa702668a1d4a1020e32877fdcea2224</anchor>
      <arglist>(double beta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEWChoice2ScaleFactor</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>af810e159514bcb27804df3d8deedcf43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEWChoice2ScaleFactor</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a085ad8b4090d4dd8c23acef1b8e947b6</anchor>
      <arglist>(double gamma)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEWSafeguardThreshold</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>ae5d7a2e18312a0dcc0a454b67ddec9f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEWSafeguardThreshold</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>ae7072e224adcab19fe22e6579875f491</anchor>
      <arglist>(double threshold)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getLinearSolverType</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a5057aed2b3a51469b7dbd043ccee55f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearSolverType</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a04eedc9cc99810ede26cca9610467797</anchor>
      <arglist>(std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUsesPreconditioner</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>afaf370e6382f01ea158278b6f47de87d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUsesPreconditioner</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>ac1a1c9f71a280224529eee007fc26018</anchor>
      <arglist>(bool uses_preconditioner)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLinearSolverAbsoluteTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>ad4d7af73da278178cd223a30efa0637b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearSolverAbsoluteTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a370b7e1611c785ace184726ba6cb4929</anchor>
      <arglist>(double abs_tol)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLinearSolverDivergenceTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a9ad6f27a99bfe2b7a2842bf7062d43d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearSolverDivergenceTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a0ba2aa0a2d0f3af49c8d6cd6ff210dd2</anchor>
      <arglist>(double div_tol)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaximumLinearIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a35d18330b7bbf88bbecbfd4ba8f11c2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumLinearIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a36ad81d2e663aca175008e1caf16807c</anchor>
      <arglist>(int max_li)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaximumGMRESKrylovDimension</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a83ce98b54ee8c7d063ad3668a36718af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumGMRESKrylovDimension</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a25220d486626637ba12e493a4706db59</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getGMRESOrthogonalizationMethod</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a79a848c8943874b495d395ce7b0b8703</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGMRESOrthogonalizationMethod</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a31be21049f795ce5ef0fefb16a0ecfd7</anchor>
      <arglist>(std::string &amp;method)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUsesExplicitJacobian</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a563510787c7e3717d71be4f8fe21cddf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUsesExplicitJacobian</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>aa631cd60869d18d464a6780e6ed8cb14</anchor>
      <arglist>(bool use_jac)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDifferencingParameterMethod</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a0b64a9e646b084f3b5ef1db49cac5fe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDifferencingParameterMethod</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>ad84fa4d32bb83bf17e498a8cd88a42fa</anchor>
      <arglist>(std::string &amp;method)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFunctionEvaluationError</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a63bfe854e2da0751e436b52255357e72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunctionEvaluationError</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>ab03d4b7bf6319b6b57c1c8169c4dccbb</anchor>
      <arglist>(double evaluation_error)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a91c1901b549c80dfc176ad9fa7827bf4</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; double &gt; &gt; &amp;solution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a9f3a0180667d14960a42b08cae694042</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solve</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>ab2afe5bf3d3cc5c6746c27a76dace820</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfNonlinearIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>abbd1a382f0c5191c5b330410b7ebabe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNumberOfLinearIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>ac8c9ddd3040adab2b698b14d1773d14b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportCompletionCode</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>afbbb99801680fc15ec2caf3719d583d9</anchor>
      <arglist>(std::ostream &amp;os=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a75530e3e4258fe6d3481784a8ddc7b7a</anchor>
      <arglist>(const boost::shared_ptr&lt; tbox::Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a8fba5efea64ecacccdbdd55eacba227f</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a7042abc757a53c760cc5e1e5c148d6da</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::SNESAbstractFunctions</name>
    <filename>classSAMRAI_1_1solv_1_1SNESAbstractFunctions.html</filename>
    <member kind="function">
      <type></type>
      <name>SNESAbstractFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNESAbstractFunctions.html</anchorfile>
      <anchor>a60c310b1635c105f1a73424687056586</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SNESAbstractFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNESAbstractFunctions.html</anchorfile>
      <anchor>a19de3fd8e471a4d263d461255a16cea2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>evaluateNonlinearFunction</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNESAbstractFunctions.html</anchorfile>
      <anchor>a63e3ac44b1bedb5c4f8d4bfd2269bb6e</anchor>
      <arglist>(Vec xcur, Vec fcur)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>evaluateJacobian</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNESAbstractFunctions.html</anchorfile>
      <anchor>a9d5fd73cdbe6f0229ca46e0f7e43aad8</anchor>
      <arglist>(Vec x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>jacobianTimesVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNESAbstractFunctions.html</anchorfile>
      <anchor>a196fe919ca77d555b32f28d03d5d6ffd</anchor>
      <arglist>(Vec x, Vec y)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setupPreconditioner</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNESAbstractFunctions.html</anchorfile>
      <anchor>ac9321d3c23a63a64ff499f5a6b0870b2</anchor>
      <arglist>(Vec xcur)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>applyPreconditioner</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNESAbstractFunctions.html</anchorfile>
      <anchor>a618f15d8a7a74909b7b2f832d28afbd7</anchor>
      <arglist>(Vec r, Vec z)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::Sundials_SAMRAIVector</name>
    <filename>classSAMRAI_1_1solv_1_1Sundials__SAMRAIVector.html</filename>
    <base>SAMRAI::solv::SundialsAbstractVector</base>
    <member kind="function">
      <type>void</type>
      <name>printVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1Sundials__SAMRAIVector.html</anchorfile>
      <anchor>a77b6eeafb2ab02426fd45427372f69a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SundialsAbstractVector *</type>
      <name>createSundialsVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1Sundials__SAMRAIVector.html</anchorfile>
      <anchor>af71cee482e125a4f069bccc4d7fc76ae</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; double &gt; &gt; &amp;samrai_vec)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroySundialsVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1Sundials__SAMRAIVector.html</anchorfile>
      <anchor>a60592682c0a0072f2c7bf06dcfa50d50</anchor>
      <arglist>(SundialsAbstractVector *sundials_vec)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static boost::shared_ptr&lt; SAMRAIVectorReal&lt; double &gt; &gt;</type>
      <name>getSAMRAIVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1Sundials__SAMRAIVector.html</anchorfile>
      <anchor>af7a626a73fd526b29a50c88aabfa1db6</anchor>
      <arglist>(SundialsAbstractVector *sundials_vec)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static boost::shared_ptr&lt; SAMRAIVectorReal&lt; double &gt; &gt;</type>
      <name>getSAMRAIVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1Sundials__SAMRAIVector.html</anchorfile>
      <anchor>a0ab336d2c31dcc971db0c067616b2e17</anchor>
      <arglist>(N_Vector sundials_vec)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Sundials_SAMRAIVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1Sundials__SAMRAIVector.html</anchorfile>
      <anchor>a3cbd08b0b0bdc8d5a3ada19835e2c59d</anchor>
      <arglist>(const boost::shared_ptr&lt; SAMRAIVectorReal&lt; double &gt; &gt; &amp;samrai_vector)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Sundials_SAMRAIVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1Sundials__SAMRAIVector.html</anchorfile>
      <anchor>aa56646ea969d27fe8e2c327f6047b48f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::SundialsAbstractVector</name>
    <filename>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</filename>
    <member kind="function">
      <type></type>
      <name>SundialsAbstractVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>a63cd330f5294891de63db572c66b1ad0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SundialsAbstractVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>a0b962016911cd2a080d378830a84fecc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SundialsAbstractVector *</type>
      <name>makeNewVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>a0b1db8a004744aa7ca284277a3a35018</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>freeVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>aa836befff447ecf06146568eca06ac9c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>ab194d580a802e04b46f157508a1a497b</anchor>
      <arglist>(const double c)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scaleVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>a000b1cf607fb2e92b80d88cc02a80d4a</anchor>
      <arglist>(const SundialsAbstractVector *x, const double c)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setLinearSum</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>a09c0e9c72a4e942b63cf36686c24d432</anchor>
      <arglist>(const double a, const SundialsAbstractVector *x, const double b, const SundialsAbstractVector *y)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pointwiseMultiply</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>a1006024938c43e384e227abf7c60c0a1</anchor>
      <arglist>(const SundialsAbstractVector *x, const SundialsAbstractVector *y)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>af01eda5525893e03be9104a9b5a076ea</anchor>
      <arglist>(const SundialsAbstractVector *x, const SundialsAbstractVector *y)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setAbs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>a1a266f451b04c1b9d23432bdbdb443e4</anchor>
      <arglist>(const SundialsAbstractVector *x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pointwiseReciprocal</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>af11658a117d0ea81c057976d9ddcce12</anchor>
      <arglist>(const SundialsAbstractVector *x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>a4dd966a2984aec30904ffad698b590ca</anchor>
      <arglist>(const SundialsAbstractVector *x, const double b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>dotWith</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>a39d58c1f8d6f28d8ef7038eb2476cb4c</anchor>
      <arglist>(const SundialsAbstractVector *x) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>a64105b344d97e1121ee957cf8daca507</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>a6b18bece1cdecc8ada4fc5d7317450ae</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>a5cdc18e48023497b28d2dab588786791</anchor>
      <arglist>(const SundialsAbstractVector *x) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>a43d0383c7ad21a17caa6f4fe2b193635</anchor>
      <arglist>(const SundialsAbstractVector *x) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>vecMin</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>a376ddcf7acc687756a7065de639e3034</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>constrProdPos</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>aa0da10f9835c66b4f32a1741bded3f99</anchor>
      <arglist>(const SundialsAbstractVector *x) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>a9fc2e8d1cee9e8df4caf7c68ecccd308</anchor>
      <arglist>(const SundialsAbstractVector *x, const double c)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>aece7b90d7d51722ff15ab0146714f5b4</anchor>
      <arglist>(const SundialsAbstractVector *x)=0</arglist>
    </member>
    <member kind="function">
      <type>N_Vector</type>
      <name>getNVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>ae36568bbc9ac7dade31cbf1b78d4053a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SundialsAbstractVector.html</anchorfile>
      <anchor>ad91e5bb178c42fed3a90733298af0d9d</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::tbox</name>
    <filename>namespaceSAMRAI_1_1tbox.html</filename>
    <class kind="class">SAMRAI::tbox::Array</class>
    <class kind="class">SAMRAI::tbox::AsyncCommGroup</class>
    <class kind="class">SAMRAI::tbox::AsyncCommPeer</class>
    <class kind="class">SAMRAI::tbox::AsyncCommStage</class>
    <class kind="class">SAMRAI::tbox::BalancedDepthFirstTree</class>
    <class kind="class">SAMRAI::tbox::BreadthFirstRankTree</class>
    <class kind="class">SAMRAI::tbox::CenteredRankTree</class>
    <class kind="struct">SAMRAI::tbox::Clock</class>
    <class kind="class">SAMRAI::tbox::CommGraphWriter</class>
    <class kind="class">SAMRAI::tbox::Database</class>
    <class kind="struct">SAMRAI::tbox::DatabaseBox_POD</class>
    <class kind="class">SAMRAI::tbox::DatabaseBox</class>
    <class kind="class">SAMRAI::tbox::DatabaseFactory</class>
    <class kind="class">SAMRAI::tbox::Dimension</class>
    <class kind="class">SAMRAI::tbox::HDFDatabase</class>
    <class kind="class">SAMRAI::tbox::HDFDatabaseFactory</class>
    <class kind="struct">SAMRAI::tbox::IEEE</class>
    <class kind="class">SAMRAI::tbox::InputManager</class>
    <class kind="class">SAMRAI::tbox::AbortAppender</class>
    <class kind="class">SAMRAI::tbox::WarningAppender</class>
    <class kind="class">SAMRAI::tbox::DebugAppender</class>
    <class kind="class">SAMRAI::tbox::Logger</class>
    <class kind="class">SAMRAI::tbox::MathUtilities</class>
    <class kind="class">SAMRAI::tbox::MemoryDatabase</class>
    <class kind="class">SAMRAI::tbox::MemoryDatabaseFactory</class>
    <class kind="struct">SAMRAI::tbox::MemoryUtilities</class>
    <class kind="class">SAMRAI::tbox::MessageStream</class>
    <class kind="class">SAMRAI::tbox::NullDatabase</class>
    <class kind="class">SAMRAI::tbox::ParallelBuffer</class>
    <class kind="class">SAMRAI::tbox::Parser</class>
    <class kind="struct">SAMRAI::tbox::PIO</class>
    <class kind="class">SAMRAI::tbox::RankGroup</class>
    <class kind="class">SAMRAI::tbox::RankTreeStrategy</class>
    <class kind="class">SAMRAI::tbox::ReferenceCounter</class>
    <class kind="class">SAMRAI::tbox::RestartManager</class>
    <class kind="class">SAMRAI::tbox::SAMRAI_MPI</class>
    <class kind="class">SAMRAI::tbox::SAMRAIManager</class>
    <class kind="class">SAMRAI::tbox::Schedule</class>
    <class kind="class">SAMRAI::tbox::Serializable</class>
    <class kind="class">SAMRAI::tbox::SiloDatabase</class>
    <class kind="class">SAMRAI::tbox::SiloDatabaseFactory</class>
    <class kind="class">SAMRAI::tbox::StartupShutdownManager</class>
    <class kind="class">SAMRAI::tbox::Statistic</class>
    <class kind="class">SAMRAI::tbox::Statistician</class>
    <class kind="class">SAMRAI::tbox::StatisticRestartDatabase</class>
    <class kind="class">SAMRAI::tbox::StatTransaction</class>
    <class kind="class">SAMRAI::tbox::Timer</class>
    <class kind="class">SAMRAI::tbox::TimerManager</class>
    <class kind="class">SAMRAI::tbox::Tracer</class>
    <class kind="class">SAMRAI::tbox::Transaction</class>
    <class kind="struct">SAMRAI::tbox::Utilities</class>
    <member kind="typedef">
      <type>MemoryDatabase</type>
      <name>InputDatabase</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a33358002f423537245e073cd0790dcb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; boost::shared_ptr&lt; Transaction &gt; &gt;::iterator</type>
      <name>Iterator</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>adc7fd96d97edd50f6c284173b8c49e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; boost::shared_ptr&lt; Transaction &gt; &gt;::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a395c8ecc7b62e325376dc017525d837a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>afb643ccf275c7f30adceb8eb78b4159a</anchor>
      <arglist>(std::ostream &amp;s, const Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>round_internal</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a8fb80f5f7c49e400c31d0a58f00414fe</anchor>
      <arglist>(TYPE x)</arglist>
    </member>
    <member kind="function">
      <type>template float</type>
      <name>round_internal&lt; float &gt;</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a415e3675aa1cdf8e34bb5d073a78057c</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>template double</type>
      <name>round_internal&lt; double &gt;</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a3b11f55b23390dd0f75956ad05a1e782</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>badnew</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a67dea29da08b2f13fceb709a2bc19532</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ParallelBuffer</type>
      <name>pout_buffer</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>aaafff0bbde1815d1e4661864aa54c85a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ParallelBuffer</type>
      <name>perr_buffer</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a5ff8d206d2e85ac4f715aa01967fcf42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ParallelBuffer</type>
      <name>plog_buffer</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>ade90ffa35166163af6107adacde08691</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::ostream</type>
      <name>pout</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a1e98e73dc869d986f7ffe5b295075979</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::ostream</type>
      <name>perr</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>ad72fd66574b63c87061563d2c66b5475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::ostream</type>
      <name>plog</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>ab84041705493761fb17a8127e3a2dca2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Array</name>
    <filename>classSAMRAI_1_1tbox_1_1Array.html</filename>
    <templarg>TYPE</templarg>
    <class kind="class">SAMRAI::tbox::Array::DoNotInitialize</class>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a062095c14a206b86a0ed61ff3fe84cd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>ae08ffcf3cedc79277718470f0d4204c9</anchor>
      <arglist>(const int n, const TYPE &amp;default_value=TYPE())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a4c0ef0c957f128c4800cba86d7d452e7</anchor>
      <arglist>(const int n, const typename Array::DoNotInitialize &amp;do_not_initialize_flag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>ab980c120febb82446dec1ace00973ebf</anchor>
      <arglist>(const Array &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Array</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a31b7636cda603f8d3ffb6fbc2b0f868b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a1e4fd5d2691891d4434ddc110cc6c0e5</anchor>
      <arglist>(const Array &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a66d476eb90cf3f373698f1912b7b11f5</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>aded6f8ff9ea33e6460301d9bc338c0f3</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNull</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>aadfc35e6f12bd744104fbcbcdb221068</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a1f1b7b89431eb66c4707fa7e9769ca64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNull</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a4b30ed64ff72ef0acb53845f05732e96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a10fbc4d3555303e32956abe7db44bffe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a209cc91c58b0f773ee138ec399873219</anchor>
      <arglist>(const int i=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a6fa79cf3778efbf9c2e93ac08c91275b</anchor>
      <arglist>(const int i=0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a00963487c217380fc3f214f5e4166352</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a188e5f61bf6f33f8937c50509d6c938e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a6500b59dd06b70fc01efe4815333c572</anchor>
      <arglist>(const int n, const TYPE &amp;default_value=TYPE())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>ad53cd39c711784690f4f3857501f1b1c</anchor>
      <arglist>(const TYPE &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>back</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>ac11de702bf11a1b627eb789bfd87131a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a71db2396462a47f02b862f9ca89628df</anchor>
      <arglist>(const int position)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a5ec4c85ebadef25920d2d6717dd8c0f1</anchor>
      <arglist>(const int n, const bool &amp;default_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a1663d67af42972d77a998165e29edca5</anchor>
      <arglist>(const int n, const char &amp;default_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a31ac14d5bc2bdb1e3d44b5bba023b60d</anchor>
      <arglist>(const int n, const int &amp;default_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a7ff219b495f51c0d1b62d1c194981e62</anchor>
      <arglist>(const int n, const float &amp;default_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a8d4ef0ba2ffa6a399a74e42d61da21ce</anchor>
      <arglist>(const int n, const double &amp;default_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteObjects</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>ac3dde41fb8024557b30948cad7f1f2f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteObjects</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a470f00c8c54dce4e8d8b0fd53fd68a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteObjects</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a956e11771e623171e2093320910780bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteObjects</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a4ad502aadcfa3b2bfa9cb577e4ce1a95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteObjects</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>acb6795ae4c674036dd77626fa8098a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a5ec4c85ebadef25920d2d6717dd8c0f1</anchor>
      <arglist>(const int n, const bool &amp;default_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a1663d67af42972d77a998165e29edca5</anchor>
      <arglist>(const int n, const char &amp;default_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a31ac14d5bc2bdb1e3d44b5bba023b60d</anchor>
      <arglist>(const int n, const int &amp;default_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a7ff219b495f51c0d1b62d1c194981e62</anchor>
      <arglist>(const int n, const float &amp;default_value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a8d4ef0ba2ffa6a399a74e42d61da21ce</anchor>
      <arglist>(const int n, const double &amp;default_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteObjects</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>ac3dde41fb8024557b30948cad7f1f2f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteObjects</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a470f00c8c54dce4e8d8b0fd53fd68a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteObjects</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a956e11771e623171e2093320910780bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteObjects</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a4ad502aadcfa3b2bfa9cb577e4ce1a95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteObjects</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>acb6795ae4c674036dd77626fa8098a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Array&lt; TYPE &gt;::DoNotInitialize</type>
      <name>UNINITIALIZED</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a59d7981e925f953d038e9de9dd392ae7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Array::DoNotInitialize</name>
    <filename>classSAMRAI_1_1tbox_1_1Array_1_1DoNotInitialize.html</filename>
    <member kind="function">
      <type></type>
      <name>DoNotInitialize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array_1_1DoNotInitialize.html</anchorfile>
      <anchor>a061bf5fed759377d69570bee8c916ef8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::AsyncCommGroup</name>
    <filename>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</filename>
    <base>SAMRAI::tbox::AsyncCommStage::Member</base>
    <member kind="function">
      <type></type>
      <name>AsyncCommGroup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a610c526c5c212b9ba4d5df712b52a239</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AsyncCommGroup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a6d99f4f383c3c4d79b0e6a933e19a48f</anchor>
      <arglist>(const size_t nchild, AsyncCommStage *stage, AsyncCommStage::Handler *handler=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AsyncCommGroup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a74b163a0fb8e5194a7622ed825c67925</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a530c097142fa3b07df1b2ec228644d90</anchor>
      <arglist>(const int nchild, AsyncCommStage *stage, AsyncCommStage::Handler *handler=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMPITag</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>af2aa4253bd569d04b31bb5b35a39142e</anchor>
      <arglist>(const int mpi_tag)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMPITag</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>ad8b5f632b4069b0a430526a91c795193</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGroupSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a45e5077b79079c08b6833bd1bddc78fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TaskOp</type>
      <name>getNextTaskOp</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>aaef1113ae55e6000c33197401fa7db62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BaseOp</type>
      <name>getBaseOp</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>af933f3b999fd68a44db1fe0e7e3c1117</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParentRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a61b12b80ec4a33e37608629ecc6c4fb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseMPICollectiveForFullGroups</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>aef41816db86e9504615c5b0f9582cfaa</anchor>
      <arglist>(bool use_mpi_collective=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseBlockingSendToParent</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>ac909116403ea9b4e86a194669224dbf7</anchor>
      <arglist>(const bool flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseBlockingSendToChildren</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>af090fddfaa48c7eb91a860a9c4cc2c08</anchor>
      <arglist>(const bool flag)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfChildren</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a9ee3d6de2d490eb50fe9db359d5f8341</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logCurrentState</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>ad2596b98ef718fecd5f8891f6a4c9201</anchor>
      <arglist>(std::ostream &amp;co) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGroupAndRootIndex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>af359b65deb16aa633a5f8a9e65d69ea5</anchor>
      <arglist>(const SAMRAI_MPI &amp;mpi, const int *group_ranks, const int group_size, const int root_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGroupAndRootRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a3b959dbd42462bb2fe52c458626a2ad9</anchor>
      <arglist>(const SAMRAI_MPI &amp;mpi, const int *group_ranks, const int group_size, const int root_rank)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beginBcast</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a520f3cec0caea74a731b9102276eb83c</anchor>
      <arglist>(int *buffer, int size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkBcast</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a69fd7c96bf69ca79b76a0ebf8c133fd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beginGather</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a2179371efe6288654029b5796ac10fa2</anchor>
      <arglist>(int *buffer, int size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkGather</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a14b1c40af08d5be853ef33ccdde46489</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beginSumReduce</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a8c793a5e0abe994ceb89d186dd21ff6c</anchor>
      <arglist>(int *buffer, int size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkSumReduce</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a724bbf61b605419c2ac4d43748cdabbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>proceedToNextWait</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a85e2402d111fc0e5a15c2a23f3d63f96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDone</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a1bcf15f48abd8abdc052496fb76a1c25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>completeCurrentOperation</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>aeeb67c2ae16d7518bc700d4d9b0e20c5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::AsyncCommPeer</name>
    <filename>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</filename>
    <templarg>TYPE</templarg>
    <base>SAMRAI::tbox::AsyncCommStage::Member</base>
    <member kind="function">
      <type></type>
      <name>AsyncCommPeer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a2e0e48c61c9524bcf4598d05ae31df16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AsyncCommPeer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a15c2f56797dab20fb774093842272d4f</anchor>
      <arglist>(AsyncCommStage *stage, AsyncCommStage::Handler *handler=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AsyncCommPeer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a83b249ee35fbf57c55d57a81ba67bd45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>afcd7e50313fd197dbe9ec1c196d3efff</anchor>
      <arglist>(AsyncCommStage *stage, AsyncCommStage::Handler *handler=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMPITag</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>ae40141c7ac5d0ab3234dfafc420303e9</anchor>
      <arglist>(const int primary_tag, const int secondary_tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMPI</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a84252d35f93566a843b56ef522b1cb8b</anchor>
      <arglist>(const SAMRAI_MPI &amp;mpi)</arglist>
    </member>
    <member kind="function">
      <type>const SAMRAI_MPI &amp;</type>
      <name>getMPI</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a0c418622ec0df435b52f2083614403e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TaskOp</type>
      <name>getNextTaskOp</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a0677e181d31cd7a67d44ab914b570fab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BaseOp</type>
      <name>getBaseOp</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a4212ca021d804759d0f3f59a320b8f4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPrimaryTag</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a44e56aba949601b5999e4f9731330995</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondaryTag</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a67c964d164ea6b5760d5e5c0df7d73c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logCurrentState</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a8f2771aa544020f7af0286a4fb856618</anchor>
      <arglist>(std::ostream &amp;co) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPeerRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a4f7069eaceb0865e3818d18c6629639f</anchor>
      <arglist>(int peer_rank)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPeerRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>ae1f610d20943170965bbd0dcbce33c3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>limitFirstDataLength</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a463bd320ed59067da7b4abd72988188a</anchor>
      <arglist>(size_t max_first_data_len)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beginSend</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>aee0efb0e4628347245556fd97ce202af</anchor>
      <arglist>(const TYPE *buffer, int size, bool automatic_push_to_completion_queue=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkSend</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>acd6de0790d6fa7d7e34099bc741787e6</anchor>
      <arglist>(bool automatic_push_to_completion_queue=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beginRecv</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a06d4124a1c1f9975e1e044ad2093d947</anchor>
      <arglist>(bool automatic_push_to_completion_queue=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkRecv</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a91b717196e69a46144f57aaaafbcf9ff</anchor>
      <arglist>(bool automatic_push_to_completion_queue=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRecvSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a87b79fd93bbcfa40bc19e5bc802d5a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getRecvData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>ab3a5a01c99778d948b30f828d20fdb02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearRecvData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a0d6349489f77cff31efbff83ac00039c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>proceedToNextWait</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a7665d7aba9cd815a6aa18f961ec3e832</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDone</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a1ab7ecd6a416d9506bef86eed1d16e26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>completeCurrentOperation</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>ab3f9bb2963d317a7cf339887234981a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSender</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a108e9d44d53901a6e9499693196d6176</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReceiver</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>abebecd3edcf7229dad383581a0736131</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSendTimer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>aff4f33cd06e0abfed7d658e851e3a829</anchor>
      <arglist>(const boost::shared_ptr&lt; Timer &gt; &amp;send_timer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRecvTimer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a2d766c344829bc811166a7e507a83b68</anchor>
      <arglist>(const boost::shared_ptr&lt; Timer &gt; &amp;recv_timer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWaitTimer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommPeer.html</anchorfile>
      <anchor>a139b1a34ebdf70f1dbef54baf26c7240</anchor>
      <arglist>(const boost::shared_ptr&lt; Timer &gt; &amp;wait_timer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::AsyncCommStage</name>
    <filename>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</filename>
    <class kind="struct">SAMRAI::tbox::AsyncCommStage::Handler</class>
    <class kind="struct">SAMRAI::tbox::AsyncCommStage::Member</class>
    <member kind="function">
      <type></type>
      <name>AsyncCommStage</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>aa884da88737394f38ce4a2a852da197b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AsyncCommStage</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>ad79e8a21a1925cd5ed29fa9ad9a51e1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>advanceAny</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>a09bc07eacf6d52d4684f6814e9816160</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>advanceSome</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>a0a92d78e5dfefa658d6a58552a8f4742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>advanceAll</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>aba30a698655f6982fdbbb7c6b8dadbe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfCompletedMembers</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>aa71811dc3b8cb79480db6540bdd1285d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasCompletedMembers</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>ad077d7728231ccfe4ba3b337760caf3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Member *</type>
      <name>firstCompletedMember</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>ad37091ef83e848d2dd2515b0b7f5cc18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Member *</type>
      <name>getMember</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>a5ad96a231cdbbd9a46a5a2a52ee93cee</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>Member *</type>
      <name>popCompletionQueue</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>abb8d37947f445f7b0d56d6f4ca2931f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearCompletionQueue</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>affa5c4fdb2b9913cb631c3e6d0193ea2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommunicationWaitTimer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>a008646a6c74c9dd857c7417cbcdffa38</anchor>
      <arglist>(const boost::shared_ptr&lt; Timer &gt; &amp;communication_timer)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfMembers</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>a25fbf29115b0374aac157ae8933dbbdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numManagedMembers</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>ab9944c6b2364c1ba4944e6104eb6f28e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPendingRequests</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>a72ad68ee2014c063cf7f4d567d46bcbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfPendingMembers</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>a9bccbb6d56e6afd418677295d83c6942</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfPendingRequests</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>a3de374a3230456c3358ec6c878428963</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>Member</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>a7e310b7cc7c7bc63e0407731103cdde5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::AsyncCommStage::Handler</name>
    <filename>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Handler.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Handler</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Handler.html</anchorfile>
      <anchor>a86f42f6f8b941b05a221e9878f957f1a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::AsyncCommStage::Member</name>
    <filename>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</filename>
    <member kind="function">
      <type></type>
      <name>Member</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</anchorfile>
      <anchor>ab3722a73b9c13c5a863702ccf3eed3f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Member</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</anchorfile>
      <anchor>a329ec84e29f899e66b8517001004414b</anchor>
      <arglist>(const size_t nreq, AsyncCommStage *stage, Handler *handler)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Member</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</anchorfile>
      <anchor>a5a73ca74e4e1dd225b87050163179dde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfRequests</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</anchorfile>
      <anchor>ac549fac8a64d230d5c7d0d5b2b6947c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numberOfPendingRequests</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</anchorfile>
      <anchor>a57244ebc419899404a40968799325eb9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPendingRequests</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</anchorfile>
      <anchor>ae5ff4bfb5ee958425e2e8b35afe45f8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isDone</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</anchorfile>
      <anchor>a377ac960e58fbaa8c5d528c86c2d6100</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>proceedToNextWait</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</anchorfile>
      <anchor>afb9f55fd72f7f9713b0138e8cad7c87e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>completeCurrentOperation</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</anchorfile>
      <anchor>a276cadf660e7cc5f1d302e2ac347bfd1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHandler</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</anchorfile>
      <anchor>a8209b3b5ea97ccc28f2714d720a04bad</anchor>
      <arglist>(Handler *handler)</arglist>
    </member>
    <member kind="function">
      <type>Handler *</type>
      <name>getHandler</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</anchorfile>
      <anchor>a3f2b3dc679b69c323ed61d386863ad6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushToCompletionQueue</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</anchorfile>
      <anchor>ae6c1a0b33b53af30cab0d5ea08d64f2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yankFromCompletionQueue</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</anchorfile>
      <anchor>abb365c714cc5d12ab03a78ec1d05b4cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStage</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</anchorfile>
      <anchor>a38c3f9dfc9c43f649b62b7abc0bc8b44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>attachStage</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</anchorfile>
      <anchor>abeacd8eeb25757ec210d9d491258ead6</anchor>
      <arglist>(const size_t nreq, AsyncCommStage *stage)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>detachStage</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</anchorfile>
      <anchor>ad43f899221c9a80efa3340490afa2bf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SAMRAI_MPI::Request *</type>
      <name>getRequestPointer</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</anchorfile>
      <anchor>a70f5e86c7b42976bd6b4f25fd644ec29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SAMRAI_MPI::Status *</type>
      <name>getStatusPointer</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</anchorfile>
      <anchor>aa20616c1d5cdb8eede63a9a41b6492a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>getNumberOfRequests</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</anchorfile>
      <anchor>a086ab72c8fa0fb0ef34937267b6332f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AsyncCommStage</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1AsyncCommStage_1_1Member.html</anchorfile>
      <anchor>ac7d59c29d44de64279b791d91ec3db91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::BalancedDepthFirstTree</name>
    <filename>classSAMRAI_1_1tbox_1_1BalancedDepthFirstTree.html</filename>
    <base>SAMRAI::tbox::RankTreeStrategy</base>
    <member kind="function">
      <type></type>
      <name>BalancedDepthFirstTree</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BalancedDepthFirstTree.html</anchorfile>
      <anchor>a18a241d9e9d844c8c973ea794e29cce2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BalancedDepthFirstTree</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BalancedDepthFirstTree.html</anchorfile>
      <anchor>aa398d97603abae13886b48867422b437</anchor>
      <arglist>(int first_rank, int last_rank, int rank, bool do_left_leaf_switch=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BalancedDepthFirstTree</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BalancedDepthFirstTree.html</anchorfile>
      <anchor>af8ea62819aa5519ee8b780b1ec82a9f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupTree</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BalancedDepthFirstTree.html</anchorfile>
      <anchor>a6d3b0656e25144ad86ee3b3d86ef0e21</anchor>
      <arglist>(const RankGroup &amp;rank_group, int my_rank)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BalancedDepthFirstTree.html</anchorfile>
      <anchor>a7c436d19d3d02490242c3eb0d49441fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParentRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BalancedDepthFirstTree.html</anchorfile>
      <anchor>ad36616610fdefa7d9de6da504beb33fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getChildRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BalancedDepthFirstTree.html</anchorfile>
      <anchor>ad1edef50775704c987018286d7ca345f</anchor>
      <arglist>(unsigned int child_number) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberOfChildren</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BalancedDepthFirstTree.html</anchorfile>
      <anchor>ab2f9c75bf1c030b84749600fac83ed6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getChildNumber</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BalancedDepthFirstTree.html</anchorfile>
      <anchor>a7013eef107661558db42cfe9dede95e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDegree</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BalancedDepthFirstTree.html</anchorfile>
      <anchor>a11bb23706e7c135d06112f4c267cf5d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getGenerationNumber</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BalancedDepthFirstTree.html</anchorfile>
      <anchor>a58f1f48a85fcb8be8ff828a59209598d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRootRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BalancedDepthFirstTree.html</anchorfile>
      <anchor>afb79c469c89643fd8eb0d25b3db12f06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLeftLeafSwitching</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BalancedDepthFirstTree.html</anchorfile>
      <anchor>ae0e86a80ad661f3250a3f120e90f9328</anchor>
      <arglist>(bool do_left_leaf_switch)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::BreadthFirstRankTree</name>
    <filename>classSAMRAI_1_1tbox_1_1BreadthFirstRankTree.html</filename>
    <base>SAMRAI::tbox::RankTreeStrategy</base>
    <member kind="typedef">
      <type>int</type>
      <name>LocalId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BreadthFirstRankTree.html</anchorfile>
      <anchor>a104db52d142de52db0c08ba66806ed39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BreadthFirstRankTree</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BreadthFirstRankTree.html</anchorfile>
      <anchor>abadfd8186bf8bfa119745ae5f956fd2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BreadthFirstRankTree</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BreadthFirstRankTree.html</anchorfile>
      <anchor>add5bf839b7aee12d5f267400f86338fc</anchor>
      <arglist>(int first_rank, int last_rank, int rank, unsigned int degree=2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BreadthFirstRankTree</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BreadthFirstRankTree.html</anchorfile>
      <anchor>a5c2f44a9301f2c416731b65a2992511e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupTree</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BreadthFirstRankTree.html</anchorfile>
      <anchor>a1bd8ff41966555143d975e326a103338</anchor>
      <arglist>(const RankGroup &amp;rank_group, int my_rank)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BreadthFirstRankTree.html</anchorfile>
      <anchor>a6b47610a01b27a7cfb57cb448761f824</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParentRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BreadthFirstRankTree.html</anchorfile>
      <anchor>ad54852300e8a55c61ba2d0fc452ea098</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getChildRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BreadthFirstRankTree.html</anchorfile>
      <anchor>a197434acbb24de6d7a04e41dfdb2282f</anchor>
      <arglist>(unsigned int child_number) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberOfChildren</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BreadthFirstRankTree.html</anchorfile>
      <anchor>ab578258eaa8f70b25ce5dbfa7793f06d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getChildNumber</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BreadthFirstRankTree.html</anchorfile>
      <anchor>a0fbfc2388fe98ca861b5dc5e734943c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDegree</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BreadthFirstRankTree.html</anchorfile>
      <anchor>a03c259f1738feed823e8f55882c796cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getGenerationNumber</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BreadthFirstRankTree.html</anchorfile>
      <anchor>a14c66b64ce37146edd25ecdae3f13ba0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRootRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BreadthFirstRankTree.html</anchorfile>
      <anchor>af4ccfbd9711dbdf287d01e62e892ae09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTreeDegree</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1BreadthFirstRankTree.html</anchorfile>
      <anchor>abe4a8671aeadb4f7475c9156007386ee</anchor>
      <arglist>(unsigned int tree_degree)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::CenteredRankTree</name>
    <filename>classSAMRAI_1_1tbox_1_1CenteredRankTree.html</filename>
    <base>SAMRAI::tbox::RankTreeStrategy</base>
    <member kind="function">
      <type></type>
      <name>CenteredRankTree</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CenteredRankTree.html</anchorfile>
      <anchor>a4addc736434c8328e65596266ec0bbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CenteredRankTree</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CenteredRankTree.html</anchorfile>
      <anchor>af85c48b35645b6537a7ef75f0c94ee5b</anchor>
      <arglist>(const SAMRAI_MPI &amp;mpi, bool make_first_rank_the_root=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CenteredRankTree</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CenteredRankTree.html</anchorfile>
      <anchor>a132f1070f031fb61774852ee6de7a785</anchor>
      <arglist>(int first_rank, int last_rank, int rank, bool make_first_rank_the_root=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CenteredRankTree</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CenteredRankTree.html</anchorfile>
      <anchor>aaa5123a889c49e18d3c1ad54009d6aaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupTree</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CenteredRankTree.html</anchorfile>
      <anchor>a297e8746738b66514c58a92b5f753400</anchor>
      <arglist>(const RankGroup &amp;rank_group, int my_rank)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CenteredRankTree.html</anchorfile>
      <anchor>afa102b743e422e77ecbd1eb0574ad04d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParentRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CenteredRankTree.html</anchorfile>
      <anchor>aa4cae45330685aa2c1fa985a6d0232d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getChildRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CenteredRankTree.html</anchorfile>
      <anchor>a7ec83848f437245eeea4b10b1ce8b6b1</anchor>
      <arglist>(unsigned int child_number) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNumberOfChildren</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CenteredRankTree.html</anchorfile>
      <anchor>a30d1034c5623edc444747766cf5a945f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getChildNumber</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CenteredRankTree.html</anchorfile>
      <anchor>af8e99204c14c4a119d9cd74c21341546</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDegree</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CenteredRankTree.html</anchorfile>
      <anchor>ad3b9881862738b6ffb5a019e96959472</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getGenerationNumber</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CenteredRankTree.html</anchorfile>
      <anchor>afdd05c8ee9ad078a2728737ce9fbafcc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRootRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CenteredRankTree.html</anchorfile>
      <anchor>a3e0954259e4d39b555611e6083cbda1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeFirstRankTheRoot</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CenteredRankTree.html</anchorfile>
      <anchor>a7c5b6a4f5c4a22bae8fdb4bdf09fe8eb</anchor>
      <arglist>(bool make_first_rank_the_root)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::Clock</name>
    <filename>structSAMRAI_1_1tbox_1_1Clock.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Clock.html</anchorfile>
      <anchor>ae53be1388694dbbf2119106f36ca25e6</anchor>
      <arglist>(clock_t &amp;clock)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Clock.html</anchorfile>
      <anchor>a1549e8f9ea127bb4cd6710b50b257f0e</anchor>
      <arglist>(double &amp;clock)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>timestamp</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Clock.html</anchorfile>
      <anchor>a6c0cef534d0562261215a47a9423eaee</anchor>
      <arglist>(clock_t &amp;user, clock_t &amp;sys, double &amp;wall)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getClockCycle</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Clock.html</anchorfile>
      <anchor>ae637f931caec8e2d1055dc9cb0e98fef</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::CommGraphWriter</name>
    <filename>classSAMRAI_1_1tbox_1_1CommGraphWriter.html</filename>
    <member kind="enumeration">
      <name>EdgeDirection</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CommGraphWriter.html</anchorfile>
      <anchor>a41571766b9c2960ebdb4c99a7356630a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FROM</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CommGraphWriter.html</anchorfile>
      <anchor>a41571766b9c2960ebdb4c99a7356630aa25169c783de8e8340ecc10fa09ef76af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TO</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CommGraphWriter.html</anchorfile>
      <anchor>a41571766b9c2960ebdb4c99a7356630aa6ae3753bd6189b65c06b32b5df28dc9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CommGraphWriter</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CommGraphWriter.html</anchorfile>
      <anchor>a90b565ab0851d8f79b5db63410adf471</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CommGraphWriter</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CommGraphWriter.html</anchorfile>
      <anchor>a82bbf4d0a1e190ef687e6873b1d81d6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWriteFullGraph</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CommGraphWriter.html</anchorfile>
      <anchor>a64f5f012b9feb6b542614c4df55a2c5a</anchor>
      <arglist>(bool write_full_graph)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>addRecord</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CommGraphWriter.html</anchorfile>
      <anchor>a5a1ebc2cd7e2537850b07a9cff432242</anchor>
      <arglist>(const SAMRAI_MPI &amp;mpi, size_t number_of_edge_types, size_t number_of_node_value_types)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumberOfRecords</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CommGraphWriter.html</anchorfile>
      <anchor>ac8a97bbb6c09f0b0b1ad4163161ff766</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEdgeInCurrentRecord</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CommGraphWriter.html</anchorfile>
      <anchor>a1e9dd07034fea59b1e44b78cc5620e27</anchor>
      <arglist>(size_t edge_type_index, const std::string &amp;edge_label, double edge_value, EdgeDirection edge_direction, int other_node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeValueInCurrentRecord</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CommGraphWriter.html</anchorfile>
      <anchor>a4b65f8fbd30abfdd74d06b22c8148b0d</anchor>
      <arglist>(size_t nodevalue_type_index, const std::string &amp;nodevalue_label, double node_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeGraphToTextStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1CommGraphWriter.html</anchorfile>
      <anchor>ac214c961f448360cd170736a45785dab</anchor>
      <arglist>(size_t record_number, std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Database</name>
    <filename>classSAMRAI_1_1tbox_1_1Database.html</filename>
    <member kind="enumeration">
      <name>DataType</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a77ab7a307331e041363ac40d97e14554</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAMRAI_INVALID</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a77ab7a307331e041363ac40d97e14554abc017eba7e30cbd6d9404e8fd20e3c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAMRAI_DATABASE</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a77ab7a307331e041363ac40d97e14554ae5d70e6c4749a264bc93134b83d98972</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAMRAI_BOOL</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a77ab7a307331e041363ac40d97e14554a985ace4f2bc387c77fa265b0441b4a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAMRAI_CHAR</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a77ab7a307331e041363ac40d97e14554a3f9abc0288dcb6e796b5d3b69653a60d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAMRAI_INT</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a77ab7a307331e041363ac40d97e14554a11f0aea64d1b5dcf79bb8e8e2bb9a227</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAMRAI_COMPLEX</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a77ab7a307331e041363ac40d97e14554a42eafbf8e77ceeea69acee8a63aae6ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAMRAI_DOUBLE</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a77ab7a307331e041363ac40d97e14554ae5091807cd7723b61529f3d2241503d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAMRAI_FLOAT</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a77ab7a307331e041363ac40d97e14554a69f42a01e3f8cdc4d282c4d01d11db9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAMRAI_STRING</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a77ab7a307331e041363ac40d97e14554a1a78b9747eda4fe13aa95e87e28c40de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SAMRAI_BOX</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a77ab7a307331e041363ac40d97e14554aa6c72ba5b0b44c63b50eecfe03ee79c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Database</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>aa0e76a8ea52f32474102f2302cb573f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Database</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a4717c269445a4395dbc541429ca65b1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>create</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a9add10e2a5794ed79e5bd5f3e759f9e7</anchor>
      <arglist>(const std::string &amp;name)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>open</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>add8359d3129fada0c50a709e5dc89d74</anchor>
      <arglist>(const std::string &amp;name, const bool read_write_mode=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>close</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a09f40d20ff3895c7f5b9a807cb8288c3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>keyExists</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a3d41b0525d33476e27bdc28a65c271be</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getAllKeys</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a1c88fbe496a6a4d31f88087504cdb5d3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual enum DataType</type>
      <name>getArrayType</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a5be02d0d4f32333d05422b6065b93a78</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>getArraySize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a8779f21b9275b2147aa80cd2d92d05cf</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a81d88c91204302e0f1a8c66f9f679188</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; Database &gt;</type>
      <name>putDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>ad720d9fcabf8427415ed1a86978a859f</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; Database &gt;</type>
      <name>getDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a5f1c99c155e6e7533875c7ef9c2febbd</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Database &gt;</type>
      <name>getDatabaseWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a42574c92ad1d62b0e7ea27eab43e34b4</anchor>
      <arglist>(const std::string &amp;key, const boost::shared_ptr&lt; Database &gt; &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a2fe2e05763d6b22f194b9a33b899be62</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a31b7dec80dc1b057bc5aefce59ccd274</anchor>
      <arglist>(const std::string &amp;key, const bool &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBoolVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a2fc2af2416ffc2a7123a18704863d318</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; bool &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>ad7da0f9a3678a0843b7330dfb0e6b998</anchor>
      <arglist>(const std::string &amp;key, const bool *const data, const size_t nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>ac9b456051386053cf94d5834d56b1d39</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBoolWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a0602c0d3c0377370da985c82dc3ba24f</anchor>
      <arglist>(const std::string &amp;key, const bool &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; bool &gt;</type>
      <name>getBoolVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a68ad2c8155610bc0c843fda990005e60</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>addb9aad07b68183b16820a744f4462b5</anchor>
      <arglist>(const std::string &amp;key, bool *data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a0862e35c2383854a21ffccd2d222e24c</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>abab5f4276a8f3a624dd4437f09947a94</anchor>
      <arglist>(const std::string &amp;key, const DatabaseBox &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDatabaseBoxVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a5abc06c1082f55755daf8d215d096a70</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; DatabaseBox &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a3554750dedaf85626c5604fc8d7e01be</anchor>
      <arglist>(const std::string &amp;key, const DatabaseBox *const data, const size_t nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DatabaseBox</type>
      <name>getDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a1e228dce2f08f07677b914a4d1c56e3a</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DatabaseBox</type>
      <name>getDatabaseBoxWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a53fa8f0e1dbd2dacd4e02787ed0d97ae</anchor>
      <arglist>(const std::string &amp;key, const DatabaseBox &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; DatabaseBox &gt;</type>
      <name>getDatabaseBoxVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a39c6abb046d91a6ad4e8ba164435d34b</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>ac5c80ea2ec9d295d5f5724699b3c0d4f</anchor>
      <arglist>(const std::string &amp;key, DatabaseBox *data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a7865644ce81076fe702e8a44a28b7e3b</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a41f7b1d4518a4b1a07decb4dbc9c463b</anchor>
      <arglist>(const std::string &amp;key, const char &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putCharVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a00c56f700965ac320d93799910c99c5a</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; char &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a267db50e4a335e4168341a1bacacfe0a</anchor>
      <arglist>(const std::string &amp;key, const char *const data, const size_t nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a21fa21f6bcab37efb441ee999237d26b</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getCharWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a28d3c14300627801cb25f7d33e8de385</anchor>
      <arglist>(const std::string &amp;key, const char &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; char &gt;</type>
      <name>getCharVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>ab2b3c89d3f5010e1646bb14996fe2156</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>aa4e5e7036913e00e92faec28125f2305</anchor>
      <arglist>(const std::string &amp;key, char *data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a3e6314103f60c01faabf1d31c3f7ac4b</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>ad7883f99fcc2ffd1778ac035a8e3d964</anchor>
      <arglist>(const std::string &amp;key, const dcomplex &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putComplexVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a2d335a4b8a2644613ba442fba4cddd7c</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; dcomplex &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a2564660935f68d29b4564b4d753a36f9</anchor>
      <arglist>(const std::string &amp;key, const dcomplex *const data, const size_t nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dcomplex</type>
      <name>getComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a09cd1b04b48d9371ae73a6cc9b51663c</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dcomplex</type>
      <name>getComplexWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a4821026dc612e5b47b03a61bd8fa1730</anchor>
      <arglist>(const std::string &amp;key, const dcomplex &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; dcomplex &gt;</type>
      <name>getComplexVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a666df3e65a179f09940f8ef43c825342</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>ab5634b391a6cd731cb9cabbf21c5edc6</anchor>
      <arglist>(const std::string &amp;key, dcomplex *data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>ae5b3bfca6b823f55d9f2dff08b382a34</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a8b6ffea865f18d4698c8334eb3dae7ef</anchor>
      <arglist>(const std::string &amp;key, const double &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDoubleVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a118a069a59c4cd0d155aa105d7b30e66</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; double &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>af3516b9993829c910ec887935c9a6adc</anchor>
      <arglist>(const std::string &amp;key, const double *const data, const size_t nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a5a97616618dd295d224afb9309ffb471</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDoubleWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>ac4540ab022412147c87952057ef469c3</anchor>
      <arglist>(const std::string &amp;key, const double &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>getDoubleVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a5b6a196de445047ce5377835fbb383f4</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a34ce71d2056dfb5c7468bbe3712cf4ea</anchor>
      <arglist>(const std::string &amp;key, double *data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a976b712795bfd1e85adc695b1be7dc25</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a5c405ac49c1264dbcc0e516452811823</anchor>
      <arglist>(const std::string &amp;key, const float &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putFloatVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a7c150fdbdfcfdab2b0a3d5acd7bbc068</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; float &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a1b6e8a37cab0e589a9d89e509afa33a8</anchor>
      <arglist>(const std::string &amp;key, const float *const data, const size_t nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a7a829b3c3008cca356df1bafb083ab98</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getFloatWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>ac84391fa5b1640b636ea6de162c2f1d8</anchor>
      <arglist>(const std::string &amp;key, const float &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; float &gt;</type>
      <name>getFloatVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>ae69520d09de72c04e4d4eb2781dc62a2</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a276144690a03d219adb3b5397eb54ec3</anchor>
      <arglist>(const std::string &amp;key, float *data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a8436a72a8a834289a4f712547745a104</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>afd84483cf949f04233a6886919a954db</anchor>
      <arglist>(const std::string &amp;key, const int &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putIntegerVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a731a5328cc9741ea009829064c4ffa48</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; int &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>aac288b0b289198354cd54fad2640e23e</anchor>
      <arglist>(const std::string &amp;key, const int *const data, const size_t nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>ac00780c53479570949b31ad9dc3da7e0</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getIntegerWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>ae434f079b5d44e99f28eb917c318a2c4</anchor>
      <arglist>(const std::string &amp;key, const int &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; int &gt;</type>
      <name>getIntegerVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a733f2f103c28df889fc86cee6dfde9ed</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a8553670fb6badfa6dcceef982ac60275</anchor>
      <arglist>(const std::string &amp;key, int *data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a3910215f130cc499dbd144248cc2b3cc</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a380ecaab1dfb095e61798332556d3568</anchor>
      <arglist>(const std::string &amp;key, const std::string &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putStringVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a3717238fcff34912f71c2c190fa5ec2c</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; std::string &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a07f850fb3e984009bb4b1d6950a76904</anchor>
      <arglist>(const std::string &amp;key, const std::string *const data, const size_t nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a5c66905cc31492113989283264bba4d4</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getStringWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a330b60a8fbbf03af375fc76b20272e64</anchor>
      <arglist>(const std::string &amp;key, const std::string &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getStringVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a6426484e0b0fae858c34824428921d59</anchor>
      <arglist>(const std::string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a517618dba7cdea9e917e06f39041e821</anchor>
      <arglist>(const std::string &amp;key, std::string *data, const size_t nelements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>abe62cfeb0c145e2b87ed30e45448183c</anchor>
      <arglist>(const std::string &amp;key, bool &amp;scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a055860430b8132fca901d3a1a7bab2e0</anchor>
      <arglist>(const std::string &amp;key, const bool scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a099d0a2db96db6f8b8d279f2e7bb7d69</anchor>
      <arglist>(const std::string &amp;key, std::vector&lt; bool &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>af91cdd93a051846e99ae78b56116c992</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; bool &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a4ecb2346c8ed3265a8e6b2d5b4ccbb46</anchor>
      <arglist>(const std::string &amp;key, char &amp;scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>ae46688f6664ff1cee40cd4789293fad5</anchor>
      <arglist>(const std::string &amp;key, const char scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a092b4679ab9786f02a5284664bad2bff</anchor>
      <arglist>(const std::string &amp;key, std::vector&lt; char &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>aae27f98c7c2d7c6ffba190d8ef4787e4</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; char &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a900b92231032259c04c835524a0c6e6e</anchor>
      <arglist>(const std::string &amp;key, dcomplex &amp;scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>aa8a401c14c5236e552cbc09da6d51aab</anchor>
      <arglist>(const std::string &amp;key, const dcomplex scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a5a628b1831c72b79b658e14be0c24e8d</anchor>
      <arglist>(const std::string &amp;key, std::vector&lt; dcomplex &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a018e171532e7c3f253f721f18843b002</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; dcomplex &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>aa0e0ba0f57c672390151058d2bff4612</anchor>
      <arglist>(const std::string &amp;key, float &amp;scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>aafc4252d0b12e70bdabdcd530979881e</anchor>
      <arglist>(const std::string &amp;key, const float scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>ac63c181be9a6535ab64b6e1781c2129a</anchor>
      <arglist>(const std::string &amp;key, std::vector&lt; float &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a0cd61db9af828ff8f597732308d78c46</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; float &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>adfb8b259c3ab2094f725d0b54b650454</anchor>
      <arglist>(const std::string &amp;key, double &amp;scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a5537a2af2913b3ff8cd0c34d4558152b</anchor>
      <arglist>(const std::string &amp;key, const double scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a2e2aa236edab7dc5072297c4d8462b3d</anchor>
      <arglist>(const std::string &amp;key, std::vector&lt; double &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a50e05b1dd17ac203ff90cd6a714446a5</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; double &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a890a90f16f1eb1bfadc419c6abb82ca1</anchor>
      <arglist>(const std::string &amp;key, int &amp;scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a22629c8d178b3b4bfafdf14fc6457ae6</anchor>
      <arglist>(const std::string &amp;key, const int scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a80b6cb7fc5c7473eece817f139c87b5d</anchor>
      <arglist>(const std::string &amp;key, std::vector&lt; int &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a5fd3a6acda83c5f0f8936dc58a083d6f</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; int &gt; &amp;array)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>aad80982ba752192bb9eef9e920776827</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getObjectVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>ae3de0efb3783eeb4acd9f118c3cc7050</anchor>
      <arglist>(const std::string &amp;key, std::vector&lt; TYPE &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putObjectVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>ae812e9543467b2d1093c898e39662712</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; TYPE &gt; &amp;vector)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>af00b8ec79d9e1ba2cb676fc775a48e49</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a49ae108ad7aebd397652a7cb179c6738</anchor>
      <arglist>(std::ostream &amp;os=pout)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::DatabaseBox_POD</name>
    <filename>structSAMRAI_1_1tbox_1_1DatabaseBox__POD.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>d_dimension</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1DatabaseBox__POD.html</anchorfile>
      <anchor>ae5a3d6dc55ea9de20a90e83113761359</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_lo</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1DatabaseBox__POD.html</anchorfile>
      <anchor>ad8ec936e219a9cc9cd585aa3186abaf7</anchor>
      <arglist>[SAMRAI::MAX_DIM_VAL]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_hi</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1DatabaseBox__POD.html</anchorfile>
      <anchor>aecfd39b2f1701262e42f6b3130c4a15a</anchor>
      <arglist>[SAMRAI::MAX_DIM_VAL]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::DatabaseBox</name>
    <filename>classSAMRAI_1_1tbox_1_1DatabaseBox.html</filename>
    <member kind="function">
      <type></type>
      <name>DatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>a02fc3740166520da77b45bfbaff630ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>ac21fd7dfcd20619965b051fb0354370d</anchor>
      <arglist>(const Dimension &amp;dim, const int *lower, const int *upper)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>ac8685cd411a521daddf7624f2f01cf83</anchor>
      <arglist>(const DatabaseBox &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>DatabaseBox &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>a87be791025860ff9c139a4c14752f931</anchor>
      <arglist>(const DatabaseBox &amp;box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>ae1550be81cbdb0683778d317f7eed80e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>a3556f8790da33f4a65a45881b5d887c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Dimension::dir_t</type>
      <name>getDimVal</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>aa77540a805d4000416d9ec8e5a79988e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDim</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>a75455c1e197fbc7496ac10f70765df45</anchor>
      <arglist>(const Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>lower</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>a11281a37d76aea5244fc9b9cfc466e59</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>upper</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>aa763b074422d5f27c7dda90a7e62bc07</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lower</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>aeff3c1ce050988248ca1bade1167241b</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>upper</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>a759b75b19ef2a619ef6b5a5e68caeac0</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>acc1d346bd5f899a8e16200ac01c2762c</anchor>
      <arglist>(const DatabaseBox &amp;box) const </arglist>
    </member>
    <member kind="variable">
      <type>DatabaseBox_POD</type>
      <name>d_data</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>a5aa6cfe460239a8af5ca7a59e0f6a6ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::DatabaseFactory</name>
    <filename>classSAMRAI_1_1tbox_1_1DatabaseFactory.html</filename>
    <member kind="function">
      <type></type>
      <name>DatabaseFactory</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseFactory.html</anchorfile>
      <anchor>a59d33a708788a45423332cdd31edf122</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DatabaseFactory</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseFactory.html</anchorfile>
      <anchor>a29ff15194bdf116646b9bf9a38e20fc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; Database &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseFactory.html</anchorfile>
      <anchor>aa98948f651d75cd12cb82755073d8389</anchor>
      <arglist>(const std::string &amp;name)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Dimension</name>
    <filename>classSAMRAI_1_1tbox_1_1Dimension.html</filename>
    <member kind="typedef">
      <type>unsigned short int</type>
      <name>dir_t</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Dimension.html</anchorfile>
      <anchor>acca605e244511b1af03e7ee4f6e9179f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dimension</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Dimension.html</anchorfile>
      <anchor>a7f04393ba9c4fcb30d4b961862d525ef</anchor>
      <arglist>(const unsigned short &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dimension</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Dimension.html</anchorfile>
      <anchor>a8e93d7b98d7c192bc07e17084245e691</anchor>
      <arglist>(const Dimension &amp;dimension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Dimension.html</anchorfile>
      <anchor>a3035a81ef5270ef6d7bb55540df7956c</anchor>
      <arglist>(const Dimension &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Dimension.html</anchorfile>
      <anchor>ab3796ff2d0d27c6ceacc07219694f07d</anchor>
      <arglist>(const Dimension &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Dimension.html</anchorfile>
      <anchor>ad8a0a3a42b1f533b4fe040384789935a</anchor>
      <arglist>(const Dimension &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Dimension.html</anchorfile>
      <anchor>acb0501d4a745310f0fc4a36821b98867</anchor>
      <arglist>(const Dimension &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Dimension.html</anchorfile>
      <anchor>aa4062c42d5afb3838c0618c6f8508743</anchor>
      <arglist>(const Dimension &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Dimension.html</anchorfile>
      <anchor>a5d40691ccbc350633600fa87725a9cea</anchor>
      <arglist>(const Dimension &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>getValue</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Dimension.html</anchorfile>
      <anchor>acd8e964a485c8b782c27a330732413de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Dimension &amp;</type>
      <name>getMaxDimension</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Dimension.html</anchorfile>
      <anchor>a482a0480797c77d235dee09ffd577230</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Dimension.html</anchorfile>
      <anchor>a14aecbeafd691a85e25b367724601880</anchor>
      <arglist>(std::ostream &amp;s, const Dimension &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::HDFDatabase</name>
    <filename>classSAMRAI_1_1tbox_1_1HDFDatabase.html</filename>
    <base>SAMRAI::tbox::Database</base>
    <member kind="function">
      <type></type>
      <name>HDFDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a22fb0b38d58741460f461b9b71192500</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a1d33f0b7ee583d3b6cd71c02be645388</anchor>
      <arglist>(const std::string &amp;name, hid_t group_ID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HDFDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a5d4a4cc0cb5aa25f360ada6b56cae7a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>keyExists</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a85cbfed06b5c9a9bbeb1e6c63810c321</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getAllKeys</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>ab1308e2ce5a28bf1abddae0d4908c8ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual enum DataType</type>
      <name>getArrayType</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>aff1405db6b13d8bbb4fa1c78ed64b317</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getArraySize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a4d049f71eb227da5c95b6f33b4860d45</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>afde9df379ef504fc07cfa59dd92fca65</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Database &gt;</type>
      <name>putDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a94348a557574215083804d2696ebbc8e</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Database &gt;</type>
      <name>getDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a88b4cd2956a693e9fdc3e676870c4751</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>aa6e80d6071e4ce76f86bae805422950e</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a632b21af178b0a4188b42e512734463f</anchor>
      <arglist>(const std::string &amp;key, const bool *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; bool &gt;</type>
      <name>getBoolVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>aa924404ce0b1b219ab55c27f80432d25</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>ab76179ecb1b9bf3b696161a681c8daa4</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a77c321ad556d1b8129a01af89e1ccd0b</anchor>
      <arglist>(const std::string &amp;key, const DatabaseBox *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; DatabaseBox &gt;</type>
      <name>getDatabaseBoxVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a98804f91f071bd463d1f74fd226377e2</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a8f3ce1c36343ca555f4429544d3d1e4c</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a1e408f1c3deb7227752dd1565b57b83f</anchor>
      <arglist>(const std::string &amp;key, const char *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; char &gt;</type>
      <name>getCharVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a61a067e8447c63dbd85bda3c4baf3a4f</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a8a7172da045991358e192f7b352cc844</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>abfacf5a648a84fc6776cdca104a0ccbf</anchor>
      <arglist>(const std::string &amp;key, const dcomplex *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; dcomplex &gt;</type>
      <name>getComplexVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a9a96a8230db0f70bd15ea1689fc75108</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>aaf10cee4994af78186a9ad12aa1bab76</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a80ee2927609071d5901bffbdbfa975f1</anchor>
      <arglist>(const std::string &amp;key, const double *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>getDoubleVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>ab3f0aa798beae36d842060571a2706c2</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>af759db87e7aafaa044407220350aeda2</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a9a7d8c7252d4d16ab2dd98b11b50d166</anchor>
      <arglist>(const std::string &amp;key, const float *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; float &gt;</type>
      <name>getFloatVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a1d571979b4c35f601a65d1448066ad5c</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>ac5dabb7569fcb59c1e63669076a6e03d</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>afa6996523b61cc0beb2210d66328aaa9</anchor>
      <arglist>(const std::string &amp;key, const int *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; int &gt;</type>
      <name>getIntegerVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a657727eb31712c3d7c42032586d1c87b</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a28191d0da3aa3cfeccf73891f2e51984</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>aca411b97b6f242d45b3ac8deb7556f24</anchor>
      <arglist>(const std::string &amp;key, const std::string *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getStringVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>aad6c4f865a68107fe89a81007e6b687a</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a2c47968ab44c7b53bcd972a3e91efba8</anchor>
      <arglist>(std::ostream &amp;os=pout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>create</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a4488f392666df9ff5780fcbb06e04ece</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>open</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a92d1ac3a099c49e48e1954c517bf446b</anchor>
      <arglist>(const std::string &amp;name, bool read_write_mode=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>attachToFile</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a445093ff94ed1ec67675922847b1e864</anchor>
      <arglist>(hid_t group_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>close</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>ac478fc0e4c1d6efb3842dc2b5ca39b57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a176fe35da410e8ecce477065cf7c2336</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>hid_t</type>
      <name>getGroupId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a0d2c50487c2d712769338a9e4495f81e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::HDFDatabaseFactory</name>
    <filename>classSAMRAI_1_1tbox_1_1HDFDatabaseFactory.html</filename>
    <base>SAMRAI::tbox::DatabaseFactory</base>
    <member kind="function">
      <type></type>
      <name>HDFDatabaseFactory</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabaseFactory.html</anchorfile>
      <anchor>a2a025b8ed430a384f2e1d569a078f078</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HDFDatabaseFactory</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabaseFactory.html</anchorfile>
      <anchor>ac9054966e2b9b9ed6c77f4505aed5bb5</anchor>
      <arglist>(const HDFDatabaseFactory &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>HDFDatabaseFactory &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabaseFactory.html</anchorfile>
      <anchor>ad63cf843de36eb959d9479fe75c5ac33</anchor>
      <arglist>(const HDFDatabaseFactory &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HDFDatabaseFactory</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabaseFactory.html</anchorfile>
      <anchor>a4062430389773776ab42e2458dd0dacc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Database &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabaseFactory.html</anchorfile>
      <anchor>abbf35f4846293151e7306b66b713f4ff</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::IEEE</name>
    <filename>structSAMRAI_1_1tbox_1_1IEEE.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setupFloatingPointExceptionHandlers</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>a2340adb5b175e00b44c85615399bf6ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getSignalingFloatNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>a2b625c27b9dd896d5db0f903038e5d49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getSignalingNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>a152d489b32914a0485b956be9523a606</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static dcomplex</type>
      <name>getSignalingComplexNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>a47cc81dd8dbb81c14ed32ef12c2fb007</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>a3198f3133f46e4b510edbcdd0735507a</anchor>
      <arglist>(float &amp;f)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>acda6d5dfb805729c12a750b1f5f679de</anchor>
      <arglist>(double &amp;d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>ad39ce6a467c7c65c174b64715e694e85</anchor>
      <arglist>(dcomplex &amp;dc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeVectorToSignalingNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>a5c1e77efac90bca7bcba33ce51a2c71a</anchor>
      <arglist>(std::vector&lt; float &gt; &amp;vector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeVectorToSignalingNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>ab484c8fc00239c7c0981fc75f7450d92</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;vector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeVectorToSignalingNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>a18c2472b5b946e53c735fad7db2c1b1f</anchor>
      <arglist>(std::vector&lt; dcomplex &gt; &amp;vector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeArrayToSignalingNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>a91f368a2e97dd2346aa24c28dabdad1d</anchor>
      <arglist>(float *array, int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeArrayToSignalingNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>a3c34f9bc563d8246b52e53cc8d1361ed</anchor>
      <arglist>(double *array, int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeArrayToSignalingNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>a8530e002fb8527719af4930689e34147</anchor>
      <arglist>(dcomplex *array, int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>a7bdfa0f0f75ce430b112f3d0a2232220</anchor>
      <arglist>(const float &amp;f)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>a3dd761268f58f1ce80de1aff130ed113</anchor>
      <arglist>(const double &amp;d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>aefa672d92d100714001d6d108b06ce0f</anchor>
      <arglist>(const dcomplex &amp;dc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::InputManager</name>
    <filename>classSAMRAI_1_1tbox_1_1InputManager.html</filename>
    <member kind="function">
      <type>boost::shared_ptr&lt; InputDatabase &gt;</type>
      <name>parseInputFile</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputManager.html</anchorfile>
      <anchor>ab34b44333e831b85e228b1e20b350480</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseInputFile</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputManager.html</anchorfile>
      <anchor>aa08f70820ffef922f753b2b3ac40dfd3</anchor>
      <arglist>(const std::string &amp;filename, const boost::shared_ptr&lt; InputDatabase &gt; &amp;input_db)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InputManager *</type>
      <name>getManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputManager.html</anchorfile>
      <anchor>ad9c2c5982b3ff59d65193ead93c4a67c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputManager.html</anchorfile>
      <anchor>aa5441eb4c6a689bdad6bc32468c191cd</anchor>
      <arglist>(InputManager *manager)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inputDatabaseExists</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputManager.html</anchorfile>
      <anchor>a56d5ecedb1ada42872cade7fff562fec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static boost::shared_ptr&lt; Database &gt;</type>
      <name>getInputDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputManager.html</anchorfile>
      <anchor>a854f939800734401a2036b8bbcc916df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InputManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputManager.html</anchorfile>
      <anchor>afc6fe9e23c1237cdf1027629934d2346</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~InputManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputManager.html</anchorfile>
      <anchor>a54fce1acb689db5ca529ffb318b8936e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::AbortAppender</name>
    <filename>classSAMRAI_1_1tbox_1_1AbortAppender.html</filename>
    <base>SAMRAI::tbox::Logger::Appender</base>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::WarningAppender</name>
    <filename>classSAMRAI_1_1tbox_1_1WarningAppender.html</filename>
    <base>SAMRAI::tbox::Logger::Appender</base>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::DebugAppender</name>
    <filename>classSAMRAI_1_1tbox_1_1DebugAppender.html</filename>
    <base>SAMRAI::tbox::Logger::Appender</base>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Logger</name>
    <filename>classSAMRAI_1_1tbox_1_1Logger.html</filename>
    <class kind="class">SAMRAI::tbox::Logger::Appender</class>
    <member kind="function">
      <type>void</type>
      <name>logAbort</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Logger.html</anchorfile>
      <anchor>a51336f420dde86c95d7c8d3ce92af98e</anchor>
      <arglist>(const std::string &amp;message, const std::string &amp;filename, const int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logWarning</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Logger.html</anchorfile>
      <anchor>ac81140de08116023bc4bf7873de9be86</anchor>
      <arglist>(const std::string &amp;message, const std::string &amp;filename, const int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logDebug</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Logger.html</anchorfile>
      <anchor>ab14b4add9770d4aa0542a49163bee4ec</anchor>
      <arglist>(const std::string &amp;message, const std::string &amp;filename, const int line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAbortAppender</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Logger.html</anchorfile>
      <anchor>af02f45522b49da06364926714533ea8d</anchor>
      <arglist>(const boost::shared_ptr&lt; Appender &gt; &amp;appender)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWarningAppender</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Logger.html</anchorfile>
      <anchor>af9cbf886c416ff39fcaebcfd1165a14c</anchor>
      <arglist>(const boost::shared_ptr&lt; Appender &gt; &amp;appender)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDebugAppender</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Logger.html</anchorfile>
      <anchor>a36318730fbd8c460a8a366f80fc9d3e7</anchor>
      <arglist>(const boost::shared_ptr&lt; Appender &gt; &amp;appender)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWarning</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Logger.html</anchorfile>
      <anchor>acb4612dd77d86c51d07229a432d650e1</anchor>
      <arglist>(bool onoff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDebug</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Logger.html</anchorfile>
      <anchor>a3e6f9e258ba9a41a27dddf18c98f392f</anchor>
      <arglist>(bool onoff)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Logger *</type>
      <name>getInstance</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Logger.html</anchorfile>
      <anchor>a159465f7e1ea2e22a22534af4f90a705</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Logger::Appender</name>
    <filename>classSAMRAI_1_1tbox_1_1Logger_1_1Appender.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>logMessage</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Logger_1_1Appender.html</anchorfile>
      <anchor>a232cf262fc0fa29e00c1563dc2462ac2</anchor>
      <arglist>(const std::string &amp;message, const std::string &amp;filename, const int line)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Appender</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Logger_1_1Appender.html</anchorfile>
      <anchor>a061271f825631f7412e533f60168ce70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Appender</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Logger_1_1Appender.html</anchorfile>
      <anchor>aa36313c6a69be82e43b5e74fdc46f1c2</anchor>
      <arglist>(const Appender &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Appender &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Logger_1_1Appender.html</anchorfile>
      <anchor>aec72b3d0f5b4ab6ae85504e604ea97e9</anchor>
      <arglist>(const Appender &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Appender</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Logger_1_1Appender.html</anchorfile>
      <anchor>a61f754615ea433c3ee265c3b25f2e0b8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::MathUtilities</name>
    <filename>classSAMRAI_1_1tbox_1_1MathUtilities.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>ab892fc134dc9229af2110647ea728f03</anchor>
      <arglist>(const float &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a586685a892aa653868ccba7127ee8f1b</anchor>
      <arglist>(const double &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a47554021a27d78296b19ed72dbd8ad3d</anchor>
      <arglist>(const dcomplex &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalEps</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>ab0c5a2060f946c731e75f359e2960a1c</anchor>
      <arglist>(const float &amp;a, const float &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalEps</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a6ace3b2ff017b590488ae2eb15f9d53d</anchor>
      <arglist>(const double &amp;a, const double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalEps</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a5d5bcd41fa2d2c1c764e72f21b044575</anchor>
      <arglist>(const dcomplex &amp;a, const dcomplex &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Rand</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>aa432b8511ca65e3ec22d4b014c51a781</anchor>
      <arglist>(const bool &amp;low, const bool &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>Rand</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>af76c7ec7059add169551978a096c0b7c</anchor>
      <arglist>(const char &amp;low, const char &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Rand</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a42a165593966f22250920642005a542d</anchor>
      <arglist>(const int &amp;low, const int &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>Rand</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a58def4ee52ede1c972a1ea71048e9c92</anchor>
      <arglist>(const float &amp;low, const float &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Rand</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a24cbaec19736a966cad1e3f7d221da6a</anchor>
      <arglist>(const double &amp;low, const double &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>Rand</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a03976bfd72423f24fa07d0fa07fc7028</anchor>
      <arglist>(const dcomplex &amp;low, const dcomplex &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>Min</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>ae0e85ee499fd18d4f94f2a8f99a61417</anchor>
      <arglist>(dcomplex a, dcomplex b)</arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>Max</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a5237342189e4ca684ff76f6912b282b0</anchor>
      <arglist>(dcomplex a, dcomplex b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Abs</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>aa5cc85604d52ec22ec3e86c96dccb8a5</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>Abs</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a27bdfe937c571458a7602716ba09d92b</anchor>
      <arglist>(float a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Abs</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>af271d81aaf61643cde52e1e59efea880</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>round</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a1fc1c81d567a44852ce3b3ebd083046e</anchor>
      <arglist>(float a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>round</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>aba8da2439d172b3c6f821c0b36b61844</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>s_zero</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a760ebe7f5f02d2631dd577172fc9a341</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>s_one</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>abb85b847e9c868f536fd2c0956081e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>s_zero</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>afafadbc33a271cbfaa3c41ffbe95b015</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>s_one</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>afe05babc99029b8faedc8e970028aa3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>s_zero</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a7a839181e69508a9723a4f9052ecbb98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>s_one</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a813d5660143de38f9b1a55f057f1474c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>s_zero</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>ae14b55dcdc187523432a0dc5c4439d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>s_one</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a50121de0a0d6ebf3069834eae843f9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>s_zero</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a63e6160ce9f9c79629d9d373f5b35862</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>s_one</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a8bbda60afda336c51e1ddd2ce8faa25a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>s_zero</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a6fa20050c1126b0fbb2aa59465ef0669</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>s_one</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a404b677a35ed3a9998b3c0fc2b0fb783</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>ab892fc134dc9229af2110647ea728f03</anchor>
      <arglist>(const float &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a586685a892aa653868ccba7127ee8f1b</anchor>
      <arglist>(const double &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a47554021a27d78296b19ed72dbd8ad3d</anchor>
      <arglist>(const dcomplex &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>getSignalingNaN</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a5bbda97b88c8762d568a0a87e4dce93c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalEps</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>ab0c5a2060f946c731e75f359e2960a1c</anchor>
      <arglist>(const float &amp;a, const float &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalEps</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a6ace3b2ff017b590488ae2eb15f9d53d</anchor>
      <arglist>(const double &amp;a, const double &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalEps</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a5d5bcd41fa2d2c1c764e72f21b044575</anchor>
      <arglist>(const dcomplex &amp;a, const dcomplex &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>Min</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>ae0e85ee499fd18d4f94f2a8f99a61417</anchor>
      <arglist>(dcomplex a, dcomplex b)</arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>Max</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a5237342189e4ca684ff76f6912b282b0</anchor>
      <arglist>(dcomplex a, dcomplex b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Abs</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>aa5cc85604d52ec22ec3e86c96dccb8a5</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>Abs</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a27bdfe937c571458a7602716ba09d92b</anchor>
      <arglist>(float a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Abs</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>af271d81aaf61643cde52e1e59efea880</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Rand</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>aa432b8511ca65e3ec22d4b014c51a781</anchor>
      <arglist>(const bool &amp;low, const bool &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>Rand</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>af76c7ec7059add169551978a096c0b7c</anchor>
      <arglist>(const char &amp;low, const char &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Rand</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a42a165593966f22250920642005a542d</anchor>
      <arglist>(const int &amp;low, const int &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>Rand</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a58def4ee52ede1c972a1ea71048e9c92</anchor>
      <arglist>(const float &amp;low, const float &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Rand</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a24cbaec19736a966cad1e3f7d221da6a</anchor>
      <arglist>(const double &amp;low, const double &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>Rand</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a03976bfd72423f24fa07d0fa07fc7028</anchor>
      <arglist>(const dcomplex &amp;low, const dcomplex &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>round</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a8e88e0b0311e2a7e9a161e9bbd30e2fa</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>round</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>afc34dcca6300d321f514ba1f924f6d5f</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>getZero</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a3e1778960a60a8945f9bdf5a59f8649d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>getOne</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a1c2b6ec284411447353514806dddc9ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>getSignalingNaN</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a14bb6e0bc1affe091b8a1e6814c175e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNaN</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a1f1e9887531623671811d52fbd60502f</anchor>
      <arglist>(const TYPE &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setVectorToSignalingNaN</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>acd2c91c450392fc5a0d4b7a7262e3bbb</anchor>
      <arglist>(std::vector&lt; TYPE &gt; &amp;vector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setArrayToSignalingNaN</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a7cf6b988a1d6860e912fb7611bfa3d5b</anchor>
      <arglist>(TYPE *array, int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>equalEps</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>ad7fcbfb87732273024150d0de416e36f</anchor>
      <arglist>(const TYPE &amp;a, const TYPE &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>getMax</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a15bf59579ff1e6833ac870be4f043fe7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setVectorToMax</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>aed1c6c63ce446d315fdb934b9683799b</anchor>
      <arglist>(std::vector&lt; TYPE &gt; &amp;vector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setArrayToMax</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a3fa69b04b74b21949927481352a08bab</anchor>
      <arglist>(TYPE *array, int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>getMin</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>af5dae7d1d65a3b5ae6133549bfe8aef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setVectorToMin</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a540088b0a4bfee87e78bbd6f9e8a2f37</anchor>
      <arglist>(std::vector&lt; TYPE &gt; &amp;vector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setArrayToMin</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a47970c1dd356ece634ae7555238d3d54</anchor>
      <arglist>(TYPE *array, int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>getEpsilon</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a54a9fd2db29467d6abecfa2b26e3f3f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setVectorToEpsilon</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a16534024f71a899f94c8ee38924e30ae</anchor>
      <arglist>(std::vector&lt; TYPE &gt; &amp;vector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setArrayToEpsilon</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>aff5c05c7d6bdbc51b719c9335fc77de2</anchor>
      <arglist>(TYPE *array, int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>Min</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a134d5b29829fb7d2b8f524be349f31a0</anchor>
      <arglist>(TYPE a, TYPE b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>Max</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>ae731773d43d2d8493229fc16546c2d35</anchor>
      <arglist>(TYPE a, TYPE b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>Abs</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a274ae7d296b792bf6901692dbbd31497</anchor>
      <arglist>(TYPE a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>round</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a2b307387e82efa76f7e9aa2d582c1297</anchor>
      <arglist>(TYPE a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>Rand</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a0030217b9a402b9b27fde801fef3be8c</anchor>
      <arglist>(const TYPE &amp;low, const TYPE &amp;width)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::MemoryDatabase</name>
    <filename>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</filename>
    <base>SAMRAI::tbox::Database</base>
    <member kind="function">
      <type></type>
      <name>MemoryDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a89188c11e3d8a7c7630f33790affa080</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MemoryDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a796ec3797984a387722e672c71bfe250</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>create</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a7d260802958e053506fc3aef0e2bbd49</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>open</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a9e5e94e85e660134e8e02111175cce29</anchor>
      <arglist>(const std::string &amp;name, const bool read_write_mode=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>close</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a9aadcdad368a366ad826b8c9784b45c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a44bef2b713a08d3cbdd32bf240c04f39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>keyExists</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a614afcaff7b3961e6fc87c02464ba986</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getAllKeys</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a2d94e148307600bff6d91880ce9d26d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual enum DataType</type>
      <name>getArrayType</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>ab4cea859d5ebb2aca99b0072bc46ba28</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getArraySize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>ae981442c1ffa64686ec847a01e6592fd</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a002b69fc8e559954684a46a3f7e5ef0c</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Database &gt;</type>
      <name>putDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a2f8f6ce9201225a373e83fde9c6f93c2</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Database &gt;</type>
      <name>getDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>ad995a024060666af1a991a38d09fd6f0</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>ab4873c1f5662963a727ba57a2ba0f3c4</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a5aa5635a1db0a1617fed8cad8e535b40</anchor>
      <arglist>(const std::string &amp;key, const bool &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a78ee99053b0dd2867efff713982e2aba</anchor>
      <arglist>(const std::string &amp;key, const bool *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a167b1dd8d640dad81da156377aed23b3</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBoolWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a45c284e6a35c07fbac10cd52942fbdb0</anchor>
      <arglist>(const std::string &amp;key, const bool &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; bool &gt;</type>
      <name>getBoolVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a34b4e5ac64288b57ce34ac0adcfa23b7</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>ab4d5f25076e437f24927e41a6aa67752</anchor>
      <arglist>(const std::string &amp;key, bool *data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a4f1d1d07d842c9f6cd1938d687e75c7d</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>af73eb0ddfe73a34a9308164068f8d9a0</anchor>
      <arglist>(const std::string &amp;key, const DatabaseBox &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDatabaseBoxVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>af335571f1d7e992771d4cf308d4895d1</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; DatabaseBox &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>aa4e10df48e7bac5492467c64fe011993</anchor>
      <arglist>(const std::string &amp;key, const DatabaseBox *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DatabaseBox</type>
      <name>getDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a8570a394907110dfe6ef81c1e48a3355</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DatabaseBox</type>
      <name>getDatabaseBoxWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a409f496c327fc3433486cc1438bbfd48</anchor>
      <arglist>(const std::string &amp;key, const DatabaseBox &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; DatabaseBox &gt;</type>
      <name>getDatabaseBoxVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a01f5ce0e5b4261ed6ce8d16dec8f16f0</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>adef3ebbadbc8b3b0adda445c1cd0b5f0</anchor>
      <arglist>(const std::string &amp;key, DatabaseBox *data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a30764c316127094b19f3201774fe53f6</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>afa1617b7682021df24a096d97701abc2</anchor>
      <arglist>(const std::string &amp;key, const char &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putCharVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>acb2103aeac4b9ceda16cae86cd09079c</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; char &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>addfcfc609840974851041887e6cbc643</anchor>
      <arglist>(const std::string &amp;key, const char *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>ab3247e0a89ee917fc25674d04e31d87e</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getCharWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a4350287be2170899b2b360122cb1fed8</anchor>
      <arglist>(const std::string &amp;key, const char &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; char &gt;</type>
      <name>getCharVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>ad67dce7aecbfaf859c8a6d0e195fb651</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a3067f76f9daa1407f8a2a700b1b13160</anchor>
      <arglist>(const std::string &amp;key, char *data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a7db9d3356666cdd557a70c9552737ae3</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>adb71a643859a5af994202db9fafb93fe</anchor>
      <arglist>(const std::string &amp;key, const dcomplex &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putComplexVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a4395e2fad23ed1a0baba072951b589ad</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; dcomplex &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>ad2f1c55c2a55b30302aa9b93704ba58e</anchor>
      <arglist>(const std::string &amp;key, const dcomplex *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dcomplex</type>
      <name>getComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>affdaa50ca428b6561bea268e6fa7e820</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dcomplex</type>
      <name>getComplexWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a3862802387c890de310b78ee8ef851ea</anchor>
      <arglist>(const std::string &amp;key, const dcomplex &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; dcomplex &gt;</type>
      <name>getComplexVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a017f3af9e5aa518c87efb08c277695a0</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a3c1c23144ebbb83410310974933c4acb</anchor>
      <arglist>(const std::string &amp;key, dcomplex *data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a180b4a54c7e38c8aa7ee17489a7ed8ed</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a9ecdd68f72ce690af48d68fd5b01327c</anchor>
      <arglist>(const std::string &amp;key, const double &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDoubleVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a42200bf0b9c83e5ab769bc11742a9432</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; double &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>aa3e74d5915d6c3d0f00d9591b9c59427</anchor>
      <arglist>(const std::string &amp;key, const double *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a1f866a4b340110ea8ddd684b662b0207</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDoubleWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>aef8f30127d9f8f8fb2a0c80177ec810a</anchor>
      <arglist>(const std::string &amp;key, const double &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>getDoubleVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a2e2850f8cd1c658926bff9060d487950</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>aafd3a03d96e0d2e90437a8757e307d45</anchor>
      <arglist>(const std::string &amp;key, double *data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a7a48585890e63f3768d84bd61643a6d5</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a5cff0d3b9bb818e1ec9175129e5cc8f8</anchor>
      <arglist>(const std::string &amp;key, const float &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putFloatVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>abc1c9c221c7bef8553e7192604f14c80</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; float &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a1dcdf77a7f44a9cc2230373c03bdde78</anchor>
      <arglist>(const std::string &amp;key, const float *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a636100d2f912c35e1d4b4ad1fe5e7747</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getFloatWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a99b274b1199d6e33f2fbfe7f49f3c5ff</anchor>
      <arglist>(const std::string &amp;key, const float &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; float &gt;</type>
      <name>getFloatVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a13167364c07209e27ed784b54f31f94a</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a5f0ef9aa15a62c344bca5ce64a476b44</anchor>
      <arglist>(const std::string &amp;key, float *data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>ac541fe275242fbb6fb278de073d81941</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>ab9726fd043f69341f99243d8bb4e6e96</anchor>
      <arglist>(const std::string &amp;key, const int &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putIntegerVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>afabfc32d5f90be3c32e50a4e159afaca</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; int &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a1e4f22512cc3f02d6121205929473c69</anchor>
      <arglist>(const std::string &amp;key, const int *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a3027bc366cbcf846e4fe0af4154dac67</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getIntegerWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>aff19d9bb16702802deef65acc6f34a62</anchor>
      <arglist>(const std::string &amp;key, const int &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; int &gt;</type>
      <name>getIntegerVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>afe592ea9fae9302eefe0b18d4cb7f581</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a41d164a6b15f1c487f0b12df6f8cec4c</anchor>
      <arglist>(const std::string &amp;key, int *data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>ade1238caaf95b37f14b4c505f94a6e52</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>aa2afc402679a08c91f120f5afeb1393a</anchor>
      <arglist>(const std::string &amp;key, const std::string &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putStringVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>ab48a5f659fd3ea1d063e4cfe3beddb5d</anchor>
      <arglist>(const std::string &amp;key, const std::vector&lt; std::string &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>adcf6650ddf8aff6b46f473d23223e16f</anchor>
      <arglist>(const std::string &amp;key, const std::string *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a0ef54c0a26080450b7ec677103ed598d</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getStringWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a92138fcb8e5540c9ce0cf16f971d7993</anchor>
      <arglist>(const std::string &amp;key, const std::string &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getStringVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a3b8985118fe9723d9f03ab6ed2498339</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>aa4d8f35a8c8a691b55bdaa1d18119278</anchor>
      <arglist>(const std::string &amp;key, std::string *data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a0115d75fba1b3f101538461d955612f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyAccessed</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>ae3621a96e468b7a891aebbb830d2fef8</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>acaaa9d992c3504e27031a2bdc7412a8c</anchor>
      <arglist>(std::ostream &amp;os=pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printUnusedKeys</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>af001032160e49b567da81b4d91f761e5</anchor>
      <arglist>(std::ostream &amp;os=pout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDefaultKeys</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabase.html</anchorfile>
      <anchor>a27e511511f2d383165ea3119d6da2150</anchor>
      <arglist>(std::ostream &amp;os=pout) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::MemoryDatabaseFactory</name>
    <filename>classSAMRAI_1_1tbox_1_1MemoryDatabaseFactory.html</filename>
    <base>SAMRAI::tbox::DatabaseFactory</base>
    <member kind="function">
      <type></type>
      <name>MemoryDatabaseFactory</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabaseFactory.html</anchorfile>
      <anchor>a56d97cbc1dd83e9f9889b6ba1a0e599d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MemoryDatabaseFactory</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabaseFactory.html</anchorfile>
      <anchor>a20df4dd0c10c02fab98634d93cd98e04</anchor>
      <arglist>(const MemoryDatabaseFactory &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MemoryDatabaseFactory &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabaseFactory.html</anchorfile>
      <anchor>af3704b38cf7147652e3be16cd72519cb</anchor>
      <arglist>(const MemoryDatabaseFactory &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MemoryDatabaseFactory</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabaseFactory.html</anchorfile>
      <anchor>abe89941fd08c05c83cba03d52ecb4c68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Database &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MemoryDatabaseFactory.html</anchorfile>
      <anchor>ade6474c0bfe100d9f6e3598611d1b0e8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::MemoryUtilities</name>
    <filename>structSAMRAI_1_1tbox_1_1MemoryUtilities.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>printMemoryInfo</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MemoryUtilities.html</anchorfile>
      <anchor>ae913939762fc02d17e012c46eb81eaf3</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>recordMemoryInfo</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MemoryUtilities.html</anchorfile>
      <anchor>a41ad0ba08a58c5ad6feb59a0e168d4cd</anchor>
      <arglist>(double time=0.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>printMaxMemory</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MemoryUtilities.html</anchorfile>
      <anchor>ad6aa80f883549880b3ea715c7ab8d210</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>align</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MemoryUtilities.html</anchorfile>
      <anchor>a5a15f4a908d33346d74b5766357d56d8</anchor>
      <arglist>(const size_t bytes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::MessageStream</name>
    <filename>classSAMRAI_1_1tbox_1_1MessageStream.html</filename>
    <member kind="enumeration">
      <name>StreamMode</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a17874a3aabaea0d0fe1a1d5e0fb3d63b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Read</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a17874a3aabaea0d0fe1a1d5e0fb3d63ba2add26dab73af946e1358e10f18c6863</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Write</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a17874a3aabaea0d0fe1a1d5e0fb3d63ba45527644e50823280c568d7068f621c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a33a9b9c61de6e886c7e678960ab71056</anchor>
      <arglist>(const size_t num_bytes, const StreamMode mode, const void *data_to_read=0, bool deep_copy=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a0c041d9511bbd6d1ae210ea8774fb079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MessageStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>ada8a8c0529a07a63de7881f1409f2354</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>getBufferStart</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a7e02639b6f8d6430fb075c00e1fa5273</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getCurrentSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a9eb42e1e09d0bfa6e5a8fcdd4030dd36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>growBufferAsNeeded</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a37c69393489776a91c535f1c9e1b40f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>endOfData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a589aa279de0b3e53bc10a1fc32a5bff9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MessageStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a7df6cb03f0096d6afd723e4578edae9c</anchor>
      <arglist>(const DATA_TYPE &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>af0b7ebe565783b1f8f7c7b36aa964050</anchor>
      <arglist>(const DATA_TYPE *data, size_t size=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a0f60dd394d0d401cb3fb56d47f8b8acd</anchor>
      <arglist>(const MessageStream &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MessageStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>ab77aaff9ad8280913857fa5bb46484af</anchor>
      <arglist>(DATA_TYPE &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a985ace3b98b5337af7c2207f7fd652ca</anchor>
      <arglist>(DATA_TYPE *data, size_t size=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>ae30cd6a2521c410ecf200ef5b51ee606</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readMode</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>ae6bbc71b9d411c03bee9b4bd6fd3b244</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeMode</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a8be4176ece50082e74e7344a2fdd97b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>growAsNeeded</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a168d73bef361f7161555caca5099c459</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canCopyIn</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>ac8fa3f4830a1e010d901d677cd19dbf7</anchor>
      <arglist>(size_t num_bytes) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canCopyOut</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>ad6bdf492b2434081327dfffd8f9719b2</anchor>
      <arglist>(size_t num_bytes) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeof</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a1c3db33b662b78f049eff5830f76cb23</anchor>
      <arglist>(size_t num_items=1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::NullDatabase</name>
    <filename>classSAMRAI_1_1tbox_1_1NullDatabase.html</filename>
    <base>SAMRAI::tbox::Database</base>
    <member kind="function">
      <type></type>
      <name>NullDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>aa7e358b7557a2b7541d07d6bb4d49540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NullDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a7ba56ff8af89623628a38076d40c53ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>create</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a7bed12c58daebf57696ded5cd68b4839</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>open</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>ae3f0878bb3502327106aaa63b5fd0168</anchor>
      <arglist>(const std::string &amp;name, const bool read_write_mode=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>close</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a9760a9d6a212a7fb125deb8eab491fa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>keyExists</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>ae1ccd187dd66c19c6b76fa41817366e6</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getAllKeys</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a9a9a168fd74d389ec17a21d4cd3f0ec7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual enum DataType</type>
      <name>getArrayType</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a66d29a0ee130d3bb14c0edd8a9092c9b</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getArraySize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a8241d8d7a5f12f7f3f21165673c387c4</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>adc862c61aa6f66d74b8f48c3e6b7ccbc</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Database &gt;</type>
      <name>putDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a26b5b6104523fd92c0dfaacc0d20f752</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Database &gt;</type>
      <name>getDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a5f4224f8411be04332f50c79bd2fbc25</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a1d3e5247dd621262eeb06c4bd86aa4fa</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a7d9c444d050597b79cabb90be743aaf4</anchor>
      <arglist>(const std::string &amp;key, const bool *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; bool &gt;</type>
      <name>getBoolVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a15e820f49c23b767c2e4f6cad904c20d</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a3c67c60064799f145f7885f2fb8018cd</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a7f3bcf7a22ffeaa5fa1b17b2fb30ae7f</anchor>
      <arglist>(const std::string &amp;key, const DatabaseBox *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; DatabaseBox &gt;</type>
      <name>getDatabaseBoxVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a793274ecf2cca75fd81050b792e5a20e</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a8cbcfc8b165ee12b7cb5304fabdfa9dd</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>af578e23b62d115372a4d9ff74ff1500f</anchor>
      <arglist>(const std::string &amp;key, const char *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; char &gt;</type>
      <name>getCharVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a8dbe8cf5c30d030e5d733dfafb730472</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a590a57d3c26fd62cbba8262c007173da</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>ad917972f295832431e61712439e4452f</anchor>
      <arglist>(const std::string &amp;key, const dcomplex *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; dcomplex &gt;</type>
      <name>getComplexVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>abeaed301cec2eb7634e81e31da65e194</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>abb06f212487e2810598eee455f1f4165</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a3efd02abfc1343aabf1b65abd06140bf</anchor>
      <arglist>(const std::string &amp;key, const double *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>getDoubleVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a1b29d7ec24f3017a75ae6714014d7cfb</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a45165ec4bfca1987989f57467a68a6f9</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>ad7e103f144ab6020acb08f984c0d72a1</anchor>
      <arglist>(const std::string &amp;key, const float *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; float &gt;</type>
      <name>getFloatVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a036955540154e5fe506635d71fc44c61</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a425eb0bb7605caf807494d6abd62027a</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a6e9ce3feb65c4b09a7f71083b30caea1</anchor>
      <arglist>(const std::string &amp;key, const int *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; int &gt;</type>
      <name>getIntegerVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a798a85551ee5c476eee568e999b96492</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a80256cf0fdcc477ecaf1fc668d437628</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a620809e599d877534307afbe1ef74095</anchor>
      <arglist>(const std::string &amp;key, const std::string *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getStringVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>abd0efd6083f1c69d11ccfd35dcc0aab0</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a31fb133d0eace841067bcf1d7e6aa29b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a938df626e5f6f0628fa597285c2740a1</anchor>
      <arglist>(std::ostream &amp;os=pout)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::ParallelBuffer</name>
    <filename>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</filename>
    <member kind="function">
      <type></type>
      <name>ParallelBuffer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</anchorfile>
      <anchor>a319eeb8af9a593d0c627941aebde5d51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ParallelBuffer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</anchorfile>
      <anchor>a8ba909a1cc5570310e8cbb93c5000b64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActive</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</anchorfile>
      <anchor>ad3a599a54eeafc4df5541b4ac72d70c0</anchor>
      <arglist>(bool active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrefixString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</anchorfile>
      <anchor>afbdf4c2bbd494d1762fbe1ce8a69d9a5</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputStream1</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</anchorfile>
      <anchor>aa31ab3ec29552a4b0ea7897156eff52f</anchor>
      <arglist>(std::ostream *stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputStream2</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</anchorfile>
      <anchor>adb971e63d29d175b2b72b108a3d96212</anchor>
      <arglist>(std::ostream *stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>outputString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</anchorfile>
      <anchor>aaad06b2a0b6cdacb256852192a3d8063</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>outputString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</anchorfile>
      <anchor>a30251cc1ebb6eaa7d978f317ebfc3c45</anchor>
      <arglist>(const std::string &amp;text, const int length)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sync</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</anchorfile>
      <anchor>a22fa2b92d22a8e2f0e3b5bdfab86ead3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>overflow</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</anchorfile>
      <anchor>a9a1b3b6001ed6b39e91b5a73738f80ec</anchor>
      <arglist>(int ch)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Parser</name>
    <filename>classSAMRAI_1_1tbox_1_1Parser.html</filename>
    <member kind="function">
      <type></type>
      <name>Parser</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a0fd0db610d678cb354319af51182bec2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Parser</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a5a71330151b3f8d04cd86647fc33befb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parse</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a14ec4027121db35c910dbdd26272a3ee</anchor>
      <arglist>(const std::string &amp;filename, FILE *fstream, const boost::shared_ptr&lt; Database &gt; &amp;database)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberErrors</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>af6ab647c6aa0c300a376a5d4dc819268</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberWarnings</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a49a06fc7031bddbd7f9158b8d6553973</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; Database &gt; &amp;</type>
      <name>getScope</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>af9cda5f2b73927baf77c232648062fee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enterScope</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>ae36425032dc5bdb88bf109a6655b8fb8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leaveScope</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a24676b0235a02dd1ad7d689af0ce914d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; Database &gt;</type>
      <name>getDatabaseWithKey</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a85b6f68ce967efa7014eb6939c631bc5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pushIncludeFile</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>acbce5f4939d4ede6cb7a5ffc66910845</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popIncludeFile</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>ab62e0d8df5a864dd9a1960a89b9f8400</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>ad507856f04397036b0eebff0db3462c1</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>warning</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a2d810caf19694eeef3566dfdd35d322d</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLine</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a4e6deb88cd02af2d5ae16e04b97e5dff</anchor>
      <arglist>(const std::string &amp;line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceLine</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>afe0ab7e5c39e1746b30c223b1aee52fc</anchor>
      <arglist>(const int nline=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceCursor</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a48a7eb1ed5dcc9f10dba8a9ffae67780</anchor>
      <arglist>(const std::string &amp;token)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>yyinput</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>add863ed501c824ea670216c395ed8b17</anchor>
      <arglist>(char *buffer, const int max_size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Parser *</type>
      <name>getParser</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>ac0d0ae0dcbc587e520944cfd9ec7a454</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::PIO</name>
    <filename>structSAMRAI_1_1tbox_1_1PIO.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1PIO.html</anchorfile>
      <anchor>a81d467864565cd45a096dd86c10e9c9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>finalize</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1PIO.html</anchorfile>
      <anchor>a6fa6e3fb37ff68570da13bf27d1c080d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>logOnlyNodeZero</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1PIO.html</anchorfile>
      <anchor>ac791469751d21d5ee5dc8d1bce6e8140</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>logAllNodes</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1PIO.html</anchorfile>
      <anchor>a9cb74c7170ef2fe78d6bce593cdbc73c</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>suspendLogging</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1PIO.html</anchorfile>
      <anchor>a24a3d7a7e17339b064dc3a11a6af6761</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resumeLogging</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1PIO.html</anchorfile>
      <anchor>a4a5b817e4f7b80eb952f8e1d9f478847</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::RankGroup</name>
    <filename>classSAMRAI_1_1tbox_1_1RankGroup.html</filename>
    <member kind="function">
      <type></type>
      <name>RankGroup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankGroup.html</anchorfile>
      <anchor>a11a4a35dbc745b79932bf18cc01f8f48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RankGroup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankGroup.html</anchorfile>
      <anchor>aceda5bfd0ab3362aabef2974a4230fff</anchor>
      <arglist>(const SAMRAI_MPI &amp;d_samrai_mpi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RankGroup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankGroup.html</anchorfile>
      <anchor>ac97497fbae33781898a7983f7d133622</anchor>
      <arglist>(const int min, const int max, const SAMRAI_MPI &amp;samrai_mpi=SAMRAI_MPI(SAMRAI_MPI::getSAMRAIWorld()))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RankGroup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankGroup.html</anchorfile>
      <anchor>a1a535c4b5176edf620cf503a78bc9cdc</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;rank_group, const SAMRAI_MPI &amp;samrai_mpi=SAMRAI_MPI(SAMRAI_MPI::getSAMRAIWorld()))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RankGroup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankGroup.html</anchorfile>
      <anchor>a14c93cfc680a9182721673833897ee40</anchor>
      <arglist>(const RankGroup &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RankGroup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankGroup.html</anchorfile>
      <anchor>a927b43ea8c1a066ea28b2bfda5547dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RankGroup &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankGroup.html</anchorfile>
      <anchor>a2e78d8243193777940923662e1de0634</anchor>
      <arglist>(const RankGroup &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsAllRanks</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankGroup.html</anchorfile>
      <anchor>a3b00366ae820a95918e27483ddae43ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinMax</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankGroup.html</anchorfile>
      <anchor>a246177550d57fd1e9869619dc9b40518</anchor>
      <arglist>(const int min, const int max)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMember</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankGroup.html</anchorfile>
      <anchor>a2bca3a749cc1c9df29ee1289507620c6</anchor>
      <arglist>(const int rank) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankGroup.html</anchorfile>
      <anchor>a0d6aa83ebd05793479f26584d1626a60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMappedRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankGroup.html</anchorfile>
      <anchor>af17e9d46bd8337baed912ee611f46a07</anchor>
      <arglist>(const int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMapIndex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankGroup.html</anchorfile>
      <anchor>ac0e8c519242e893dbbeb7d9e6d1f4c24</anchor>
      <arglist>(const int rank) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::RankTreeStrategy</name>
    <filename>classSAMRAI_1_1tbox_1_1RankTreeStrategy.html</filename>
    <member kind="function">
      <type></type>
      <name>RankTreeStrategy</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankTreeStrategy.html</anchorfile>
      <anchor>aefaad55fc49e7d261415fc605077ffe7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RankTreeStrategy</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankTreeStrategy.html</anchorfile>
      <anchor>a52884c2237c18f96529e429b99592777</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setupTree</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankTreeStrategy.html</anchorfile>
      <anchor>aa2161917d2cd09f5ab4dccc3f5a165c8</anchor>
      <arglist>(const RankGroup &amp;rank_group, int my_rank)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankTreeStrategy.html</anchorfile>
      <anchor>ae3e2cfba275c0a73c2219d7bfe88de7d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getParentRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankTreeStrategy.html</anchorfile>
      <anchor>a9f7ac8101a51275a6eccdb132842dbc2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getChildRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankTreeStrategy.html</anchorfile>
      <anchor>aa5122f4dd766f569a11817328e5bb3ab</anchor>
      <arglist>(unsigned int child_number) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getNumberOfChildren</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankTreeStrategy.html</anchorfile>
      <anchor>aee6f62066cd27f2d87157b7a9e74fe17</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getChildNumber</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankTreeStrategy.html</anchorfile>
      <anchor>a4591138e697629869823ab67b2037a32</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getDegree</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankTreeStrategy.html</anchorfile>
      <anchor>a033d2c9053d66dea9750ed383ec0264d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getGenerationNumber</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankTreeStrategy.html</anchorfile>
      <anchor>a60a88906309c55e6038130469971b4db</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getRootRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankTreeStrategy.html</anchorfile>
      <anchor>a8d8585f2c1a56755db2138a54d16e588</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRoot</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankTreeStrategy.html</anchorfile>
      <anchor>adc417cc3b5e2e8ee40cbf8e362dcb20c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getInvalidRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankTreeStrategy.html</anchorfile>
      <anchor>a0d2f9596a80a4fe843aae6b55ccddff0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>getInvalidChildNumber</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RankTreeStrategy.html</anchorfile>
      <anchor>a6c796ce956dc775d96c8d1304192099d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::ReferenceCounter</name>
    <filename>classSAMRAI_1_1tbox_1_1ReferenceCounter.html</filename>
    <member kind="function">
      <type></type>
      <name>ReferenceCounter</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ReferenceCounter.html</anchorfile>
      <anchor>a6633699ca4ecf6f69363f217408cb300</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReferenceCounter</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ReferenceCounter.html</anchorfile>
      <anchor>a056eb13391c435e5360f67e60a63d941</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteReference</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ReferenceCounter.html</anchorfile>
      <anchor>a49cb76fb167d25facf4f0fa2559366bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addReference</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ReferenceCounter.html</anchorfile>
      <anchor>acf7b12bfeb6603bbb6714365f3f7db27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ReferenceCounter.html</anchorfile>
      <anchor>a76a8752e9972a98114191ded4ccc1c5a</anchor>
      <arglist>(size_t bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ReferenceCounter.html</anchorfile>
      <anchor>aa07aeeef4425b0d163dc2de9098436a1</anchor>
      <arglist>(void *what)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isFinalized</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ReferenceCounter.html</anchorfile>
      <anchor>a9610556bb0427733e7c26cb01a351d33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::RestartManager</name>
    <filename>classSAMRAI_1_1tbox_1_1RestartManager.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isFromRestart</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>a741f257c0dc9304e3ed4569b6fd24c4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>openRestartFile</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>a96e6072d6268364d028c30c1baf99e7c</anchor>
      <arglist>(const std::string &amp;root_dirname, const int restore_num, const int num_nodes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeRestartFile</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>a85675a50c178d4f58ec2ffdb7c7f1c83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; Database &gt;</type>
      <name>getRootDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>a54381df0e418e183c13ccfe333b94bed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRootDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>ae7a537737b5a58e06d15689f7e760a6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRootDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>a18cbcf3a8b5afe94ae26acae15b53f6e</anchor>
      <arglist>(const boost::shared_ptr&lt; Database &gt; &amp;database)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDatabaseFactory</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>aab56be4aae3bed60aaa7c6acc1e40d74</anchor>
      <arglist>(const boost::shared_ptr&lt; DatabaseFactory &gt; &amp;database_factory)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDatabaseFactory</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>a24c03c97c77359545572dfc2c21ea909</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerRestartItem</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>aee57f0360c364b8a01a778f528f900d8</anchor>
      <arglist>(const std::string &amp;name, Serializable *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterRestartItem</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>abe839edbca64abcadfaf8efc801e9eea</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearRestartItems</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>aefdd705a32e88f2978959cca9dbabc59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRestartFile</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>a18b9f749ce86494e23cc39bd6c0679b6</anchor>
      <arglist>(const std::string &amp;root_dirname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRestartFile</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>a63085cca4649f885c64fa7e8afc4ed7c</anchor>
      <arglist>(const std::string &amp;root_dirname, const int restore_num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRestartToDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>a103ea11b10ad54fa5a02b63f588169d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RestartManager *</type>
      <name>getManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>afa6eb93c67cd7e00530970a3e1a51057</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RestartManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>aeb5c1dfea5581c61417542ce311e58d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~RestartManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>a30df19831829f1d75988476ac3fadfd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerSingletonSubclassInstance</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>a055dc8cf053a1bf6212094166dded0bb</anchor>
      <arglist>(RestartManager *subclass_instance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::SAMRAI_MPI</name>
    <filename>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</filename>
    <class kind="struct">SAMRAI::tbox::SAMRAI_MPI::Status</class>
    <member kind="typedef">
      <type>int</type>
      <name>Comm</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a6bb237e4bb9b5d727560a64499eedacd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Datatype</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>af6e8ad0dac5019295dfadb295a9c0102</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Group</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a2a66faec83f416743eee669e9e8958d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Op</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>adfba73a14b61a09fd9622305c5cd6b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Request</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>ac4f0d990b03eadfa60b081861dfa3748</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SAMRAI_MPI</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>ae54534501d31d6925d3d98d954308fac</anchor>
      <arglist>(const Comm &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SAMRAI_MPI</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a1865f51bf3e9788f2d952ca5b395954d</anchor>
      <arglist>(const SAMRAI_MPI &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>afe3374776cd69674109f34cd3e48d99c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a04f3bf59dadf232bc2f32f212175bbb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Comm &amp;</type>
      <name>getCommunicator</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a0bd0e07f767c5a8f5d9fbb94b445ed59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommunicator</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a131948b167800c4119335ec0087d1e33</anchor>
      <arglist>(const Comm &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dupCommunicator</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a4aa9472f69b11657f11b3a73f7269e93</anchor>
      <arglist>(const SAMRAI_MPI &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeCommunicator</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>afe5bfe97b028c8ab1d5ee2de41d7db6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compareCommunicator</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a2cd253b48f5cc0d3286870a5795fadb8</anchor>
      <arglist>(const SAMRAI_MPI &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNullCommunicator</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a071c8af66fca24cf3c730fef66ee812f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCongruentWith</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a0f522973bf54f0495ebd56ccd2a46da8</anchor>
      <arglist>(const SAMRAI_MPI &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>SAMRAI_MPI &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>aec723c3581a816b29b7e28b619d13ea9</anchor>
      <arglist>(const SAMRAI_MPI &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a669557152e267f7800c18f8f828bc06c</anchor>
      <arglist>(const SAMRAI_MPI &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a24e94d74b12f13f4abe79bc0cb752f75</anchor>
      <arglist>(const SAMRAI_MPI &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Allgather</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>aca250407b1ed778072261a8f80a71568</anchor>
      <arglist>(void *sendbuf, int sendcount, Datatype sendtype, void *recvbuf, int recvcount, Datatype recvtype) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Allgatherv</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a7581b35582bdb693d5d93a60714d5d1e</anchor>
      <arglist>(void *sendbuf, int sendcvount, Datatype sendtype, void *recvbuf, int *recvcounts, int *displs, Datatype recvtype) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Allreduce</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>ae1a3f16fd59213b7f5b2ba9724fe8df0</anchor>
      <arglist>(void *sendbuf, void *recvbuf, int count, Datatype datatype, Op op) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Attr_get</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a4ce96d21ae4a01a5f45a4bd93b6eb2bc</anchor>
      <arglist>(int keyval, void *attribute_val, int *flag) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Barrier</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a60a2385cc25bbdba270fba4660763862</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Bcast</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a31452f98c8c83619fda1df95c32629e2</anchor>
      <arglist>(void *buffer, int count, Datatype datatype, int root) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Comm_dup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>aaf8eb1d9a286b912a7caa9af7132a0d8</anchor>
      <arglist>(Comm *newcomm) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Comm_rank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a171a66e8f09216d6bbfd129cf2b34100</anchor>
      <arglist>(int *rank) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Comm_size</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a62a5bffcfe9e440f4f94d1f35bd8d338</anchor>
      <arglist>(int *size) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Gather</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a238f5b5a1d630a62abb447a1c920afc5</anchor>
      <arglist>(void *sendbuf, int sendcount, Datatype sendtype, void *recvbuf, int recvcount, Datatype recvtype, int root) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Gatherv</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a4696a2fd6ffda35c6e7fde008d0c6f3a</anchor>
      <arglist>(void *sendbuf, int sendcount, Datatype sendtype, void *recvbuf, int *recvcounts, int *displs, Datatype recvtype, int root) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Iprobe</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a2f14764dba70acdede5994789cf7d4cb</anchor>
      <arglist>(int source, int tag, int *flag, Status *status) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Isend</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a4da0bad8d8f972fff48b9c1c5d28cdbf</anchor>
      <arglist>(void *buf, int count, Datatype datatype, int dest, int tag, Request *req) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Irecv</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a3d1d53f7d125188e4dc627eaad5c9641</anchor>
      <arglist>(void *buf, int count, Datatype datatype, int source, int tag, Request *request) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Probe</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>ab9a019ccbaef3e1cb5ff87216301839e</anchor>
      <arglist>(int source, int tag, Status *status) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Recv</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>aba6c3ee0c2ee48d2a11837731f2f56bc</anchor>
      <arglist>(void *buf, int count, Datatype datatype, int source, int tag, Status *status) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Reduce</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a14ab0f7aab2acfd03f466a9fb86eb882</anchor>
      <arglist>(void *sendbuf, void *recvbuf, int count, Datatype datatype, Op op, int root) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Send</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a508fc10f0a65cc3a9a07c21c77fac3c7</anchor>
      <arglist>(void *buf, int count, Datatype datatype, int dest, int tag) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Sendrecv</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a9f728c90ab4218cb313b023d259a0551</anchor>
      <arglist>(void *sendbuf, int sendcount, Datatype sendtype, int dest, int sendtag, void *recvbuf, int recvcount, Datatype recvtype, int source, int recvtag, Status *status) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Scan</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a376aaa01ee71f6d348a04d1e6800749f</anchor>
      <arglist>(void *sendbuf, void *recvbuf, int count, Datatype datatype, Op op) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AllReduce</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a1d99747d2f63379b2756f992cdb48b25</anchor>
      <arglist>(int *x, int count, Op op, int *ranks_of_extrema=0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AllReduce</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>aee33c0b6815f8e33c64fd946d5615d75</anchor>
      <arglist>(double *x, int count, Op op, int *ranks_of_extrema=0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>AllReduce</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>aef660cfbec378cf3bb438c8fa2447c26</anchor>
      <arglist>(float *x, int count, Op op, int *ranks_of_extrema=0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parallelPrefixSum</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a867cb8935f566c445e72758ad0cb256b</anchor>
      <arglist>(int *x, int count, int tag) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasReceivableMessage</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>ad79c0780e5f27bfa1f0b80b94a9ff169</anchor>
      <arglist>(Status *status=0, int source=MPI_ANY_SOURCE, int tag=MPI_ANY_TAG) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SAMRAI_MPI &amp;</type>
      <name>getSAMRAIWorld</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>ab77c546bbc19ae9bae5c6480fba8c53a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getInvalidRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>ad7877d51e7487be6b637c7d2c625d104</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setCallAbortInSerialInsteadOfExit</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a1873d7b28a2ef5275cbd28ff4eddd797</anchor>
      <arglist>(bool flag=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setCallAbortInParallelInsteadOfMPIAbort</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a6b0b109392c17b5794bf4d2cb5859820</anchor>
      <arglist>(bool flag=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>abort</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a388920599c5f34e7d80d6f635fc9ecc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>disableMPI</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>ac87e77678ffb3084bd6d9d063a497942</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>usingMPI</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>aeee87ad1f591a3bb3df7f5d5c902c0ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a65c7ef8be8aa31e3c9d615808edb65b0</anchor>
      <arglist>(int *argc, char **argv[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a1c71c4d9b8a4196c4d092df5af280342</anchor>
      <arglist>(Comm comm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initMPIDisabled</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a2b10180941041113ba25e3e94d693964</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>finalize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a5da2fc226c1f5b8635947e33c53376cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>Comm_rank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a946a15b40e8cb0d502d32b732a36c9cc</anchor>
      <arglist>(Comm comm, int *rank)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>Comm_size</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>aec1d84397a02bee13860a500e8abd7d5</anchor>
      <arglist>(Comm comm, int *size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>Comm_compare</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a7b4cb0e1b6bbd0e637a009caa583b140</anchor>
      <arglist>(Comm comm1, Comm comm2, int *result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>Comm_free</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a2b4269ef32c19dc4f2017d9d2bd6d1e2</anchor>
      <arglist>(Comm *comm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>Finalized</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>af0c5f4041b2ef31dba988093a84c2493</anchor>
      <arglist>(int *flag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>Get_count</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>ad1ad9b4b25e76bc475ce45a083362a61</anchor>
      <arglist>(Status *status, Datatype datatype, int *count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>Request_free</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>ad6727d11930a52cdb6859569228b93b9</anchor>
      <arglist>(Request *request)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>Test</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a4c6570252eed49e6c6658194d3bd5332</anchor>
      <arglist>(Request *request, int *flag, Status *status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>Test_cancelled</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>ad026235335a7e9ed3bc573bf05763eaf</anchor>
      <arglist>(Status *status, int *flag)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>Wait</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a487dbfad7d3215daa0e5db457d1461bd</anchor>
      <arglist>(Request *request, Status *status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>Waitall</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a5168006777db9c953a6523a90521f148</anchor>
      <arglist>(int count, Request *reqs, Status *stats)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>Waitany</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a26d2ccaca8089d944dd2df7c2f686eb6</anchor>
      <arglist>(int count, Request *array_of_requests, int *index, Status *status)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>Waitsome</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a1db8cf86def2fcf7112d68a173ffbbd3</anchor>
      <arglist>(int incount, Request *array_of_requests, int *outcount, int *array_of_indices, Status *array_of_statuses)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>Wtime</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>adb0d1bdfc1cad2aa72c0719b351815ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Comm</type>
      <name>commWorld</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>ab291dde884229c3558596c789100c58e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Comm</type>
      <name>commNull</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAI__MPI.html</anchorfile>
      <anchor>a67e6d6d61130222eed33f37725be9b8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::SAMRAI_MPI::Status</name>
    <filename>structSAMRAI_1_1tbox_1_1SAMRAI__MPI_1_1Status.html</filename>
    <member kind="function">
      <type></type>
      <name>Status</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1SAMRAI__MPI_1_1Status.html</anchorfile>
      <anchor>af26dc078718605ef030fff1206b69cd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MPI_SOURCE</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1SAMRAI__MPI_1_1Status.html</anchorfile>
      <anchor>a4247fac0debb26a8cf5d096a930d722a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MPI_TAG</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1SAMRAI__MPI_1_1Status.html</anchorfile>
      <anchor>af7676db4c98c6b41d12c812464de5763</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>MPI_ERROR</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1SAMRAI__MPI_1_1Status.html</anchorfile>
      <anchor>a0728387f2b8130ced97378fa834da1a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::SAMRAIManager</name>
    <filename>classSAMRAI_1_1tbox_1_1SAMRAIManager.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAIManager.html</anchorfile>
      <anchor>a6d8070b9f24743f62eff5d165befd442</anchor>
      <arglist>(bool initialize_IEEE_assertion_handlers=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>startup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAIManager.html</anchorfile>
      <anchor>a6635e038b7869576a4e167dc4f8c7690</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shutdown</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAIManager.html</anchorfile>
      <anchor>ae416c6e1c42e5ba8e8b50768e4f300c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>finalize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAIManager.html</anchorfile>
      <anchor>a8510b23f2e52ef6616230508fdd14839</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isInitialized</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAIManager.html</anchorfile>
      <anchor>ab2ed96ca3effd0d65b3a67188cc2c2b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isStarted</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAIManager.html</anchorfile>
      <anchor>a29b030578eeb7636edf035736d4f58d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getMaxNumberPatchDataEntries</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAIManager.html</anchorfile>
      <anchor>abe0508aa047c753638b92a100799f714</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setMaxNumberPatchDataEntries</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SAMRAIManager.html</anchorfile>
      <anchor>af2adc0365173a887e59c1692ea5eaeef</anchor>
      <arglist>(int maxnum)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Schedule</name>
    <filename>classSAMRAI_1_1tbox_1_1Schedule.html</filename>
    <member kind="function">
      <type></type>
      <name>Schedule</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>a1353a344b9e1e1e3edade2717776a126</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Schedule</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>a4efb3117bed2753d5ac5be10055e6129</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTransaction</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>a7c6f57175153bb6bbd30bf76da459bbb</anchor>
      <arglist>(const boost::shared_ptr&lt; Transaction &gt; &amp;transaction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendTransaction</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>a895d6453ec6ffe713997cf2e5a3d6c5b</anchor>
      <arglist>(const boost::shared_ptr&lt; Transaction &gt; &amp;transaction)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSendTransactions</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>a2112eb0705d7fe2cdc9c2a504fbd9ca8</anchor>
      <arglist>(const int rank) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumRecvTransactions</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>a75ed216dcb8631383873bf90cc4baea0</anchor>
      <arglist>(const int rank) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumLocalTransactions</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>a3d2a3def6431b2edcf2a4c84a60c23e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMPI</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>ad313d29fb6ec4c1f1884491fa017a95d</anchor>
      <arglist>(const SAMRAI_MPI &amp;mpi)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMPITag</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>ab67c346fce582d10a28fd5073d82f8c9</anchor>
      <arglist>(const int first_tag, const int second_tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFirstMessageLength</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>a2edea15acf3bca588cd24bcaf8d2bc07</anchor>
      <arglist>(int first_message_length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>communicate</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>aadba4f4bc0eedeaed575d993ab70a7c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginCommunication</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>a28a19e33d9ffef5262120c5bf47c0f4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalizeCommunication</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>ae9a57dba5ea24f10ad98c8212cd05e5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeterministicUnpackOrderingFlag</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>a31df5784f225a7dfd5f6f04cada0b6b2</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimerPrefix</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>ad52aed60d8028a69e41a43cadd9a1e1f</anchor>
      <arglist>(const std::string &amp;timer_prefix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>ab4f87397a998fdfcba9dcad660f2cef4</anchor>
      <arglist>(std::ostream &amp;stream) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allocatedCommunicationObjects</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>a7eaeb213074972b85bd0d9b0b9f49f70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>a8188191f702ea15e58dd5c22c538f715</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Serializable</name>
    <filename>classSAMRAI_1_1tbox_1_1Serializable.html</filename>
    <member kind="function">
      <type></type>
      <name>Serializable</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Serializable.html</anchorfile>
      <anchor>a708ebe95cea2fe32e3e99685b2adfe9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Serializable</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Serializable.html</anchorfile>
      <anchor>a87cda75115d70091f5634a9a684ed628</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Serializable.html</anchorfile>
      <anchor>ae7418a37f6d03a55a96dcb01a1eba71c</anchor>
      <arglist>(const boost::shared_ptr&lt; Database &gt; &amp;restart_db) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::SiloDatabase</name>
    <filename>classSAMRAI_1_1tbox_1_1SiloDatabase.html</filename>
    <base>SAMRAI::tbox::Database</base>
    <member kind="function">
      <type></type>
      <name>SiloDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a67e2cce7d49995d43740f509049a7a70</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SiloDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a62bde530ce4605dbc2e7caf6b55be634</anchor>
      <arglist>(const std::string &amp;name, DBfile *file, const std::string &amp;directory, const bool create_in_file)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SiloDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>ada9619292381723b6aa72d334de07c98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>keyExists</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>ad528c2b314fc9d9a7c24653c80c1bdab</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getAllKeys</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a9583a9aa63c5dec62b437b8cc5f18bea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual enum DataType</type>
      <name>getArrayType</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>af36d88869f6eba7ee927e3730f4fd4f1</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getArraySize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a957b05ed60b8f34d86bf5917d8482128</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>ac1f13eba93bac9156ecd3268c86abe5f</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Database &gt;</type>
      <name>putDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a1c4035672e7287648ceef5c9e32c8f56</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Database &gt;</type>
      <name>getDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a845d9d17fcb613832dd5b8a5ecd0dbe6</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a91c4fec859e00d92f0d171c7ea0a6021</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>ae6f434d7be8e37dbb06cedb1a56e61f6</anchor>
      <arglist>(const std::string &amp;key, const bool *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; bool &gt;</type>
      <name>getBoolVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a3d24180a2f032b4b3bb5f0dbcbcbfcba</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>abca45ea00c999fe27d2577b922b808cd</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>aaf5c8a70107e4815b66eb994aaa87fe2</anchor>
      <arglist>(const std::string &amp;key, const DatabaseBox *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; DatabaseBox &gt;</type>
      <name>getDatabaseBoxVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>ad5317518733360c3a19df98ede94e40b</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>ad4485f23dd21b4723fcbe0a8dd148754</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>acec0bba7a4be29308bb4a88d95657a31</anchor>
      <arglist>(const std::string &amp;key, const char *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; char &gt;</type>
      <name>getCharVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>ac38a2b86ffcd8edb59b650f88dccecac</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a5092a5a6ef386969b4e68bc8fd7ecc6c</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>ad3d58a698d8301667caa784f79333a53</anchor>
      <arglist>(const std::string &amp;key, const dcomplex *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; dcomplex &gt;</type>
      <name>getComplexVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a0b76bc2cfc8994379901a8d5229f80b0</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>ae4976e0e230a11df2c44a2eb1d85f04c</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a26567d308a8305aef9e3ee5f66f0ca1b</anchor>
      <arglist>(const std::string &amp;key, const double *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; double &gt;</type>
      <name>getDoubleVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a28dc9b846bd3f22f5be706feee7aedc4</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a411bc48236d75ef479ef25e9475be6f8</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a3275392070afee737a0dea0d9e77ccaf</anchor>
      <arglist>(const std::string &amp;key, const float *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; float &gt;</type>
      <name>getFloatVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a522bf45dee5e3ca8f7bba64519773941</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a6d2cb9ca2ff21e2fadafa62fac3a38c8</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a1be8189cd6c9a5dfbe1bbd00c15c0c48</anchor>
      <arglist>(const std::string &amp;key, const int *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; int &gt;</type>
      <name>getIntegerVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>aa785b633f5aee5a655593b9c1ba6a21c</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a7381d20337f960832ad28d2085ea473e</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>afc0e1ed3a9357badba737058e335f320</anchor>
      <arglist>(const std::string &amp;key, const std::string *const data, const size_t nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getStringVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a21c1573ce5e8c0ec232edc0edf541f28</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getName</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a33bbdf1dbf7d1dc85902e7d78dc9fdba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>af112c13e360a83e05281169239c1ec34</anchor>
      <arglist>(std::ostream &amp;os=pout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>create</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a9a7107d1eb74d0a75ca5ae2d09f72e7f</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>open</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>a63c82d0e0d1fb220180a795c7169ea2f</anchor>
      <arglist>(const std::string &amp;name, const bool read_write_mode=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>attachToFile</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>ae4361a12be8b746dd13d0ff1ad485f76</anchor>
      <arglist>(DBfile *file, const std::string &amp;directory)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>close</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>ae4aed3dcaffe2b036511f1e0acb90edb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDirectory</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabase.html</anchorfile>
      <anchor>adc307a35719adfe3769df7988f5df969</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::SiloDatabaseFactory</name>
    <filename>classSAMRAI_1_1tbox_1_1SiloDatabaseFactory.html</filename>
    <base>SAMRAI::tbox::DatabaseFactory</base>
    <member kind="function">
      <type></type>
      <name>SiloDatabaseFactory</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabaseFactory.html</anchorfile>
      <anchor>ac4ab384db67bc938de8177e2067f5ba0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SiloDatabaseFactory</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabaseFactory.html</anchorfile>
      <anchor>afbf56d0c55831db55cdf422665b02fd2</anchor>
      <arglist>(const SiloDatabaseFactory &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SiloDatabaseFactory &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabaseFactory.html</anchorfile>
      <anchor>ad4b1bdd60e8b68541d677d495a4acc2b</anchor>
      <arglist>(const SiloDatabaseFactory &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SiloDatabaseFactory</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabaseFactory.html</anchorfile>
      <anchor>a0aeb84a9bc7b52240a33847dee435508</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Database &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1SiloDatabaseFactory.html</anchorfile>
      <anchor>afaa559c267bdd198ca6ac88871eb72ea</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::StartupShutdownManager</name>
    <filename>classSAMRAI_1_1tbox_1_1StartupShutdownManager.html</filename>
    <class kind="class">SAMRAI::tbox::StartupShutdownManager::AbstractHandler</class>
    <class kind="class">SAMRAI::tbox::StartupShutdownManager::Handler</class>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHandler</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager.html</anchorfile>
      <anchor>aa7087a689fe5d575117eb00693087b2f</anchor>
      <arglist>(AbstractHandler *handler)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager.html</anchorfile>
      <anchor>a64d838f5ca7221dc8220abc90dcc80d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>startup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager.html</anchorfile>
      <anchor>af3f5897d64daf54101b900fb509af3e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shutdown</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager.html</anchorfile>
      <anchor>a7c293d89925231f6927d8c619db95222</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>finalize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager.html</anchorfile>
      <anchor>a77c92cb683699a2e211797023dc3755a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityArenaManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager.html</anchorfile>
      <anchor>adaa2ceca3db4845bff2caf6732d58ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityReferenceCounter</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager.html</anchorfile>
      <anchor>a9fbeb63e7b52e43ae4f6438c8cfe422c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityLogger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager.html</anchorfile>
      <anchor>a4c57de0302c22bce33ca36d445436b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityListElements</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager.html</anchorfile>
      <anchor>a01bb91a61cc445dfd1206c2ebb64807f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityList</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager.html</anchorfile>
      <anchor>a4ff59973393a96b3f0a16d296598a193</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityInputManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager.html</anchorfile>
      <anchor>ad0eefe341b7bf7039f6355e02ecb3e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityRestartManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager.html</anchorfile>
      <anchor>a2d58a6af334baf5ff62a1e77dedad74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityVariableDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager.html</anchorfile>
      <anchor>a3090bb630fcf994abc12ac4fc972d089</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityStatistician</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager.html</anchorfile>
      <anchor>aec24d3063807001ea94a1771699b9cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityBoundaryLookupTable</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager.html</anchorfile>
      <anchor>ac311937d7dc0148db0536a56b77899c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityHierarchyDataOpsManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager.html</anchorfile>
      <anchor>ad53147d1d2c78e5202f544d4cc2d6311</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityTimerManger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager.html</anchorfile>
      <anchor>a1e38514e2dd8e6a14696eaf8cd7b1bad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityTimers</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager.html</anchorfile>
      <anchor>aefea4cab8ddc26cfc3a8489c1023c5f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityVariables</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager.html</anchorfile>
      <anchor>aee6bdd5e3d93177447113158aa1c8b4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::StartupShutdownManager::AbstractHandler</name>
    <filename>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1AbstractHandler.html</filename>
    <member kind="function">
      <type></type>
      <name>AbstractHandler</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1AbstractHandler.html</anchorfile>
      <anchor>a4e3c80c4f82b3d5c5910692a82ad1445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractHandler</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1AbstractHandler.html</anchorfile>
      <anchor>a86a2f1fc95b09947b3a946d9b6360e9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1AbstractHandler.html</anchorfile>
      <anchor>ac9cfbf4bd3a2972531256035f0d834bb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1AbstractHandler.html</anchorfile>
      <anchor>a7019985c6e40ee6deef8ef508054a320</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1AbstractHandler.html</anchorfile>
      <anchor>aab19197f69a1e9a2ad5a37165f9fa374</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>finalize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1AbstractHandler.html</anchorfile>
      <anchor>ad1e7f56dd3b50ab6aa65b3ffa3355ba1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned char</type>
      <name>getPriority</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1AbstractHandler.html</anchorfile>
      <anchor>a152de0a2bc1f3ef09a463ba8454b8f74</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasInitialize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1AbstractHandler.html</anchorfile>
      <anchor>afc7d9bc4bb447d2cede7c7dc3357edc4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasStartup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1AbstractHandler.html</anchorfile>
      <anchor>ac3d5bff3774fbcc240aeb224d01d8423</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasShutdown</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1AbstractHandler.html</anchorfile>
      <anchor>a41eb0aafebe2a872ebc43bc4a2807dcf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>hasFinalize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1AbstractHandler.html</anchorfile>
      <anchor>ae73949223dbb2471515a5d9a1c08f821</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::StartupShutdownManager::Handler</name>
    <filename>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1Handler.html</filename>
    <base>SAMRAI::tbox::StartupShutdownManager::AbstractHandler</base>
    <member kind="function">
      <type></type>
      <name>Handler</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1Handler.html</anchorfile>
      <anchor>aacaf49dae5cc5f2e067281b3671d7127</anchor>
      <arglist>(void(*initialize)(), void(*startup)(), void(*shutdown)(), void(*finalize)(), unsigned char priority)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Handler</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1Handler.html</anchorfile>
      <anchor>aa971747eafc49dc4601830fc75cebcb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1Handler.html</anchorfile>
      <anchor>ae90540292b6f4a91ac7ddd7c14c795c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1Handler.html</anchorfile>
      <anchor>a14e5d9752e3d6fc4a0a9068a5f8a7a0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1Handler.html</anchorfile>
      <anchor>a9a8e964f7af5365d7b0ac273b5129085</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1Handler.html</anchorfile>
      <anchor>a8c71afe7c33d2b0aae8da090cc4a706c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>getPriority</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1Handler.html</anchorfile>
      <anchor>aae8bf086aa5409dcc3626d282cb739fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasInitialize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1Handler.html</anchorfile>
      <anchor>a8edc277eaae51471b67681103e19cba4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStartup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1Handler.html</anchorfile>
      <anchor>ad49f1083c2c57444757f28e7ad42b1ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasShutdown</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1Handler.html</anchorfile>
      <anchor>ac1b9ac9eaea5f6b235c77b4b5f8f1a1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFinalize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StartupShutdownManager_1_1Handler.html</anchorfile>
      <anchor>a629766299a3037b4f16807bd353087e7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Statistic</name>
    <filename>classSAMRAI_1_1tbox_1_1Statistic.html</filename>
    <class kind="struct">SAMRAI::tbox::Statistic::PatchStat</class>
    <class kind="struct">SAMRAI::tbox::Statistic::PatchStatRecord</class>
    <class kind="struct">SAMRAI::tbox::Statistic::ProcStat</class>
    <member kind="function">
      <type></type>
      <name>~Statistic</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a530ee8c7313ff97c6f4d991a4cefa95e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>abdcbb51d365eba0fded93e9e9cb183eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getType</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a38586f2a83a73eccf2b3442bbb5d8f27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInstanceId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>abe9d6843745f8183fcf6f03cf41445aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStatSequenceLength</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a3ecca211c1fe8659ffac724bb32b1498</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>aaa75797d2c0db7b1bf6dcaf6b10100d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordProcStat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>ab531dd70696f6d56916b2c2a71f264fe</anchor>
      <arglist>(double value, int seq_num=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordPatchStat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a40df31ced40d0a05df6deb66acdc3132</anchor>
      <arglist>(int patch_num, double value, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canEstimateDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a3c489fb098044945f9950fb8258ff5c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a2bafdbcf3b8fdfc296f9bb52aae3ba2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>ac5987455b321437de5afdc7dd41551dd</anchor>
      <arglist>(MessageStream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a4c830bf6fcddd12d3fbfe1288a661f8e</anchor>
      <arglist>(MessageStream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a93d91b17fd40975fd4ede2d5ac3dba2b</anchor>
      <arglist>(std::ostream &amp;stream, int precision=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>aefa527d67db736c3405f82afbd56b597</anchor>
      <arglist>(const boost::shared_ptr&lt; Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a230468d32ae4d2869bfbfe389653efc6</anchor>
      <arglist>(const boost::shared_ptr&lt; Database &gt; &amp;restart_db)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Statistic</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>aa6c775fa4a360fae0361de76ae3001a1</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;stat_type, int instance_id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; Statistic::ProcStat &gt; &amp;</type>
      <name>getProcStatSeqArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a589fb3cf709989d2d1fdea9e29fba5b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const std::vector&lt; Statistic::PatchStat &gt; &amp;</type>
      <name>getPatchStatSeqArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a30c3bbbb5c5431a1814b0ae3d5701f25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Statistician</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a0fbf7d2e506f52d934addc74ed59843a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::Statistic::PatchStat</name>
    <filename>structSAMRAI_1_1tbox_1_1Statistic_1_1PatchStat.html</filename>
    <member kind="variable">
      <type>std::list&lt; Statistic::PatchStatRecord &gt;</type>
      <name>patch_records</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Statistic_1_1PatchStat.html</anchorfile>
      <anchor>a4053c6405344af7d65ae95f2304e1d4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::Statistic::PatchStatRecord</name>
    <filename>structSAMRAI_1_1tbox_1_1Statistic_1_1PatchStatRecord.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>patch_id</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Statistic_1_1PatchStatRecord.html</anchorfile>
      <anchor>ab34f904203ec9cbdef376c13ef166533</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>value</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Statistic_1_1PatchStatRecord.html</anchorfile>
      <anchor>a0e0e45ef8b023475968ed951aab73990</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::Statistic::ProcStat</name>
    <filename>structSAMRAI_1_1tbox_1_1Statistic_1_1ProcStat.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>value</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Statistic_1_1ProcStat.html</anchorfile>
      <anchor>a9f8593b02710cc39508659bcbcbfd3c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Statistician</name>
    <filename>classSAMRAI_1_1tbox_1_1Statistician.html</filename>
    <member kind="function">
      <type>boost::shared_ptr&lt; Statistic &gt;</type>
      <name>getStatistic</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a8ab1026c10227db4e8925fc986c9c654</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;stat_type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkStatisticExists</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a26ba891dd8fda19d49572cc102909f1a</anchor>
      <arglist>(boost::shared_ptr&lt; Statistic &gt; &amp;stat, const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberProcessorStats</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>aa079e726fd03704fdb3f3661463b7992</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberPatchStats</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a95278f2dcd9935f2a5abe876adc7e077</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetProcessorStatistics</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a17249fa02518c6fc44c4cfea72dc1c98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetPatchStatistics</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a0122feba4be4a11f2dbedbaeef322be3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetStatistics</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>abed84653de61433f0dc2ab3baec6b574</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getProcStatId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>acb2c26a8b67c0a36692feb18206addd7</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalProcStatSequenceLength</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a4afa8f15ef37ba8a0afae6b422ed5ea5</anchor>
      <arglist>(int proc_stat_id)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalProcStatValue</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a91d34cc1567277c2f10b7d32427d106d</anchor>
      <arglist>(int proc_stat_id, int seq_num, int proc_num)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalProcStatSum</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a382fe68c14f41f09098fa93f2cb10d71</anchor>
      <arglist>(int proc_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalProcStatMax</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a6b33be61e56254b929534c1273e0e46b</anchor>
      <arglist>(int proc_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalProcStatMaxProcessorId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a4423dd6856439895a42ba7b7b5c5859f</anchor>
      <arglist>(int proc_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalProcStatMin</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a60723747d3e5641f60aa3cbae5039715</anchor>
      <arglist>(int proc_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalProcStatMinProcessorId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a37c7f9fe38dff1516492b12f60247a54</anchor>
      <arglist>(int proc_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGlobalProcStatData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>aec4dd853470ef8f7bc9d262a8466606e</anchor>
      <arglist>(int proc_stat_id, std::ostream &amp;os, int precision=12)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGlobalProcStatDataFormatted</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a78f93545da4f06595ccd52c9b0fb5989</anchor>
      <arglist>(int proc_stat_id, std::ostream &amp;os, int precision=12)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGlobalProcStatDataFormatted</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a583ef42cce98990778c7eb8ba0f79788</anchor>
      <arglist>(int proc_stat_id, int proc_id, std::ostream &amp;os, int precision=12)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPatchStatId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a50e279600ca918a45b81e04a317e6303</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalPatchStatSequenceLength</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>ad505f91dae8dcb3d26814e512429c257</anchor>
      <arglist>(int patch_stat_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalPatchStatNumberPatches</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a74c29762f5fa14536e89066ede4e667a</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalPatchStatPatchMapping</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a891957eebb793d3d90ba1f66fb571b0b</anchor>
      <arglist>(int patch_stat_id, int seq_num, int patch_num)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalPatchStatValue</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a36a4162bc9b92817364975f6c247a201</anchor>
      <arglist>(int patch_stat_id, int seq_num, int patch_num)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalPatchStatSum</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a80add5e239274d17073d7dc0d198850b</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalPatchStatMax</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>adc938602cf19f8a416b94dfb564547a7</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalPatchStatMaxPatchId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a286d7b7c05b750acbf8375dab1618704</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalPatchStatMin</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a099498351ceaf7e3a491b6660a07b291</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalPatchStatMinPatchId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>af58380c3079b7108c9111e739a70da85</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalPatchStatProcessorSum</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a4238f24ae364e3305696605111964025</anchor>
      <arglist>(int patch_stat_id, int processor_id, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalPatchStatProcessorSumMax</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a157c298c7256ce165384a85e97ac68e8</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalPatchStatProcessorSumMaxId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a70805c93005eb79246ee5bcb009da51a</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalPatchStatProcessorSumMin</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a91f894f94335fe09881e857e2f8c5e66</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalPatchStatProcessorSumMinId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a9c56bc43ce3470ff64034d2068b824d9</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalPatchStatNumberPatchesOnProc</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a7a0ee55c102e0497aa0cf17284640239</anchor>
      <arglist>(int patch_stat_id, int seq_num, int proc_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalPatchStatMaxPatchesPerProc</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a78fe7c1bf566e7ab2824a0ab2eb82cf3</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalPatchStatMaxPatchesPerProcId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>acc13acd3d66b1bd48653c8dddbbeea68</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalPatchStatMinPatchesPerProc</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a6638374a0e9036e2c971b7f4c635396b</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getGlobalPatchStatMinPatchesPerProcId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a28b5a91ae9542f201a6192ef2f0fb7f7</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGlobalPatchStatData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a1c5adb999f0b41e90bb1009e45bb391c</anchor>
      <arglist>(int patch_stat_id, std::ostream &amp;os, int precision=12)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGlobalPatchStatDataFormatted</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>ac1b28ed7bd40d6c90f8dc1d076e66c69</anchor>
      <arglist>(int patch_stat_id, std::ostream &amp;os, int precision=12)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>ad067f3815c2bfb3b7d180e0f784be24c</anchor>
      <arglist>(bool gather_individual_stats_on_proc_0=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printLocalStatData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a867f7da02846220f4e64e22096428f31</anchor>
      <arglist>(std::ostream &amp;os, int precision=12) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAllGlobalStatData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>accf7d2de3ad4ba12a6c986091b08ea53</anchor>
      <arglist>(std::ostream &amp;os, int precision=12)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAllSummedGlobalStatData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a740ed2c4d2c8603688f172df525abec0</anchor>
      <arglist>(std::ostream &amp;os, int precision=12)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAllSummedGlobalStatData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a486350c350172f6a3945bd62ed830e7d</anchor>
      <arglist>(const std::string &amp;filename, int precision=12)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSpreadSheetOutput</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>ae06046f17cce557900180619278bbae2</anchor>
      <arglist>(const std::string &amp;dirname=std::string(), int precision=12)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSpreadSheetOutputForProcessor</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a77258b6de8d5e7fdc22bd279b746ddc7</anchor>
      <arglist>(const int proc_id, const std::string &amp;dirname=std::string(), int precision=12)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Statistician *</type>
      <name>createStatistician</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a3932fd3c001b0fa74d092ece57cbca53</anchor>
      <arglist>(bool read_from_restart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Statistician *</type>
      <name>getStatistician</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>aec1a1a9224ca74a88dd3b52a4af02dee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Statistician</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a71ff84215624a52845884d7a64c347d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~Statistician</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a95a5901cd16ed27b0960277eec2d89e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerSingletonSubclassInstance</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a668201282a865fa2afe244a41944f172</anchor>
      <arglist>(Statistician *subclass_instance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkStatsForConsistency</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>aa1c0bb85a79e063acc6ab09b8a5bf539</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;total_patches)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkProcStatExists</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>ad3b306111eebce5cd556d75be868082a</anchor>
      <arglist>(boost::shared_ptr&lt; Statistic &gt; &amp;stat, const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkPatchStatExists</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a9ff5d0c9217b534d2b61501537b44f73</anchor>
      <arglist>(boost::shared_ptr&lt; Statistic &gt; &amp;stat, const std::string &amp;name) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>StatisticRestartDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a28427759aee8640b06292903cbb217d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::StatisticRestartDatabase</name>
    <filename>classSAMRAI_1_1tbox_1_1StatisticRestartDatabase.html</filename>
    <base protection="private">SAMRAI::tbox::Serializable</base>
    <member kind="function">
      <type></type>
      <name>StatisticRestartDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatisticRestartDatabase.html</anchorfile>
      <anchor>a26f95a2c6f866ab160fdec28de55c8aa</anchor>
      <arglist>(const std::string &amp;object_name, bool read_from_restart)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StatisticRestartDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatisticRestartDatabase.html</anchorfile>
      <anchor>a55dbb9bdcbcb50f185ca5665052a8dfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatisticRestartDatabase.html</anchorfile>
      <anchor>a919954c65f844beefc93c3a96b86ae95</anchor>
      <arglist>(const boost::shared_ptr&lt; Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatisticRestartDatabase.html</anchorfile>
      <anchor>a47f2a3f6eec2cde4babc174986c3ca59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getObjectName</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatisticRestartDatabase.html</anchorfile>
      <anchor>ae364ccbaa06cf6f2f4289bc2e1dee847</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Statistician</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatisticRestartDatabase.html</anchorfile>
      <anchor>a0fbf7d2e506f52d934addc74ed59843a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::StatTransaction</name>
    <filename>classSAMRAI_1_1tbox_1_1StatTransaction.html</filename>
    <base>SAMRAI::tbox::Transaction</base>
    <member kind="function">
      <type></type>
      <name>StatTransaction</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>a9c6028990b428fc164022cc1cd67921a</anchor>
      <arglist>(const boost::shared_ptr&lt; Statistic &gt; &amp;stat, int src_proc_id, int dst_proc_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StatTransaction</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>a68aa19dd75318404f84ba8e4f6e842fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>af23607c01575c558d3d5008b38a28c42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>computeIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>a82fe419339c5fe60967753e3acc7ae06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>computeOutgoingMessageSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>a1205b76017561dbe53e876e125568cca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSourceProcessor</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>a49d0fc77d0e7a324b6f89d6c5e113d1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDestinationProcessor</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>a9abf4555008b0eba8ce99507ef958a93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>abed1d41ff110023c2b2735074e9bf2ca</anchor>
      <arglist>(MessageStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>a76f71cdba1b7e4811327820e502dfcf6</anchor>
      <arglist>(MessageStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyLocalData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>a104b3d12722616c7f397fe77233c8e42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>ae283b82c7ec61d5686a797ee39ca452d</anchor>
      <arglist>(std::ostream &amp;stream) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Timer</name>
    <filename>classSAMRAI_1_1tbox_1_1Timer.html</filename>
    <member kind="function">
      <type></type>
      <name>~Timer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>aa105624cecf47b458662c083cdb927f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>aa84ec5f131120e8c66cce0f24da554fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a8979d341c408a5db77b1b18c5bc4b945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>af21f9c30263b402c8c32e6d375464b78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>barrierAndStart</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a8755b5dd89a23393882e6b3f99e45d9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>barrierAndStop</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a3094b6b4f6b3a4d47e1fb27d899f0c48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startExclusive</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>aa6c76275d3f2e899bd9062c4000c5bdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopExclusive</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>ab222b3b1088a1bf2e1a40f60c820193a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a83bad8aedc4726fa5fc4ed08a0c364db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalSystemTime</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>aad48077af6b735c972f0d08462e830ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalUserTime</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>ad0ac9455418f1d5b79f79cebe4afc231</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalWallclockTime</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a7b120458dbfb4ec07b86059d68ab3516</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxWallclockTime</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a6deb706154edf930bc9a9c84ea60506d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getExclusiveSystemTime</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a63cd748c27070b47074389e4ed272657</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getExclusiveUserTime</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>ad77ab2f5080af2d794a4dfba6362b25d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getExclusiveWallclockTime</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>ac438ef283e72968afae4939878780be8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a9934bb08f43cef1cc66526ccfc332aa4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRunning</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>ac6e08e04a1a6e9f236605362bd985a07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberAccesses</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a9bfe672faccde4232b8cf7d0c31ab20a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeLoadBalanceEfficiency</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>aec69f7c48e4e0ec553d679f5405a46b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeMaxWallclock</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a046ed4ff861e4c688f4360edc2162f15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToRestart</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a0565020fd4da1b9f393e67a985ce0787</anchor>
      <arglist>(const boost::shared_ptr&lt; Database &gt; &amp;restart_db) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>ae8aaec1f94a02a7691ee27cf8a4a2c5c</anchor>
      <arglist>(const boost::shared_ptr&lt; Database &gt; &amp;restart_db)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Timer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>ac05165d0816ae80ec2e5f8a496854509</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setActive</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a82ca0498257be83a22610bafd67f33a2</anchor>
      <arglist>(bool is_active)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addConcurrentTimer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a402713eea82ab8e3f96b6daf98d81e82</anchor>
      <arglist>(const Timer &amp;timer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isConcurrentTimer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a2e9169dbc12b02a1b5e984c9533244a8</anchor>
      <arglist>(const Timer &amp;timer) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TimerManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a8f762e12639d620eb0f10068e6ab6521</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::TimerManager</name>
    <filename>classSAMRAI_1_1tbox_1_1TimerManager.html</filename>
    <member kind="function">
      <type>boost::shared_ptr&lt; Timer &gt;</type>
      <name>getTimer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>a8eba70ea8db191508a05ab74a5d40499</anchor>
      <arglist>(const std::string &amp;name, bool ignore_timer_input=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkTimerExists</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>ac9f06a82cd1f1c4d60daa619d3169c0a</anchor>
      <arglist>(boost::shared_ptr&lt; Timer &gt; &amp;timer, const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkTimerRunning</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>a71e6405cbfb20299d5801f17311591f8</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetAllTimers</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>a740b4143b708dc20b7e445794fc73fec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>a9b711ebddd7664ecd5b5cd755cdf0549</anchor>
      <arglist>(std::ostream &amp;os=plog)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>abdedd79d65deba5ce9fa1fe3bd7092b1</anchor>
      <arglist>(const boost::shared_ptr&lt; Database &gt; &amp;input_db=boost::shared_ptr&lt; Database &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimerManager *</type>
      <name>getManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>a09bc9940c33add2ce09c59ff94db8552</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TimerManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>a6ab34d1541ac8924f2839adff8e59fd7</anchor>
      <arglist>(const boost::shared_ptr&lt; Database &gt; &amp;input_db=boost::shared_ptr&lt; Database &gt;())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~TimerManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>a02ce763decc45e88e19cb52f6b19a2b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerSingletonSubclassInstance</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>a8e8cb349c28777b5a21e0d506baab7ae</anchor>
      <arglist>(TimerManager *subclass_instance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>startTime</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>a381ae56ee109db37c4726b145218b90c</anchor>
      <arglist>(Timer *timer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>stopTime</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>aa2ff039ccdb2a57a5adbd2e3da30880e</anchor>
      <arglist>(Timer *timer)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Timer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>a50de43af5bed41f30c071d8cce0e81bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Tracer</name>
    <filename>classSAMRAI_1_1tbox_1_1Tracer.html</filename>
    <member kind="function">
      <type></type>
      <name>Tracer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Tracer.html</anchorfile>
      <anchor>a78d5aaa0545f1b85e81b02ff15ccc670</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Tracer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Tracer.html</anchorfile>
      <anchor>a3d0884589b37e98af63ddea9a03990ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTraceStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Tracer.html</anchorfile>
      <anchor>a8cd13e9d91a5b88666df07b1a08e1df4</anchor>
      <arglist>(std::ostream *stream)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Transaction</name>
    <filename>classSAMRAI_1_1tbox_1_1Transaction.html</filename>
    <member kind="function">
      <type></type>
      <name>Transaction</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>ab825619ba5aa557a4c77749b66cd7c9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Transaction</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>a1476ce754e2edbc353a6df8fc255c7f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>canEstimateIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>adca20c2cb6a54957e44ec8fc20c8ad9d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>computeIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>a65bdea0fe029b4acf297dd9018f915e3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>computeOutgoingMessageSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>a453a0246fabd461e0522443730231e9f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getSourceProcessor</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>aaadf7431dcb1ab5440fb50b204e6ee5b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getDestinationProcessor</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>ad82c2c913b10fe2738743fbf463a00a5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>a4eaeb70fe357f2e8b140c60830b44763</anchor>
      <arglist>(MessageStream &amp;stream)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>a42fa4956b5f4dc19e94869abf41a3d61</anchor>
      <arglist>(MessageStream &amp;stream)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copyLocalData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>a7ecaae6ad68ffa99e9decee64e2ceac9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>a106f8cdf226f242ac63be9fc98ed15f6</anchor>
      <arglist>(std::ostream &amp;stream) const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::Utilities</name>
    <filename>structSAMRAI_1_1tbox_1_1Utilities.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>recursiveMkdir</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>a28401d4b41dcf9a5b251dc87ce188c9a</anchor>
      <arglist>(const std::string &amp;path, mode_t mode=(S_IRUSR|S_IWUSR|S_IXUSR), bool only_node_zero_creates=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>renameFile</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>a2cd23803419712d5c7b1e57dff4322fd</anchor>
      <arglist>(const std::string &amp;old_filename, const std::string &amp;new_filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>intToString</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>aa224e6f9907d29865c0e9022f9ed9417</anchor>
      <arglist>(int num, int min_width=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>sizetToString</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>a288dad629283d05db5067a0527a82e16</anchor>
      <arglist>(size_t num, int min_width=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>nodeToString</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>aa7e7013b222fb5ce6ede708bf560786e</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>processorToString</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>a1b4a4fa57c22a42402b305b13db57ed5</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>patchToString</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>af41137318bf42230579b5230a4d0d20f</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>levelToString</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>a6f9c29532bf8fbdf2894382ce492988e</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>blockToString</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>af8e4a0f740f2ca8bf8ec940438c906d6</anchor>
      <arglist>(int num)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>abort</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>a9fc6248c50017e22fae5647e910b89cb</anchor>
      <arglist>(const std::string &amp;message, const std::string &amp;filename, const int line)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::xfer</name>
    <filename>namespaceSAMRAI_1_1xfer.html</filename>
    <class kind="class">SAMRAI::xfer::BoxGeometryVariableFillPattern</class>
    <class kind="class">SAMRAI::xfer::CoarsenAlgorithm</class>
    <class kind="class">SAMRAI::xfer::CoarsenClasses</class>
    <class kind="class">SAMRAI::xfer::CoarsenCopyTransaction</class>
    <class kind="class">SAMRAI::xfer::CoarsenPatchStrategy</class>
    <class kind="class">SAMRAI::xfer::CoarsenSchedule</class>
    <class kind="class">SAMRAI::xfer::CoarsenTransactionFactory</class>
    <class kind="class">SAMRAI::xfer::PatchInteriorVariableFillPattern</class>
    <class kind="class">SAMRAI::xfer::PatchLevelBorderAndInteriorFillPattern</class>
    <class kind="class">SAMRAI::xfer::PatchLevelBorderFillPattern</class>
    <class kind="class">SAMRAI::xfer::PatchLevelEnhancedFillPattern</class>
    <class kind="class">SAMRAI::xfer::PatchLevelFillPattern</class>
    <class kind="class">SAMRAI::xfer::PatchLevelFullFillPattern</class>
    <class kind="class">SAMRAI::xfer::PatchLevelInteriorFillPattern</class>
    <class kind="class">SAMRAI::xfer::RefineAlgorithm</class>
    <class kind="class">SAMRAI::xfer::RefineClasses</class>
    <class kind="class">SAMRAI::xfer::RefineCopyTransaction</class>
    <class kind="class">SAMRAI::xfer::RefinePatchStrategy</class>
    <class kind="class">SAMRAI::xfer::RefineSchedule</class>
    <class kind="class">SAMRAI::xfer::RefineScheduleConnectorWidthRequestor</class>
    <class kind="class">SAMRAI::xfer::RefineTimeTransaction</class>
    <class kind="class">SAMRAI::xfer::RefineTransactionFactory</class>
    <class kind="class">SAMRAI::xfer::SingularityPatchStrategy</class>
    <class kind="class">SAMRAI::xfer::StandardCoarsenTransactionFactory</class>
    <class kind="class">SAMRAI::xfer::StandardRefineTransactionFactory</class>
    <class kind="class">SAMRAI::xfer::VariableFillPattern</class>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::BoxGeometryVariableFillPattern</name>
    <filename>classSAMRAI_1_1xfer_1_1BoxGeometryVariableFillPattern.html</filename>
    <base>SAMRAI::xfer::VariableFillPattern</base>
    <member kind="function">
      <type></type>
      <name>BoxGeometryVariableFillPattern</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1BoxGeometryVariableFillPattern.html</anchorfile>
      <anchor>acda142f0760e678704a228ccdff73b81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoxGeometryVariableFillPattern</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1BoxGeometryVariableFillPattern.html</anchorfile>
      <anchor>ac89d4f391c33f441398174892abf5f10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1BoxGeometryVariableFillPattern.html</anchorfile>
      <anchor>a2f04284a478ef75ee69ad51f2144a5f3</anchor>
      <arglist>(const hier::BoxGeometry &amp;dst_geometry, const hier::BoxGeometry &amp;src_geometry, const hier::Box &amp;dst_patch_box, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>computeFillBoxesOverlap</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1BoxGeometryVariableFillPattern.html</anchorfile>
      <anchor>a3486b1a82c605d03ccd1e49c62be941c</anchor>
      <arglist>(const hier::BoxContainer &amp;fill_boxes, const hier::BoxContainer &amp;node_fill_boxes, const hier::Box &amp;patch_box, const hier::Box &amp;data_box, const hier::PatchDataFactory &amp;pdf) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1BoxGeometryVariableFillPattern.html</anchorfile>
      <anchor>a7aacb94b0ef9de875ef2b68c69a1b41d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPatternName</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1BoxGeometryVariableFillPattern.html</anchorfile>
      <anchor>aadd212cf7288e44b9c8c08c03a9d8104</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::CoarsenAlgorithm</name>
    <filename>classSAMRAI_1_1xfer_1_1CoarsenAlgorithm.html</filename>
    <member kind="function">
      <type></type>
      <name>CoarsenAlgorithm</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenAlgorithm.html</anchorfile>
      <anchor>a1f2bf5a8062089078adbc84d71eac28e</anchor>
      <arglist>(const tbox::Dimension &amp;dim, bool fill_coarse_data=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoarsenAlgorithm</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenAlgorithm.html</anchorfile>
      <anchor>a6b72980eecbc22b9066967080b695753</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCoarsen</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenAlgorithm.html</anchorfile>
      <anchor>acdc98202dce18f2826c2858945d6b8b2</anchor>
      <arglist>(const int dst, const int src, const boost::shared_ptr&lt; hier::CoarsenOperator &gt; &amp;opcoarsen, const hier::IntVector &amp;gcw_to_coarsen, const boost::shared_ptr&lt; VariableFillPattern &gt; &amp;var_fill_pattern=boost::shared_ptr&lt; VariableFillPattern &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCoarsen</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenAlgorithm.html</anchorfile>
      <anchor>a0a675a0a33d6297fa57ae1041865c453</anchor>
      <arglist>(const int dst, const int src, const boost::shared_ptr&lt; hier::CoarsenOperator &gt; &amp;opcoarsen, const boost::shared_ptr&lt; VariableFillPattern &gt; &amp;var_fill_pattern=boost::shared_ptr&lt; VariableFillPattern &gt;())</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; CoarsenSchedule &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenAlgorithm.html</anchorfile>
      <anchor>aa21bc9734a4c494be2746bd89b5517a6</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;crse_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;fine_level, CoarsenPatchStrategy *coarsen_strategy=0, const boost::shared_ptr&lt; CoarsenTransactionFactory &gt; &amp;transaction_factory=boost::shared_ptr&lt; CoarsenTransactionFactory &gt;())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkConsistency</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenAlgorithm.html</anchorfile>
      <anchor>a5ebe4533d536ed09da9311d44025e593</anchor>
      <arglist>(const boost::shared_ptr&lt; CoarsenSchedule &gt; &amp;schedule) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenAlgorithm.html</anchorfile>
      <anchor>a40da07dfe68d058346b8ae0de34ec748</anchor>
      <arglist>(const boost::shared_ptr&lt; CoarsenSchedule &gt; &amp;schedule) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenAlgorithm.html</anchorfile>
      <anchor>a0ed6def085c21285636d8cbb656cfd80</anchor>
      <arglist>(std::ostream &amp;stream) const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Dimension &amp;</type>
      <name>getDim</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenAlgorithm.html</anchorfile>
      <anchor>a33af771f305009040d36227754eb80b5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::CoarsenClasses</name>
    <filename>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</filename>
    <class kind="class">SAMRAI::xfer::CoarsenClasses::Data</class>
    <member kind="function">
      <type></type>
      <name>CoarsenClasses</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a8cb98320073f2aecb4aafa570917c858</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoarsenClasses</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a91b080671d3bb56b6abbf4389db8bb06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfEquivalenceClasses</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>addbcc951cafe5cccae8b57de9e214875</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfCoarsenItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a3c4c5ddb6dd1168a1e62f028d80f5f0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CoarsenClasses::Data &amp;</type>
      <name>getClassRepresentative</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>af43778e8995a6e07384bdd0c50b871c9</anchor>
      <arglist>(int equiv_class_index) const </arglist>
    </member>
    <member kind="function">
      <type>CoarsenClasses::Data &amp;</type>
      <name>getCoarsenItem</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>ac955f1f7743d6ace1dbe1f735d36c910</anchor>
      <arglist>(const int coarsen_item_array_id)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; int &gt;::iterator</type>
      <name>getIterator</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a8e15123579389be8bb3d62541c7a299a</anchor>
      <arglist>(int equiv_class_index)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; int &gt;::iterator</type>
      <name>getIteratorEnd</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>ada9ac637bb84230b53b9e19e37a2ad77</anchor>
      <arglist>(int equiv_class_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertEquivalenceClassItem</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a03c98574c33ae8f5e3a33a0c12ddf455</anchor>
      <arglist>(CoarsenClasses::Data &amp;data, const boost::shared_ptr&lt; hier::PatchDescriptor &gt; &amp;descriptor=boost::shared_ptr&lt; hier::PatchDescriptor &gt;())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>itemIsValid</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a06bd6db92c2e69226069d710e4027099</anchor>
      <arglist>(const CoarsenClasses::Data &amp;data_item, const boost::shared_ptr&lt; hier::PatchDescriptor &gt; &amp;descriptor=boost::shared_ptr&lt; hier::PatchDescriptor &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>classesMatch</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a27f1b0662bd5aa1f77013926a8685baf</anchor>
      <arglist>(const boost::shared_ptr&lt; CoarsenClasses &gt; &amp;test_classes, const boost::shared_ptr&lt; hier::PatchDescriptor &gt; &amp;descriptor=boost::shared_ptr&lt; hier::PatchDescriptor &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>itemsAreEquivalent</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a31134b35e98cc96ec1b0e6233df16854</anchor>
      <arglist>(const CoarsenClasses::Data &amp;data1, const CoarsenClasses::Data &amp;data2, const boost::shared_ptr&lt; hier::PatchDescriptor &gt; &amp;descriptor=boost::shared_ptr&lt; hier::PatchDescriptor &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoarsenItemArraySize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a075c5633fa1144383c9a267db053e2ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increaseCoarsenItemArraySize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a16c72b0a3704d5839a0ccf32fcf5f9ac</anchor>
      <arglist>(const int size, const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a63613d80a27afced5a7372126a22a40e</anchor>
      <arglist>(std::ostream &amp;stream) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCoarsenItem</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a1395d30964aa8a0e3914e1841bda69ad</anchor>
      <arglist>(std::ostream &amp;stream, const CoarsenClasses::Data &amp;data) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::CoarsenClasses::Data</name>
    <filename>classSAMRAI_1_1xfer_1_1CoarsenClasses_1_1Data.html</filename>
    <member kind="function">
      <type></type>
      <name>Data</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses_1_1Data.html</anchorfile>
      <anchor>a572cd6a065737afb43c7cfe0631d9980</anchor>
      <arglist>(tbox::Dimension dim)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_dst</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses_1_1Data.html</anchorfile>
      <anchor>a6a3a887bf530b3fdf7919693447104f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_src</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses_1_1Data.html</anchorfile>
      <anchor>a4d9f52cf01f602690d3bb54b2f9ac3e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>d_fine_bdry_reps_var</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses_1_1Data.html</anchorfile>
      <anchor>af483f6b5b55920d2deada7c7a59cdfaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hier::IntVector</type>
      <name>d_gcw_to_coarsen</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses_1_1Data.html</anchorfile>
      <anchor>a402b3b54df1b84d87a49c7734aeb1143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; hier::CoarsenOperator &gt;</type>
      <name>d_opcoarsen</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses_1_1Data.html</anchorfile>
      <anchor>aee73ee37c0a8bad19de10f35c453c6cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_class_index</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses_1_1Data.html</anchorfile>
      <anchor>aa93213f00b725de406e54fac66e3a5d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_tag</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses_1_1Data.html</anchorfile>
      <anchor>a345650686361a43e5e92580162047733</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; VariableFillPattern &gt;</type>
      <name>d_var_fill_pattern</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses_1_1Data.html</anchorfile>
      <anchor>a946fcad60eaba6182695b7a63cf631a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::CoarsenCopyTransaction</name>
    <filename>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</filename>
    <base>SAMRAI::tbox::Transaction</base>
    <member kind="function">
      <type></type>
      <name>CoarsenCopyTransaction</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>a4afaeed081cf4d859551e0868e43ef9a</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;dst_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;src_level, const boost::shared_ptr&lt; hier::BoxOverlap &gt; &amp;overlap, const hier::Box &amp;dst_box, const hier::Box &amp;src_box, const CoarsenClasses::Data **coarsen_data, int item_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CoarsenCopyTransaction</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>a029039978e22c2b82094395e980bfe83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>a514eb888d0781a518c824397b65f7ad9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>computeIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>acfacfe649793092aa5aeb781fb529c1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>computeOutgoingMessageSize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>a4d68db7ef36c31da9feec726d009e0a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSourceProcessor</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>a0316c1607ba50f67043e55b2afa02d71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDestinationProcessor</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>a9241020124ec4d717509586f2b1394c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>aa0bc4a6b46023860bcf0ceac2399d97a</anchor>
      <arglist>(tbox::MessageStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>a249bf144cc0cd47a72a4d10b051ced9f</anchor>
      <arglist>(tbox::MessageStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyLocalData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>ac2df347ef0f82c27b27ec75daba95860</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>aeab1ec35935f19d7e06eecf0f70fb31f</anchor>
      <arglist>(std::ostream &amp;stream) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::CoarsenPatchStrategy</name>
    <filename>classSAMRAI_1_1xfer_1_1CoarsenPatchStrategy.html</filename>
    <member kind="function">
      <type></type>
      <name>CoarsenPatchStrategy</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenPatchStrategy.html</anchorfile>
      <anchor>a02690e682468a78578d54faddb98ffce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CoarsenPatchStrategy</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenPatchStrategy.html</anchorfile>
      <anchor>af167813b447b2ff617bd649e597b0ee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual hier::IntVector</type>
      <name>getCoarsenOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenPatchStrategy.html</anchorfile>
      <anchor>ae3f4d912dcce2662117d89c38586aa74</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>preprocessCoarsen</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenPatchStrategy.html</anchorfile>
      <anchor>a659500fc458f4a76c611592fea297e27</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>postprocessCoarsen</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenPatchStrategy.html</anchorfile>
      <anchor>a8cfc7cf51182a3b1f057b347bbe56d80</anchor>
      <arglist>(hier::Patch &amp;coarse, const hier::Patch &amp;fine, const hier::Box &amp;coarse_box, const hier::IntVector &amp;ratio)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hier::IntVector</type>
      <name>getMaxCoarsenOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenPatchStrategy.html</anchorfile>
      <anchor>a615ac4296aab6acf729b96b841d639c5</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::CoarsenSchedule</name>
    <filename>classSAMRAI_1_1xfer_1_1CoarsenSchedule.html</filename>
    <member kind="function">
      <type></type>
      <name>CoarsenSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenSchedule.html</anchorfile>
      <anchor>a5a86b962d14d9212f5e87c3a2085a4e9</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;crse_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;fine_level, const boost::shared_ptr&lt; CoarsenClasses &gt; &amp;coarsen_classes, const boost::shared_ptr&lt; CoarsenTransactionFactory &gt; &amp;transaction_factory, CoarsenPatchStrategy *patch_strategy, bool fill_coarse_data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CoarsenSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenSchedule.html</anchorfile>
      <anchor>a71aa81747840dccaaab761adaca800c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromInput</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenSchedule.html</anchorfile>
      <anchor>a4c2e5d84dd5a2de29d3d47459a3dbe40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenSchedule.html</anchorfile>
      <anchor>aa1bd3a33f26ba03bede3da2d4ecdd60e</anchor>
      <arglist>(const boost::shared_ptr&lt; CoarsenClasses &gt; &amp;coarsen_classes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsenData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenSchedule.html</anchorfile>
      <anchor>ad663e099fa2e58911bf05f51a9990564</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; CoarsenClasses &gt; &amp;</type>
      <name>getEquivalenceClasses</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenSchedule.html</anchorfile>
      <anchor>a0d2176e16dfe12af1ff6afdb2edffadb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeterministicUnpackOrderingFlag</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenSchedule.html</anchorfile>
      <anchor>aad95e17cbf7470f114aeb185d0c6f9a7</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenSchedule.html</anchorfile>
      <anchor>aa77558acd00d2c15fc604870561e18df</anchor>
      <arglist>(std::ostream &amp;stream) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setScheduleGenerationMethod</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenSchedule.html</anchorfile>
      <anchor>a268ca209495df78bed6b91043cb9e1b5</anchor>
      <arglist>(const std::string &amp;method)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::CoarsenTransactionFactory</name>
    <filename>classSAMRAI_1_1xfer_1_1CoarsenTransactionFactory.html</filename>
    <member kind="function">
      <type></type>
      <name>CoarsenTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenTransactionFactory.html</anchorfile>
      <anchor>ad95c87efededdf0ba024a678418c5a1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CoarsenTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenTransactionFactory.html</anchorfile>
      <anchor>add18a30109e9ee490f1a8e1cb5e6a3aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenTransactionFactory.html</anchorfile>
      <anchor>a3a2205059e08de68bc2c4bd2ff671e99</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;dst_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;src_level, const boost::shared_ptr&lt; hier::BoxOverlap &gt; &amp;overlap, const hier::Box &amp;dst_box, const hier::Box &amp;src_box, const CoarsenClasses::Data **coarsen_data, int item_id) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::PatchInteriorVariableFillPattern</name>
    <filename>classSAMRAI_1_1xfer_1_1PatchInteriorVariableFillPattern.html</filename>
    <base>SAMRAI::xfer::VariableFillPattern</base>
    <member kind="function">
      <type></type>
      <name>PatchInteriorVariableFillPattern</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchInteriorVariableFillPattern.html</anchorfile>
      <anchor>a5dd5a6095c9ee20ac20096ba2eccf1c3</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchInteriorVariableFillPattern</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchInteriorVariableFillPattern.html</anchorfile>
      <anchor>a1af725fd617673aec5e3fb1d79fc74a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchInteriorVariableFillPattern.html</anchorfile>
      <anchor>a7784a4bb5b2c3b1b22adf64e72f44f51</anchor>
      <arglist>(const hier::BoxGeometry &amp;dst_geometry, const hier::BoxGeometry &amp;src_geometry, const hier::Box &amp;dst_patch_box, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>computeFillBoxesOverlap</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchInteriorVariableFillPattern.html</anchorfile>
      <anchor>adf3fb71da01a5434adddd1c5a085bb46</anchor>
      <arglist>(const hier::BoxContainer &amp;fill_boxes, const hier::BoxContainer &amp;unfilled_node_boxes, const hier::Box &amp;patch_box, const hier::Box &amp;data_box, const hier::PatchDataFactory &amp;pdf) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector &amp;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchInteriorVariableFillPattern.html</anchorfile>
      <anchor>a339d98264aa0e0c841c3846cbc33068f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPatternName</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchInteriorVariableFillPattern.html</anchorfile>
      <anchor>a312fe35388cf3e6704c2258d2295b1b3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::PatchLevelBorderAndInteriorFillPattern</name>
    <filename>classSAMRAI_1_1xfer_1_1PatchLevelBorderAndInteriorFillPattern.html</filename>
    <base>SAMRAI::xfer::PatchLevelFillPattern</base>
    <member kind="function">
      <type></type>
      <name>PatchLevelBorderAndInteriorFillPattern</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelBorderAndInteriorFillPattern.html</anchorfile>
      <anchor>a35e8965c0db0af4987f675b4a2b82e90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchLevelBorderAndInteriorFillPattern</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelBorderAndInteriorFillPattern.html</anchorfile>
      <anchor>a28f5c440d3c35a249aebc635d1819c7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeFillBoxesAndNeighborhoodSets</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelBorderAndInteriorFillPattern.html</anchorfile>
      <anchor>a7a432fcb989bd2f215bc84095209cad4</anchor>
      <arglist>(boost::shared_ptr&lt; hier::BoxLevel &gt; &amp;fill_box_level, boost::shared_ptr&lt; hier::Connector &gt; &amp;dst_to_fill, const hier::BoxLevel &amp;dst_box_level, const hier::IntVector &amp;fill_ghost_width, bool data_on_patch_border)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needsToCommunicateDestinationFillBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelBorderAndInteriorFillPattern.html</anchorfile>
      <anchor>a873cadf61bd2a60d66dc9d4aef846b15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeDestinationFillBoxesOnSourceProc</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelBorderAndInteriorFillPattern.html</anchorfile>
      <anchor>ab4a1da9a8377c016ebac13c946862e0e</anchor>
      <arglist>(FillSet &amp;dst_fill_boxes_on_src_proc, const hier::BoxLevel &amp;dst_box_level, const hier::Connector &amp;src_to_dst, const hier::IntVector &amp;fill_ghost_width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doesSourceLevelCommunicateToDestination</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelBorderAndInteriorFillPattern.html</anchorfile>
      <anchor>a7fbdc58e5aec9940d8435cb5f6a9262c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxFillBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelBorderAndInteriorFillPattern.html</anchorfile>
      <anchor>ae38787e2ca0d7ec29c87112edd5b67e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fillingCoarseFineGhosts</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelBorderAndInteriorFillPattern.html</anchorfile>
      <anchor>aef3d955998518403091eaf74b45e5492</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fillingEnhancedConnectivityOnly</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelBorderAndInteriorFillPattern.html</anchorfile>
      <anchor>a49fd3eccc6c7494f91a20283658facca</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::PatchLevelBorderFillPattern</name>
    <filename>classSAMRAI_1_1xfer_1_1PatchLevelBorderFillPattern.html</filename>
    <base>SAMRAI::xfer::PatchLevelFillPattern</base>
    <member kind="function">
      <type></type>
      <name>PatchLevelBorderFillPattern</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelBorderFillPattern.html</anchorfile>
      <anchor>a7c75cf2dcbcfc4964e3accc0c7ed5477</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchLevelBorderFillPattern</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelBorderFillPattern.html</anchorfile>
      <anchor>ae578a188f5dc759a2400d3269a45b4cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeFillBoxesAndNeighborhoodSets</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelBorderFillPattern.html</anchorfile>
      <anchor>a564ac12e864a366ee85127bba5911251</anchor>
      <arglist>(boost::shared_ptr&lt; hier::BoxLevel &gt; &amp;fill_box_level, boost::shared_ptr&lt; hier::Connector &gt; &amp;dst_to_fill, const hier::BoxLevel &amp;dst_box_level, const hier::IntVector &amp;fill_ghost_width, bool data_on_patch_border)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needsToCommunicateDestinationFillBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelBorderFillPattern.html</anchorfile>
      <anchor>a747552e9dfb2cd111bafb7871a45c557</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeDestinationFillBoxesOnSourceProc</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelBorderFillPattern.html</anchorfile>
      <anchor>a333ae7bb0d5e8b66f430ccf3f5c56c7b</anchor>
      <arglist>(FillSet &amp;dst_fill_boxes_on_src_proc, const hier::BoxLevel &amp;dst_box_level, const hier::Connector &amp;src_to_dst, const hier::IntVector &amp;fill_ghost_width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doesSourceLevelCommunicateToDestination</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelBorderFillPattern.html</anchorfile>
      <anchor>ac84ea461a9ce32e55b057fb0b029a31f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxFillBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelBorderFillPattern.html</anchorfile>
      <anchor>a1b1aaaead8ffadf87db8a30a59cbb7e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fillingCoarseFineGhosts</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelBorderFillPattern.html</anchorfile>
      <anchor>ab94768a98873c8eabe89bddc9cacfb15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fillingEnhancedConnectivityOnly</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelBorderFillPattern.html</anchorfile>
      <anchor>a8f0b708f9efa952e8238a43f024015fc</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::PatchLevelEnhancedFillPattern</name>
    <filename>classSAMRAI_1_1xfer_1_1PatchLevelEnhancedFillPattern.html</filename>
    <base>SAMRAI::xfer::PatchLevelFillPattern</base>
    <member kind="function">
      <type></type>
      <name>PatchLevelEnhancedFillPattern</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelEnhancedFillPattern.html</anchorfile>
      <anchor>a7fdfe17ef6c2355b7098211f4712fe40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchLevelEnhancedFillPattern</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelEnhancedFillPattern.html</anchorfile>
      <anchor>a91cec87e3bb22e04a3abd236e82ba28e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeFillBoxesAndNeighborhoodSets</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelEnhancedFillPattern.html</anchorfile>
      <anchor>a08eec9abac67c3db2dc32082f451f586</anchor>
      <arglist>(boost::shared_ptr&lt; hier::BoxLevel &gt; &amp;fill_box_level, boost::shared_ptr&lt; hier::Connector &gt; &amp;dst_to_fill, const hier::BoxLevel &amp;dst_box_level, const hier::IntVector &amp;fill_ghost_width, bool data_on_patch_border)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needsToCommunicateDestinationFillBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelEnhancedFillPattern.html</anchorfile>
      <anchor>a5f667e9c752de50022efd089a8db0bae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeDestinationFillBoxesOnSourceProc</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelEnhancedFillPattern.html</anchorfile>
      <anchor>ab3132ced686757737921fb10692e324b</anchor>
      <arglist>(FillSet &amp;dst_fill_boxes_on_src_proc, const hier::BoxLevel &amp;dst_box_level, const hier::Connector &amp;src_to_dst, const hier::IntVector &amp;fill_ghost_width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doesSourceLevelCommunicateToDestination</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelEnhancedFillPattern.html</anchorfile>
      <anchor>a129adbe530be985763214ed59c4e0a9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxFillBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelEnhancedFillPattern.html</anchorfile>
      <anchor>a8fc161406ecc5d5942dc812e394d5d11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fillingCoarseFineGhosts</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelEnhancedFillPattern.html</anchorfile>
      <anchor>a3b309e3368921de9c5be0f43cbf61f1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fillingEnhancedConnectivityOnly</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelEnhancedFillPattern.html</anchorfile>
      <anchor>a7e0b139e9d24a45989b062d33581af2c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::PatchLevelFillPattern</name>
    <filename>classSAMRAI_1_1xfer_1_1PatchLevelFillPattern.html</filename>
    <member kind="typedef">
      <type>hier::BoxNeighborhoodCollection</type>
      <name>FillSet</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelFillPattern.html</anchorfile>
      <anchor>a36181c3dfcc76d2a866cc16a140c5d23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PatchLevelFillPattern</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelFillPattern.html</anchorfile>
      <anchor>a631b7394b6f54cc45d97ef4d993b005c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchLevelFillPattern</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelFillPattern.html</anchorfile>
      <anchor>a54d7e214debe35d5ec778d8d94b8adc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeFillBoxesAndNeighborhoodSets</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelFillPattern.html</anchorfile>
      <anchor>a564b36b80384771fdb9c049adc90921a</anchor>
      <arglist>(boost::shared_ptr&lt; hier::BoxLevel &gt; &amp;fill_box_level, boost::shared_ptr&lt; hier::Connector &gt; &amp;dst_to_fill, const hier::BoxLevel &amp;dst_box_level, const hier::IntVector &amp;fill_ghost_width, bool data_on_patch_border)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>needsToCommunicateDestinationFillBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelFillPattern.html</anchorfile>
      <anchor>afd25d7f827656c9a0e334635ebb921d8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeDestinationFillBoxesOnSourceProc</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelFillPattern.html</anchorfile>
      <anchor>ab42f563612ca07ec31f4833f1bf091e9</anchor>
      <arglist>(FillSet &amp;dst_fill_boxes_on_src_proc, const hier::BoxLevel &amp;dst_box_level, const hier::Connector &amp;src_to_dst, const hier::IntVector &amp;fill_ghost_width)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>doesSourceLevelCommunicateToDestination</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelFillPattern.html</anchorfile>
      <anchor>a263fa3d51d663b1fbe85155cc04589f5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getMaxFillBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelFillPattern.html</anchorfile>
      <anchor>a77eb44d64117b0a5c9f8bcb81d8e70d2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>fillingCoarseFineGhosts</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelFillPattern.html</anchorfile>
      <anchor>ad5b76b86df28e03d8379ecc9adfb3096</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>fillingEnhancedConnectivityOnly</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelFillPattern.html</anchorfile>
      <anchor>aeb7c96c7a257be084a3d629d6b24fa7a</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::PatchLevelFullFillPattern</name>
    <filename>classSAMRAI_1_1xfer_1_1PatchLevelFullFillPattern.html</filename>
    <base>SAMRAI::xfer::PatchLevelFillPattern</base>
    <member kind="function">
      <type></type>
      <name>PatchLevelFullFillPattern</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelFullFillPattern.html</anchorfile>
      <anchor>adcb45614299f9093b1a42ca08adabb59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchLevelFullFillPattern</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelFullFillPattern.html</anchorfile>
      <anchor>af41799338d47d3beda12e090831cfa72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeFillBoxesAndNeighborhoodSets</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelFullFillPattern.html</anchorfile>
      <anchor>af7d7c83b4cad8d3290017c88f65d7572</anchor>
      <arglist>(boost::shared_ptr&lt; hier::BoxLevel &gt; &amp;fill_box_level, boost::shared_ptr&lt; hier::Connector &gt; &amp;dst_to_fill, const hier::BoxLevel &amp;dst_box_level, const hier::IntVector &amp;fill_ghost_width, bool data_on_patch_border)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needsToCommunicateDestinationFillBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelFullFillPattern.html</anchorfile>
      <anchor>a5a9928d027be8c93d8d542c288ec53c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeDestinationFillBoxesOnSourceProc</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelFullFillPattern.html</anchorfile>
      <anchor>af5cc316032ccafab9c08fd1c214f488a</anchor>
      <arglist>(FillSet &amp;dst_fill_boxes_on_src_proc, const hier::BoxLevel &amp;dst_box_level, const hier::Connector &amp;src_to_dst, const hier::IntVector &amp;fill_ghost_width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doesSourceLevelCommunicateToDestination</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelFullFillPattern.html</anchorfile>
      <anchor>a8269a52b3fd489b32481fd484216c9b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxFillBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelFullFillPattern.html</anchorfile>
      <anchor>a1c205fc7822d1ccd4ea0a5f51a6af2a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fillingCoarseFineGhosts</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelFullFillPattern.html</anchorfile>
      <anchor>aa1e8603177059aafe00bc25ab42164db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fillingEnhancedConnectivityOnly</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelFullFillPattern.html</anchorfile>
      <anchor>a30a214b10e6de720fd52dda41701e20a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::PatchLevelInteriorFillPattern</name>
    <filename>classSAMRAI_1_1xfer_1_1PatchLevelInteriorFillPattern.html</filename>
    <base>SAMRAI::xfer::PatchLevelFillPattern</base>
    <member kind="function">
      <type></type>
      <name>PatchLevelInteriorFillPattern</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelInteriorFillPattern.html</anchorfile>
      <anchor>a6d75a742db19b6be3256059a076b288f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchLevelInteriorFillPattern</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelInteriorFillPattern.html</anchorfile>
      <anchor>a660eed0ab5546f9aefa3ef7e334832e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeFillBoxesAndNeighborhoodSets</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelInteriorFillPattern.html</anchorfile>
      <anchor>ab6377111d53c023cfcf2216f8b381a16</anchor>
      <arglist>(boost::shared_ptr&lt; hier::BoxLevel &gt; &amp;fill_box_level, boost::shared_ptr&lt; hier::Connector &gt; &amp;dst_to_fill, const hier::BoxLevel &amp;dst_box_level, const hier::IntVector &amp;fill_ghost_width, bool data_on_patch_border)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needsToCommunicateDestinationFillBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelInteriorFillPattern.html</anchorfile>
      <anchor>a567479c8e2a1a3f4adf72797bd667e31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeDestinationFillBoxesOnSourceProc</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelInteriorFillPattern.html</anchorfile>
      <anchor>adea74c898b2d01edaccf36b7d9eba66d</anchor>
      <arglist>(FillSet &amp;dst_fill_boxes_on_src_proc, const hier::BoxLevel &amp;dst_box_level, const hier::Connector &amp;src_to_dst, const hier::IntVector &amp;fill_ghost_width)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doesSourceLevelCommunicateToDestination</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelInteriorFillPattern.html</anchorfile>
      <anchor>a2098431433f16e79f1cc755b92e5cd52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxFillBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelInteriorFillPattern.html</anchorfile>
      <anchor>a98f3c25e1d005f86397cee2012482782</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fillingCoarseFineGhosts</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelInteriorFillPattern.html</anchorfile>
      <anchor>a0cec01b5d2f8afcda00d8bbb199fdd51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fillingEnhancedConnectivityOnly</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1PatchLevelInteriorFillPattern.html</anchorfile>
      <anchor>a1b7ee171b0f85c9a35fa89e8c54240b3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::RefineAlgorithm</name>
    <filename>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</filename>
    <member kind="function">
      <type></type>
      <name>RefineAlgorithm</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>aaafec51a3a066ae0769bd955975d7c51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RefineAlgorithm</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a2b849c00d8ff26f2af7e0b925ec68acf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerRefine</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>afd3bb4415268e02f228e4a612e75b899</anchor>
      <arglist>(const int dst, const int src, const int scratch, const boost::shared_ptr&lt; hier::RefineOperator &gt; &amp;oprefine, const boost::shared_ptr&lt; VariableFillPattern &gt; &amp;var_fill_pattern=boost::shared_ptr&lt; VariableFillPattern &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerRefine</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a97a280e274c359276c54213a37289858</anchor>
      <arglist>(const int dst, const int src, const int src_told, const int src_tnew, const int scratch, const boost::shared_ptr&lt; hier::RefineOperator &gt; &amp;oprefine, const boost::shared_ptr&lt; hier::TimeInterpolateOperator &gt; &amp;optime, const boost::shared_ptr&lt; VariableFillPattern &gt; &amp;var_fill_pattern=boost::shared_ptr&lt; VariableFillPattern &gt;())</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RefineSchedule &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a325d85c3c9b231750ecfee55fed96920</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, RefinePatchStrategy *patch_strategy=0, const boost::shared_ptr&lt; RefineTransactionFactory &gt; &amp;transaction_factory=boost::shared_ptr&lt; RefineTransactionFactory &gt;())</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RefineSchedule &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a706e890f2fcfb824db279211cd8d7243</anchor>
      <arglist>(const boost::shared_ptr&lt; PatchLevelFillPattern &gt; &amp;fill_pattern, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, RefinePatchStrategy *patch_strategy=0, const boost::shared_ptr&lt; RefineTransactionFactory &gt; &amp;transaction_factory=boost::shared_ptr&lt; RefineTransactionFactory &gt;())</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RefineSchedule &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a3de1d5d9bcdbdc4f830c44683dc45c74</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;dst_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;src_level, RefinePatchStrategy *patch_strategy=0, bool use_time_interpolation=false, const boost::shared_ptr&lt; RefineTransactionFactory &gt; &amp;transaction_factory=boost::shared_ptr&lt; RefineTransactionFactory &gt;())</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RefineSchedule &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a7bf2840d2d67c3782b9fcc599a56082c</anchor>
      <arglist>(const boost::shared_ptr&lt; PatchLevelFillPattern &gt; &amp;fill_pattern, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;dst_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;src_level, RefinePatchStrategy *patch_strategy=0, bool use_time_interpolation=false, const boost::shared_ptr&lt; RefineTransactionFactory &gt; &amp;transaction_factory=boost::shared_ptr&lt; RefineTransactionFactory &gt;())</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RefineSchedule &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a62a8e6d712cd1dcbfd2881ff32443c3f</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, const int next_coarser_level, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, RefinePatchStrategy *patch_strategy=0, bool use_time_interpolation=false, const boost::shared_ptr&lt; RefineTransactionFactory &gt; &amp;transaction_factory=boost::shared_ptr&lt; RefineTransactionFactory &gt;())</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RefineSchedule &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>aae44301e0cdc8d514828327e743322c9</anchor>
      <arglist>(const boost::shared_ptr&lt; PatchLevelFillPattern &gt; &amp;fill_pattern, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, const int next_coarser_level, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, RefinePatchStrategy *patch_strategy=0, bool use_time_interpolation=false, const boost::shared_ptr&lt; RefineTransactionFactory &gt; &amp;transaction_factory=boost::shared_ptr&lt; RefineTransactionFactory &gt;())</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RefineSchedule &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a2e7de2ae777856d753608e91660cfe68</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;dst_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;src_level, const int next_coarser_level, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, RefinePatchStrategy *patch_strategy=0, bool use_time_interpolation=false, const boost::shared_ptr&lt; RefineTransactionFactory &gt; &amp;transaction_factory=boost::shared_ptr&lt; RefineTransactionFactory &gt;())</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RefineSchedule &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a314a6e480efebefe9d01220063928fc3</anchor>
      <arglist>(const boost::shared_ptr&lt; PatchLevelFillPattern &gt; &amp;fill_pattern, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;dst_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;src_level, const int next_coarser_level, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, RefinePatchStrategy *patch_strategy=0, bool use_time_interpolation=false, const boost::shared_ptr&lt; RefineTransactionFactory &gt; &amp;transaction_factory=boost::shared_ptr&lt; RefineTransactionFactory &gt;())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkConsistency</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>abd560f15ac217f0070c15f87501e7199</anchor>
      <arglist>(const boost::shared_ptr&lt; RefineSchedule &gt; &amp;schedule) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a1d18cbc13d62b71a2c2f1f88cff5b5c8</anchor>
      <arglist>(const boost::shared_ptr&lt; RefineSchedule &gt; &amp;schedule) const </arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; RefineClasses &gt; &amp;</type>
      <name>getEquivalenceClasses</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a56d8f1a9ad70d70f5c01d7ed3d941e5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEquivalenceClasses</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>aa8480311b130572ae2e07a144c4233db</anchor>
      <arglist>(const boost::shared_ptr&lt; RefineClasses &gt; &amp;refine_classes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>aa1366c45c1deb33db86d8a526fa0e5c8</anchor>
      <arglist>(std::ostream &amp;stream) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::RefineClasses</name>
    <filename>classSAMRAI_1_1xfer_1_1RefineClasses.html</filename>
    <class kind="struct">SAMRAI::xfer::RefineClasses::Data</class>
    <member kind="function">
      <type></type>
      <name>RefineClasses</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a45d86a83c2238e088da096e958aef9d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RefineClasses</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>ac830b30c32564b1b512707d55c5bc0a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfEquivalenceClasses</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a252eceff41d1f81fd90a77fca10f55fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfRefineItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a2e73e1b962706c2fe2d3935185c6fa91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RefineClasses::Data &amp;</type>
      <name>getClassRepresentative</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>ad24f3f10993b0a57f4f37804215e9cfa</anchor>
      <arglist>(int equiv_class_index) const </arglist>
    </member>
    <member kind="function">
      <type>RefineClasses::Data &amp;</type>
      <name>getRefineItem</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a05f1fcdfa3297f31a55026d29faccce3</anchor>
      <arglist>(const int refine_item_array_id)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; int &gt;::iterator</type>
      <name>getIterator</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a640146fd49562055eadb961a2ac50c31</anchor>
      <arglist>(int equiv_class_index)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; int &gt;::iterator</type>
      <name>getIteratorEnd</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a00f76d1601eb08a47eedcaa86bb4b6fe</anchor>
      <arglist>(int equiv_class_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertEquivalenceClassItem</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a752a11741a2710c223b7bec120acf52e</anchor>
      <arglist>(RefineClasses::Data &amp;data_item, const boost::shared_ptr&lt; hier::PatchDescriptor &gt; &amp;descriptor=boost::shared_ptr&lt; hier::PatchDescriptor &gt;())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>itemIsValid</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>aff07af1f57a6a9f96f4e913e86b0b589</anchor>
      <arglist>(const RefineClasses::Data &amp;data_item, const boost::shared_ptr&lt; hier::PatchDescriptor &gt; &amp;descriptor=boost::shared_ptr&lt; hier::PatchDescriptor &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>classesMatch</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a2256baa3b41a906b25735ca22107737a</anchor>
      <arglist>(const boost::shared_ptr&lt; RefineClasses &gt; &amp;test_classes, const boost::shared_ptr&lt; hier::PatchDescriptor &gt; &amp;descriptor=boost::shared_ptr&lt; hier::PatchDescriptor &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>itemsAreEquivalent</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a6879ff14dd1e9848b9186c1d598aca8d</anchor>
      <arglist>(const RefineClasses::Data &amp;data1, const RefineClasses::Data &amp;data2, const boost::shared_ptr&lt; hier::PatchDescriptor &gt; &amp;descriptor=boost::shared_ptr&lt; hier::PatchDescriptor &gt;()) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increaseRefineItemArraySize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a4bb51bca877be2c10f3dd5d34345a41b</anchor>
      <arglist>(const int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a5658ec60efd7a3738220dc8343921cfd</anchor>
      <arglist>(std::ostream &amp;stream) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printRefineItem</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a61568ae868aadd05949a64b73335fb68</anchor>
      <arglist>(std::ostream &amp;stream, const RefineClasses::Data &amp;data) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::xfer::RefineClasses::Data</name>
    <filename>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>d_dst</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>a36a5f9195fb7feb6894061f26ec11b0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_src</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>aed8f2a4749c4489ffc71ebbb75bc4ce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_src_told</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>a895225f6c3b1d5a712a28f94fd983f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_src_tnew</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>a1bca76ebe24c0a677a138cc8bdbb9b92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_scratch</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>a5a0044f549ceb1e9a762030d4e5d0cc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>d_fine_bdry_reps_var</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>a2283708cc7f6ebb66b1acceebf5b2eea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>d_time_interpolate</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>addcf3baaf6a8b0354682a0a40c7cdb22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; hier::RefineOperator &gt;</type>
      <name>d_oprefine</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>a1a646e93ea2ddc6b72ecbf910c2a61ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; hier::TimeInterpolateOperator &gt;</type>
      <name>d_optime</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>a7925bd96ec9be0e72906881a91b53ea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_class_index</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>a73be33f12e7e18cf8f94ea5cbae46949</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_tag</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>ae1aabb80b1419f72c145b8bed1c8e5eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; VariableFillPattern &gt;</type>
      <name>d_var_fill_pattern</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>a8f8454e85223e368686942e63cac7d52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::RefineCopyTransaction</name>
    <filename>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</filename>
    <base>SAMRAI::tbox::Transaction</base>
    <member kind="function">
      <type></type>
      <name>RefineCopyTransaction</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>a9961221f37c5a8ef6ff53e055c422143</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;dst_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;src_level, const boost::shared_ptr&lt; hier::BoxOverlap &gt; &amp;overlap, const hier::Box &amp;dst_box, const hier::Box &amp;src_box, const RefineClasses::Data **refine_data, int item_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RefineCopyTransaction</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>a7b772cb7b033d131d0c4a74a6076d7d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>a653a89cbbc0d549a6022165de962c6ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>computeIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>ac3812a95677f504dc5ce8d448a8e50dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>computeOutgoingMessageSize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>a9da57f6c6f57452c4db184819efa80fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSourceProcessor</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>abb6552c59bd61d50ebc83ea24a15ca40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDestinationProcessor</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>aa9d4df5990b28e353d59ef0e4cf3375c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>aaecc859700a4d88b9360c42998d9f1bc</anchor>
      <arglist>(tbox::MessageStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>a7a3e1f013b28d8c3d8091ed4ce274127</anchor>
      <arglist>(tbox::MessageStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyLocalData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>a4b66940094153878d2d8e1473a0bc9f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>a7b14b4e5ffca654e0039da309e31b625</anchor>
      <arglist>(std::ostream &amp;stream) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::RefinePatchStrategy</name>
    <filename>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</filename>
    <member kind="function">
      <type></type>
      <name>RefinePatchStrategy</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</anchorfile>
      <anchor>a0a18fdf4898f9efb3330e9e719877626</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RefinePatchStrategy</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</anchorfile>
      <anchor>a8bc1f8921366d5386a59f9769b289cc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPhysicalBoundaryConditions</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</anchorfile>
      <anchor>ae6da055f3a0e95bb34761e76eda0744e</anchor>
      <arglist>(hier::Patch &amp;patch, const double fill_time, const hier::IntVector &amp;ghost_width_to_fill)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual hier::IntVector</type>
      <name>getRefineOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</anchorfile>
      <anchor>aacad2fa260c38de8a88e23086338e888</anchor>
      <arglist>(const tbox::Dimension &amp;dim) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>preprocessRefine</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</anchorfile>
      <anchor>a57207582e1411612c159f0629963a793</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const hier::Box &amp;fine_box, const hier::IntVector &amp;ratio)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>postprocessRefine</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</anchorfile>
      <anchor>a5f9968834fafcaa4ef777893e1300205</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const hier::Box &amp;fine_box, const hier::IntVector &amp;ratio)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</anchorfile>
      <anchor>a3f787c292cf6e20d7a88dba5af5e155d</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const hier::BoxContainer &amp;fine_boxes, const hier::IntVector &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</anchorfile>
      <anchor>abc3cf88e0f74f62adfc8f5b9adca1aa5</anchor>
      <arglist>(hier::Patch &amp;fine, const hier::Patch &amp;coarse, const hier::BoxContainer &amp;fine_boxes, const hier::IntVector &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessRefineLevel</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</anchorfile>
      <anchor>ae7346f2c6bb9f1ae789877f36a94d9a3</anchor>
      <arglist>(hier::PatchLevel &amp;fine_level, const hier::PatchLevel &amp;coarse_level, const hier::Connector &amp;coarse_to_fine, const hier::Connector &amp;coarse_to_unfilled, const std::vector&lt; std::vector&lt; boost::shared_ptr&lt; hier::BoxOverlap &gt; &gt; &gt; &amp;overlaps, const RefineClasses::Data **refine_items)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessRefineLevel</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</anchorfile>
      <anchor>a99a46d18084e6631cbe3120d7fb31540</anchor>
      <arglist>(hier::PatchLevel &amp;fine_level, const hier::PatchLevel &amp;coarse_level, const hier::Connector &amp;coarse_to_fine, const hier::Connector &amp;coarse_to_unfilled)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hier::IntVector</type>
      <name>getMaxRefineOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</anchorfile>
      <anchor>a3347546b2699d877e3e77c30facd8c2a</anchor>
      <arglist>(const tbox::Dimension &amp;dim)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::RefineSchedule</name>
    <filename>classSAMRAI_1_1xfer_1_1RefineSchedule.html</filename>
    <member kind="function">
      <type></type>
      <name>RefineSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>a33c17b76b1ca3e709872dc8104fe8013</anchor>
      <arglist>(const boost::shared_ptr&lt; PatchLevelFillPattern &gt; &amp;dst_level_fill_pattern, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;dst_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;src_level, const boost::shared_ptr&lt; RefineClasses &gt; &amp;refine_classes, const boost::shared_ptr&lt; RefineTransactionFactory &gt; &amp;transaction_factory, RefinePatchStrategy *patch_strategy, bool use_time_interpolation=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RefineSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>a535d9f97821d0cb410ebcc6a90e8ffcb</anchor>
      <arglist>(const boost::shared_ptr&lt; PatchLevelFillPattern &gt; &amp;dst_level_fill_pattern, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;dst_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;src_level, int next_coarser_level, const boost::shared_ptr&lt; hier::PatchHierarchy &gt; &amp;hierarchy, const boost::shared_ptr&lt; RefineClasses &gt; &amp;refine_classes, const boost::shared_ptr&lt; RefineTransactionFactory &gt; &amp;transaction_factory, RefinePatchStrategy *patch_strategy, bool use_time_refinement=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RefineSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>a538729ccd7a5aeff75dde0aa18fae725</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>a9ba836fc9d2192bc38511cada20b9d84</anchor>
      <arglist>(const boost::shared_ptr&lt; RefineClasses &gt; &amp;refine_classes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>a9dc2ddd00c0bfe78e4e03db68ea8b4ca</anchor>
      <arglist>(double fill_time, bool do_physical_boundary_fill=true) const </arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; RefineClasses &gt; &amp;</type>
      <name>getEquivalenceClasses</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>a98fb046275b4195453ab0d1f787032da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeterministicUnpackOrderingFlag</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>a2a6f6489a81ea053e52a5bfa737bd538</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>aade71fc26d30b523133cbdca65af8c39</anchor>
      <arglist>(std::ostream &amp;stream) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::RefineScheduleConnectorWidthRequestor</name>
    <filename>classSAMRAI_1_1xfer_1_1RefineScheduleConnectorWidthRequestor.html</filename>
    <base>SAMRAI::hier::PatchHierarchy::ConnectorWidthRequestorStrategy</base>
    <member kind="function">
      <type></type>
      <name>RefineScheduleConnectorWidthRequestor</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineScheduleConnectorWidthRequestor.html</anchorfile>
      <anchor>a6a8b807fa845e20c59198013b75aaa88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeRequiredConnectorWidths</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineScheduleConnectorWidthRequestor.html</anchorfile>
      <anchor>a52839d3607e479163c917b301dc28a3a</anchor>
      <arglist>(std::vector&lt; hier::IntVector &gt; &amp;self_connector_widths, std::vector&lt; hier::IntVector &gt; &amp;fine_connector_widths, const hier::PatchHierarchy &amp;patch_hierarchy) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGhostCellWidthFactor</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineScheduleConnectorWidthRequestor.html</anchorfile>
      <anchor>a238453839d4d74ce961117e03dd799d0</anchor>
      <arglist>(int gcw_factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeRequiredFineConnectorWidthsForRecursiveRefinement</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineScheduleConnectorWidthRequestor.html</anchorfile>
      <anchor>a34675ba652a90dd13d1db8f4f76c1087</anchor>
      <arglist>(std::vector&lt; hier::IntVector &gt; &amp;fine_connector_widths, const hier::IntVector &amp;data_gcw_on_initial_dst_ln, const hier::IntVector &amp;max_stencil_width, const hier::PatchHierarchy &amp;patch_hierarchy, int initial_dst_ln) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::RefineTimeTransaction</name>
    <filename>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</filename>
    <base>SAMRAI::tbox::Transaction</base>
    <member kind="function">
      <type></type>
      <name>RefineTimeTransaction</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>a73eb4927afe18ef1600571f915d12e44</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;dst_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;src_level, const boost::shared_ptr&lt; hier::BoxOverlap &gt; &amp;overlap, const hier::Box &amp;dst_box, const hier::Box &amp;src_box, const hier::Box &amp;box, const RefineClasses::Data **refine_data, int item_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RefineTimeTransaction</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>a477814cb80ad7b05a90d2d8c7ecc95f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>ad1e8dc6622c6ee58d06cd4684b453d33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>computeIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>af9648f90c27a442c712a4efd9351fcda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>computeOutgoingMessageSize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>ac6cfc46a03057c8a3b071f34b476b5fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSourceProcessor</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>a04ec0c9a46c8d1d8604ebf73b17375b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDestinationProcessor</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>a5926e8eb9e5b3b8776eb329cf8e9e87d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>a1b91d490e6601b50fbae1965b964fbee</anchor>
      <arglist>(tbox::MessageStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>aab889c10344ecb52327bba2db0fbd545</anchor>
      <arglist>(tbox::MessageStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyLocalData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>a1f29df666510479f8088ea1d6cd15669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>a4cb978228f1ab2951763b875c75e7fc2</anchor>
      <arglist>(std::ostream &amp;stream) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTransactionTime</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>a3213960d01c9536fe286927bfac5725d</anchor>
      <arglist>(const double time)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::RefineTransactionFactory</name>
    <filename>classSAMRAI_1_1xfer_1_1RefineTransactionFactory.html</filename>
    <member kind="function">
      <type></type>
      <name>RefineTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTransactionFactory.html</anchorfile>
      <anchor>a04bad189600320a3e3a4755abc9797a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RefineTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTransactionFactory.html</anchorfile>
      <anchor>a7f3c3cb26660134f1fc9f1e97a4e9293</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTransactionFactory.html</anchorfile>
      <anchor>a8a0154b6ab2e1e0388190ee829d1bc3f</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;dst_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;src_level, const boost::shared_ptr&lt; hier::BoxOverlap &gt; &amp;overlap, const hier::Box &amp;dst_box, const hier::Box &amp;src_box, const RefineClasses::Data **refine_data, int item_id, const hier::Box &amp;box, bool use_time_interpolation=false) const =0</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTransactionFactory.html</anchorfile>
      <anchor>a999a84c5836d9dfa2f89c8c1062ead23</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;dst_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;src_level, const boost::shared_ptr&lt; hier::BoxOverlap &gt; &amp;overlap, const hier::Box &amp;dst_box, const hier::Box &amp;src_box, const RefineClasses::Data **refine_data, int item_id) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransactionTime</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTransactionFactory.html</anchorfile>
      <anchor>add2152bd40909ecaed1df67ddf5721b5</anchor>
      <arglist>(double fill_time)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>preprocessScratchSpace</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTransactionFactory.html</anchorfile>
      <anchor>af8f188e87ca8b059be3054e67db534b8</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, double fill_time, const hier::ComponentSelector &amp;preprocess_vector) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::SingularityPatchStrategy</name>
    <filename>classSAMRAI_1_1xfer_1_1SingularityPatchStrategy.html</filename>
    <member kind="function">
      <type></type>
      <name>SingularityPatchStrategy</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1SingularityPatchStrategy.html</anchorfile>
      <anchor>a8876bd52560fae7c3e2ffaeb6f998954</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SingularityPatchStrategy</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1SingularityPatchStrategy.html</anchorfile>
      <anchor>acffb87ca71d68aa234daad2ae2ce4f8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fillSingularityBoundaryConditions</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1SingularityPatchStrategy.html</anchorfile>
      <anchor>a5446e840554c08d250b6becb66363011</anchor>
      <arglist>(hier::Patch &amp;patch, const hier::PatchLevel &amp;encon_level, boost::shared_ptr&lt; const hier::Connector &gt; dst_to_encon, const hier::Box &amp;fill_box, const hier::BoundaryBox &amp;boundary_box, const boost::shared_ptr&lt; hier::BaseGridGeometry &gt; &amp;grid_geometry)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::StandardCoarsenTransactionFactory</name>
    <filename>classSAMRAI_1_1xfer_1_1StandardCoarsenTransactionFactory.html</filename>
    <base>SAMRAI::xfer::CoarsenTransactionFactory</base>
    <member kind="function">
      <type></type>
      <name>StandardCoarsenTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardCoarsenTransactionFactory.html</anchorfile>
      <anchor>a9678a0df8acaf7b7029d58a1331e94eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StandardCoarsenTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardCoarsenTransactionFactory.html</anchorfile>
      <anchor>a2e38c61cd33584eaf7657bdf47216cd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardCoarsenTransactionFactory.html</anchorfile>
      <anchor>a14df595690c72797194d6e981d295167</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;dst_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;src_level, const boost::shared_ptr&lt; hier::BoxOverlap &gt; &amp;overlap, const hier::Box &amp;dst_box, const hier::Box &amp;src_box, const CoarsenClasses::Data **coarsen_data, int item_id) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::StandardRefineTransactionFactory</name>
    <filename>classSAMRAI_1_1xfer_1_1StandardRefineTransactionFactory.html</filename>
    <base>SAMRAI::xfer::RefineTransactionFactory</base>
    <member kind="function">
      <type></type>
      <name>StandardRefineTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardRefineTransactionFactory.html</anchorfile>
      <anchor>ab1fd41f9b0f6409365cabe59f0f62422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StandardRefineTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardRefineTransactionFactory.html</anchorfile>
      <anchor>ae1034d2395e5d789ca0a3d059dffefa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransactionTime</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardRefineTransactionFactory.html</anchorfile>
      <anchor>afb46f04335d742f8ce1304bad325785e</anchor>
      <arglist>(double fill_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardRefineTransactionFactory.html</anchorfile>
      <anchor>a1665326ff43fcfa9588edb7db919b91f</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;dst_level, const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;src_level, const boost::shared_ptr&lt; hier::BoxOverlap &gt; &amp;overlap, const hier::Box &amp;dst_box, const hier::Box &amp;src_box, const RefineClasses::Data **refine_data, int item_id, const hier::Box &amp;box, bool use_time_interpolation=false) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessScratchSpace</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardRefineTransactionFactory.html</anchorfile>
      <anchor>acc9b4d51f13ff3a074833b09733023cf</anchor>
      <arglist>(const boost::shared_ptr&lt; hier::PatchLevel &gt; &amp;level, double fill_time, const hier::ComponentSelector &amp;preprocess_vector) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::VariableFillPattern</name>
    <filename>classSAMRAI_1_1xfer_1_1VariableFillPattern.html</filename>
    <member kind="function">
      <type></type>
      <name>VariableFillPattern</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1VariableFillPattern.html</anchorfile>
      <anchor>a5798acdcc2f30bbe0de2f18e86e89b98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VariableFillPattern</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1VariableFillPattern.html</anchorfile>
      <anchor>a52c444a881557e57374f92a8bb6cd56a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1VariableFillPattern.html</anchorfile>
      <anchor>aa9c4860f44215a59a4044858067bbba2</anchor>
      <arglist>(const hier::BoxGeometry &amp;dst_geometry, const hier::BoxGeometry &amp;src_geometry, const hier::Box &amp;dst_patch_box, const hier::Box &amp;src_mask, const hier::Box &amp;fill_box, const bool overwrite_interior, const hier::Transformation &amp;transformation) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; hier::BoxOverlap &gt;</type>
      <name>computeFillBoxesOverlap</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1VariableFillPattern.html</anchorfile>
      <anchor>ac69826d57b1e80dac2825b9297394000</anchor>
      <arglist>(const hier::BoxContainer &amp;fill_boxes, const hier::BoxContainer &amp;node_fill_boxes, const hier::Box &amp;patch_box, const hier::Box &amp;data_box, const hier::PatchDataFactory &amp;patch_data_factory) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const hier::IntVector &amp;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1VariableFillPattern.html</anchorfile>
      <anchor>ab8e60c226adde9ebfca0bd4a4be6d7b7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>getPatternName</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1VariableFillPattern.html</anchorfile>
      <anchor>a4f1e57ff65a99b6079abdfabe94221dd</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
</tagfile>
