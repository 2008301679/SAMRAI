<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>main</name>
    <title>SAMRAI Source Code Documentation</title>
    <filename>main</filename>
    <docanchor file="main">using_samrai_dox</docanchor>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataOuteredgeSumTransactionFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/locally_active/</path>
    <filename>LocallyActiveDataOuteredgeSumTransactionFactory_8C</filename>
    <includes id="LocallyActiveDataOuteredgeSumTransactionFactory_8h" name="LocallyActiveDataOuteredgeSumTransactionFactory.h" local="yes" imported="no">LocallyActiveDataOuteredgeSumTransactionFactory.h</includes>
    <includes id="OuteredgeSumTransaction_8h" name="OuteredgeSumTransaction.h" local="yes" imported="no">OuteredgeSumTransaction.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataOuteredgeSumTransactionFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/locally_active/</path>
    <filename>LocallyActiveDataOuteredgeSumTransactionFactory_8h</filename>
    <includes id="LocallyActiveDataPatchLevelManager_8h" name="LocallyActiveDataPatchLevelManager.h" local="yes" imported="no">LocallyActiveDataPatchLevelManager.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <includes id="LocallyActiveDataRefineTransactionFactory_8h" name="LocallyActiveDataRefineTransactionFactory.h" local="yes" imported="no">LocallyActiveDataRefineTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>LocallyActiveDataOuteredgeSumTransactionFactory_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataOuternodeSumTransactionFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/locally_active/</path>
    <filename>LocallyActiveDataOuternodeSumTransactionFactory_8C</filename>
    <includes id="LocallyActiveDataOuternodeSumTransactionFactory_8h" name="LocallyActiveDataOuternodeSumTransactionFactory.h" local="yes" imported="no">LocallyActiveDataOuternodeSumTransactionFactory.h</includes>
    <includes id="OuternodeSumTransaction_8h" name="OuternodeSumTransaction.h" local="yes" imported="no">OuternodeSumTransaction.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataOuternodeSumTransactionFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/locally_active/</path>
    <filename>LocallyActiveDataOuternodeSumTransactionFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="LocallyActiveDataPatchLevelManager_8h" name="LocallyActiveDataPatchLevelManager.h" local="yes" imported="no">LocallyActiveDataPatchLevelManager.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <includes id="LocallyActiveDataRefineTransactionFactory_8h" name="LocallyActiveDataRefineTransactionFactory.h" local="yes" imported="no">LocallyActiveDataRefineTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>LocallyActiveDataOuternodeSumTransactionFactory_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataPatchBoundaryEdgeSum.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/locally_active/</path>
    <filename>LocallyActiveDataPatchBoundaryEdgeSum_8C</filename>
    <includes id="LocallyActiveDataPatchBoundaryEdgeSum_8h" name="LocallyActiveDataPatchBoundaryEdgeSum.h" local="yes" imported="no">LocallyActiveDataPatchBoundaryEdgeSum.h</includes>
    <includes id="LocallyActiveVariableDatabase_8h" name="LocallyActiveVariableDatabase.h" local="yes" imported="no">LocallyActiveVariableDatabase.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <includes id="EdgeDataFactory_8h" name="EdgeDataFactory.h" local="yes" imported="no">EdgeDataFactory.h</includes>
    <includes id="OuteredgeData_8h" name="OuteredgeData.h" local="yes" imported="no">OuteredgeData.h</includes>
    <includes id="LocallyActiveDataOuteredgeSumTransactionFactory_8h" name="LocallyActiveDataOuteredgeSumTransactionFactory.h" local="yes" imported="no">LocallyActiveDataOuteredgeSumTransactionFactory.h</includes>
    <includes id="LocallyActiveDataRefineAlgorithm_8h" name="LocallyActiveDataRefineAlgorithm.h" local="yes" imported="no">LocallyActiveDataRefineAlgorithm.h</includes>
    <includes id="LocallyActiveDataRefinePatchStrategy_8h" name="LocallyActiveDataRefinePatchStrategy.h" local="yes" imported="no">LocallyActiveDataRefinePatchStrategy.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataPatchBoundaryEdgeSum.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/locally_active/</path>
    <filename>LocallyActiveDataPatchBoundaryEdgeSum_8h</filename>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="LocallyActiveDataPatchLevelManager_8h" name="LocallyActiveDataPatchLevelManager.h" local="yes" imported="no">LocallyActiveDataPatchLevelManager.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">EdgeVariable.h</includes>
    <includes id="OuteredgeVariable_8h" name="OuteredgeVariable.h" local="yes" imported="no">OuteredgeVariable.h</includes>
    <includes id="LocallyActiveDataRefineSchedule_8h" name="LocallyActiveDataRefineSchedule.h" local="yes" imported="no">LocallyActiveDataRefineSchedule.h</includes>
    <includes id="LocallyActiveDataRefineTransactionFactory_8h" name="LocallyActiveDataRefineTransactionFactory.h" local="yes" imported="no">LocallyActiveDataRefineTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataPatchBoundaryNodeSum.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/locally_active/</path>
    <filename>LocallyActiveDataPatchBoundaryNodeSum_8C</filename>
    <includes id="LocallyActiveDataPatchBoundaryNodeSum_8h" name="LocallyActiveDataPatchBoundaryNodeSum.h" local="yes" imported="no">LocallyActiveDataPatchBoundaryNodeSum.h</includes>
    <includes id="LocallyActiveVariableDatabase_8h" name="LocallyActiveVariableDatabase.h" local="yes" imported="no">LocallyActiveVariableDatabase.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="NodeDataFactory_8h" name="NodeDataFactory.h" local="yes" imported="no">NodeDataFactory.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">NodeGeometry.h</includes>
    <includes id="OuternodeData_8h" name="OuternodeData.h" local="yes" imported="no">OuternodeData.h</includes>
    <includes id="OuternodeDoubleConstantCoarsen_8h" name="OuternodeDoubleConstantCoarsen.h" local="yes" imported="no">OuternodeDoubleConstantCoarsen.h</includes>
    <includes id="LocallyActiveDataOuternodeSumTransactionFactory_8h" name="LocallyActiveDataOuternodeSumTransactionFactory.h" local="yes" imported="no">LocallyActiveDataOuternodeSumTransactionFactory.h</includes>
    <includes id="LocallyActiveDataCoarsenAlgorithm_8h" name="LocallyActiveDataCoarsenAlgorithm.h" local="yes" imported="no">LocallyActiveDataCoarsenAlgorithm.h</includes>
    <includes id="LocallyActiveDataRefineAlgorithm_8h" name="LocallyActiveDataRefineAlgorithm.h" local="yes" imported="no">LocallyActiveDataRefineAlgorithm.h</includes>
    <includes id="LocallyActiveDataRefinePatchStrategy_8h" name="LocallyActiveDataRefinePatchStrategy.h" local="yes" imported="no">LocallyActiveDataRefinePatchStrategy.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
    <member kind="function">
      <type>void</type>
      <name>nodeouternodesum2d_</name>
      <anchorfile>LocallyActiveDataPatchBoundaryNodeSum_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int &amp;, const int &amp;, const int &amp;, double *, const double *, const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nodehangnodeinterp2d_</name>
      <anchorfile>LocallyActiveDataPatchBoundaryNodeSum_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int &amp;, const int &amp;, const int &amp;, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nodeouternodesum3d_</name>
      <anchorfile>LocallyActiveDataPatchBoundaryNodeSum_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int &amp;, const int &amp;, const int &amp;, const int &amp;, double *, const double *, const double *, const double *, const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nodehangnodeinterp3d_</name>
      <anchorfile>LocallyActiveDataPatchBoundaryNodeSum_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int &amp;, const int &amp;, const int &amp;, const int &amp;, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataPatchBoundaryNodeSum.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/locally_active/</path>
    <filename>LocallyActiveDataPatchBoundaryNodeSum_8h</filename>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">ComponentSelector.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">NodeVariable.h</includes>
    <includes id="OuternodeVariable_8h" name="OuternodeVariable.h" local="yes" imported="no">OuternodeVariable.h</includes>
    <includes id="LocallyActiveDataCoarsenSchedule_8h" name="LocallyActiveDataCoarsenSchedule.h" local="yes" imported="no">LocallyActiveDataCoarsenSchedule.h</includes>
    <includes id="LocallyActiveDataRefineSchedule_8h" name="LocallyActiveDataRefineSchedule.h" local="yes" imported="no">LocallyActiveDataRefineSchedule.h</includes>
    <includes id="LocallyActiveDataRefineTransactionFactory_8h" name="LocallyActiveDataRefineTransactionFactory.h" local="yes" imported="no">LocallyActiveDataRefineTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>algs_nodeouternodeops2d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/standard/</path>
    <filename>algs__nodeouternodeops2d_8f</filename>
    <member kind="function">
      <type>c c couternodeupper1 c ***********************************************************************implicit none integer cihi1 integer</type>
      <name>ratio</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(0:2-1)</arglist>
    </member>
    <member kind="function">
      <type>c c couternodeupper1 c ***********************************************************************implicit none integer cihi1 integer depth integer ngc1 double precision &amp;</type>
      <name>fnode</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(filo0-ngc0:fihi0+1+ngc0,&amp;filo1-ngc1:fihi1+1+ngc1, depth)</arglist>
    </member>
    <member kind="function">
      <type>c c couternodeupper1 c ***********************************************************************implicit none integer cihi1 integer depth integer ngc1 double precision &amp;&amp;</type>
      <name>couternodelower0</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(cilo1+1:cihi1, depth)</arglist>
    </member>
    <member kind="function">
      <type>c c couternodeupper1 c ***********************************************************************implicit none integer cihi1 integer depth integer ngc1 double precision &amp;&amp;&amp;</type>
      <name>couternodeupper0</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(cilo1+1:cihi1, depth)</arglist>
    </member>
    <member kind="function">
      <type>c c couternodeupper1 c ***********************************************************************implicit none integer cihi1 integer depth integer ngc1 double precision &amp;&amp;&amp;&amp;</type>
      <name>couternodelower1</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(cilo0:cihi0+1, depth)</arglist>
    </member>
    <member kind="function">
      <type>c c couternodeupper1 c ***********************************************************************implicit none integer cihi1 integer depth integer ngc1 double precision &amp;&amp;&amp;&amp;&amp;</type>
      <name>couternodeupper1</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(cilo0:cihi0+1, depth) integer ic0</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>filo1</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi0</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi1</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>cilo0</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cilo1</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi0</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi1</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ratio</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>depth</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ngc0</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ngc1</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>fnode</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>couternodelower0</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>couternodeupper0</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>couternodelower1</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper1 c ***********************************************************************implicit none integer &amp;</type>
      <name>filo0</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper1 c ***********************************************************************implicit none integer cihi1 integer depth integer ngc1 double precision &amp;&amp;&amp;&amp;&amp;</type>
      <name>if0</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper1 c ***********************************************************************implicit none integer cihi1 integer depth integer ngc1 double precision</type>
      <name>ic1</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper1 c ***********************************************************************implicit none integer cihi1 integer depth integer ngc1 double precision</type>
      <name>if1</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper1 c ***********************************************************************implicit none integer cihi1 integer depth integer ngc1 double precision id integer</type>
      <name>cilo0_loop</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper1 c ***********************************************************************implicit none integer cihi1 integer depth integer ngc1 double precision id integer</type>
      <name>cilo1_loop</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper1 c ***********************************************************************implicit none integer cihi1 integer depth integer ngc1 double precision id integer</type>
      <name>cihi0_loop</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper1 c ***********************************************************************implicit none integer cihi1 integer depth integer ngc1 double precision id integer cihi1_loop c c ***********************************************************************c c sum along XLOWER side depth do cihi1_loop depth do cihi1_loop depth do</type>
      <name>ic0</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper1 c ***********************************************************************implicit none integer cihi1 integer depth integer ngc1 double precision id integer cihi1_loop c c ***********************************************************************c c sum along XLOWER side depth do cihi1_loop depth do cihi1_loop depth do cihi0_loop depth do cihi0_loop</type>
      <name>XUPPER</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper1 c ***********************************************************************implicit none integer cihi1 integer depth integer ngc1 double precision id integer cihi1_loop c c ***********************************************************************c c sum along XLOWER side depth do cihi1_loop depth do cihi1_loop depth do cihi0_loop depth do cihi0_loop</type>
      <name>YLOWER</name>
      <anchorfile>algs__nodeouternodeops2d_8f.html</anchorfile>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>algs_nodeouternodeops3d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/standard/</path>
    <filename>algs__nodeouternodeops3d_8f</filename>
    <member kind="function">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer</type>
      <name>ratio</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(0:3-1)</arglist>
    </member>
    <member kind="function">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision &amp;</type>
      <name>fnode</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(filo0-ngc0:fihi0+1+ngc0,&amp;filo1-ngc1:fihi1+1+ngc1,&amp;filo2-ngc2:fihi2+1+ngc2, depth)</arglist>
    </member>
    <member kind="function">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision &amp;&amp;</type>
      <name>couternodelower0</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(cilo1+1:cihi1,&amp;cilo2+1:cihi2, depth)</arglist>
    </member>
    <member kind="function">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision &amp;&amp;&amp;</type>
      <name>couternodeupper0</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(cilo1+1:cihi1,&amp;cilo2+1:cihi2, depth)</arglist>
    </member>
    <member kind="function">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision &amp;&amp;&amp;&amp;</type>
      <name>couternodelower1</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(cilo0:cihi0+1,&amp;cilo2+1:cihi2, depth)</arglist>
    </member>
    <member kind="function">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision &amp;&amp;&amp;&amp;&amp;</type>
      <name>couternodeupper1</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(cilo0:cihi0+1,&amp;cilo2+1:cihi2, depth)</arglist>
    </member>
    <member kind="function">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision &amp;&amp;&amp;&amp;&amp;&amp;</type>
      <name>couternodelower2</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(cilo0:cihi0+1,&amp;cilo1:cihi1+1, depth)</arglist>
    </member>
    <member kind="function">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision &amp;&amp;&amp;&amp;&amp;&amp;&amp;</type>
      <name>couternodeupper2</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(cilo0:cihi0+1,&amp;cilo1:cihi1+1, depth) integer ic0</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>filo1</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>filo2</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>fihi0</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi1</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi2</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>cilo0</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cilo1</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cilo2</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>cihi0</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi1</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi2</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ratio</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>depth</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ngc0</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ngc1</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ngc2</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>fnode</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>couternodelower0</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>couternodeupper0</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>couternodelower1</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>couternodeupper1</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>couternodelower2</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer &amp;</type>
      <name>filo0</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision &amp;&amp;&amp;&amp;&amp;&amp;&amp;</type>
      <name>if0</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision</type>
      <name>ic1</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision</type>
      <name>if1</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision</type>
      <name>ic2</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision</type>
      <name>if2</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision id integer</type>
      <name>cilo0_loop</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision id integer</type>
      <name>cilo1_loop</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision id integer</type>
      <name>cilo2_loop</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision id integer &amp;</type>
      <name>cihi0_loop</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision id integer</type>
      <name>cihi1_loop</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision id integer cihi2_loop c c ***********************************************************************c c sum along XLOWER face depth do cihi2_loop cihi1_loop depth do cihi2_loop cihi1_loop depth do cihi2_loop cihi0_loop depth do cihi2_loop cihi0_loop depth do cihi1_loop cihi0_loop depth do cihi1_loop cihi0_loop</type>
      <name>XUPPER</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision id integer cihi2_loop c c ***********************************************************************c c sum along XLOWER face depth do cihi2_loop cihi1_loop depth do cihi2_loop cihi1_loop depth do cihi2_loop cihi0_loop depth do cihi2_loop cihi0_loop depth do cihi1_loop cihi0_loop depth do cihi1_loop cihi0_loop</type>
      <name>YLOWER</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision id integer cihi2_loop c c ***********************************************************************c c sum along XLOWER face depth do cihi2_loop cihi1_loop depth do cihi2_loop cihi1_loop depth do cihi2_loop cihi0_loop depth do cihi2_loop cihi0_loop depth do cihi1_loop cihi0_loop depth do cihi1_loop cihi0_loop</type>
      <name>YUPPER</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c couternodeupper2 c ***********************************************************************implicit none integer cihi2 integer depth integer ngc2 double precision id integer cihi2_loop c c ***********************************************************************c c sum along XLOWER face depth do cihi2_loop cihi1_loop depth do cihi2_loop cihi1_loop depth do cihi2_loop cihi0_loop depth do cihi2_loop cihi0_loop depth do cihi1_loop cihi0_loop depth do cihi1_loop cihi0_loop</type>
      <name>ZLOWER</name>
      <anchorfile>algs__nodeouternodeops3d_8f.html</anchorfile>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuteredgeSumTransaction.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/standard/</path>
    <filename>OuteredgeSumTransaction_8C</filename>
    <includes id="OuteredgeSumTransaction_8h" name="OuteredgeSumTransaction.h" local="yes" imported="no">OuteredgeSumTransaction.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">ArrayDataBasicOps.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">EdgeGeometry.h</includes>
    <includes id="OuteredgeData_8h" name="OuteredgeData.h" local="yes" imported="no">OuteredgeData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>OuteredgeSumTransaction_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuteredgeSumTransaction.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/standard/</path>
    <filename>OuteredgeSumTransaction_8h</filename>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="OuteredgeData_8h" name="OuteredgeData.h" local="yes" imported="no">OuteredgeData.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeSumTransactionFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/standard/</path>
    <filename>OuteredgeSumTransactionFactory_8C</filename>
    <includes id="OuteredgeSumTransactionFactory_8h" name="OuteredgeSumTransactionFactory.h" local="yes" imported="no">OuteredgeSumTransactionFactory.h</includes>
    <includes id="OuteredgeSumTransaction_8h" name="OuteredgeSumTransaction.h" local="yes" imported="no">OuteredgeSumTransaction.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeSumTransactionFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/standard/</path>
    <filename>OuteredgeSumTransactionFactory_8h</filename>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">ComponentSelector.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <includes id="RefineTransactionFactory_8h" name="RefineTransactionFactory.h" local="yes" imported="no">RefineTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>OuteredgeSumTransactionFactory_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuternodeSumTransaction.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/standard/</path>
    <filename>OuternodeSumTransaction_8C</filename>
    <includes id="OuternodeSumTransaction_8h" name="OuternodeSumTransaction.h" local="yes" imported="no">OuternodeSumTransaction.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">ArrayDataBasicOps.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">NodeGeometry.h</includes>
    <includes id="OuternodeData_8h" name="OuternodeData.h" local="yes" imported="no">OuternodeData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>OuternodeSumTransaction_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuternodeSumTransaction.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/standard/</path>
    <filename>OuternodeSumTransaction_8h</filename>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="OuternodeData_8h" name="OuternodeData.h" local="yes" imported="no">OuternodeData.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeSumTransactionFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/standard/</path>
    <filename>OuternodeSumTransactionFactory_8C</filename>
    <includes id="OuternodeSumTransactionFactory_8h" name="OuternodeSumTransactionFactory.h" local="yes" imported="no">OuternodeSumTransactionFactory.h</includes>
    <includes id="OuternodeSumTransaction_8h" name="OuternodeSumTransaction.h" local="yes" imported="no">OuternodeSumTransaction.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeSumTransactionFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/standard/</path>
    <filename>OuternodeSumTransactionFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">ComponentSelector.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <includes id="RefineTransactionFactory_8h" name="RefineTransactionFactory.h" local="yes" imported="no">RefineTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>OuternodeSumTransactionFactory_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchBoundaryEdgeSum.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/standard/</path>
    <filename>PatchBoundaryEdgeSum_8C</filename>
    <includes id="PatchBoundaryEdgeSum_8h" name="PatchBoundaryEdgeSum.h" local="yes" imported="no">PatchBoundaryEdgeSum.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <includes id="EdgeDataFactory_8h" name="EdgeDataFactory.h" local="yes" imported="no">EdgeDataFactory.h</includes>
    <includes id="OuteredgeData_8h" name="OuteredgeData.h" local="yes" imported="no">OuteredgeData.h</includes>
    <includes id="OuteredgeSumTransactionFactory_8h" name="OuteredgeSumTransactionFactory.h" local="yes" imported="no">OuteredgeSumTransactionFactory.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">RefineAlgorithm.h</includes>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">RefinePatchStrategy.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>PatchBoundaryEdgeSum.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/standard/</path>
    <filename>PatchBoundaryEdgeSum_8h</filename>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">EdgeVariable.h</includes>
    <includes id="OuteredgeVariable_8h" name="OuteredgeVariable.h" local="yes" imported="no">OuteredgeVariable.h</includes>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">RefineSchedule.h</includes>
    <includes id="RefineTransactionFactory_8h" name="RefineTransactionFactory.h" local="yes" imported="no">RefineTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>PatchBoundaryNodeSum.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/standard/</path>
    <filename>PatchBoundaryNodeSum_8C</filename>
    <includes id="PatchBoundaryNodeSum_8h" name="PatchBoundaryNodeSum.h" local="yes" imported="no">PatchBoundaryNodeSum.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="NodeDataFactory_8h" name="NodeDataFactory.h" local="yes" imported="no">NodeDataFactory.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">NodeGeometry.h</includes>
    <includes id="OuternodeData_8h" name="OuternodeData.h" local="yes" imported="no">OuternodeData.h</includes>
    <includes id="OuternodeDoubleConstantCoarsen_8h" name="OuternodeDoubleConstantCoarsen.h" local="yes" imported="no">OuternodeDoubleConstantCoarsen.h</includes>
    <includes id="OuternodeSumTransactionFactory_8h" name="OuternodeSumTransactionFactory.h" local="yes" imported="no">OuternodeSumTransactionFactory.h</includes>
    <includes id="CoarsenAlgorithm_8h" name="CoarsenAlgorithm.h" local="yes" imported="no">CoarsenAlgorithm.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">RefineAlgorithm.h</includes>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">RefinePatchStrategy.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
    <member kind="function">
      <type>void</type>
      <name>nodeouternodesum2d_</name>
      <anchorfile>PatchBoundaryNodeSum_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int &amp;, const int &amp;, const int &amp;, double *, const double *, const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nodehangnodeinterp2d_</name>
      <anchorfile>PatchBoundaryNodeSum_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int &amp;, const int &amp;, const int &amp;, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nodeouternodesum3d_</name>
      <anchorfile>PatchBoundaryNodeSum_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int &amp;, const int &amp;, const int &amp;, const int &amp;, double *, const double *, const double *, const double *, const double *, const double *, const double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nodehangnodeinterp3d_</name>
      <anchorfile>PatchBoundaryNodeSum_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int &amp;, const int &amp;, const int &amp;, const int &amp;, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchBoundaryNodeSum.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/standard/</path>
    <filename>PatchBoundaryNodeSum_8h</filename>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">ComponentSelector.h</includes>
    <includes id="CoarseFineBoundary_8h" name="CoarseFineBoundary.h" local="yes" imported="no">CoarseFineBoundary.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">NodeVariable.h</includes>
    <includes id="OuternodeVariable_8h" name="OuternodeVariable.h" local="yes" imported="no">OuternodeVariable.h</includes>
    <includes id="CoarsenSchedule_8h" name="CoarsenSchedule.h" local="yes" imported="no">CoarsenSchedule.h</includes>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">RefineSchedule.h</includes>
    <includes id="RefineTransactionFactory_8h" name="RefineTransactionFactory.h" local="yes" imported="no">RefineTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>algs_upfluxsum1d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/hyperbolic/</path>
    <filename>algs__upfluxsum1d_8f</filename>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision &amp;</type>
      <name>flux</name>
      <anchorfile>algs__upfluxsum1d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ilo0-flxgc0:ihi0+1+flxgc0)</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>algs__upfluxsum1d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ihi0</name>
      <anchorfile>algs__upfluxsum1d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>flxgc0</name>
      <anchorfile>algs__upfluxsum1d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>iface</name>
      <anchorfile>algs__upfluxsum1d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>flux</name>
      <anchorfile>algs__upfluxsum1d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;</type>
      <name>ilo0</name>
      <anchorfile>algs__upfluxsum1d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>algs_upfluxsum2d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/hyperbolic/</path>
    <filename>algs__upfluxsum2d_8f</filename>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision &amp;</type>
      <name>flux</name>
      <anchorfile>algs__upfluxsum2d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ilo0-flxgc0:ihi0+1+flxgc0,&amp;ilo1-flxgc1:ihi1+flxgc1)</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision &amp;&amp;</type>
      <name>fluxsum</name>
      <anchorfile>algs__upfluxsum2d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ilo1:ihi1) integer ie0</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision &amp;&amp;ic1 c c ***********************************************************************c</type>
      <name>if</name>
      <anchorfile>algs__upfluxsum2d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(iface.eq.0) then ie0</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision &amp;&amp;ic1 c c ***********************************************************************c ihi1</type>
      <name>fluxsum</name>
      <anchorfile>algs__upfluxsum2d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(ic1)</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision &amp;&amp;ic1 c c ***********************************************************************c ihi1 &amp;iface double precision &amp;</type>
      <name>flux</name>
      <anchorfile>algs__upfluxsum2d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(ilo1-flxgc1:ihi1+1+flxgc1,&amp;ilo0-flxgc0:ihi0+flxgc0)</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision &amp;&amp;ic1 c c ***********************************************************************c ihi1 &amp;iface double precision &amp;&amp;</type>
      <name>fluxsum</name>
      <anchorfile>algs__upfluxsum2d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(ilo0:ihi0) integer ie1</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision &amp;&amp;ic1 c c ***********************************************************************c ihi1 &amp;iface double precision &amp;&amp;ic0 c c ***********************************************************************c ihi0</type>
      <name>fluxsum</name>
      <anchorfile>algs__upfluxsum2d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(ic0)</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision &amp;&amp;ic1 c c ***********************************************************************c ihi1 &amp;iface double precision &amp;&amp;ic0 c c ***********************************************************************c ihi0 &amp;iface double precision &amp;&amp;ic1 c c ***********************************************************************c ihi1 &amp;iface double precision &amp;</type>
      <name>flux</name>
      <anchorfile>algs__upfluxsum2d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(ilo0-flxgc0:ihi0+flxgc0,&amp;ilo1-flxgc1:ihi1+1+flxgc1)</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>algs__upfluxsum2d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilo1</name>
      <anchorfile>algs__upfluxsum2d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ihi0</name>
      <anchorfile>algs__upfluxsum2d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ihi1</name>
      <anchorfile>algs__upfluxsum2d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>flxgc0</name>
      <anchorfile>algs__upfluxsum2d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>flxgc1</name>
      <anchorfile>algs__upfluxsum2d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>iface</name>
      <anchorfile>algs__upfluxsum2d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>flux</name>
      <anchorfile>algs__upfluxsum2d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;</type>
      <name>ilo0</name>
      <anchorfile>algs__upfluxsum2d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>algs_upfluxsum3d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/hyperbolic/</path>
    <filename>algs__upfluxsum3d_8f</filename>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision &amp;</type>
      <name>flux</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(ilo0-flxgc0:ihi0+1+flxgc0,&amp;ilo1-flxgc1:ihi1+flxgc1,&amp;ilo2-flxgc2:ihi2+flxgc2)</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision &amp;&amp;</type>
      <name>fluxsum</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(ilo1:ihi1,&amp;ilo2:ihi2) integer ie0</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision ic2 c c ***********************************************************************c</type>
      <name>if</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(iface.eq.0) then ie0</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision ic2 c c ***********************************************************************c ihi2 do ihi1</type>
      <name>fluxsum</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(ic1, ic2)</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision ic2 c c ***********************************************************************c ihi2 do ihi1 &amp;iface double precision &amp;</type>
      <name>flux</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(ilo1-flxgc1:ihi1+1+flxgc1,&amp;ilo2-flxgc2:ihi2+flxgc2,&amp;ilo0-flxgc0:ihi0+flxgc0)</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision ic2 c c ***********************************************************************c ihi2 do ihi1 &amp;iface double precision &amp;&amp;</type>
      <name>fluxsum</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(ilo2:ihi2,&amp;ilo0:ihi0) integer ie1</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision ic2 c c ***********************************************************************c ihi2 do ihi1 &amp;iface double precision ic0 c c ***********************************************************************c ihi0 do ihi2</type>
      <name>fluxsum</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(ic2, ic0)</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision ic2 c c ***********************************************************************c ihi2 do ihi1 &amp;iface double precision ic0 c c ***********************************************************************c ihi0 do ihi2 &amp;iface double precision &amp;</type>
      <name>flux</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(ilo2-flxgc2:ihi2+1+flxgc2,&amp;ilo0-flxgc0:ihi0+flxgc0,&amp;ilo1-flxgc1:ihi1+flxgc1)</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision ic2 c c ***********************************************************************c ihi2 do ihi1 &amp;iface double precision ic0 c c ***********************************************************************c ihi0 do ihi2 &amp;iface double precision &amp;&amp;</type>
      <name>fluxsum</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(ilo0:ihi0,&amp;ilo1:ihi1) integer ie2</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision ic2 c c ***********************************************************************c ihi2 do ihi1 &amp;iface double precision ic0 c c ***********************************************************************c ihi0 do ihi2 &amp;iface double precision ic1 c c ***********************************************************************c ihi1 do ihi0</type>
      <name>fluxsum</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(ic0, ic1)</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision ic2 c c ***********************************************************************c ihi2 do ihi1 &amp;iface double precision ic0 c c ***********************************************************************c ihi0 do ihi2 &amp;iface double precision ic1 c c ***********************************************************************c ihi1 do ihi0 &amp;iside double precision ic2 c c ***********************************************************************c</type>
      <name>if</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(iside.eq.0) then ic0</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision ic2 c c ***********************************************************************c ihi2 do ihi1 &amp;iface double precision ic0 c c ***********************************************************************c ihi0 do ihi2 &amp;iface double precision ic1 c c ***********************************************************************c ihi1 do ihi0 &amp;iside double precision ic2 c c ***********************************************************************c ihi2 do ihi1 &amp;iside double precision &amp;</type>
      <name>flux</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(ilo0-flxgc0:ihi0+flxgc0,&amp;ilo1-flxgc1:ihi1+1+flxgc1,&amp;ilo2-flxgc2:ihi2+flxgc2)</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision ic2 c c ***********************************************************************c ihi2 do ihi1 &amp;iface double precision ic0 c c ***********************************************************************c ihi0 do ihi2 &amp;iface double precision ic1 c c ***********************************************************************c ihi1 do ihi0 &amp;iside double precision ic2 c c ***********************************************************************c ihi2 do ihi1 &amp;iside double precision &amp;&amp;</type>
      <name>fluxsum</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(ilo0:ihi0,&amp;ilo2:ihi2) integer ic1</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision ic2 c c ***********************************************************************c ihi2 do ihi1 &amp;iface double precision ic0 c c ***********************************************************************c ihi0 do ihi2 &amp;iface double precision ic1 c c ***********************************************************************c ihi1 do ihi0 &amp;iside double precision ic2 c c ***********************************************************************c ihi2 do ihi1 &amp;iside double precision ic2 c c ***********************************************************************c ihi2 do ihi0</type>
      <name>fluxsum</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(ic0, ic2)</arglist>
    </member>
    <member kind="function">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision ic2 c c ***********************************************************************c ihi2 do ihi1 &amp;iface double precision ic0 c c ***********************************************************************c ihi0 do ihi2 &amp;iface double precision ic1 c c ***********************************************************************c ihi1 do ihi0 &amp;iside double precision ic2 c c ***********************************************************************c ihi2 do ihi1 &amp;iside double precision ic2 c c ***********************************************************************c ihi2 do ihi0 &amp;iside double precision &amp;</type>
      <name>flux</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(ilo0-flxgc0:ihi0+flxgc0,&amp;ilo1-flxgc1:ihi1+flxgc1,&amp;ilo2-flxgc2:ihi2+1+flxgc2)</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilo1</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilo2</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ihi0</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ihi1</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ihi2</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>flxgc0</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>flxgc1</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>flxgc2</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>iface</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>flux</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;</type>
      <name>ilo0</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision &amp;&amp;</type>
      <name>ic1</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision ic2 c c ***********************************************************************c ihi2 do ihi1 &amp;iface double precision &amp;&amp;</type>
      <name>ic2</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c fluxsum c ***********************************************************************implicit none c integer &amp;iface double precision ic2 c c ***********************************************************************c ihi2 do ihi1 &amp;iface double precision ic0 c c ***********************************************************************c ihi0 do ihi2 &amp;iface double precision &amp;&amp;</type>
      <name>ic0</name>
      <anchorfile>algs__upfluxsum3d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HyperbolicLevelIntegrator.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/hyperbolic/</path>
    <filename>HyperbolicLevelIntegrator_8C</filename>
    <includes id="HyperbolicLevelIntegrator_8h" name="HyperbolicLevelIntegrator.h" local="yes" imported="no">HyperbolicLevelIntegrator.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <includes id="FaceDataFactory_8h" name="FaceDataFactory.h" local="yes" imported="no">FaceDataFactory.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">FaceVariable.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">OuterfaceVariable.h</includes>
    <includes id="OutersideData_8h" name="OutersideData.h" local="yes" imported="no">OutersideData.h</includes>
    <includes id="OutersideVariable_8h" name="OutersideVariable.h" local="yes" imported="no">OutersideVariable.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="SideDataFactory_8h" name="SideDataFactory.h" local="yes" imported="no">SideDataFactory.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SideVariable.h</includes>
    <includes id="CoarsenSchedule_8h" name="CoarsenSchedule.h" local="yes" imported="no">CoarsenSchedule.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ALGS_HYPERBOLIC_LEVEL_INTEGRATOR_VERSION</name>
      <anchorfile>HyperbolicLevelIntegrator_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>upfluxsum1d_</name>
      <anchorfile>HyperbolicLevelIntegrator_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>upfluxsumface2d0_</name>
      <anchorfile>HyperbolicLevelIntegrator_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>upfluxsumface2d1_</name>
      <anchorfile>HyperbolicLevelIntegrator_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>upfluxsumside2d0_</name>
      <anchorfile>HyperbolicLevelIntegrator_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>upfluxsumside2d1_</name>
      <anchorfile>HyperbolicLevelIntegrator_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>upfluxsumface3d0_</name>
      <anchorfile>HyperbolicLevelIntegrator_8C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>upfluxsumface3d1_</name>
      <anchorfile>HyperbolicLevelIntegrator_8C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>upfluxsumface3d2_</name>
      <anchorfile>HyperbolicLevelIntegrator_8C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>upfluxsumside3d0_</name>
      <anchorfile>HyperbolicLevelIntegrator_8C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>upfluxsumside3d1_</name>
      <anchorfile>HyperbolicLevelIntegrator_8C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>upfluxsumside3d2_</name>
      <anchorfile>HyperbolicLevelIntegrator_8C.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HyperbolicLevelIntegrator.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/hyperbolic/</path>
    <filename>HyperbolicLevelIntegrator_8h</filename>
    <includes id="HyperbolicPatchStrategy_8h" name="HyperbolicPatchStrategy.h" local="yes" imported="no">HyperbolicPatchStrategy.h</includes>
    <includes id="TimeRefinementLevelStrategy_8h" name="TimeRefinementLevelStrategy.h" local="yes" imported="no">TimeRefinementLevelStrategy.h</includes>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">ComponentSelector.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <includes id="VariableContext_8h" name="VariableContext.h" local="yes" imported="no">VariableContext.h</includes>
    <includes id="GriddingAlgorithm_8h" name="GriddingAlgorithm.h" local="yes" imported="no">GriddingAlgorithm.h</includes>
    <includes id="StandardTagAndInitStrategy_8h" name="StandardTagAndInitStrategy.h" local="yes" imported="no">StandardTagAndInitStrategy.h</includes>
    <includes id="CoarsenAlgorithm_8h" name="CoarsenAlgorithm.h" local="yes" imported="no">CoarsenAlgorithm.h</includes>
    <includes id="Geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">RefineAlgorithm.h</includes>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">RefineSchedule.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>HyperbolicLevelIntegrator_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HyperbolicPatchStrategy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/hyperbolic/</path>
    <filename>HyperbolicPatchStrategy_8C</filename>
    <includes id="HyperbolicPatchStrategy_8h" name="HyperbolicPatchStrategy.h" local="yes" imported="no">HyperbolicPatchStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>HyperbolicPatchStrategy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/hyperbolic/</path>
    <filename>HyperbolicPatchStrategy_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <includes id="VariableContext_8h" name="VariableContext.h" local="yes" imported="no">VariableContext.h</includes>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">RefinePatchStrategy.h</includes>
    <includes id="CoarsenPatchStrategy_8h" name="CoarsenPatchStrategy.h" local="yes" imported="no">CoarsenPatchStrategy.h</includes>
    <includes id="GriddingAlgorithm_8h" name="GriddingAlgorithm.h" local="yes" imported="no">GriddingAlgorithm.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>ImplicitEquationStrategy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/implicit/</path>
    <filename>ImplicitEquationStrategy_8C</filename>
    <includes id="ImplicitEquationStrategy_8h" name="ImplicitEquationStrategy.h" local="yes" imported="no">ImplicitEquationStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>ImplicitEquationStrategy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/implicit/</path>
    <filename>ImplicitEquationStrategy_8h</filename>
    <includes id="SAMRAIVectorReal_8h" name="SAMRAIVectorReal.h" local="yes" imported="no">SAMRAIVectorReal.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>ImplicitIntegrator.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/implicit/</path>
    <filename>ImplicitIntegrator_8C</filename>
    <includes id="ImplicitIntegrator_8h" name="ImplicitIntegrator.h" local="yes" imported="no">ImplicitIntegrator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ALGS_IMPLICIT_INTEGRATOR_VERSION</name>
      <anchorfile>ImplicitIntegrator_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>ImplicitIntegrator_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ImplicitIntegrator.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/implicit/</path>
    <filename>ImplicitIntegrator_8h</filename>
    <includes id="ImplicitEquationStrategy_8h" name="ImplicitEquationStrategy.h" local="yes" imported="no">ImplicitEquationStrategy.h</includes>
    <includes id="NonlinearSolverStrategy_8h" name="NonlinearSolverStrategy.h" local="yes" imported="no">NonlinearSolverStrategy.h</includes>
    <includes id="SAMRAIVectorReal_8h" name="SAMRAIVectorReal.h" local="yes" imported="no">SAMRAIVectorReal.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="ImplicitIntegrator_8I" name="ImplicitIntegrator.I" local="yes" imported="no">ImplicitIntegrator.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>ImplicitIntegrator.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/implicit/</path>
    <filename>ImplicitIntegrator_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>MethodOfLinesIntegrator.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/method_of_lines/</path>
    <filename>MethodOfLinesIntegrator_8C</filename>
    <includes id="MethodOfLinesIntegrator_8h" name="MethodOfLinesIntegrator.h" local="yes" imported="no">MethodOfLinesIntegrator.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ALGS_METHOD_OF_LINES_INTEGRATOR_VERSION</name>
      <anchorfile>MethodOfLinesIntegrator_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MethodOfLinesIntegrator.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/method_of_lines/</path>
    <filename>MethodOfLinesIntegrator_8h</filename>
    <includes id="CoarsenAlgorithm_8h" name="CoarsenAlgorithm.h" local="yes" imported="no">CoarsenAlgorithm.h</includes>
    <includes id="CoarsenSchedule_8h" name="CoarsenSchedule.h" local="yes" imported="no">CoarsenSchedule.h</includes>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">ComponentSelector.h</includes>
    <includes id="Geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <includes id="GriddingAlgorithm_8h" name="GriddingAlgorithm.h" local="yes" imported="no">GriddingAlgorithm.h</includes>
    <includes id="MethodOfLinesPatchStrategy_8h" name="MethodOfLinesPatchStrategy.h" local="yes" imported="no">MethodOfLinesPatchStrategy.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">RefineAlgorithm.h</includes>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">RefineSchedule.h</includes>
    <includes id="StandardTagAndInitStrategy_8h" name="StandardTagAndInitStrategy.h" local="yes" imported="no">StandardTagAndInitStrategy.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <includes id="VariableContext_8h" name="VariableContext.h" local="yes" imported="no">VariableContext.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>MethodOfLinesPatchStrategy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/method_of_lines/</path>
    <filename>MethodOfLinesPatchStrategy_8C</filename>
    <includes id="MethodOfLinesPatchStrategy_8h" name="MethodOfLinesPatchStrategy.h" local="yes" imported="no">MethodOfLinesPatchStrategy.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>MethodOfLinesPatchStrategy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/method_of_lines/</path>
    <filename>MethodOfLinesPatchStrategy_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <includes id="VariableContext_8h" name="VariableContext.h" local="yes" imported="no">VariableContext.h</includes>
    <includes id="CoarsenPatchStrategy_8h" name="CoarsenPatchStrategy.h" local="yes" imported="no">CoarsenPatchStrategy.h</includes>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">RefinePatchStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>MethodOfLinesPatchStrategy_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimeRefinementIntegrator.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/time_refinement/</path>
    <filename>TimeRefinementIntegrator_8C</filename>
    <includes id="TimeRefinementIntegrator_8h" name="TimeRefinementIntegrator.h" local="yes" imported="no">TimeRefinementIntegrator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_TIMES</name>
      <anchorfile>TimeRefinementIntegrator_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>TimeRefinementIntegrator_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ALGS_TIME_REFINEMENT_INTEGRATOR_VERSION</name>
      <anchorfile>TimeRefinementIntegrator_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimeRefinementIntegrator.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/time_refinement/</path>
    <filename>TimeRefinementIntegrator_8h</filename>
    <includes id="BasePatchHierarchy_8h" name="BasePatchHierarchy.h" local="yes" imported="no">BasePatchHierarchy.h</includes>
    <includes id="BaseGriddingAlgorithm_8h" name="BaseGriddingAlgorithm.h" local="yes" imported="no">BaseGriddingAlgorithm.h</includes>
    <includes id="TimeRefinementLevelStrategy_8h" name="TimeRefinementLevelStrategy.h" local="yes" imported="no">TimeRefinementLevelStrategy.h</includes>
    <includes id="TimeRefinementIntegrator_8I" name="TimeRefinementIntegrator.I" local="yes" imported="no">TimeRefinementIntegrator.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>TimeRefinementIntegrator.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/time_refinement/</path>
    <filename>TimeRefinementIntegrator_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>TimeRefinementLevelStrategy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/time_refinement/</path>
    <filename>TimeRefinementLevelStrategy_8C</filename>
    <includes id="TimeRefinementLevelStrategy_8h" name="TimeRefinementLevelStrategy.h" local="yes" imported="no">TimeRefinementLevelStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>TimeRefinementLevelStrategy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/time_refinement/</path>
    <filename>TimeRefinementLevelStrategy_8h</filename>
    <includes id="BasePatchHierarchy_8h" name="BasePatchHierarchy.h" local="yes" imported="no">BasePatchHierarchy.h</includes>
    <includes id="BasePatchLevel_8h" name="BasePatchLevel.h" local="yes" imported="no">BasePatchLevel.h</includes>
    <includes id="BaseGriddingAlgorithm_8h" name="BaseGriddingAlgorithm.h" local="yes" imported="no">BaseGriddingAlgorithm.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>appu_cartbdry2d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/boundary/</path>
    <filename>appu__cartbdry2d_8f</filename>
    <member kind="function">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1 integer X1Y1 c c common cartbdrycondparams2d YNEUMANN integer YNEUMANN c ***********************************************************************integer ilast1 integer iend1 integer ngc1 c double precision</type>
      <name>dx</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(0:2-1) c integer bdry_loc</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilast0</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirst1</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilast1</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ibeg0</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>iend0</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ibeg1</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>iend1</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ngc0</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ngc1</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>dx</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>bdry_loc</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>bdry_cond</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>edge_values</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>arrdata</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>XRIGHT</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>YLEFT</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>YRIGHT</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c &amp;</type>
      <name>X0Y0</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>X1Y0</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>X0Y1</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1 integer &amp;</type>
      <name>XLEFT</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1 integer X1Y1 c c common cartbdrycondparams2d &amp;</type>
      <name>FLOW</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1 integer X1Y1 c c common cartbdrycondparams2d</type>
      <name>XFLOW</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1 integer X1Y1 c c common cartbdrycondparams2d</type>
      <name>YFLOW</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1 integer X1Y1 c c common cartbdrycondparams2d &amp;</type>
      <name>REFLECT</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1 integer X1Y1 c c common cartbdrycondparams2d</type>
      <name>XREFLECT</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1 integer X1Y1 c c common cartbdrycondparams2d</type>
      <name>YREFLECT</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1 integer X1Y1 c c common cartbdrycondparams2d &amp;</type>
      <name>DIRICHLET</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1 integer X1Y1 c c common cartbdrycondparams2d</type>
      <name>XDIRICHLET</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1 integer X1Y1 c c common cartbdrycondparams2d</type>
      <name>YDIRICHLET</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1 integer X1Y1 c c common cartbdrycondparams2d &amp;</type>
      <name>NEUMANN</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1 integer X1Y1 c c common cartbdrycondparams2d</type>
      <name>XNEUMANN</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1 integer X1Y1 c c common cartbdrycondparams2d YNEUMANN integer YNEUMANN c ***********************************************************************integer</type>
      <name>ifirst0</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1 integer X1Y1 c c common cartbdrycondparams2d YNEUMANN integer YNEUMANN c ***********************************************************************integer ilast1 integer iend1 integer ngc1 c double precision &amp;</type>
      <name>arrdepth</name>
      <anchorfile>appu__cartbdry2d_8f.html</anchorfile>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>appu_cartbdry3d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/boundary/</path>
    <filename>appu__cartbdry3d_8f</filename>
    <member kind="function">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1Z1 integer X1Y1Z1 c c common cartbdrycondparams3d ZNEUMANN integer ZNEUMANN c ***********************************************************************integer ilast2 integer iend2 integer ngc2 c double precision</type>
      <name>dx</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a62</anchor>
      <arglist>(0:3-1) c integer bdry_loc</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilast0</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirst1</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilast1</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirst2</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilast2</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ibeg0</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>iend0</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ibeg1</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>iend1</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ibeg2</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>iend2</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ngc0</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ngc1</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ngc2</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>dx</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>bdry_loc</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>bdry_cond</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>face_values</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>arrdata</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>XRIGHT</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>YLEFT</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>YRIGHT</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>ZLEFT</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>ZRIGHT</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c &amp;</type>
      <name>Y0Z0</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>Y1Z0</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>Y0Z1</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>Y1Z1</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c &amp;</type>
      <name>X0Z0</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>X0Z1</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>X1Z0</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>X1Z1</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c &amp;</type>
      <name>X0Y0</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>X1Y0</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>X0Y1</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>X1Y1</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c &amp;</type>
      <name>X0Y0Z0</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>X1Y0Z0</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>X0Y1Z0</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>X1Y1Z0</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c &amp;</type>
      <name>X0Y0Z1</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>X1Y0Z1</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c</type>
      <name>X0Y1Z1</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1Z1 integer &amp;</type>
      <name>XLEFT</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1Z1 integer X1Y1Z1 c c common cartbdrycondparams3d &amp;</type>
      <name>FLOW</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1Z1 integer X1Y1Z1 c c common cartbdrycondparams3d</type>
      <name>XFLOW</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1Z1 integer X1Y1Z1 c c common cartbdrycondparams3d</type>
      <name>YFLOW</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1Z1 integer X1Y1Z1 c c common cartbdrycondparams3d</type>
      <name>ZFLOW</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1Z1 integer X1Y1Z1 c c common cartbdrycondparams3d &amp;</type>
      <name>REFLECT</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1Z1 integer X1Y1Z1 c c common cartbdrycondparams3d</type>
      <name>XREFLECT</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1Z1 integer X1Y1Z1 c c common cartbdrycondparams3d</type>
      <name>YREFLECT</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1Z1 integer X1Y1Z1 c c common cartbdrycondparams3d</type>
      <name>ZREFLECT</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1Z1 integer X1Y1Z1 c c common cartbdrycondparams3d &amp;</type>
      <name>DIRICHLET</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1Z1 integer X1Y1Z1 c c common cartbdrycondparams3d</type>
      <name>XDIRICHLET</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1Z1 integer X1Y1Z1 c c common cartbdrycondparams3d</type>
      <name>YDIRICHLET</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1Z1 integer X1Y1Z1 c c common cartbdrycondparams3d</type>
      <name>ZDIRICHLET</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1Z1 integer X1Y1Z1 c c common cartbdrycondparams3d &amp;</type>
      <name>NEUMANN</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1Z1 integer X1Y1Z1 c c common cartbdrycondparams3d</type>
      <name>XNEUMANN</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1Z1 integer X1Y1Z1 c c common cartbdrycondparams3d</type>
      <name>YNEUMANN</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1Z1 integer X1Y1Z1 c c common cartbdrycondparams3d ZNEUMANN integer ZNEUMANN c ***********************************************************************integer</type>
      <name>ifirst0</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arrdepth c ***********************************************************************implicit none c c X1Y1Z1 integer X1Y1Z1 c c common cartbdrycondparams3d ZNEUMANN integer ZNEUMANN c ***********************************************************************integer ilast2 integer iend2 integer ngc2 c double precision &amp;</type>
      <name>arrdepth</name>
      <anchorfile>appu__cartbdry3d_8f.html</anchorfile>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoundaryUtilityStrategy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/boundary/</path>
    <filename>BoundaryUtilityStrategy_8C</filename>
    <includes id="BoundaryUtilityStrategy_8h" name="BoundaryUtilityStrategy.h" local="yes" imported="no">BoundaryUtilityStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>BoundaryUtilityStrategy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/boundary/</path>
    <filename>BoundaryUtilityStrategy_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianBoundaryDefines.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/boundary/</path>
    <filename>CartesianBoundaryDefines_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>FACE3D_BDRY_TYPE</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EDGE3D_BDRY_TYPE</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NODE3D_BDRY_TYPE</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EDGE2D_BDRY_TYPE</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NODE2D_BDRY_TYPE</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NODE1D_BDRY_TYPE</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NUM_1D_NODES</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NUM_2D_EDGES</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NUM_2D_NODES</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NUM_3D_FACES</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NUM_3D_EDGES</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NUM_3D_NODES</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XLO</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XHI</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YLO</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YHI</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZLO</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZHI</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XLO_YLO_2D</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XHI_YLO_2D</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XLO_YHI_2D</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XHI_YHI_2D</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YLO_ZLO_3D</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YHI_ZLO_3D</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YLO_ZHI_3D</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YHI_ZHI_3D</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XLO_ZLO_3D</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XLO_ZHI_3D</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XHI_ZLO_3D</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XHI_ZHI_3D</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XLO_YLO_3D</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XHI_YLO_3D</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XLO_YHI_3D</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XHI_YHI_3D</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XLO_YLO_ZLO</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XHI_YLO_ZLO</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XLO_YHI_ZLO</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XHI_YHI_ZLO</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XLO_YLO_ZHI</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XHI_YLO_ZHI</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XLO_YHI_ZHI</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XHI_YHI_ZHI</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FLOW_BC</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REFLECT_BC</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIRICHLET_BC</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NEUMANN_BC</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XFLOW_BC</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YFLOW_BC</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZFLOW_BC</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XREFLECT_BC</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YREFLECT_BC</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZREFLECT_BC</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XDIRICHLET_BC</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YDIRICHLET_BC</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZDIRICHLET_BC</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XNEUMANN_BC</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YNEUMANN_BC</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ZNEUMANN_BC</name>
      <anchorfile>CartesianBoundaryDefines_8h.html</anchorfile>
      <anchor>a57</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianBoundaryUtilities2.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/boundary/</path>
    <filename>CartesianBoundaryUtilities2_8C</filename>
    <includes id="CartesianBoundaryUtilities2_8h" name="CartesianBoundaryUtilities2.h" local="yes" imported="no">CartesianBoundaryUtilities2.h</includes>
    <includes id="CartesianBoundaryDefines_8h" name="CartesianBoundaryDefines.h" local="yes" imported="no">CartesianBoundaryDefines.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">BoundaryBox.h</includes>
    <includes id="CellIndex_8h" name="CellIndex.h" local="yes" imported="no">CellIndex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
    <member kind="function">
      <type>void</type>
      <name>stufcartbdryloc2d_</name>
      <anchorfile>CartesianBoundaryUtilities2_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stufcartbdrycond2d_</name>
      <anchorfile>CartesianBoundaryUtilities2_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getcartedgebdry2d_</name>
      <anchorfile>CartesianBoundaryUtilities2_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double *, const int &amp;, const int &amp;, const double *, double *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getcartnodebdry2d_</name>
      <anchorfile>CartesianBoundaryUtilities2_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double *, const int &amp;, const int &amp;, const double *, double *, const int &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianBoundaryUtilities2.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/boundary/</path>
    <filename>CartesianBoundaryUtilities2_8h</filename>
    <includes id="BoundaryUtilityStrategy_8h" name="BoundaryUtilityStrategy.h" local="yes" imported="no">BoundaryUtilityStrategy.h</includes>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">BoundaryBox.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianBoundaryUtilities3.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/boundary/</path>
    <filename>CartesianBoundaryUtilities3_8C</filename>
    <includes id="CartesianBoundaryUtilities3_8h" name="CartesianBoundaryUtilities3.h" local="yes" imported="no">CartesianBoundaryUtilities3.h</includes>
    <includes id="CartesianBoundaryDefines_8h" name="CartesianBoundaryDefines.h" local="yes" imported="no">CartesianBoundaryDefines.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">BoundaryBox.h</includes>
    <includes id="CellIndex_8h" name="CellIndex.h" local="yes" imported="no">CellIndex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
    <member kind="function">
      <type>void</type>
      <name>stufcartbdryloc3d_</name>
      <anchorfile>CartesianBoundaryUtilities3_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stufcartbdrycond3d_</name>
      <anchorfile>CartesianBoundaryUtilities3_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getcartfacebdry3d_</name>
      <anchorfile>CartesianBoundaryUtilities3_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double *, const int &amp;, const int &amp;, const double *, double *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getcartedgebdry3d_</name>
      <anchorfile>CartesianBoundaryUtilities3_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double *, const int &amp;, const int &amp;, const double *, double *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getcartnodebdry3d_</name>
      <anchorfile>CartesianBoundaryUtilities3_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double *, const int &amp;, const int &amp;, const double *, double *, const int &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianBoundaryUtilities3.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/boundary/</path>
    <filename>CartesianBoundaryUtilities3_8h</filename>
    <includes id="BoundaryUtilityStrategy_8h" name="BoundaryUtilityStrategy.h" local="yes" imported="no">BoundaryUtilityStrategy.h</includes>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">BoundaryBox.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>appu_ebdry2d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>appu__ebdry2d_8f</filename>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>CUTin</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>BORDERin</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>FLOWin</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>OUTSIDEin</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>INSIDEin</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>BOUNDARYin</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c ONBOUNDARYin c ***********************************************************************implicit none integer &amp;</type>
      <name>SOLIDin</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c ONBOUNDARYin c ***********************************************************************implicit none integer ONBOUNDARYin common ebparams</type>
      <name>SOLID_EB</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c ONBOUNDARYin c ***********************************************************************implicit none integer ONBOUNDARYin common ebparams</type>
      <name>CUT_EB</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c ONBOUNDARYin c ***********************************************************************implicit none integer ONBOUNDARYin common ebparams</type>
      <name>BORDER_EB</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c ONBOUNDARYin c ***********************************************************************implicit none integer ONBOUNDARYin common ebparams</type>
      <name>FLOW_EB</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c ONBOUNDARYin c ***********************************************************************implicit none integer ONBOUNDARYin common ebparams &amp;</type>
      <name>OUTSIDE_EB</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c ONBOUNDARYin c ***********************************************************************implicit none integer ONBOUNDARYin common ebparams</type>
      <name>INSIDE_EB</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c ONBOUNDARYin c ***********************************************************************implicit none integer ONBOUNDARYin common ebparams</type>
      <name>BOUNDARY_EB</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c ONBOUNDARYin c ***********************************************************************implicit none integer ONBOUNDARYin common ebparams ONBOUNDARY_EB integer ONBOUNDARY_EB c ***********************************************************************c ONBOUNDARY_EB integer ONBOUNDARY_EB c ***********************************************************************c integer &amp;</type>
      <name>ifirst0</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c ONBOUNDARYin c ***********************************************************************implicit none integer ONBOUNDARYin common ebparams ONBOUNDARY_EB integer ONBOUNDARY_EB c ***********************************************************************c ONBOUNDARY_EB integer ONBOUNDARY_EB c ***********************************************************************c integer</type>
      <name>ifirst1</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c ONBOUNDARYin c ***********************************************************************implicit none integer ONBOUNDARYin common ebparams ONBOUNDARY_EB integer ONBOUNDARY_EB c ***********************************************************************c ONBOUNDARY_EB integer ONBOUNDARY_EB c ***********************************************************************c integer &amp;</type>
      <name>ilast0</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c ONBOUNDARYin c ***********************************************************************implicit none integer ONBOUNDARYin common ebparams ONBOUNDARY_EB integer ONBOUNDARY_EB c ***********************************************************************c ONBOUNDARY_EB integer ONBOUNDARY_EB c ***********************************************************************c integer</type>
      <name>ilast1</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c ONBOUNDARYin c ***********************************************************************implicit none integer ONBOUNDARYin common ebparams ONBOUNDARY_EB integer ONBOUNDARY_EB c ***********************************************************************c ONBOUNDARY_EB integer ONBOUNDARY_EB c ***********************************************************************c integer &amp;</type>
      <name>ngc0</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c ONBOUNDARYin c ***********************************************************************implicit none integer ONBOUNDARYin common ebparams ONBOUNDARY_EB integer ONBOUNDARY_EB c ***********************************************************************c ONBOUNDARY_EB integer ONBOUNDARY_EB c ***********************************************************************c integer</type>
      <name>ngc1</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c ONBOUNDARYin c ***********************************************************************implicit none integer ONBOUNDARYin common ebparams ONBOUNDARY_EB integer ONBOUNDARY_EB c ***********************************************************************c ONBOUNDARY_EB integer ONBOUNDARY_EB c ***********************************************************************c integer &amp;</type>
      <name>cgc0</name>
      <anchorfile>appu__ebdry2d_8f.html</anchorfile>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>appu_ebdry3d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>appu__ebdry3d_8f</filename>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirst1</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirst2</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ilast0</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilast1</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilast2</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ngc0</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ngc1</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ngc2</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>cgc0</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cgc1</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cgc2</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>node_flag</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>cell_flag</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;cell_vol c ***********************************************************************implicit none common ebparams</type>
      <name>SOLID_EB</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;cell_vol c ***********************************************************************implicit none common ebparams</type>
      <name>CUT_EB</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;cell_vol c ***********************************************************************implicit none common ebparams</type>
      <name>BORDER_EB</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;cell_vol c ***********************************************************************implicit none common ebparams</type>
      <name>FLOW_EB</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;cell_vol c ***********************************************************************implicit none common ebparams &amp;</type>
      <name>OUTSIDE_EB</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;cell_vol c ***********************************************************************implicit none common ebparams</type>
      <name>INSIDE_EB</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;cell_vol c ***********************************************************************implicit none common ebparams</type>
      <name>BOUNDARY_EB</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;cell_vol c ***********************************************************************implicit none common ebparams ONBOUNDARY_EB integer ONBOUNDARY_EB c ***********************************************************************c integer &amp;</type>
      <name>ifirst0</name>
      <anchorfile>appu__ebdry3d_8f.html</anchorfile>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoundaryNode.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>BoundaryNode_8C</filename>
    <includes id="BoundaryNode_8h" name="BoundaryNode.h" local="yes" imported="no">BoundaryNode.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="EmbeddedBoundaryDefines_8h" name="EmbeddedBoundaryDefines.h" local="yes" imported="no">EmbeddedBoundaryDefines.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
    <member kind="define">
      <type>#define</type>
      <name>BOUNDARYNODE_VERSION</name>
      <anchorfile>BoundaryNode_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BOUNDARYNODE_LOC_UNDEFINED</name>
      <anchorfile>BoundaryNode_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoundaryNode.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>BoundaryNode_8h</filename>
    <includes id="NodeIndex_8h" name="NodeIndex.h" local="yes" imported="no">NodeIndex.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>CubesPatchInterface.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>CubesPatchInterface_8C</filename>
    <includes id="CubesPatchInterface_8h" name="CubesPatchInterface.h" local="yes" imported="no">CubesPatchInterface.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellIndex_8h" name="CellIndex.h" local="yes" imported="no">CellIndex.h</includes>
    <includes id="CutCell_8h" name="CutCell.h" local="yes" imported="no">CutCell.h</includes>
    <includes id="EmbeddedBoundaryDefines_8h" name="EmbeddedBoundaryDefines.h" local="yes" imported="no">EmbeddedBoundaryDefines.h</includes>
    <includes id="IndexData_8h" name="IndexData.h" local="yes" imported="no">IndexData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>CubesPatchInterface.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>CubesPatchInterface_8h</filename>
    <includes id="CartesianGridGeometry_8h" name="CartesianGridGeometry.h" local="yes" imported="no">CartesianGridGeometry.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
  </compound>
  <compound kind="file">
    <name>CutCell.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>CutCell_8C</filename>
    <includes id="CutCell_8h" name="CutCell.h" local="yes" imported="no">CutCell.h</includes>
    <includes id="CellIndex_8h" name="CellIndex.h" local="yes" imported="no">CellIndex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
    <member kind="define">
      <type>#define</type>
      <name>CUTCELL_VERSION</name>
      <anchorfile>CutCell_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CutCell.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>CutCell_8h</filename>
    <includes id="BoundaryNode_8h" name="BoundaryNode.h" local="yes" imported="no">BoundaryNode.h</includes>
    <includes id="CellIndex_8h" name="CellIndex.h" local="yes" imported="no">CellIndex.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>ElevenPatchInterface.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>ElevenPatchInterface_8C</filename>
    <includes id="ElevenPatchInterface_8h" name="ElevenPatchInterface.h" local="yes" imported="no">ElevenPatchInterface.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="CutCell_8h" name="CutCell.h" local="yes" imported="no">CutCell.h</includes>
    <includes id="EmbeddedBoundaryDefines_8h" name="EmbeddedBoundaryDefines.h" local="yes" imported="no">EmbeddedBoundaryDefines.h</includes>
    <includes id="IndexData_8h" name="IndexData.h" local="yes" imported="no">IndexData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>ElevenPatchInterface.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>ElevenPatchInterface_8h</filename>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
  </compound>
  <compound kind="file">
    <name>EmbeddedBoundaryDefines.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>EmbeddedBoundaryDefines_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>EmbeddedBoundaryGeometry.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>EmbeddedBoundaryGeometry_8C</filename>
    <includes id="EmbeddedBoundaryGeometry_8h" name="EmbeddedBoundaryGeometry.h" local="yes" imported="no">EmbeddedBoundaryGeometry.h</includes>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">BoundaryBox.h</includes>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="CartesianBoundaryDefines_8h" name="CartesianBoundaryDefines.h" local="yes" imported="no">CartesianBoundaryDefines.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellIterator_8h" name="CellIterator.h" local="yes" imported="no">CellIterator.h</includes>
    <includes id="CellIndex_8h" name="CellIndex.h" local="yes" imported="no">CellIndex.h</includes>
    <includes id="CellIntegerConstantRefine_8h" name="CellIntegerConstantRefine.h" local="yes" imported="no">CellIntegerConstantRefine.h</includes>
    <includes id="CellDoubleConstantRefine_8h" name="CellDoubleConstantRefine.h" local="yes" imported="no">CellDoubleConstantRefine.h</includes>
    <includes id="IndexData_8h" name="IndexData.h" local="yes" imported="no">IndexData.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="NodeIterator_8h" name="NodeIterator.h" local="yes" imported="no">NodeIterator.h</includes>
    <includes id="NodeIndex_8h" name="NodeIndex.h" local="yes" imported="no">NodeIndex.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">RefineSchedule.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <includes id="EmbeddedBoundaryShapePolygon_8h" name="EmbeddedBoundaryShapePolygon.h" local="yes" imported="no">EmbeddedBoundaryShapePolygon.h</includes>
    <includes id="EmbeddedBoundaryShapeSphere_8h" name="EmbeddedBoundaryShapeSphere.h" local="yes" imported="no">EmbeddedBoundaryShapeSphere.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
    <member kind="define">
      <type>#define</type>
      <name>APPU_EMBEDDED_BOUNDARY_GEOMETRY_VERSION</name>
      <anchorfile>EmbeddedBoundaryGeometry_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EBGEOM_UNDEFINED</name>
      <anchorfile>EmbeddedBoundaryGeometry_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CUTCASE_UNDEFINED</name>
      <anchorfile>EmbeddedBoundaryGeometry_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>USE_ARRAY_FOR_INOUT</name>
      <anchorfile>EmbeddedBoundaryGeometry_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setebparams_</name>
      <anchorfile>EmbeddedBoundaryGeometry_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>node2cellflag2d_</name>
      <anchorfile>EmbeddedBoundaryGeometry_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, int *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setebnode2d_</name>
      <anchorfile>EmbeddedBoundaryGeometry_8C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, int *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setebedge2d_</name>
      <anchorfile>EmbeddedBoundaryGeometry_8C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>node2cellflag3d_</name>
      <anchorfile>EmbeddedBoundaryGeometry_8C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, int *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setebnode3d_</name>
      <anchorfile>EmbeddedBoundaryGeometry_8C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setebedge3d_</name>
      <anchorfile>EmbeddedBoundaryGeometry_8C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setebface3d_</name>
      <anchorfile>EmbeddedBoundaryGeometry_8C.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EmbeddedBoundaryGeometry.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>EmbeddedBoundaryGeometry_8h</filename>
    <includes id="CutCell_8h" name="CutCell.h" local="yes" imported="no">CutCell.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="CartesianGridGeometry_8h" name="CartesianGridGeometry.h" local="yes" imported="no">CartesianGridGeometry.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <includes id="CubesPatchInterface_8h" name="CubesPatchInterface.h" local="yes" imported="no">CubesPatchInterface.h</includes>
    <includes id="EmbeddedBoundaryDefines_8h" name="EmbeddedBoundaryDefines.h" local="yes" imported="no">EmbeddedBoundaryDefines.h</includes>
    <includes id="EmbeddedBoundaryShape_8h" name="EmbeddedBoundaryShape.h" local="yes" imported="no">EmbeddedBoundaryShape.h</includes>
    <includes id="ElevenPatchInterface_8h" name="ElevenPatchInterface.h" local="yes" imported="no">ElevenPatchInterface.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="IndexVariable_8h" name="IndexVariable.h" local="yes" imported="no">IndexVariable.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">NodeVariable.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">RefineAlgorithm.h</includes>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">RefinePatchStrategy.h</includes>
    <includes id="VisItDataWriter_8h" name="VisItDataWriter.h" local="yes" imported="no">VisItDataWriter.h</includes>
    <includes id="VisMaterialsDataStrategy_8h" name="VisMaterialsDataStrategy.h" local="yes" imported="no">VisMaterialsDataStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>EmbeddedBoundaryGeometry_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EmbeddedBoundaryShape.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>EmbeddedBoundaryShape_8C</filename>
    <includes id="EmbeddedBoundaryShape_8h" name="EmbeddedBoundaryShape.h" local="yes" imported="no">EmbeddedBoundaryShape.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>EmbeddedBoundaryShape.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>EmbeddedBoundaryShape_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>EmbeddedBoundaryShapePolygon.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>EmbeddedBoundaryShapePolygon_8C</filename>
    <includes id="EmbeddedBoundaryShapePolygon_8h" name="EmbeddedBoundaryShapePolygon.h" local="yes" imported="no">EmbeddedBoundaryShapePolygon.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>EmbeddedBoundaryShapePolygon.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>EmbeddedBoundaryShapePolygon_8h</filename>
    <includes id="EmbeddedBoundaryShapePolygon_8I" name="EmbeddedBoundaryShapePolygon.I" local="yes" imported="no">EmbeddedBoundaryShapePolygon.I</includes>
    <includes id="EmbeddedBoundaryDefines_8h" name="EmbeddedBoundaryDefines.h" local="yes" imported="no">EmbeddedBoundaryDefines.h</includes>
    <includes id="EmbeddedBoundaryShape_8h" name="EmbeddedBoundaryShape.h" local="yes" imported="no">EmbeddedBoundaryShape.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>EmbeddedBoundaryShapePolygon.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>EmbeddedBoundaryShapePolygon_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>EmbeddedBoundaryShapeSphere.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>EmbeddedBoundaryShapeSphere_8C</filename>
    <includes id="EmbeddedBoundaryShapeSphere_8h" name="EmbeddedBoundaryShapeSphere.h" local="yes" imported="no">EmbeddedBoundaryShapeSphere.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>EmbeddedBoundaryShapeSphere.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>EmbeddedBoundaryShapeSphere_8h</filename>
    <includes id="EmbeddedBoundaryShapeSphere_8I" name="EmbeddedBoundaryShapeSphere.I" local="yes" imported="no">EmbeddedBoundaryShapeSphere.I</includes>
    <includes id="EmbeddedBoundaryShape_8h" name="EmbeddedBoundaryShape.h" local="yes" imported="no">EmbeddedBoundaryShape.h</includes>
    <includes id="EmbeddedBoundaryDefines_8h" name="EmbeddedBoundaryDefines.h" local="yes" imported="no">EmbeddedBoundaryDefines.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>EmbeddedBoundaryShapeSphere.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>EmbeddedBoundaryShapeSphere_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>appu_cpdat2buf2d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/plotting/</path>
    <filename>appu__cpdat2buf2d_8f</filename>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>appu__cpdat2buf2d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>gidxlo1</name>
      <anchorfile>appu__cpdat2buf2d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>bidxlo0</name>
      <anchorfile>appu__cpdat2buf2d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>bidxlo1</name>
      <anchorfile>appu__cpdat2buf2d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>bidxhi0</name>
      <anchorfile>appu__cpdat2buf2d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>bidxhi1</name>
      <anchorfile>appu__cpdat2buf2d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>gidxhi0</name>
      <anchorfile>appu__cpdat2buf2d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>gidxhi1</name>
      <anchorfile>appu__cpdat2buf2d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>darray</name>
      <anchorfile>appu__cpdat2buf2d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>buffer</name>
      <anchorfile>appu__cpdat2buf2d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c bufsize</type>
      <name>c</name>
      <anchorfile>appu__cpdat2buf2d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>appu_cpdat2buf3d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/plotting/</path>
    <filename>appu__cpdat2buf3d_8f</filename>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>appu__cpdat2buf3d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>gidxlo1</name>
      <anchorfile>appu__cpdat2buf3d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>gidxlo2</name>
      <anchorfile>appu__cpdat2buf3d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>bidxlo0</name>
      <anchorfile>appu__cpdat2buf3d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>bidxlo1</name>
      <anchorfile>appu__cpdat2buf3d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>bidxlo2</name>
      <anchorfile>appu__cpdat2buf3d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>bidxhi0</name>
      <anchorfile>appu__cpdat2buf3d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>bidxhi1</name>
      <anchorfile>appu__cpdat2buf3d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>bidxhi2</name>
      <anchorfile>appu__cpdat2buf3d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>gidxhi0</name>
      <anchorfile>appu__cpdat2buf3d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>gidxhi1</name>
      <anchorfile>appu__cpdat2buf3d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>gidxhi2</name>
      <anchorfile>appu__cpdat2buf3d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>farray</name>
      <anchorfile>appu__cpdat2buf3d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>buffer</name>
      <anchorfile>appu__cpdat2buf3d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c bufsize</type>
      <name>c</name>
      <anchorfile>appu__cpdat2buf3d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianVizamraiDataWriter.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/plotting/</path>
    <filename>CartesianVizamraiDataWriter_8C</filename>
    <includes id="CartesianVizamraiDataWriter_8h" name="CartesianVizamraiDataWriter.h" local="yes" imported="no">CartesianVizamraiDataWriter.h</includes>
    <includes id="CartesianGridGeometry_8h" name="CartesianGridGeometry.h" local="yes" imported="no">CartesianGridGeometry.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellDataFactory_8h" name="CellDataFactory.h" local="yes" imported="no">CellDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
    <member kind="define">
      <type>#define</type>
      <name>VIZAMRAI_FILE_FORMAT_VERSION</name>
      <anchorfile>CartesianVizamraiDataWriter_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUMP_DOUBLE_DATA</name>
      <anchorfile>CartesianVizamraiDataWriter_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUMP_FLOAT_DATA</name>
      <anchorfile>CartesianVizamraiDataWriter_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DATA_TO_VIZ_IS_UNDEFINED</name>
      <anchorfile>CartesianVizamraiDataWriter_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DATA_TO_VIZ_IS_DOUBLE</name>
      <anchorfile>CartesianVizamraiDataWriter_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DATA_TO_VIZ_IS_FLOAT</name>
      <anchorfile>CartesianVizamraiDataWriter_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DATA_TO_VIZ_IS_INT</name>
      <anchorfile>CartesianVizamraiDataWriter_8C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DOMAIN_SCALE_FACTOR</name>
      <anchorfile>CartesianVizamraiDataWriter_8C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianVizamraiDataWriter.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/plotting/</path>
    <filename>CartesianVizamraiDataWriter_8h</filename>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="VisDerivedDataStrategy_8h" name="VisDerivedDataStrategy.h" local="yes" imported="no">VisDerivedDataStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>CartesianVizamraiDataWriter_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VisDerivedDataStrategy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/plotting/</path>
    <filename>VisDerivedDataStrategy_8C</filename>
    <includes id="VisDerivedDataStrategy_8h" name="VisDerivedDataStrategy.h" local="yes" imported="no">VisDerivedDataStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>VisDerivedDataStrategy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/plotting/</path>
    <filename>VisDerivedDataStrategy_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>VisItDataWriter.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/plotting/</path>
    <filename>VisItDataWriter_8C</filename>
    <includes id="VisItDataWriter_8h" name="VisItDataWriter.h" local="yes" imported="no">VisItDataWriter.h</includes>
    <includes id="CartesianGridGeometry_8h" name="CartesianGridGeometry.h" local="yes" imported="no">CartesianGridGeometry.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellDataFactory_8h" name="CellDataFactory.h" local="yes" imported="no">CellDataFactory.h</includes>
    <includes id="MultiblockPatchHierarchy_8h" name="MultiblockPatchHierarchy.h" local="yes" imported="no">MultiblockPatchHierarchy.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="NodeDataFactory_8h" name="NodeDataFactory.h" local="yes" imported="no">NodeDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
    <member kind="define">
      <type>#define</type>
      <name>VISIT_NAME_BUFSIZE</name>
      <anchorfile>VisItDataWriter_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VISIT_UNDEFINED_INDEX</name>
      <anchorfile>VisItDataWriter_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VISIT_MASTER</name>
      <anchorfile>VisItDataWriter_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VISIT_DATAWRITER_VERSION_NUMBER</name>
      <anchorfile>VisItDataWriter_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VISIT_FILE_CLUSTER_WRITE_BATON</name>
      <anchorfile>VisItDataWriter_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cpfdat2buf3d_</name>
      <anchorfile>VisItDataWriter_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, float *, double *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cpddat2buf3d_</name>
      <anchorfile>VisItDataWriter_8C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, double *, double *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cpidat2buf3d_</name>
      <anchorfile>VisItDataWriter_8C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, int *, double *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cpfdat2buf2d_</name>
      <anchorfile>VisItDataWriter_8C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, float *, double *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cpddat2buf2d_</name>
      <anchorfile>VisItDataWriter_8C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, double *, double *, const int &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cpidat2buf2d_</name>
      <anchorfile>VisItDataWriter_8C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, int *, double *, const int &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VisItDataWriter.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/plotting/</path>
    <filename>VisItDataWriter_8h</filename>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="VisDerivedDataStrategy_8h" name="VisDerivedDataStrategy.h" local="yes" imported="no">VisDerivedDataStrategy.h</includes>
    <includes id="VisMaterialsDataStrategy_8h" name="VisMaterialsDataStrategy.h" local="yes" imported="no">VisMaterialsDataStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>VisItDataWriter_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VISIT_MAX_NUMBER_COMPONENTS</name>
      <anchorfile>VisItDataWriter_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VISIT_FIXED_DIM</name>
      <anchorfile>VisItDataWriter_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VisMaterialsDataStrategy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/plotting/</path>
    <filename>VisMaterialsDataStrategy_8C</filename>
    <includes id="VisMaterialsDataStrategy_8h" name="VisMaterialsDataStrategy.h" local="yes" imported="no">VisMaterialsDataStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>VisMaterialsDataStrategy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/plotting/</path>
    <filename>VisMaterialsDataStrategy_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianGridGeometry.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/grid_geom/</path>
    <filename>CartesianGridGeometry_8C</filename>
    <includes id="CartesianGridGeometry_8h" name="CartesianGridGeometry.h" local="yes" imported="no">CartesianGridGeometry.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="CartesianCellComplexWeightedAverage_8h" name="CartesianCellComplexWeightedAverage.h" local="yes" imported="no">CartesianCellComplexWeightedAverage.h</includes>
    <includes id="CartesianCellDoubleWeightedAverage_8h" name="CartesianCellDoubleWeightedAverage.h" local="yes" imported="no">CartesianCellDoubleWeightedAverage.h</includes>
    <includes id="CartesianCellFloatWeightedAverage_8h" name="CartesianCellFloatWeightedAverage.h" local="yes" imported="no">CartesianCellFloatWeightedAverage.h</includes>
    <includes id="CartesianCellComplexConservativeLinearRefine_8h" name="CartesianCellComplexConservativeLinearRefine.h" local="yes" imported="no">CartesianCellComplexConservativeLinearRefine.h</includes>
    <includes id="CartesianCellComplexLinearRefine_8h" name="CartesianCellComplexLinearRefine.h" local="yes" imported="no">CartesianCellComplexLinearRefine.h</includes>
    <includes id="CartesianCellDoubleConservativeLinearRefine_8h" name="CartesianCellDoubleConservativeLinearRefine.h" local="yes" imported="no">CartesianCellDoubleConservativeLinearRefine.h</includes>
    <includes id="CartesianCellDoubleLinearRefine_8h" name="CartesianCellDoubleLinearRefine.h" local="yes" imported="no">CartesianCellDoubleLinearRefine.h</includes>
    <includes id="CartesianCellFloatConservativeLinearRefine_8h" name="CartesianCellFloatConservativeLinearRefine.h" local="yes" imported="no">CartesianCellFloatConservativeLinearRefine.h</includes>
    <includes id="CartesianCellFloatLinearRefine_8h" name="CartesianCellFloatLinearRefine.h" local="yes" imported="no">CartesianCellFloatLinearRefine.h</includes>
    <includes id="CellComplexConstantRefine_8h" name="CellComplexConstantRefine.h" local="yes" imported="no">CellComplexConstantRefine.h</includes>
    <includes id="CellDoubleConstantRefine_8h" name="CellDoubleConstantRefine.h" local="yes" imported="no">CellDoubleConstantRefine.h</includes>
    <includes id="CellFloatConstantRefine_8h" name="CellFloatConstantRefine.h" local="yes" imported="no">CellFloatConstantRefine.h</includes>
    <includes id="CellIntegerConstantRefine_8h" name="CellIntegerConstantRefine.h" local="yes" imported="no">CellIntegerConstantRefine.h</includes>
    <includes id="CartesianEdgeComplexWeightedAverage_8h" name="CartesianEdgeComplexWeightedAverage.h" local="yes" imported="no">CartesianEdgeComplexWeightedAverage.h</includes>
    <includes id="CartesianEdgeDoubleWeightedAverage_8h" name="CartesianEdgeDoubleWeightedAverage.h" local="yes" imported="no">CartesianEdgeDoubleWeightedAverage.h</includes>
    <includes id="CartesianEdgeFloatWeightedAverage_8h" name="CartesianEdgeFloatWeightedAverage.h" local="yes" imported="no">CartesianEdgeFloatWeightedAverage.h</includes>
    <includes id="CartesianEdgeDoubleConservativeLinearRefine_8h" name="CartesianEdgeDoubleConservativeLinearRefine.h" local="yes" imported="no">CartesianEdgeDoubleConservativeLinearRefine.h</includes>
    <includes id="CartesianEdgeFloatConservativeLinearRefine_8h" name="CartesianEdgeFloatConservativeLinearRefine.h" local="yes" imported="no">CartesianEdgeFloatConservativeLinearRefine.h</includes>
    <includes id="EdgeComplexConstantRefine_8h" name="EdgeComplexConstantRefine.h" local="yes" imported="no">EdgeComplexConstantRefine.h</includes>
    <includes id="EdgeDoubleConstantRefine_8h" name="EdgeDoubleConstantRefine.h" local="yes" imported="no">EdgeDoubleConstantRefine.h</includes>
    <includes id="EdgeFloatConstantRefine_8h" name="EdgeFloatConstantRefine.h" local="yes" imported="no">EdgeFloatConstantRefine.h</includes>
    <includes id="EdgeIntegerConstantRefine_8h" name="EdgeIntegerConstantRefine.h" local="yes" imported="no">EdgeIntegerConstantRefine.h</includes>
    <includes id="CartesianFaceComplexWeightedAverage_8h" name="CartesianFaceComplexWeightedAverage.h" local="yes" imported="no">CartesianFaceComplexWeightedAverage.h</includes>
    <includes id="CartesianFaceDoubleWeightedAverage_8h" name="CartesianFaceDoubleWeightedAverage.h" local="yes" imported="no">CartesianFaceDoubleWeightedAverage.h</includes>
    <includes id="CartesianFaceFloatWeightedAverage_8h" name="CartesianFaceFloatWeightedAverage.h" local="yes" imported="no">CartesianFaceFloatWeightedAverage.h</includes>
    <includes id="CartesianFaceDoubleConservativeLinearRefine_8h" name="CartesianFaceDoubleConservativeLinearRefine.h" local="yes" imported="no">CartesianFaceDoubleConservativeLinearRefine.h</includes>
    <includes id="CartesianFaceFloatConservativeLinearRefine_8h" name="CartesianFaceFloatConservativeLinearRefine.h" local="yes" imported="no">CartesianFaceFloatConservativeLinearRefine.h</includes>
    <includes id="FaceComplexConstantRefine_8h" name="FaceComplexConstantRefine.h" local="yes" imported="no">FaceComplexConstantRefine.h</includes>
    <includes id="FaceDoubleConstantRefine_8h" name="FaceDoubleConstantRefine.h" local="yes" imported="no">FaceDoubleConstantRefine.h</includes>
    <includes id="FaceFloatConstantRefine_8h" name="FaceFloatConstantRefine.h" local="yes" imported="no">FaceFloatConstantRefine.h</includes>
    <includes id="FaceIntegerConstantRefine_8h" name="FaceIntegerConstantRefine.h" local="yes" imported="no">FaceIntegerConstantRefine.h</includes>
    <includes id="NodeComplexConstantAverage_8h" name="NodeComplexConstantAverage.h" local="yes" imported="no">NodeComplexConstantAverage.h</includes>
    <includes id="NodeDoubleConstantAverage_8h" name="NodeDoubleConstantAverage.h" local="yes" imported="no">NodeDoubleConstantAverage.h</includes>
    <includes id="NodeFloatConstantAverage_8h" name="NodeFloatConstantAverage.h" local="yes" imported="no">NodeFloatConstantAverage.h</includes>
    <includes id="NodeIntegerConstantAverage_8h" name="NodeIntegerConstantAverage.h" local="yes" imported="no">NodeIntegerConstantAverage.h</includes>
    <includes id="CartesianNodeComplexLinearRefine_8h" name="CartesianNodeComplexLinearRefine.h" local="yes" imported="no">CartesianNodeComplexLinearRefine.h</includes>
    <includes id="CartesianNodeDoubleLinearRefine_8h" name="CartesianNodeDoubleLinearRefine.h" local="yes" imported="no">CartesianNodeDoubleLinearRefine.h</includes>
    <includes id="CartesianNodeFloatLinearRefine_8h" name="CartesianNodeFloatLinearRefine.h" local="yes" imported="no">CartesianNodeFloatLinearRefine.h</includes>
    <includes id="CartesianOuterfaceComplexWeightedAverage_8h" name="CartesianOuterfaceComplexWeightedAverage.h" local="yes" imported="no">CartesianOuterfaceComplexWeightedAverage.h</includes>
    <includes id="CartesianOuterfaceDoubleWeightedAverage_8h" name="CartesianOuterfaceDoubleWeightedAverage.h" local="yes" imported="no">CartesianOuterfaceDoubleWeightedAverage.h</includes>
    <includes id="CartesianOuterfaceFloatWeightedAverage_8h" name="CartesianOuterfaceFloatWeightedAverage.h" local="yes" imported="no">CartesianOuterfaceFloatWeightedAverage.h</includes>
    <includes id="OuterfaceComplexConstantRefine_8h" name="OuterfaceComplexConstantRefine.h" local="yes" imported="no">OuterfaceComplexConstantRefine.h</includes>
    <includes id="OuterfaceDoubleConstantRefine_8h" name="OuterfaceDoubleConstantRefine.h" local="yes" imported="no">OuterfaceDoubleConstantRefine.h</includes>
    <includes id="OuterfaceFloatConstantRefine_8h" name="OuterfaceFloatConstantRefine.h" local="yes" imported="no">OuterfaceFloatConstantRefine.h</includes>
    <includes id="OuterfaceIntegerConstantRefine_8h" name="OuterfaceIntegerConstantRefine.h" local="yes" imported="no">OuterfaceIntegerConstantRefine.h</includes>
    <includes id="OuternodeDoubleConstantCoarsen_8h" name="OuternodeDoubleConstantCoarsen.h" local="yes" imported="no">OuternodeDoubleConstantCoarsen.h</includes>
    <includes id="CartesianOutersideDoubleWeightedAverage_8h" name="CartesianOutersideDoubleWeightedAverage.h" local="yes" imported="no">CartesianOutersideDoubleWeightedAverage.h</includes>
    <includes id="CartesianSideComplexWeightedAverage_8h" name="CartesianSideComplexWeightedAverage.h" local="yes" imported="no">CartesianSideComplexWeightedAverage.h</includes>
    <includes id="CartesianSideDoubleWeightedAverage_8h" name="CartesianSideDoubleWeightedAverage.h" local="yes" imported="no">CartesianSideDoubleWeightedAverage.h</includes>
    <includes id="CartesianSideFloatWeightedAverage_8h" name="CartesianSideFloatWeightedAverage.h" local="yes" imported="no">CartesianSideFloatWeightedAverage.h</includes>
    <includes id="CartesianSideDoubleConservativeLinearRefine_8h" name="CartesianSideDoubleConservativeLinearRefine.h" local="yes" imported="no">CartesianSideDoubleConservativeLinearRefine.h</includes>
    <includes id="CartesianSideFloatConservativeLinearRefine_8h" name="CartesianSideFloatConservativeLinearRefine.h" local="yes" imported="no">CartesianSideFloatConservativeLinearRefine.h</includes>
    <includes id="SideComplexConstantRefine_8h" name="SideComplexConstantRefine.h" local="yes" imported="no">SideComplexConstantRefine.h</includes>
    <includes id="SideDoubleConstantRefine_8h" name="SideDoubleConstantRefine.h" local="yes" imported="no">SideDoubleConstantRefine.h</includes>
    <includes id="SideFloatConstantRefine_8h" name="SideFloatConstantRefine.h" local="yes" imported="no">SideFloatConstantRefine.h</includes>
    <includes id="SideIntegerConstantRefine_8h" name="SideIntegerConstantRefine.h" local="yes" imported="no">SideIntegerConstantRefine.h</includes>
    <includes id="CellComplexLinearTimeInterpolateOp_8h" name="CellComplexLinearTimeInterpolateOp.h" local="yes" imported="no">CellComplexLinearTimeInterpolateOp.h</includes>
    <includes id="CellDoubleLinearTimeInterpolateOp_8h" name="CellDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">CellDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="CellFloatLinearTimeInterpolateOp_8h" name="CellFloatLinearTimeInterpolateOp.h" local="yes" imported="no">CellFloatLinearTimeInterpolateOp.h</includes>
    <includes id="EdgeComplexLinearTimeInterpolateOp_8h" name="EdgeComplexLinearTimeInterpolateOp.h" local="yes" imported="no">EdgeComplexLinearTimeInterpolateOp.h</includes>
    <includes id="EdgeDoubleLinearTimeInterpolateOp_8h" name="EdgeDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">EdgeDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="EdgeFloatLinearTimeInterpolateOp_8h" name="EdgeFloatLinearTimeInterpolateOp.h" local="yes" imported="no">EdgeFloatLinearTimeInterpolateOp.h</includes>
    <includes id="FaceComplexLinearTimeInterpolateOp_8h" name="FaceComplexLinearTimeInterpolateOp.h" local="yes" imported="no">FaceComplexLinearTimeInterpolateOp.h</includes>
    <includes id="FaceDoubleLinearTimeInterpolateOp_8h" name="FaceDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">FaceDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="FaceFloatLinearTimeInterpolateOp_8h" name="FaceFloatLinearTimeInterpolateOp.h" local="yes" imported="no">FaceFloatLinearTimeInterpolateOp.h</includes>
    <includes id="NodeComplexLinearTimeInterpolateOp_8h" name="NodeComplexLinearTimeInterpolateOp.h" local="yes" imported="no">NodeComplexLinearTimeInterpolateOp.h</includes>
    <includes id="NodeDoubleLinearTimeInterpolateOp_8h" name="NodeDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">NodeDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="NodeFloatLinearTimeInterpolateOp_8h" name="NodeFloatLinearTimeInterpolateOp.h" local="yes" imported="no">NodeFloatLinearTimeInterpolateOp.h</includes>
    <includes id="OuterfaceComplexLinearTimeInterpolateOp_8h" name="OuterfaceComplexLinearTimeInterpolateOp.h" local="yes" imported="no">OuterfaceComplexLinearTimeInterpolateOp.h</includes>
    <includes id="OuterfaceDoubleLinearTimeInterpolateOp_8h" name="OuterfaceDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">OuterfaceDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="OuterfaceFloatLinearTimeInterpolateOp_8h" name="OuterfaceFloatLinearTimeInterpolateOp.h" local="yes" imported="no">OuterfaceFloatLinearTimeInterpolateOp.h</includes>
    <includes id="OutersideComplexLinearTimeInterpolateOp_8h" name="OutersideComplexLinearTimeInterpolateOp.h" local="yes" imported="no">OutersideComplexLinearTimeInterpolateOp.h</includes>
    <includes id="OutersideDoubleLinearTimeInterpolateOp_8h" name="OutersideDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">OutersideDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="OutersideFloatLinearTimeInterpolateOp_8h" name="OutersideFloatLinearTimeInterpolateOp.h" local="yes" imported="no">OutersideFloatLinearTimeInterpolateOp.h</includes>
    <includes id="SideComplexLinearTimeInterpolateOp_8h" name="SideComplexLinearTimeInterpolateOp.h" local="yes" imported="no">SideComplexLinearTimeInterpolateOp.h</includes>
    <includes id="SideDoubleLinearTimeInterpolateOp_8h" name="SideDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">SideDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="SideFloatLinearTimeInterpolateOp_8h" name="SideFloatLinearTimeInterpolateOp.h" local="yes" imported="no">SideFloatLinearTimeInterpolateOp.h</includes>
    <includes id="BoundaryLookupTable_8h" name="BoundaryLookupTable.h" local="yes" imported="no">BoundaryLookupTable.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GEOM_CARTESIAN_GRID_GEOMETRY_VERSION</name>
      <anchorfile>CartesianGridGeometry_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianGridGeometry.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/grid_geom/</path>
    <filename>CartesianGridGeometry_8h</filename>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">BoundaryBox.h</includes>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="Geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <includes id="CartesianGridGeometry_8I" name="CartesianGridGeometry.I" local="yes" imported="no">CartesianGridGeometry.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianGridGeometry.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/grid_geom/</path>
    <filename>CartesianGridGeometry_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianCellComplexConservativeLinearRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/cell/</path>
    <filename>CartesianCellComplexConservativeLinearRefine_8C</filename>
    <includes id="CartesianCellComplexConservativeLinearRefine_8h" name="CartesianCellComplexConservativeLinearRefine.h" local="yes" imported="no">CartesianCellComplexConservativeLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefcellcplx1d_</name>
      <anchorfile>CartesianCellComplexConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *, dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefcellcplx2d_</name>
      <anchorfile>CartesianCellComplexConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *, dcomplex *, dcomplex *, dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefcellcplx3d_</name>
      <anchorfile>CartesianCellComplexConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *, dcomplex *, dcomplex *, dcomplex *, dcomplex *, dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianCellComplexConservativeLinearRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/cell/</path>
    <filename>CartesianCellComplexConservativeLinearRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianCellComplexLinearRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/cell/</path>
    <filename>CartesianCellComplexLinearRefine_8C</filename>
    <includes id="CartesianCellComplexLinearRefine_8h" name="CartesianCellComplexLinearRefine.h" local="yes" imported="no">CartesianCellComplexLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartlinrefcellcplx1d_</name>
      <anchorfile>CartesianCellComplexLinearRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartlinrefcellcplx2d_</name>
      <anchorfile>CartesianCellComplexLinearRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartlinrefcellcplx3d_</name>
      <anchorfile>CartesianCellComplexLinearRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianCellComplexLinearRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/cell/</path>
    <filename>CartesianCellComplexLinearRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianCellComplexWeightedAverage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/cell/</path>
    <filename>CartesianCellComplexWeightedAverage_8C</filename>
    <includes id="CartesianCellComplexWeightedAverage_8h" name="CartesianCellComplexWeightedAverage.h" local="yes" imported="no">CartesianCellComplexWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgcellcplx1d_</name>
      <anchorfile>CartesianCellComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgcellcplx2d_</name>
      <anchorfile>CartesianCellComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgcellcplx3d_</name>
      <anchorfile>CartesianCellComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianCellComplexWeightedAverage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/cell/</path>
    <filename>CartesianCellComplexWeightedAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianCellDoubleConservativeLinearRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/cell/</path>
    <filename>CartesianCellDoubleConservativeLinearRefine_8C</filename>
    <includes id="CartesianCellDoubleConservativeLinearRefine_8h" name="CartesianCellDoubleConservativeLinearRefine.h" local="yes" imported="no">CartesianCellDoubleConservativeLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefcelldoub1d_</name>
      <anchorfile>CartesianCellDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefcelldoub2d_</name>
      <anchorfile>CartesianCellDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefcelldoub3d_</name>
      <anchorfile>CartesianCellDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *, double *, double *, double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianCellDoubleConservativeLinearRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/cell/</path>
    <filename>CartesianCellDoubleConservativeLinearRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianCellDoubleLinearRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/cell/</path>
    <filename>CartesianCellDoubleLinearRefine_8C</filename>
    <includes id="CartesianCellDoubleLinearRefine_8h" name="CartesianCellDoubleLinearRefine.h" local="yes" imported="no">CartesianCellDoubleLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartlinrefcelldoub1d_</name>
      <anchorfile>CartesianCellDoubleLinearRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartlinrefcelldoub2d_</name>
      <anchorfile>CartesianCellDoubleLinearRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartlinrefcelldoub3d_</name>
      <anchorfile>CartesianCellDoubleLinearRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianCellDoubleLinearRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/cell/</path>
    <filename>CartesianCellDoubleLinearRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianCellDoubleWeightedAverage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/cell/</path>
    <filename>CartesianCellDoubleWeightedAverage_8C</filename>
    <includes id="CartesianCellDoubleWeightedAverage_8h" name="CartesianCellDoubleWeightedAverage.h" local="yes" imported="no">CartesianCellDoubleWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgcelldoub1d_</name>
      <anchorfile>CartesianCellDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgcelldoub2d_</name>
      <anchorfile>CartesianCellDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgcelldoub3d_</name>
      <anchorfile>CartesianCellDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianCellDoubleWeightedAverage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/cell/</path>
    <filename>CartesianCellDoubleWeightedAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianCellFloatConservativeLinearRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/cell/</path>
    <filename>CartesianCellFloatConservativeLinearRefine_8C</filename>
    <includes id="CartesianCellFloatConservativeLinearRefine_8h" name="CartesianCellFloatConservativeLinearRefine.h" local="yes" imported="no">CartesianCellFloatConservativeLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefcellflot1d_</name>
      <anchorfile>CartesianCellFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefcellflot2d_</name>
      <anchorfile>CartesianCellFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *, float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefcellflot3d_</name>
      <anchorfile>CartesianCellFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *, float *, float *, float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianCellFloatConservativeLinearRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/cell/</path>
    <filename>CartesianCellFloatConservativeLinearRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianCellFloatLinearRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/cell/</path>
    <filename>CartesianCellFloatLinearRefine_8C</filename>
    <includes id="CartesianCellFloatLinearRefine_8h" name="CartesianCellFloatLinearRefine.h" local="yes" imported="no">CartesianCellFloatLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartlinrefcellflot1d_</name>
      <anchorfile>CartesianCellFloatLinearRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartlinrefcellflot2d_</name>
      <anchorfile>CartesianCellFloatLinearRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartlinrefcellflot3d_</name>
      <anchorfile>CartesianCellFloatLinearRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianCellFloatLinearRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/cell/</path>
    <filename>CartesianCellFloatLinearRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianCellFloatWeightedAverage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/cell/</path>
    <filename>CartesianCellFloatWeightedAverage_8C</filename>
    <includes id="CartesianCellFloatWeightedAverage_8h" name="CartesianCellFloatWeightedAverage.h" local="yes" imported="no">CartesianCellFloatWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgcellflot1d_</name>
      <anchorfile>CartesianCellFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgcellflot2d_</name>
      <anchorfile>CartesianCellFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgcellflot3d_</name>
      <anchorfile>CartesianCellFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianCellFloatWeightedAverage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/cell/</path>
    <filename>CartesianCellFloatWeightedAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianEdgeComplexWeightedAverage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/edge/</path>
    <filename>CartesianEdgeComplexWeightedAverage_8C</filename>
    <includes id="CartesianEdgeComplexWeightedAverage_8h" name="CartesianEdgeComplexWeightedAverage.h" local="yes" imported="no">CartesianEdgeComplexWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">EdgeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgedgecplx1d_</name>
      <anchorfile>CartesianEdgeComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgedgecplx2d0_</name>
      <anchorfile>CartesianEdgeComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgedgecplx2d1_</name>
      <anchorfile>CartesianEdgeComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgedgecplx3d0_</name>
      <anchorfile>CartesianEdgeComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgedgecplx3d1_</name>
      <anchorfile>CartesianEdgeComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgedgecplx3d2_</name>
      <anchorfile>CartesianEdgeComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianEdgeComplexWeightedAverage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/edge/</path>
    <filename>CartesianEdgeComplexWeightedAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianEdgeDoubleConservativeLinearRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/edge/</path>
    <filename>CartesianEdgeDoubleConservativeLinearRefine_8C</filename>
    <includes id="CartesianEdgeDoubleConservativeLinearRefine_8h" name="CartesianEdgeDoubleConservativeLinearRefine.h" local="yes" imported="no">CartesianEdgeDoubleConservativeLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">EdgeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefedgedoub1d_</name>
      <anchorfile>CartesianEdgeDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefedgedoub2d0_</name>
      <anchorfile>CartesianEdgeDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefedgedoub2d1_</name>
      <anchorfile>CartesianEdgeDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefedgedoub3d0_</name>
      <anchorfile>CartesianEdgeDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *, double *, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefedgedoub3d1_</name>
      <anchorfile>CartesianEdgeDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *, double *, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefedgedoub3d2_</name>
      <anchorfile>CartesianEdgeDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *, double *, double *, double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianEdgeDoubleConservativeLinearRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/edge/</path>
    <filename>CartesianEdgeDoubleConservativeLinearRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianEdgeDoubleWeightedAverage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/edge/</path>
    <filename>CartesianEdgeDoubleWeightedAverage_8C</filename>
    <includes id="CartesianEdgeDoubleWeightedAverage_8h" name="CartesianEdgeDoubleWeightedAverage.h" local="yes" imported="no">CartesianEdgeDoubleWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">EdgeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgedgedoub1d_</name>
      <anchorfile>CartesianEdgeDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgedgedoub2d0_</name>
      <anchorfile>CartesianEdgeDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgedgedoub2d1_</name>
      <anchorfile>CartesianEdgeDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgedgedoub3d0_</name>
      <anchorfile>CartesianEdgeDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgedgedoub3d1_</name>
      <anchorfile>CartesianEdgeDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgedgedoub3d2_</name>
      <anchorfile>CartesianEdgeDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianEdgeDoubleWeightedAverage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/edge/</path>
    <filename>CartesianEdgeDoubleWeightedAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianEdgeFloatConservativeLinearRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/edge/</path>
    <filename>CartesianEdgeFloatConservativeLinearRefine_8C</filename>
    <includes id="CartesianEdgeFloatConservativeLinearRefine_8h" name="CartesianEdgeFloatConservativeLinearRefine.h" local="yes" imported="no">CartesianEdgeFloatConservativeLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">EdgeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefedgeflot1d_</name>
      <anchorfile>CartesianEdgeFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefedgeflot2d0_</name>
      <anchorfile>CartesianEdgeFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *, float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefedgeflot2d1_</name>
      <anchorfile>CartesianEdgeFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *, float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefedgeflot3d0_</name>
      <anchorfile>CartesianEdgeFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *, float *, float *, float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefedgeflot3d1_</name>
      <anchorfile>CartesianEdgeFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *, float *, float *, float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefedgeflot3d2_</name>
      <anchorfile>CartesianEdgeFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *, float *, float *, float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianEdgeFloatConservativeLinearRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/edge/</path>
    <filename>CartesianEdgeFloatConservativeLinearRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianEdgeFloatWeightedAverage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/edge/</path>
    <filename>CartesianEdgeFloatWeightedAverage_8C</filename>
    <includes id="CartesianEdgeFloatWeightedAverage_8h" name="CartesianEdgeFloatWeightedAverage.h" local="yes" imported="no">CartesianEdgeFloatWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">EdgeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgedgeflot1d_</name>
      <anchorfile>CartesianEdgeFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgedgeflot2d0_</name>
      <anchorfile>CartesianEdgeFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgedgeflot2d1_</name>
      <anchorfile>CartesianEdgeFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgedgeflot3d0_</name>
      <anchorfile>CartesianEdgeFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgedgeflot3d1_</name>
      <anchorfile>CartesianEdgeFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgedgeflot3d2_</name>
      <anchorfile>CartesianEdgeFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianEdgeFloatWeightedAverage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/edge/</path>
    <filename>CartesianEdgeFloatWeightedAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianFaceComplexWeightedAverage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/face/</path>
    <filename>CartesianFaceComplexWeightedAverage_8C</filename>
    <includes id="CartesianFaceComplexWeightedAverage_8h" name="CartesianFaceComplexWeightedAverage.h" local="yes" imported="no">CartesianFaceComplexWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">FaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgfacecplx1d_</name>
      <anchorfile>CartesianFaceComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgfacecplx2d0_</name>
      <anchorfile>CartesianFaceComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgfacecplx2d1_</name>
      <anchorfile>CartesianFaceComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgfacecplx3d0_</name>
      <anchorfile>CartesianFaceComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgfacecplx3d1_</name>
      <anchorfile>CartesianFaceComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgfacecplx3d2_</name>
      <anchorfile>CartesianFaceComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianFaceComplexWeightedAverage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/face/</path>
    <filename>CartesianFaceComplexWeightedAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianFaceDoubleConservativeLinearRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/face/</path>
    <filename>CartesianFaceDoubleConservativeLinearRefine_8C</filename>
    <includes id="CartesianFaceDoubleConservativeLinearRefine_8h" name="CartesianFaceDoubleConservativeLinearRefine.h" local="yes" imported="no">CartesianFaceDoubleConservativeLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">FaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartclinreffacedoub1d_</name>
      <anchorfile>CartesianFaceDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinreffacedoub2d0_</name>
      <anchorfile>CartesianFaceDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinreffacedoub2d1_</name>
      <anchorfile>CartesianFaceDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinreffacedoub3d0_</name>
      <anchorfile>CartesianFaceDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *, double *, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinreffacedoub3d1_</name>
      <anchorfile>CartesianFaceDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *, double *, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinreffacedoub3d2_</name>
      <anchorfile>CartesianFaceDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *, double *, double *, double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianFaceDoubleConservativeLinearRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/face/</path>
    <filename>CartesianFaceDoubleConservativeLinearRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianFaceDoubleWeightedAverage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/face/</path>
    <filename>CartesianFaceDoubleWeightedAverage_8C</filename>
    <includes id="CartesianFaceDoubleWeightedAverage_8h" name="CartesianFaceDoubleWeightedAverage.h" local="yes" imported="no">CartesianFaceDoubleWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">FaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgfacedoub1d_</name>
      <anchorfile>CartesianFaceDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgfacedoub2d0_</name>
      <anchorfile>CartesianFaceDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgfacedoub2d1_</name>
      <anchorfile>CartesianFaceDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgfacedoub3d0_</name>
      <anchorfile>CartesianFaceDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgfacedoub3d1_</name>
      <anchorfile>CartesianFaceDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgfacedoub3d2_</name>
      <anchorfile>CartesianFaceDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianFaceDoubleWeightedAverage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/face/</path>
    <filename>CartesianFaceDoubleWeightedAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianFaceFloatConservativeLinearRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/face/</path>
    <filename>CartesianFaceFloatConservativeLinearRefine_8C</filename>
    <includes id="CartesianFaceFloatConservativeLinearRefine_8h" name="CartesianFaceFloatConservativeLinearRefine.h" local="yes" imported="no">CartesianFaceFloatConservativeLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">FaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartclinreffaceflot1d_</name>
      <anchorfile>CartesianFaceFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinreffaceflot2d0_</name>
      <anchorfile>CartesianFaceFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *, float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinreffaceflot2d1_</name>
      <anchorfile>CartesianFaceFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *, float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinreffaceflot3d0_</name>
      <anchorfile>CartesianFaceFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *, float *, float *, float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinreffaceflot3d1_</name>
      <anchorfile>CartesianFaceFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *, float *, float *, float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinreffaceflot3d2_</name>
      <anchorfile>CartesianFaceFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *, float *, float *, float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianFaceFloatConservativeLinearRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/face/</path>
    <filename>CartesianFaceFloatConservativeLinearRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianFaceFloatWeightedAverage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/face/</path>
    <filename>CartesianFaceFloatWeightedAverage_8C</filename>
    <includes id="CartesianFaceFloatWeightedAverage_8h" name="CartesianFaceFloatWeightedAverage.h" local="yes" imported="no">CartesianFaceFloatWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">FaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgfaceflot1d_</name>
      <anchorfile>CartesianFaceFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgfaceflot2d0_</name>
      <anchorfile>CartesianFaceFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgfaceflot2d1_</name>
      <anchorfile>CartesianFaceFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgfaceflot3d0_</name>
      <anchorfile>CartesianFaceFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgfaceflot3d1_</name>
      <anchorfile>CartesianFaceFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgfaceflot3d2_</name>
      <anchorfile>CartesianFaceFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianFaceFloatWeightedAverage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/face/</path>
    <filename>CartesianFaceFloatWeightedAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>geom_cartcoarsen1d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/fortran/</path>
    <filename>geom__cartcoarsen1d_8f</filename>
    <member kind="function">
      <type>c c arrayc c ***********************************************************************implicit none double precision zero</type>
      <name>parameter</name>
      <anchorfile>geom__cartcoarsen1d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(zero=0.d0) c integer &amp;ifirstc0</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>geom__cartcoarsen1d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc0</name>
      <anchorfile>geom__cartcoarsen1d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>filo0</name>
      <anchorfile>geom__cartcoarsen1d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi0</name>
      <anchorfile>geom__cartcoarsen1d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>cilo0</name>
      <anchorfile>geom__cartcoarsen1d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi0</name>
      <anchorfile>geom__cartcoarsen1d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ratio</name>
      <anchorfile>geom__cartcoarsen1d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dxf</name>
      <anchorfile>geom__cartcoarsen1d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dxc</name>
      <anchorfile>geom__cartcoarsen1d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>arrayf</name>
      <anchorfile>geom__cartcoarsen1d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geom_cartcoarsen2d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/fortran/</path>
    <filename>geom__cartcoarsen2d_8f</filename>
    <member kind="function">
      <type>c c arrayc c ***********************************************************************implicit none double precision zero</type>
      <name>parameter</name>
      <anchorfile>geom__cartcoarsen2d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(zero=0.d0) c integer &amp;ifirstc0</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>geom__cartcoarsen2d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirstc1</name>
      <anchorfile>geom__cartcoarsen2d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc0</name>
      <anchorfile>geom__cartcoarsen2d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc1</name>
      <anchorfile>geom__cartcoarsen2d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>filo0</name>
      <anchorfile>geom__cartcoarsen2d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>filo1</name>
      <anchorfile>geom__cartcoarsen2d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi0</name>
      <anchorfile>geom__cartcoarsen2d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi1</name>
      <anchorfile>geom__cartcoarsen2d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>cilo0</name>
      <anchorfile>geom__cartcoarsen2d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cilo1</name>
      <anchorfile>geom__cartcoarsen2d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi0</name>
      <anchorfile>geom__cartcoarsen2d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi1</name>
      <anchorfile>geom__cartcoarsen2d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ratio</name>
      <anchorfile>geom__cartcoarsen2d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dxf</name>
      <anchorfile>geom__cartcoarsen2d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dxc</name>
      <anchorfile>geom__cartcoarsen2d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>arrayf</name>
      <anchorfile>geom__cartcoarsen2d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geom_cartcoarsen3d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/fortran/</path>
    <filename>geom__cartcoarsen3d_8f</filename>
    <member kind="function">
      <type>c c arrayc c ***********************************************************************implicit none double precision zero</type>
      <name>parameter</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(zero=0.d0) c integer &amp;ifirstc0</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirstc1</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirstc2</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc0</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc1</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc2</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>filo0</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>filo1</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>filo2</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi0</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi1</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi2</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>cilo0</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cilo1</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cilo2</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi0</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi1</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi2</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ratio</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dxf</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dxc</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>arrayf</name>
      <anchorfile>geom__cartcoarsen3d_8f.html</anchorfile>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geom_cartrefine1d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/fortran/</path>
    <filename>geom__cartrefine1d_8f</filename>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>geom__cartrefine1d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc0</name>
      <anchorfile>geom__cartrefine1d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ifirstf0</name>
      <anchorfile>geom__cartrefine1d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastf0</name>
      <anchorfile>geom__cartrefine1d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>cilo0</name>
      <anchorfile>geom__cartrefine1d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi0</name>
      <anchorfile>geom__cartrefine1d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>filo0</name>
      <anchorfile>geom__cartrefine1d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi0</name>
      <anchorfile>geom__cartrefine1d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ratio</name>
      <anchorfile>geom__cartrefine1d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dxc</name>
      <anchorfile>geom__cartrefine1d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dxf</name>
      <anchorfile>geom__cartrefine1d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>arrayc</name>
      <anchorfile>geom__cartrefine1d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c arrayf c ***********************************************************************implicit none double precision</type>
      <name>half</name>
      <anchorfile>geom__cartrefine1d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geom_cartrefine2d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/fortran/</path>
    <filename>geom__cartrefine2d_8f</filename>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirstc1</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc0</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc1</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ifirstf0</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirstf1</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastf0</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastf1</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>cilo0</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cilo1</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi0</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi1</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>filo0</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>filo1</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi0</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi1</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ratio</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dxc</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dxf</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>arrayc</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c arrayf c ***********************************************************************implicit none double precision</type>
      <name>half</name>
      <anchorfile>geom__cartrefine2d_8f.html</anchorfile>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geom_cartrefine3d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/fortran/</path>
    <filename>geom__cartrefine3d_8f</filename>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirstc1</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirstc2</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc0</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc1</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc2</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ifirstf0</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirstf1</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirstf2</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastf0</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastf1</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastf2</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>cilo0</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cilo1</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cilo2</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi0</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi1</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi2</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>filo0</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>filo1</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>filo2</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi0</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi1</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi2</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ratio</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dxc</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dxf</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>arrayc</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c arrayf c ***********************************************************************implicit none double precision</type>
      <name>half</name>
      <anchorfile>geom__cartrefine3d_8f.html</anchorfile>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianNodeComplexLinearRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/node/</path>
    <filename>CartesianNodeComplexLinearRefine_8C</filename>
    <includes id="CartesianNodeComplexLinearRefine_8h" name="CartesianNodeComplexLinearRefine.h" local="yes" imported="no">CartesianNodeComplexLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">NodeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartlinrefnodecplx1d_</name>
      <anchorfile>CartesianNodeComplexLinearRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartlinrefnodecplx2d_</name>
      <anchorfile>CartesianNodeComplexLinearRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartlinrefnodecplx3d_</name>
      <anchorfile>CartesianNodeComplexLinearRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianNodeComplexLinearRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/node/</path>
    <filename>CartesianNodeComplexLinearRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianNodeDoubleLinearRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/node/</path>
    <filename>CartesianNodeDoubleLinearRefine_8C</filename>
    <includes id="CartesianNodeDoubleLinearRefine_8h" name="CartesianNodeDoubleLinearRefine.h" local="yes" imported="no">CartesianNodeDoubleLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">NodeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartlinrefnodedoub1d_</name>
      <anchorfile>CartesianNodeDoubleLinearRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartlinrefnodedoub2d_</name>
      <anchorfile>CartesianNodeDoubleLinearRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartlinrefnodedoub3d_</name>
      <anchorfile>CartesianNodeDoubleLinearRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianNodeDoubleLinearRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/node/</path>
    <filename>CartesianNodeDoubleLinearRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianNodeFloatLinearRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/node/</path>
    <filename>CartesianNodeFloatLinearRefine_8C</filename>
    <includes id="CartesianNodeFloatLinearRefine_8h" name="CartesianNodeFloatLinearRefine.h" local="yes" imported="no">CartesianNodeFloatLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">NodeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartlinrefnodeflot1d_</name>
      <anchorfile>CartesianNodeFloatLinearRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartlinrefnodeflot2d_</name>
      <anchorfile>CartesianNodeFloatLinearRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartlinrefnodeflot3d_</name>
      <anchorfile>CartesianNodeFloatLinearRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianNodeFloatLinearRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/node/</path>
    <filename>CartesianNodeFloatLinearRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianOuterfaceComplexWeightedAverage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/outerface/</path>
    <filename>CartesianOuterfaceComplexWeightedAverage_8C</filename>
    <includes id="CartesianOuterfaceComplexWeightedAverage_8h" name="CartesianOuterfaceComplexWeightedAverage.h" local="yes" imported="no">CartesianOuterfaceComplexWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">OuterfaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutfacecplx1d_</name>
      <anchorfile>CartesianOuterfaceComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutfacecplx2d0_</name>
      <anchorfile>CartesianOuterfaceComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutfacecplx2d1_</name>
      <anchorfile>CartesianOuterfaceComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutfacecplx3d0_</name>
      <anchorfile>CartesianOuterfaceComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutfacecplx3d1_</name>
      <anchorfile>CartesianOuterfaceComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutfacecplx3d2_</name>
      <anchorfile>CartesianOuterfaceComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianOuterfaceComplexWeightedAverage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/outerface/</path>
    <filename>CartesianOuterfaceComplexWeightedAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianOuterfaceDoubleWeightedAverage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/outerface/</path>
    <filename>CartesianOuterfaceDoubleWeightedAverage_8C</filename>
    <includes id="CartesianOuterfaceDoubleWeightedAverage_8h" name="CartesianOuterfaceDoubleWeightedAverage.h" local="yes" imported="no">CartesianOuterfaceDoubleWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">OuterfaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutfacedoub1d_</name>
      <anchorfile>CartesianOuterfaceDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutfacedoub2d0_</name>
      <anchorfile>CartesianOuterfaceDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutfacedoub2d1_</name>
      <anchorfile>CartesianOuterfaceDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutfacedoub3d0_</name>
      <anchorfile>CartesianOuterfaceDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutfacedoub3d1_</name>
      <anchorfile>CartesianOuterfaceDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutfacedoub3d2_</name>
      <anchorfile>CartesianOuterfaceDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianOuterfaceDoubleWeightedAverage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/outerface/</path>
    <filename>CartesianOuterfaceDoubleWeightedAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianOuterfaceFloatWeightedAverage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/outerface/</path>
    <filename>CartesianOuterfaceFloatWeightedAverage_8C</filename>
    <includes id="CartesianOuterfaceFloatWeightedAverage_8h" name="CartesianOuterfaceFloatWeightedAverage.h" local="yes" imported="no">CartesianOuterfaceFloatWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">OuterfaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutfaceflot1d_</name>
      <anchorfile>CartesianOuterfaceFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutfaceflot2d0_</name>
      <anchorfile>CartesianOuterfaceFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutfaceflot2d1_</name>
      <anchorfile>CartesianOuterfaceFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutfaceflot3d0_</name>
      <anchorfile>CartesianOuterfaceFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutfaceflot3d1_</name>
      <anchorfile>CartesianOuterfaceFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutfaceflot3d2_</name>
      <anchorfile>CartesianOuterfaceFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianOuterfaceFloatWeightedAverage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/outerface/</path>
    <filename>CartesianOuterfaceFloatWeightedAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianOutersideDoubleWeightedAverage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/outerside/</path>
    <filename>CartesianOutersideDoubleWeightedAverage_8C</filename>
    <includes id="CartesianOutersideDoubleWeightedAverage_8h" name="CartesianOutersideDoubleWeightedAverage.h" local="yes" imported="no">CartesianOutersideDoubleWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="OutersideData_8h" name="OutersideData.h" local="yes" imported="no">OutersideData.h</includes>
    <includes id="OutersideVariable_8h" name="OutersideVariable.h" local="yes" imported="no">OutersideVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutsidedoub1d_</name>
      <anchorfile>CartesianOutersideDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutsidedoub2d0_</name>
      <anchorfile>CartesianOutersideDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutsidedoub2d1_</name>
      <anchorfile>CartesianOutersideDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutsidedoub3d0_</name>
      <anchorfile>CartesianOutersideDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutsidedoub3d1_</name>
      <anchorfile>CartesianOutersideDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgoutsidedoub3d2_</name>
      <anchorfile>CartesianOutersideDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianOutersideDoubleWeightedAverage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/outerside/</path>
    <filename>CartesianOutersideDoubleWeightedAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianSideComplexWeightedAverage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/side/</path>
    <filename>CartesianSideComplexWeightedAverage_8C</filename>
    <includes id="CartesianSideComplexWeightedAverage_8h" name="CartesianSideComplexWeightedAverage.h" local="yes" imported="no">CartesianSideComplexWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SideVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgsidecplx1d_</name>
      <anchorfile>CartesianSideComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgsidecplx2d0_</name>
      <anchorfile>CartesianSideComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgsidecplx2d1_</name>
      <anchorfile>CartesianSideComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgsidecplx3d0_</name>
      <anchorfile>CartesianSideComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgsidecplx3d1_</name>
      <anchorfile>CartesianSideComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgsidecplx3d2_</name>
      <anchorfile>CartesianSideComplexWeightedAverage_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianSideComplexWeightedAverage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/side/</path>
    <filename>CartesianSideComplexWeightedAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianSideDoubleConservativeLinearRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/side/</path>
    <filename>CartesianSideDoubleConservativeLinearRefine_8C</filename>
    <includes id="CartesianSideDoubleConservativeLinearRefine_8h" name="CartesianSideDoubleConservativeLinearRefine.h" local="yes" imported="no">CartesianSideDoubleConservativeLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SideVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefsidedoub1d_</name>
      <anchorfile>CartesianSideDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefsidedoub2d0_</name>
      <anchorfile>CartesianSideDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefsidedoub2d1_</name>
      <anchorfile>CartesianSideDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefsidedoub3d0_</name>
      <anchorfile>CartesianSideDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *, double *, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefsidedoub3d1_</name>
      <anchorfile>CartesianSideDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *, double *, double *, double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefsidedoub3d2_</name>
      <anchorfile>CartesianSideDoubleConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *, double *, double *, double *, double *, double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianSideDoubleConservativeLinearRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/side/</path>
    <filename>CartesianSideDoubleConservativeLinearRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianSideDoubleWeightedAverage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/side/</path>
    <filename>CartesianSideDoubleWeightedAverage_8C</filename>
    <includes id="CartesianSideDoubleWeightedAverage_8h" name="CartesianSideDoubleWeightedAverage.h" local="yes" imported="no">CartesianSideDoubleWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SideVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgsidedoub1d_</name>
      <anchorfile>CartesianSideDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgsidedoub2d0_</name>
      <anchorfile>CartesianSideDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgsidedoub2d1_</name>
      <anchorfile>CartesianSideDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgsidedoub3d0_</name>
      <anchorfile>CartesianSideDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgsidedoub3d1_</name>
      <anchorfile>CartesianSideDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgsidedoub3d2_</name>
      <anchorfile>CartesianSideDoubleWeightedAverage_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianSideDoubleWeightedAverage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/side/</path>
    <filename>CartesianSideDoubleWeightedAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianSideFloatConservativeLinearRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/side/</path>
    <filename>CartesianSideFloatConservativeLinearRefine_8C</filename>
    <includes id="CartesianSideFloatConservativeLinearRefine_8h" name="CartesianSideFloatConservativeLinearRefine.h" local="yes" imported="no">CartesianSideFloatConservativeLinearRefine.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SideVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefsideflot1d_</name>
      <anchorfile>CartesianSideFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefsideflot2d0_</name>
      <anchorfile>CartesianSideFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *, float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefsideflot2d1_</name>
      <anchorfile>CartesianSideFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *, float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefsideflot3d0_</name>
      <anchorfile>CartesianSideFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *, float *, float *, float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefsideflot3d1_</name>
      <anchorfile>CartesianSideFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *, float *, float *, float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartclinrefsideflot3d2_</name>
      <anchorfile>CartesianSideFloatConservativeLinearRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *, float *, float *, float *, float *, float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianSideFloatConservativeLinearRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/side/</path>
    <filename>CartesianSideFloatConservativeLinearRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianSideFloatWeightedAverage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/side/</path>
    <filename>CartesianSideFloatWeightedAverage_8C</filename>
    <includes id="CartesianSideFloatWeightedAverage_8h" name="CartesianSideFloatWeightedAverage.h" local="yes" imported="no">CartesianSideFloatWeightedAverage.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SideVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgsideflot1d_</name>
      <anchorfile>CartesianSideFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgsideflot2d0_</name>
      <anchorfile>CartesianSideFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgsideflot2d1_</name>
      <anchorfile>CartesianSideFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgsideflot3d0_</name>
      <anchorfile>CartesianSideFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgsideflot3d1_</name>
      <anchorfile>CartesianSideFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cartwgtavgsideflot3d2_</name>
      <anchorfile>CartesianSideFloatWeightedAverage_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, const double *, const float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianSideFloatWeightedAverage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/side/</path>
    <filename>CartesianSideFloatWeightedAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianPatchGeometry.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/patch_geom/</path>
    <filename>CartesianPatchGeometry_8C</filename>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>CartesianPatchGeometry_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianPatchGeometry.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/patch_geom/</path>
    <filename>CartesianPatchGeometry_8h</filename>
    <includes id="PatchGeometry_8h" name="PatchGeometry.h" local="yes" imported="no">PatchGeometry.h</includes>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="CartesianPatchGeometry_8I" name="CartesianPatchGeometry.I" local="yes" imported="no">CartesianPatchGeometry.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>CartesianPatchGeometry.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/patch_geom/</path>
    <filename>CartesianPatchGeometry_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>SkeletonGridGeometry.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/skeleton/grid_geom/</path>
    <filename>SkeletonGridGeometry_8C</filename>
    <includes id="SkeletonGridGeometry_8h" name="SkeletonGridGeometry.h" local="yes" imported="no">SkeletonGridGeometry.h</includes>
    <includes id="SkeletonPatchGeometry_8h" name="SkeletonPatchGeometry.h" local="yes" imported="no">SkeletonPatchGeometry.h</includes>
    <includes id="BoundaryLookupTable_8h" name="BoundaryLookupTable.h" local="yes" imported="no">BoundaryLookupTable.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <includes id="SkeletonCoarsen_8h" name="SkeletonCoarsen.h" local="yes" imported="no">SkeletonCoarsen.h</includes>
    <includes id="SkeletonRefine_8h" name="SkeletonRefine.h" local="yes" imported="no">SkeletonRefine.h</includes>
    <includes id="CellDoubleLinearTimeInterpolateOp_8h" name="CellDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">CellDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="SideDoubleLinearTimeInterpolateOp_8h" name="SideDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">SideDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="FaceDoubleLinearTimeInterpolateOp_8h" name="FaceDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">FaceDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="NodeDoubleLinearTimeInterpolateOp_8h" name="NodeDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">NodeDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="OuterfaceDoubleLinearTimeInterpolateOp_8h" name="OuterfaceDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">OuterfaceDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="OutersideDoubleLinearTimeInterpolateOp_8h" name="OutersideDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">OutersideDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GEOM_SKELETON_GRID_GEOMETRY_VERSION</name>
      <anchorfile>SkeletonGridGeometry_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SkeletonGridGeometry.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/skeleton/grid_geom/</path>
    <filename>SkeletonGridGeometry_8h</filename>
    <includes id="Geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>SkeletonCoarsen.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/skeleton/operators/</path>
    <filename>SkeletonCoarsen_8C</filename>
    <includes id="SkeletonCoarsen_8h" name="SkeletonCoarsen.h" local="yes" imported="no">SkeletonCoarsen.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>SkeletonCoarsen.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/skeleton/operators/</path>
    <filename>SkeletonCoarsen_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>SkeletonRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/skeleton/operators/</path>
    <filename>SkeletonRefine_8C</filename>
    <includes id="SkeletonRefine_8h" name="SkeletonRefine.h" local="yes" imported="no">SkeletonRefine.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>SkeletonRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/skeleton/operators/</path>
    <filename>SkeletonRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>SkeletonPatchGeometry.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/skeleton/patch_geom/</path>
    <filename>SkeletonPatchGeometry_8C</filename>
    <includes id="SkeletonPatchGeometry_8h" name="SkeletonPatchGeometry.h" local="yes" imported="no">SkeletonPatchGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>SkeletonPatchGeometry.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/skeleton/patch_geom/</path>
    <filename>SkeletonPatchGeometry_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchGeometry_8h" name="PatchGeometry.h" local="yes" imported="no">PatchGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>BinaryTree.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BinaryTree_8C</filename>
    <includes id="BinaryTree_8h" name="BinaryTree.h" local="yes" imported="no">BinaryTree.h</includes>
    <includes id="ProcessorMapping_8h" name="ProcessorMapping.h" local="yes" imported="no">ProcessorMapping.h</includes>
    <includes id="BoxComm_8h" name="BoxComm.h" local="yes" imported="no">BoxComm.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BinaryTree.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BinaryTree_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="ProcessorMapping_8h" name="ProcessorMapping.h" local="yes" imported="no">ProcessorMapping.h</includes>
    <includes id="BinaryTree_8I" name="BinaryTree.I" local="yes" imported="no">BinaryTree.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BinaryTree.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BinaryTree_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>Box.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>Box_8C</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(istream &amp;s, Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ostream &amp;s, const Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Box.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>Box_8h</filename>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="Box_8I" name="Box.I" local="yes" imported="no">Box.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>Box.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>Box_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>Box_8I.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoxArray.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxArray_8C</filename>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxArray.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxArray_8h</filename>
    <includes id="BoxArray_8I" name="BoxArray.I" local="yes" imported="no">BoxArray.I</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxArray.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxArray_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxComm.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxComm_8C</filename>
    <includes id="BoxComm_8h" name="BoxComm.h" local="yes" imported="no">BoxComm.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxComm.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxComm_8h</filename>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxGraph.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxGraph_8C</filename>
    <includes id="BoxGraph_8h" name="BoxGraph.h" local="yes" imported="no">BoxGraph.h</includes>
    <includes id="BoxGraphUtilities_8h" name="BoxGraphUtilities.h" local="yes" imported="no">BoxGraphUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_ADJ_GUESS</name>
      <anchorfile>BoxGraph_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoxGraph.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxGraph_8h</filename>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="ProcessorMapping_8h" name="ProcessorMapping.h" local="yes" imported="no">ProcessorMapping.h</includes>
    <includes id="BoxGraph_8I" name="BoxGraph.I" local="yes" imported="no">BoxGraph.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxGraph.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxGraph_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxGraphUtilities.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxGraphUtilities_8C</filename>
    <includes id="BoxGraphUtilities_8h" name="BoxGraphUtilities.h" local="yes" imported="no">BoxGraphUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxGraphUtilities.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxGraphUtilities_8h</filename>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxIOUtility.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxIOUtility_8C</filename>
    <includes id="BoxIOUtility_8h" name="BoxIOUtility.h" local="yes" imported="no">BoxIOUtility.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MESH_REFINE_BOX_IO_UTILITY</name>
      <anchorfile>BoxIOUtility_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoxIOUtility.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxIOUtility_8h</filename>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxList.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxList_8C</filename>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxList.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxList_8h</filename>
    <includes id="BoxList_8I" name="BoxList.I" local="yes" imported="no">BoxList.I</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxList.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxList_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxTop.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxTop_8C</filename>
    <includes id="BoxTop_8h" name="BoxTop.h" local="yes" imported="no">BoxTop.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="BoxGraphUtilities_8h" name="BoxGraphUtilities.h" local="yes" imported="no">BoxGraphUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxTop.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxTop_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxTree.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxTree_8C</filename>
    <includes id="BoxTree_8h" name="BoxTree.h" local="yes" imported="no">BoxTree.h</includes>
    <includes id="BoxGraphUtilities_8h" name="BoxGraphUtilities.h" local="yes" imported="no">BoxGraphUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>buildTboxArrayFromList</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Array&lt; int &gt; &amp;array, const tbox::List&lt; int &gt; &amp;list)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BoxTree.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxTree_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="BoxTreeNode_8h" name="BoxTreeNode.h" local="yes" imported="no">BoxTreeNode.h</includes>
    <includes id="ProcessorMapping_8h" name="ProcessorMapping.h" local="yes" imported="no">ProcessorMapping.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxTreeNode.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxTreeNode_8C</filename>
    <includes id="BoxTreeNode_8h" name="BoxTreeNode.h" local="yes" imported="no">BoxTreeNode.h</includes>
    <includes id="BoxGraphUtilities_8h" name="BoxGraphUtilities.h" local="yes" imported="no">BoxGraphUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxTreeNode.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxTreeNode_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxUtilities.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxUtilities_8C</filename>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">BoxUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxUtilities.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>BoxUtilities_8h</filename>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>Index.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>Index_8C</filename>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
  </compound>
  <compound kind="file">
    <name>Index.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>Index_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Index_8I" name="Index.I" local="yes" imported="no">Index.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>Index.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>Index_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>IntVector.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>IntVector_8C</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(istream &amp;s, IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ostream &amp;s, const IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IntVector.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>IntVector_8h</filename>
    <includes id="IntVector_8I" name="IntVector.I" local="yes" imported="no">IntVector.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>IntVector.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>IntVector_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>LayerEdgeSet.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/dlbg/</path>
    <filename>LayerEdgeSet_8C</filename>
    <includes id="LayerEdgeSet_8h" name="LayerEdgeSet.h" local="yes" imported="no">LayerEdgeSet.h</includes>
    <includes id="BoxTree_8h" name="BoxTree.h" local="yes" imported="no">BoxTree.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SIZE_EXCHANGE_TAG</name>
      <anchorfile>LayerEdgeSet_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EDGE_EXCHANGE_TAG</name>
      <anchorfile>LayerEdgeSet_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_SEND_EDGE_EXTRA_DATA</name>
      <anchorfile>LayerEdgeSet_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LayerEdgeSet.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/dlbg/</path>
    <filename>LayerEdgeSet_8h</filename>
    <includes id="LayerNode_8h" name="LayerNode.h" local="yes" imported="no">LayerNode.h</includes>
    <includes id="LayerNodeSet_8h" name="LayerNodeSet.h" local="yes" imported="no">LayerNodeSet.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="LayerEdgeSet_8I" name="LayerEdgeSet.I" local="yes" imported="no">LayerEdgeSet.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>LayerEdgeSet.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/dlbg/</path>
    <filename>LayerEdgeSet_8I</filename>
    <includes id="LayerEdgeSet_8h" name="LayerEdgeSet.h" local="yes" imported="no">LayerEdgeSet.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>LayerHierarchy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/dlbg/</path>
    <filename>LayerHierarchy_8C</filename>
    <includes id="LayerHierarchy_8h" name="LayerHierarchy.h" local="yes" imported="no">LayerHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>LayerHierarchy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/dlbg/</path>
    <filename>LayerHierarchy_8h</filename>
    <includes id="LayerEdgeSet_8h" name="LayerEdgeSet.h" local="yes" imported="no">LayerEdgeSet.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="LayerHierarchy_8I" name="LayerHierarchy.I" local="yes" imported="no">LayerHierarchy.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>LayerHierarchy.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/dlbg/</path>
    <filename>LayerHierarchy_8I</filename>
    <includes id="LayerEdgeSet_8h" name="LayerEdgeSet.h" local="yes" imported="no">LayerEdgeSet.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>LayerNode.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/dlbg/</path>
    <filename>LayerNode_8C</filename>
    <includes id="LayerNode_8h" name="LayerNode.h" local="yes" imported="no">LayerNode.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ostream &amp;co, const LayerNode&lt; DIM &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LayerNode.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/dlbg/</path>
    <filename>LayerNode_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="LayerNode_8I" name="LayerNode.I" local="yes" imported="no">LayerNode.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>LayerNode.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/dlbg/</path>
    <filename>LayerNode_8I</filename>
    <includes id="LayerNode_8h" name="LayerNode.h" local="yes" imported="no">LayerNode.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>LayerNodeSet.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/dlbg/</path>
    <filename>LayerNodeSet_8C</filename>
    <includes id="LayerNodeSet_8h" name="LayerNodeSet.h" local="yes" imported="no">LayerNodeSet.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SIZE_EXCHANGE_TAG</name>
      <anchorfile>LayerNodeSet_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EDGE_EXCHANGE_TAG</name>
      <anchorfile>LayerNodeSet_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LayerNodeSet.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/dlbg/</path>
    <filename>LayerNodeSet_8h</filename>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="LayerNodeSet_8I" name="LayerNodeSet.I" local="yes" imported="no">LayerNodeSet.I</includes>
    <includes id="LayerNode_8h" name="LayerNode.h" local="yes" imported="no">LayerNode.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>LayerNodeSet.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/dlbg/</path>
    <filename>LayerNodeSet_8I</filename>
    <includes id="LayerNodeSet_8h" name="LayerNodeSet.h" local="yes" imported="no">LayerNodeSet.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BasePatchHierarchy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>BasePatchHierarchy_8C</filename>
    <includes id="BasePatchHierarchy_8h" name="BasePatchHierarchy.h" local="yes" imported="no">BasePatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BasePatchHierarchy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>BasePatchHierarchy_8h</filename>
    <includes id="BasePatchLevel_8h" name="BasePatchLevel.h" local="yes" imported="no">BasePatchLevel.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="ProcessorMapping_8h" name="ProcessorMapping.h" local="yes" imported="no">ProcessorMapping.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BasePatchLevel.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>BasePatchLevel_8C</filename>
    <includes id="BasePatchLevel_8h" name="BasePatchLevel.h" local="yes" imported="no">BasePatchLevel.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BasePatchLevel.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>BasePatchLevel_8h</filename>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">ComponentSelector.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoundaryBox.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>BoundaryBox_8C</filename>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">BoundaryBox.h</includes>
    <includes id="BoundaryLookupTable_8h" name="BoundaryLookupTable.h" local="yes" imported="no">BoundaryLookupTable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoundaryBox.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>BoundaryBox_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoundaryBox_8I" name="BoundaryBox.I" local="yes" imported="no">BoundaryBox.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoundaryBox.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>BoundaryBox_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoundaryLookupTable.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>BoundaryLookupTable_8C</filename>
    <includes id="BoundaryLookupTable_8h" name="BoundaryLookupTable.h" local="yes" imported="no">BoundaryLookupTable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoundaryLookupTable.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>BoundaryLookupTable_8h</filename>
    <includes id="BoundaryLookupTable_8I" name="BoundaryLookupTable.I" local="yes" imported="no">BoundaryLookupTable.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoundaryLookupTable.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>BoundaryLookupTable_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>CoarseFineBoundary.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>CoarseFineBoundary_8C</filename>
    <includes id="CoarseFineBoundary_8h" name="CoarseFineBoundary.h" local="yes" imported="no">CoarseFineBoundary.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>CoarseFineBoundary.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>CoarseFineBoundary_8h</filename>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">BoundaryBox.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>GridGeometry.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>GridGeometry_8C</filename>
    <includes id="GridGeometry_8h" name="GridGeometry.h" local="yes" imported="no">GridGeometry.h</includes>
    <includes id="BoundaryLookupTable_8h" name="BoundaryLookupTable.h" local="yes" imported="no">BoundaryLookupTable.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>GridGeometry.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>GridGeometry_8h</filename>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="GridGeometry_8I" name="GridGeometry.I" local="yes" imported="no">GridGeometry.I</includes>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">BoundaryBox.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>GridGeometry.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>GridGeometry_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>Patch.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>Patch_8C</filename>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="define">
      <type>#define</type>
      <name>included_String</name>
      <anchorfile>Patch_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HIER_PATCH_VERSION</name>
      <anchorfile>Patch_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ostream &amp;s, const Patch&lt; DIM &gt; &amp;patch)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Patch.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>Patch_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">ComponentSelector.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="PatchGeometry_8h" name="PatchGeometry.h" local="yes" imported="no">PatchGeometry.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <includes id="VariableContext_8h" name="VariableContext.h" local="yes" imported="no">VariableContext.h</includes>
    <includes id="Patch_8I" name="Patch.I" local="yes" imported="no">Patch.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>Patch_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Patch.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>Patch_8I</filename>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>PatchFactory_8C</filename>
    <includes id="PatchFactory_8h" name="PatchFactory.h" local="yes" imported="no">PatchFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>PatchFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="PatchFactory_8I" name="PatchFactory.I" local="yes" imported="no">PatchFactory.I</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFactory.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>PatchFactory_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchGeometry.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>PatchGeometry_8C</filename>
    <includes id="PatchGeometry_8h" name="PatchGeometry.h" local="yes" imported="no">PatchGeometry.h</includes>
    <includes id="BoundaryLookupTable_8h" name="BoundaryLookupTable.h" local="yes" imported="no">BoundaryLookupTable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchGeometry.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>PatchGeometry_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchGeometry_8I" name="PatchGeometry.I" local="yes" imported="no">PatchGeometry.I</includes>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">BoundaryBox.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchGeometry.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>PatchGeometry_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchHierarchy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>PatchHierarchy_8C</filename>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="define">
      <type>#define</type>
      <name>HIER_PATCH_HIERARCHY_VERSION</name>
      <anchorfile>PatchHierarchy_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PATCHLEVEL_NAME_BUF_SIZE</name>
      <anchorfile>PatchHierarchy_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchHierarchy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>PatchHierarchy_8h</filename>
    <includes id="BasePatchHierarchy_8h" name="BasePatchHierarchy.h" local="yes" imported="no">BasePatchHierarchy.h</includes>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">ComponentSelector.h</includes>
    <includes id="GridGeometry_8h" name="GridGeometry.h" local="yes" imported="no">GridGeometry.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="PatchFactory_8h" name="PatchFactory.h" local="yes" imported="no">PatchFactory.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="PatchLevelFactory_8h" name="PatchLevelFactory.h" local="yes" imported="no">PatchLevelFactory.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <includes id="PatchHierarchy_8I" name="PatchHierarchy.I" local="yes" imported="no">PatchHierarchy.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchHierarchy.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>PatchHierarchy_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevel.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>PatchLevel_8C</filename>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="define">
      <type>#define</type>
      <name>HIER_PATCH_LEVEL_VERSION</name>
      <anchorfile>PatchLevel_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NAME_BUF_SIZE</name>
      <anchorfile>PatchLevel_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchLevel.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>PatchLevel_8h</filename>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="BinaryTree_8h" name="BinaryTree.h" local="yes" imported="no">BinaryTree.h</includes>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">ComponentSelector.h</includes>
    <includes id="BoxGraph_8h" name="BoxGraph.h" local="yes" imported="no">BoxGraph.h</includes>
    <includes id="BoxTop_8h" name="BoxTop.h" local="yes" imported="no">BoxTop.h</includes>
    <includes id="BoxTree_8h" name="BoxTree.h" local="yes" imported="no">BoxTree.h</includes>
    <includes id="PatchLevel_8I" name="PatchLevel.I" local="yes" imported="no">PatchLevel.I</includes>
    <includes id="BasePatchLevel_8h" name="BasePatchLevel.h" local="yes" imported="no">BasePatchLevel.h</includes>
    <includes id="PatchFactory_8h" name="PatchFactory.h" local="yes" imported="no">PatchFactory.h</includes>
    <includes id="ProcessorMapping_8h" name="ProcessorMapping.h" local="yes" imported="no">ProcessorMapping.h</includes>
    <includes id="GridGeometry_8h" name="GridGeometry.h" local="yes" imported="no">GridGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevel.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>PatchLevel_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevelFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>PatchLevelFactory_8C</filename>
    <includes id="PatchLevelFactory_8h" name="PatchLevelFactory.h" local="yes" imported="no">PatchLevelFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevelFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>PatchLevelFactory_8h</filename>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="PatchLevelFactory_8I" name="PatchLevelFactory.I" local="yes" imported="no">PatchLevelFactory.I</includes>
    <includes id="GridGeometry_8h" name="GridGeometry.h" local="yes" imported="no">GridGeometry.h</includes>
    <includes id="PatchFactory_8h" name="PatchFactory.h" local="yes" imported="no">PatchFactory.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchLevelFactory.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>PatchLevelFactory_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>ProcessorMapping.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>ProcessorMapping_8C</filename>
    <includes id="ProcessorMapping_8h" name="ProcessorMapping.h" local="yes" imported="no">ProcessorMapping.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>ProcessorMapping.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>ProcessorMapping_8h</filename>
    <includes id="ProcessorMapping_8I" name="ProcessorMapping.I" local="yes" imported="no">ProcessorMapping.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>ProcessorMapping.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>ProcessorMapping_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxGeometry.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>BoxGeometry_8C</filename>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxGeometry.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>BoxGeometry_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="BoxGeometry_8I" name="BoxGeometry.I" local="yes" imported="no">BoxGeometry.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxGeometry.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>BoxGeometry_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxOverlap.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>BoxOverlap_8C</filename>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxOverlap.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>BoxOverlap_8h</filename>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="BoxOverlap_8I" name="BoxOverlap.I" local="yes" imported="no">BoxOverlap.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>BoxOverlap.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>BoxOverlap_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>ComponentSelector.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>ComponentSelector_8C</filename>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">ComponentSelector.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>ComponentSelector.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>ComponentSelector_8h</filename>
    <includes id="ComponentSelector_8I" name="ComponentSelector.I" local="yes" imported="no">ComponentSelector.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>ComponentSelector.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>ComponentSelector_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataPatchLevelManager.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>LocallyActiveDataPatchLevelManager_8C</filename>
    <includes id="LocallyActiveDataPatchLevelManager_8h" name="LocallyActiveDataPatchLevelManager.h" local="yes" imported="no">LocallyActiveDataPatchLevelManager.h</includes>
    <includes id="LocallyActiveVariableDatabase_8h" name="LocallyActiveVariableDatabase.h" local="yes" imported="no">LocallyActiveVariableDatabase.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataPatchLevelManager.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>LocallyActiveDataPatchLevelManager_8h</filename>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">ComponentSelector.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="ProcessorMapping_8h" name="ProcessorMapping.h" local="yes" imported="no">ProcessorMapping.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <includes id="LocallyActiveDataPatchLevelManager_8I" name="LocallyActiveDataPatchLevelManager.I" local="yes" imported="no">LocallyActiveDataPatchLevelManager.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>LocallyActiveDataPatchLevelManager_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataPatchLevelManager.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>LocallyActiveDataPatchLevelManager_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveVariableDatabase.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>LocallyActiveVariableDatabase_8C</filename>
    <includes id="LocallyActiveVariableDatabase_8h" name="LocallyActiveVariableDatabase.h" local="yes" imported="no">LocallyActiveVariableDatabase.h</includes>
    <includes id="LocallyActiveDataPatchLevelManager_8h" name="LocallyActiveDataPatchLevelManager.h" local="yes" imported="no">LocallyActiveDataPatchLevelManager.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PATCHLEVEL_ARRAY_SCRATCH_SPACE</name>
      <anchorfile>LocallyActiveVariableDatabase_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VARIABLE_ARRAY_SCRATCH_SPACE</name>
      <anchorfile>LocallyActiveVariableDatabase_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DESCRIPTOR_ARRAY_SCRATCH_SPACE</name>
      <anchorfile>LocallyActiveVariableDatabase_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LocallyActiveVariableDatabase.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>LocallyActiveVariableDatabase_8h</filename>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="ProcessorMapping_8h" name="ProcessorMapping.h" local="yes" imported="no">ProcessorMapping.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <includes id="LocallyActiveVariableDatabase_8I" name="LocallyActiveVariableDatabase.I" local="yes" imported="no">LocallyActiveVariableDatabase.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveVariableDatabase.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>LocallyActiveVariableDatabase_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchData.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>PatchData_8C</filename>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="define">
      <type>#define</type>
      <name>HIER_PATCH_DATA_VERSION</name>
      <anchorfile>PatchData_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchData.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>PatchData_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchData_8I" name="PatchData.I" local="yes" imported="no">PatchData.I</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchData.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>PatchData_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchDataFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>PatchDataFactory_8C</filename>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchDataFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>PatchDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="PatchDataFactory_8I" name="PatchDataFactory.I" local="yes" imported="no">PatchDataFactory.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchDataFactory.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>PatchDataFactory_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchDescriptor.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>PatchDescriptor_8C</filename>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="define">
      <type>#define</type>
      <name>INDEX_UNDEFINED</name>
      <anchorfile>PatchDescriptor_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchDescriptor.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>PatchDescriptor_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchDescriptor_8I" name="PatchDescriptor.I" local="yes" imported="no">PatchDescriptor.I</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>PatchDescriptor.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>PatchDescriptor_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>Variable.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>Variable_8C</filename>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>Variable.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>Variable_8h</filename>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="Variable_8I" name="Variable.I" local="yes" imported="no">Variable.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>Variable.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>Variable_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>VariableContext.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>VariableContext_8C</filename>
    <includes id="VariableContext_8h" name="VariableContext.h" local="yes" imported="no">VariableContext.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>VariableContext.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>VariableContext_8h</filename>
    <includes id="VariableContext_8I" name="VariableContext.I" local="yes" imported="no">VariableContext.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>VariableContext.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>VariableContext_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>VariableDatabase.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>VariableDatabase_8C</filename>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
    <member kind="define">
      <type>#define</type>
      <name>CONTEXT_ARRAY_SCRATCH_SPACE</name>
      <anchorfile>VariableDatabase_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VARIABLE_ARRAY_SCRATCH_SPACE</name>
      <anchorfile>VariableDatabase_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DESCRIPTOR_ARRAY_SCRATCH_SPACE</name>
      <anchorfile>VariableDatabase_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VariableDatabase.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>VariableDatabase_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="VariableContext_8h" name="VariableContext.h" local="yes" imported="no">VariableContext.h</includes>
    <includes id="VariableDatabase_8I" name="VariableDatabase.I" local="yes" imported="no">VariableDatabase.I</includes>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">ComponentSelector.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>VariableDatabase.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>VariableDatabase_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>mainpage.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/</path>
    <filename>mainpage_8dox</filename>
  </compound>
  <compound kind="file">
    <name>ArrayDataBasicOps.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/array/</path>
    <filename>ArrayDataBasicOps_8C</filename>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">ArrayDataBasicOps.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataBasicOps.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/array/</path>
    <filename>ArrayDataBasicOps_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataMiscellaneousOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/array/</path>
    <filename>ArrayDataMiscellaneousOpsReal_8C</filename>
    <includes id="ArrayDataMiscellaneousOpsReal_8h" name="ArrayDataMiscellaneousOpsReal.h" local="yes" imported="no">ArrayDataMiscellaneousOpsReal.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataMiscellaneousOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/array/</path>
    <filename>ArrayDataMiscellaneousOpsReal_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataNormOpsComplex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/array/</path>
    <filename>ArrayDataNormOpsComplex_8C</filename>
    <includes id="ArrayDataNormOpsComplex_8h" name="ArrayDataNormOpsComplex.h" local="yes" imported="no">ArrayDataNormOpsComplex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataNormOpsComplex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/array/</path>
    <filename>ArrayDataNormOpsComplex_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataNormOpsInteger.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/array/</path>
    <filename>ArrayDataNormOpsInteger_8C</filename>
    <includes id="ArrayDataNormOpsInteger_8h" name="ArrayDataNormOpsInteger.h" local="yes" imported="no">ArrayDataNormOpsInteger.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataNormOpsInteger.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/array/</path>
    <filename>ArrayDataNormOpsInteger_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataNormOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/array/</path>
    <filename>ArrayDataNormOpsReal_8C</filename>
    <includes id="ArrayDataNormOpsReal_8h" name="ArrayDataNormOpsReal.h" local="yes" imported="no">ArrayDataNormOpsReal.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataNormOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/array/</path>
    <filename>ArrayDataNormOpsReal_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyCellDataOpsComplex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>HierarchyCellDataOpsComplex_8C</filename>
    <includes id="HierarchyCellDataOpsComplex_8h" name="HierarchyCellDataOpsComplex.h" local="yes" imported="no">HierarchyCellDataOpsComplex.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="CellDataFactory_8h" name="CellDataFactory.h" local="yes" imported="no">CellDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyCellDataOpsComplex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>HierarchyCellDataOpsComplex_8h</filename>
    <includes id="HierarchyDataOpsComplex_8h" name="HierarchyDataOpsComplex.h" local="yes" imported="no">HierarchyDataOpsComplex.h</includes>
    <includes id="PatchCellDataOpsComplex_8h" name="PatchCellDataOpsComplex.h" local="yes" imported="no">PatchCellDataOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyCellDataOpsInteger.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>HierarchyCellDataOpsInteger_8C</filename>
    <includes id="HierarchyCellDataOpsInteger_8h" name="HierarchyCellDataOpsInteger.h" local="yes" imported="no">HierarchyCellDataOpsInteger.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="CellDataFactory_8h" name="CellDataFactory.h" local="yes" imported="no">CellDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyCellDataOpsInteger.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>HierarchyCellDataOpsInteger_8h</filename>
    <includes id="HierarchyDataOpsInteger_8h" name="HierarchyDataOpsInteger.h" local="yes" imported="no">HierarchyDataOpsInteger.h</includes>
    <includes id="PatchCellDataOpsInteger_8h" name="PatchCellDataOpsInteger.h" local="yes" imported="no">PatchCellDataOpsInteger.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyCellDataOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>HierarchyCellDataOpsReal_8C</filename>
    <includes id="HierarchyCellDataOpsReal_8h" name="HierarchyCellDataOpsReal.h" local="yes" imported="no">HierarchyCellDataOpsReal.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="CellDataFactory_8h" name="CellDataFactory.h" local="yes" imported="no">CellDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyCellDataOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>HierarchyCellDataOpsReal_8h</filename>
    <includes id="HierarchyDataOpsReal_8h" name="HierarchyDataOpsReal.h" local="yes" imported="no">HierarchyDataOpsReal.h</includes>
    <includes id="PatchCellDataOpsReal_8h" name="PatchCellDataOpsReal.h" local="yes" imported="no">PatchCellDataOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataBasicOps.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>PatchCellDataBasicOps_8C</filename>
    <includes id="PatchCellDataBasicOps_8h" name="PatchCellDataBasicOps.h" local="yes" imported="no">PatchCellDataBasicOps.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataBasicOps.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>PatchCellDataBasicOps_8h</filename>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">ArrayDataBasicOps.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataMiscellaneousOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>PatchCellDataMiscellaneousOpsReal_8C</filename>
    <includes id="PatchCellDataMiscellaneousOpsReal_8h" name="PatchCellDataMiscellaneousOpsReal.h" local="yes" imported="no">PatchCellDataMiscellaneousOpsReal.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataMiscellaneousOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>PatchCellDataMiscellaneousOpsReal_8h</filename>
    <includes id="ArrayDataMiscellaneousOpsReal_8h" name="ArrayDataMiscellaneousOpsReal.h" local="yes" imported="no">ArrayDataMiscellaneousOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>PatchCellDataMiscellaneousOpsReal_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchCellDataNormOpsComplex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>PatchCellDataNormOpsComplex_8C</filename>
    <includes id="PatchCellDataNormOpsComplex_8h" name="PatchCellDataNormOpsComplex.h" local="yes" imported="no">PatchCellDataNormOpsComplex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataNormOpsComplex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>PatchCellDataNormOpsComplex_8h</filename>
    <includes id="ArrayDataNormOpsComplex_8h" name="ArrayDataNormOpsComplex.h" local="yes" imported="no">ArrayDataNormOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>PatchCellDataNormOpsComplex_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchCellDataNormOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>PatchCellDataNormOpsReal_8C</filename>
    <includes id="PatchCellDataNormOpsReal_8h" name="PatchCellDataNormOpsReal.h" local="yes" imported="no">PatchCellDataNormOpsReal.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataNormOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>PatchCellDataNormOpsReal_8h</filename>
    <includes id="ArrayDataNormOpsReal_8h" name="ArrayDataNormOpsReal.h" local="yes" imported="no">ArrayDataNormOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>PatchCellDataNormOpsReal_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchCellDataOpsComplex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>PatchCellDataOpsComplex_8C</filename>
    <includes id="PatchCellDataOpsComplex_8h" name="PatchCellDataOpsComplex.h" local="yes" imported="no">PatchCellDataOpsComplex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataOpsComplex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>PatchCellDataOpsComplex_8h</filename>
    <includes id="PatchCellDataBasicOps_8h" name="PatchCellDataBasicOps.h" local="yes" imported="no">PatchCellDataBasicOps.h</includes>
    <includes id="PatchCellDataNormOpsComplex_8h" name="PatchCellDataNormOpsComplex.h" local="yes" imported="no">PatchCellDataNormOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataOpsInteger.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>PatchCellDataOpsInteger_8C</filename>
    <includes id="PatchCellDataOpsInteger_8h" name="PatchCellDataOpsInteger.h" local="yes" imported="no">PatchCellDataOpsInteger.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataOpsInteger.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>PatchCellDataOpsInteger_8h</filename>
    <includes id="PatchCellDataBasicOps_8h" name="PatchCellDataBasicOps.h" local="yes" imported="no">PatchCellDataBasicOps.h</includes>
    <includes id="ArrayDataNormOpsInteger_8h" name="ArrayDataNormOpsInteger.h" local="yes" imported="no">ArrayDataNormOpsInteger.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>PatchCellDataOpsReal_8C</filename>
    <includes id="PatchCellDataOpsReal_8h" name="PatchCellDataOpsReal.h" local="yes" imported="no">PatchCellDataOpsReal.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchCellDataOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>PatchCellDataOpsReal_8h</filename>
    <includes id="PatchCellDataBasicOps_8h" name="PatchCellDataBasicOps.h" local="yes" imported="no">PatchCellDataBasicOps.h</includes>
    <includes id="PatchCellDataMiscellaneousOpsReal_8h" name="PatchCellDataMiscellaneousOpsReal.h" local="yes" imported="no">PatchCellDataMiscellaneousOpsReal.h</includes>
    <includes id="PatchCellDataNormOpsReal_8h" name="PatchCellDataNormOpsReal.h" local="yes" imported="no">PatchCellDataNormOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyEdgeDataOpsComplex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/edge/</path>
    <filename>HierarchyEdgeDataOpsComplex_8C</filename>
    <includes id="HierarchyEdgeDataOpsComplex_8h" name="HierarchyEdgeDataOpsComplex.h" local="yes" imported="no">HierarchyEdgeDataOpsComplex.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">BoxUtilities.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="EdgeDataFactory_8h" name="EdgeDataFactory.h" local="yes" imported="no">EdgeDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyEdgeDataOpsComplex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/edge/</path>
    <filename>HierarchyEdgeDataOpsComplex_8h</filename>
    <includes id="HierarchyDataOpsComplex_8h" name="HierarchyDataOpsComplex.h" local="yes" imported="no">HierarchyDataOpsComplex.h</includes>
    <includes id="PatchEdgeDataOpsComplex_8h" name="PatchEdgeDataOpsComplex.h" local="yes" imported="no">PatchEdgeDataOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyEdgeDataOpsInteger.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/edge/</path>
    <filename>HierarchyEdgeDataOpsInteger_8C</filename>
    <includes id="HierarchyEdgeDataOpsInteger_8h" name="HierarchyEdgeDataOpsInteger.h" local="yes" imported="no">HierarchyEdgeDataOpsInteger.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">BoxUtilities.h</includes>
    <includes id="EdgeDataFactory_8h" name="EdgeDataFactory.h" local="yes" imported="no">EdgeDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyEdgeDataOpsInteger.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/edge/</path>
    <filename>HierarchyEdgeDataOpsInteger_8h</filename>
    <includes id="HierarchyDataOpsInteger_8h" name="HierarchyDataOpsInteger.h" local="yes" imported="no">HierarchyDataOpsInteger.h</includes>
    <includes id="PatchEdgeDataOpsInteger_8h" name="PatchEdgeDataOpsInteger.h" local="yes" imported="no">PatchEdgeDataOpsInteger.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyEdgeDataOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/edge/</path>
    <filename>HierarchyEdgeDataOpsReal_8C</filename>
    <includes id="HierarchyEdgeDataOpsReal_8h" name="HierarchyEdgeDataOpsReal.h" local="yes" imported="no">HierarchyEdgeDataOpsReal.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">BoxUtilities.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="EdgeDataFactory_8h" name="EdgeDataFactory.h" local="yes" imported="no">EdgeDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyEdgeDataOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/edge/</path>
    <filename>HierarchyEdgeDataOpsReal_8h</filename>
    <includes id="HierarchyDataOpsReal_8h" name="HierarchyDataOpsReal.h" local="yes" imported="no">HierarchyDataOpsReal.h</includes>
    <includes id="PatchEdgeDataOpsReal_8h" name="PatchEdgeDataOpsReal.h" local="yes" imported="no">PatchEdgeDataOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataBasicOps.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/edge/</path>
    <filename>PatchEdgeDataBasicOps_8C</filename>
    <includes id="PatchEdgeDataBasicOps_8h" name="PatchEdgeDataBasicOps.h" local="yes" imported="no">PatchEdgeDataBasicOps.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">EdgeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataBasicOps.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/edge/</path>
    <filename>PatchEdgeDataBasicOps_8h</filename>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">ArrayDataBasicOps.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataMiscellaneousOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/edge/</path>
    <filename>PatchEdgeDataMiscellaneousOpsReal_8C</filename>
    <includes id="PatchEdgeDataMiscellaneousOpsReal_8h" name="PatchEdgeDataMiscellaneousOpsReal.h" local="yes" imported="no">PatchEdgeDataMiscellaneousOpsReal.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">EdgeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataMiscellaneousOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/edge/</path>
    <filename>PatchEdgeDataMiscellaneousOpsReal_8h</filename>
    <includes id="ArrayDataMiscellaneousOpsReal_8h" name="ArrayDataMiscellaneousOpsReal.h" local="yes" imported="no">ArrayDataMiscellaneousOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>PatchEdgeDataMiscellaneousOpsReal_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataNormOpsComplex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/edge/</path>
    <filename>PatchEdgeDataNormOpsComplex_8C</filename>
    <includes id="PatchEdgeDataNormOpsComplex_8h" name="PatchEdgeDataNormOpsComplex.h" local="yes" imported="no">PatchEdgeDataNormOpsComplex.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">EdgeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataNormOpsComplex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/edge/</path>
    <filename>PatchEdgeDataNormOpsComplex_8h</filename>
    <includes id="ArrayDataNormOpsComplex_8h" name="ArrayDataNormOpsComplex.h" local="yes" imported="no">ArrayDataNormOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>PatchEdgeDataNormOpsComplex_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataNormOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/edge/</path>
    <filename>PatchEdgeDataNormOpsReal_8C</filename>
    <includes id="PatchEdgeDataNormOpsReal_8h" name="PatchEdgeDataNormOpsReal.h" local="yes" imported="no">PatchEdgeDataNormOpsReal.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">EdgeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataNormOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/edge/</path>
    <filename>PatchEdgeDataNormOpsReal_8h</filename>
    <includes id="ArrayDataNormOpsReal_8h" name="ArrayDataNormOpsReal.h" local="yes" imported="no">ArrayDataNormOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>PatchEdgeDataNormOpsReal_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataOpsComplex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/edge/</path>
    <filename>PatchEdgeDataOpsComplex_8C</filename>
    <includes id="PatchEdgeDataOpsComplex_8h" name="PatchEdgeDataOpsComplex.h" local="yes" imported="no">PatchEdgeDataOpsComplex.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">EdgeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataOpsComplex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/edge/</path>
    <filename>PatchEdgeDataOpsComplex_8h</filename>
    <includes id="PatchEdgeDataBasicOps_8h" name="PatchEdgeDataBasicOps.h" local="yes" imported="no">PatchEdgeDataBasicOps.h</includes>
    <includes id="PatchEdgeDataNormOpsComplex_8h" name="PatchEdgeDataNormOpsComplex.h" local="yes" imported="no">PatchEdgeDataNormOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataOpsInteger.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/edge/</path>
    <filename>PatchEdgeDataOpsInteger_8C</filename>
    <includes id="PatchEdgeDataOpsInteger_8h" name="PatchEdgeDataOpsInteger.h" local="yes" imported="no">PatchEdgeDataOpsInteger.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">EdgeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataOpsInteger.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/edge/</path>
    <filename>PatchEdgeDataOpsInteger_8h</filename>
    <includes id="PatchEdgeDataBasicOps_8h" name="PatchEdgeDataBasicOps.h" local="yes" imported="no">PatchEdgeDataBasicOps.h</includes>
    <includes id="ArrayDataNormOpsInteger_8h" name="ArrayDataNormOpsInteger.h" local="yes" imported="no">ArrayDataNormOpsInteger.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/edge/</path>
    <filename>PatchEdgeDataOpsReal_8C</filename>
    <includes id="PatchEdgeDataOpsReal_8h" name="PatchEdgeDataOpsReal.h" local="yes" imported="no">PatchEdgeDataOpsReal.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">EdgeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchEdgeDataOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/edge/</path>
    <filename>PatchEdgeDataOpsReal_8h</filename>
    <includes id="PatchEdgeDataBasicOps_8h" name="PatchEdgeDataBasicOps.h" local="yes" imported="no">PatchEdgeDataBasicOps.h</includes>
    <includes id="PatchEdgeDataMiscellaneousOpsReal_8h" name="PatchEdgeDataMiscellaneousOpsReal.h" local="yes" imported="no">PatchEdgeDataMiscellaneousOpsReal.h</includes>
    <includes id="PatchEdgeDataNormOpsReal_8h" name="PatchEdgeDataNormOpsReal.h" local="yes" imported="no">PatchEdgeDataNormOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyFaceDataOpsComplex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/face/</path>
    <filename>HierarchyFaceDataOpsComplex_8C</filename>
    <includes id="HierarchyFaceDataOpsComplex_8h" name="HierarchyFaceDataOpsComplex.h" local="yes" imported="no">HierarchyFaceDataOpsComplex.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">BoxUtilities.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="FaceDataFactory_8h" name="FaceDataFactory.h" local="yes" imported="no">FaceDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyFaceDataOpsComplex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/face/</path>
    <filename>HierarchyFaceDataOpsComplex_8h</filename>
    <includes id="HierarchyDataOpsComplex_8h" name="HierarchyDataOpsComplex.h" local="yes" imported="no">HierarchyDataOpsComplex.h</includes>
    <includes id="PatchFaceDataOpsComplex_8h" name="PatchFaceDataOpsComplex.h" local="yes" imported="no">PatchFaceDataOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyFaceDataOpsInteger.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/face/</path>
    <filename>HierarchyFaceDataOpsInteger_8C</filename>
    <includes id="HierarchyFaceDataOpsInteger_8h" name="HierarchyFaceDataOpsInteger.h" local="yes" imported="no">HierarchyFaceDataOpsInteger.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">BoxUtilities.h</includes>
    <includes id="FaceDataFactory_8h" name="FaceDataFactory.h" local="yes" imported="no">FaceDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyFaceDataOpsInteger.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/face/</path>
    <filename>HierarchyFaceDataOpsInteger_8h</filename>
    <includes id="HierarchyDataOpsInteger_8h" name="HierarchyDataOpsInteger.h" local="yes" imported="no">HierarchyDataOpsInteger.h</includes>
    <includes id="PatchFaceDataOpsInteger_8h" name="PatchFaceDataOpsInteger.h" local="yes" imported="no">PatchFaceDataOpsInteger.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyFaceDataOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/face/</path>
    <filename>HierarchyFaceDataOpsReal_8C</filename>
    <includes id="HierarchyFaceDataOpsReal_8h" name="HierarchyFaceDataOpsReal.h" local="yes" imported="no">HierarchyFaceDataOpsReal.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">BoxUtilities.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="FaceDataFactory_8h" name="FaceDataFactory.h" local="yes" imported="no">FaceDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyFaceDataOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/face/</path>
    <filename>HierarchyFaceDataOpsReal_8h</filename>
    <includes id="HierarchyDataOpsReal_8h" name="HierarchyDataOpsReal.h" local="yes" imported="no">HierarchyDataOpsReal.h</includes>
    <includes id="PatchFaceDataOpsReal_8h" name="PatchFaceDataOpsReal.h" local="yes" imported="no">PatchFaceDataOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataBasicOps.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/face/</path>
    <filename>PatchFaceDataBasicOps_8C</filename>
    <includes id="PatchFaceDataBasicOps_8h" name="PatchFaceDataBasicOps.h" local="yes" imported="no">PatchFaceDataBasicOps.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">FaceGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataBasicOps.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/face/</path>
    <filename>PatchFaceDataBasicOps_8h</filename>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">ArrayDataBasicOps.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataMiscellaneousOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/face/</path>
    <filename>PatchFaceDataMiscellaneousOpsReal_8C</filename>
    <includes id="PatchFaceDataMiscellaneousOpsReal_8h" name="PatchFaceDataMiscellaneousOpsReal.h" local="yes" imported="no">PatchFaceDataMiscellaneousOpsReal.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">FaceGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataMiscellaneousOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/face/</path>
    <filename>PatchFaceDataMiscellaneousOpsReal_8h</filename>
    <includes id="ArrayDataMiscellaneousOpsReal_8h" name="ArrayDataMiscellaneousOpsReal.h" local="yes" imported="no">ArrayDataMiscellaneousOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>PatchFaceDataMiscellaneousOpsReal_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataNormOpsComplex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/face/</path>
    <filename>PatchFaceDataNormOpsComplex_8C</filename>
    <includes id="PatchFaceDataNormOpsComplex_8h" name="PatchFaceDataNormOpsComplex.h" local="yes" imported="no">PatchFaceDataNormOpsComplex.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">FaceGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataNormOpsComplex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/face/</path>
    <filename>PatchFaceDataNormOpsComplex_8h</filename>
    <includes id="ArrayDataNormOpsComplex_8h" name="ArrayDataNormOpsComplex.h" local="yes" imported="no">ArrayDataNormOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>PatchFaceDataNormOpsComplex_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataNormOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/face/</path>
    <filename>PatchFaceDataNormOpsReal_8C</filename>
    <includes id="PatchFaceDataNormOpsReal_8h" name="PatchFaceDataNormOpsReal.h" local="yes" imported="no">PatchFaceDataNormOpsReal.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">FaceGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataNormOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/face/</path>
    <filename>PatchFaceDataNormOpsReal_8h</filename>
    <includes id="ArrayDataNormOpsReal_8h" name="ArrayDataNormOpsReal.h" local="yes" imported="no">ArrayDataNormOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>PatchFaceDataNormOpsReal_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataOpsComplex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/face/</path>
    <filename>PatchFaceDataOpsComplex_8C</filename>
    <includes id="PatchFaceDataOpsComplex_8h" name="PatchFaceDataOpsComplex.h" local="yes" imported="no">PatchFaceDataOpsComplex.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">FaceGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataOpsComplex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/face/</path>
    <filename>PatchFaceDataOpsComplex_8h</filename>
    <includes id="PatchFaceDataBasicOps_8h" name="PatchFaceDataBasicOps.h" local="yes" imported="no">PatchFaceDataBasicOps.h</includes>
    <includes id="PatchFaceDataNormOpsComplex_8h" name="PatchFaceDataNormOpsComplex.h" local="yes" imported="no">PatchFaceDataNormOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataOpsInteger.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/face/</path>
    <filename>PatchFaceDataOpsInteger_8C</filename>
    <includes id="PatchFaceDataOpsInteger_8h" name="PatchFaceDataOpsInteger.h" local="yes" imported="no">PatchFaceDataOpsInteger.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">FaceGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataOpsInteger.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/face/</path>
    <filename>PatchFaceDataOpsInteger_8h</filename>
    <includes id="PatchFaceDataBasicOps_8h" name="PatchFaceDataBasicOps.h" local="yes" imported="no">PatchFaceDataBasicOps.h</includes>
    <includes id="ArrayDataNormOpsInteger_8h" name="ArrayDataNormOpsInteger.h" local="yes" imported="no">ArrayDataNormOpsInteger.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/face/</path>
    <filename>PatchFaceDataOpsReal_8C</filename>
    <includes id="PatchFaceDataOpsReal_8h" name="PatchFaceDataOpsReal.h" local="yes" imported="no">PatchFaceDataOpsReal.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">FaceGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchFaceDataOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/face/</path>
    <filename>PatchFaceDataOpsReal_8h</filename>
    <includes id="PatchFaceDataBasicOps_8h" name="PatchFaceDataBasicOps.h" local="yes" imported="no">PatchFaceDataBasicOps.h</includes>
    <includes id="PatchFaceDataMiscellaneousOpsReal_8h" name="PatchFaceDataMiscellaneousOpsReal.h" local="yes" imported="no">PatchFaceDataMiscellaneousOpsReal.h</includes>
    <includes id="PatchFaceDataNormOpsReal_8h" name="PatchFaceDataNormOpsReal.h" local="yes" imported="no">PatchFaceDataNormOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyDataOpsComplex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/hierarchy/</path>
    <filename>HierarchyDataOpsComplex_8C</filename>
    <includes id="HierarchyDataOpsComplex_8h" name="HierarchyDataOpsComplex.h" local="yes" imported="no">HierarchyDataOpsComplex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyDataOpsComplex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/hierarchy/</path>
    <filename>HierarchyDataOpsComplex_8h</filename>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyDataOpsInteger.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/hierarchy/</path>
    <filename>HierarchyDataOpsInteger_8C</filename>
    <includes id="HierarchyDataOpsInteger_8h" name="HierarchyDataOpsInteger.h" local="yes" imported="no">HierarchyDataOpsInteger.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyDataOpsInteger.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/hierarchy/</path>
    <filename>HierarchyDataOpsInteger_8h</filename>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyDataOpsManager.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/hierarchy/</path>
    <filename>HierarchyDataOpsManager_8C</filename>
    <includes id="HierarchyDataOpsManager_8h" name="HierarchyDataOpsManager.h" local="yes" imported="no">HierarchyDataOpsManager.h</includes>
    <includes id="HierarchyCellDataOpsReal_8h" name="HierarchyCellDataOpsReal.h" local="yes" imported="no">HierarchyCellDataOpsReal.h</includes>
    <includes id="HierarchyFaceDataOpsReal_8h" name="HierarchyFaceDataOpsReal.h" local="yes" imported="no">HierarchyFaceDataOpsReal.h</includes>
    <includes id="HierarchyNodeDataOpsReal_8h" name="HierarchyNodeDataOpsReal.h" local="yes" imported="no">HierarchyNodeDataOpsReal.h</includes>
    <includes id="HierarchySideDataOpsReal_8h" name="HierarchySideDataOpsReal.h" local="yes" imported="no">HierarchySideDataOpsReal.h</includes>
    <includes id="HierarchyEdgeDataOpsReal_8h" name="HierarchyEdgeDataOpsReal.h" local="yes" imported="no">HierarchyEdgeDataOpsReal.h</includes>
    <includes id="HierarchyCellDataOpsInteger_8h" name="HierarchyCellDataOpsInteger.h" local="yes" imported="no">HierarchyCellDataOpsInteger.h</includes>
    <includes id="HierarchyFaceDataOpsInteger_8h" name="HierarchyFaceDataOpsInteger.h" local="yes" imported="no">HierarchyFaceDataOpsInteger.h</includes>
    <includes id="HierarchyNodeDataOpsInteger_8h" name="HierarchyNodeDataOpsInteger.h" local="yes" imported="no">HierarchyNodeDataOpsInteger.h</includes>
    <includes id="HierarchySideDataOpsInteger_8h" name="HierarchySideDataOpsInteger.h" local="yes" imported="no">HierarchySideDataOpsInteger.h</includes>
    <includes id="HierarchyEdgeDataOpsInteger_8h" name="HierarchyEdgeDataOpsInteger.h" local="yes" imported="no">HierarchyEdgeDataOpsInteger.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">FaceVariable.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">NodeVariable.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SideVariable.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">EdgeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>HierarchyDataOpsManager_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HierarchyDataOpsManager.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/hierarchy/</path>
    <filename>HierarchyDataOpsManager_8h</filename>
    <includes id="HierarchyDataOpsInteger_8h" name="HierarchyDataOpsInteger.h" local="yes" imported="no">HierarchyDataOpsInteger.h</includes>
    <includes id="HierarchyDataOpsReal_8h" name="HierarchyDataOpsReal.h" local="yes" imported="no">HierarchyDataOpsReal.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyDataOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/hierarchy/</path>
    <filename>HierarchyDataOpsReal_8C</filename>
    <includes id="HierarchyDataOpsReal_8h" name="HierarchyDataOpsReal.h" local="yes" imported="no">HierarchyDataOpsReal.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyDataOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/hierarchy/</path>
    <filename>HierarchyDataOpsReal_8h</filename>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyNodeDataOpsComplex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/node/</path>
    <filename>HierarchyNodeDataOpsComplex_8C</filename>
    <includes id="HierarchyNodeDataOpsComplex_8h" name="HierarchyNodeDataOpsComplex.h" local="yes" imported="no">HierarchyNodeDataOpsComplex.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">BoxUtilities.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="NodeDataFactory_8h" name="NodeDataFactory.h" local="yes" imported="no">NodeDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyNodeDataOpsComplex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/node/</path>
    <filename>HierarchyNodeDataOpsComplex_8h</filename>
    <includes id="HierarchyDataOpsComplex_8h" name="HierarchyDataOpsComplex.h" local="yes" imported="no">HierarchyDataOpsComplex.h</includes>
    <includes id="PatchNodeDataOpsComplex_8h" name="PatchNodeDataOpsComplex.h" local="yes" imported="no">PatchNodeDataOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyNodeDataOpsInteger.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/node/</path>
    <filename>HierarchyNodeDataOpsInteger_8C</filename>
    <includes id="HierarchyNodeDataOpsInteger_8h" name="HierarchyNodeDataOpsInteger.h" local="yes" imported="no">HierarchyNodeDataOpsInteger.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">BoxUtilities.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="NodeDataFactory_8h" name="NodeDataFactory.h" local="yes" imported="no">NodeDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyNodeDataOpsInteger.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/node/</path>
    <filename>HierarchyNodeDataOpsInteger_8h</filename>
    <includes id="HierarchyDataOpsInteger_8h" name="HierarchyDataOpsInteger.h" local="yes" imported="no">HierarchyDataOpsInteger.h</includes>
    <includes id="PatchNodeDataOpsInteger_8h" name="PatchNodeDataOpsInteger.h" local="yes" imported="no">PatchNodeDataOpsInteger.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyNodeDataOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/node/</path>
    <filename>HierarchyNodeDataOpsReal_8C</filename>
    <includes id="HierarchyNodeDataOpsReal_8h" name="HierarchyNodeDataOpsReal.h" local="yes" imported="no">HierarchyNodeDataOpsReal.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">BoxUtilities.h</includes>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="NodeDataFactory_8h" name="NodeDataFactory.h" local="yes" imported="no">NodeDataFactory.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">NodeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchyNodeDataOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/node/</path>
    <filename>HierarchyNodeDataOpsReal_8h</filename>
    <includes id="HierarchyDataOpsReal_8h" name="HierarchyDataOpsReal.h" local="yes" imported="no">HierarchyDataOpsReal.h</includes>
    <includes id="PatchNodeDataOpsReal_8h" name="PatchNodeDataOpsReal.h" local="yes" imported="no">PatchNodeDataOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataBasicOps.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/node/</path>
    <filename>PatchNodeDataBasicOps_8C</filename>
    <includes id="PatchNodeDataBasicOps_8h" name="PatchNodeDataBasicOps.h" local="yes" imported="no">PatchNodeDataBasicOps.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">NodeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataBasicOps.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/node/</path>
    <filename>PatchNodeDataBasicOps_8h</filename>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">ArrayDataBasicOps.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataMiscellaneousOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/node/</path>
    <filename>PatchNodeDataMiscellaneousOpsReal_8C</filename>
    <includes id="PatchNodeDataMiscellaneousOpsReal_8h" name="PatchNodeDataMiscellaneousOpsReal.h" local="yes" imported="no">PatchNodeDataMiscellaneousOpsReal.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">NodeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataMiscellaneousOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/node/</path>
    <filename>PatchNodeDataMiscellaneousOpsReal_8h</filename>
    <includes id="ArrayDataMiscellaneousOpsReal_8h" name="ArrayDataMiscellaneousOpsReal.h" local="yes" imported="no">ArrayDataMiscellaneousOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>PatchNodeDataMiscellaneousOpsReal_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataNormOpsComplex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/node/</path>
    <filename>PatchNodeDataNormOpsComplex_8C</filename>
    <includes id="PatchNodeDataNormOpsComplex_8h" name="PatchNodeDataNormOpsComplex.h" local="yes" imported="no">PatchNodeDataNormOpsComplex.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">NodeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataNormOpsComplex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/node/</path>
    <filename>PatchNodeDataNormOpsComplex_8h</filename>
    <includes id="ArrayDataNormOpsComplex_8h" name="ArrayDataNormOpsComplex.h" local="yes" imported="no">ArrayDataNormOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>PatchNodeDataNormOpsComplex_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataNormOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/node/</path>
    <filename>PatchNodeDataNormOpsReal_8C</filename>
    <includes id="PatchNodeDataNormOpsReal_8h" name="PatchNodeDataNormOpsReal.h" local="yes" imported="no">PatchNodeDataNormOpsReal.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">NodeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataNormOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/node/</path>
    <filename>PatchNodeDataNormOpsReal_8h</filename>
    <includes id="ArrayDataNormOpsReal_8h" name="ArrayDataNormOpsReal.h" local="yes" imported="no">ArrayDataNormOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>PatchNodeDataNormOpsReal_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataOpsComplex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/node/</path>
    <filename>PatchNodeDataOpsComplex_8C</filename>
    <includes id="PatchNodeDataOpsComplex_8h" name="PatchNodeDataOpsComplex.h" local="yes" imported="no">PatchNodeDataOpsComplex.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">NodeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataOpsComplex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/node/</path>
    <filename>PatchNodeDataOpsComplex_8h</filename>
    <includes id="PatchNodeDataBasicOps_8h" name="PatchNodeDataBasicOps.h" local="yes" imported="no">PatchNodeDataBasicOps.h</includes>
    <includes id="PatchNodeDataNormOpsComplex_8h" name="PatchNodeDataNormOpsComplex.h" local="yes" imported="no">PatchNodeDataNormOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataOpsInteger.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/node/</path>
    <filename>PatchNodeDataOpsInteger_8C</filename>
    <includes id="PatchNodeDataOpsInteger_8h" name="PatchNodeDataOpsInteger.h" local="yes" imported="no">PatchNodeDataOpsInteger.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">NodeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataOpsInteger.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/node/</path>
    <filename>PatchNodeDataOpsInteger_8h</filename>
    <includes id="PatchNodeDataBasicOps_8h" name="PatchNodeDataBasicOps.h" local="yes" imported="no">PatchNodeDataBasicOps.h</includes>
    <includes id="ArrayDataNormOpsInteger_8h" name="ArrayDataNormOpsInteger.h" local="yes" imported="no">ArrayDataNormOpsInteger.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/node/</path>
    <filename>PatchNodeDataOpsReal_8C</filename>
    <includes id="PatchNodeDataOpsReal_8h" name="PatchNodeDataOpsReal.h" local="yes" imported="no">PatchNodeDataOpsReal.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">NodeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchNodeDataOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/node/</path>
    <filename>PatchNodeDataOpsReal_8h</filename>
    <includes id="PatchNodeDataBasicOps_8h" name="PatchNodeDataBasicOps.h" local="yes" imported="no">PatchNodeDataBasicOps.h</includes>
    <includes id="PatchNodeDataMiscellaneousOpsReal_8h" name="PatchNodeDataMiscellaneousOpsReal.h" local="yes" imported="no">PatchNodeDataMiscellaneousOpsReal.h</includes>
    <includes id="PatchNodeDataNormOpsReal_8h" name="PatchNodeDataNormOpsReal.h" local="yes" imported="no">PatchNodeDataNormOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchySideDataOpsComplex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/side/</path>
    <filename>HierarchySideDataOpsComplex_8C</filename>
    <includes id="HierarchySideDataOpsComplex_8h" name="HierarchySideDataOpsComplex.h" local="yes" imported="no">HierarchySideDataOpsComplex.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">BoxUtilities.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="SideDataFactory_8h" name="SideDataFactory.h" local="yes" imported="no">SideDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchySideDataOpsComplex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/side/</path>
    <filename>HierarchySideDataOpsComplex_8h</filename>
    <includes id="HierarchyDataOpsComplex_8h" name="HierarchyDataOpsComplex.h" local="yes" imported="no">HierarchyDataOpsComplex.h</includes>
    <includes id="PatchSideDataOpsComplex_8h" name="PatchSideDataOpsComplex.h" local="yes" imported="no">PatchSideDataOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchySideDataOpsInteger.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/side/</path>
    <filename>HierarchySideDataOpsInteger_8C</filename>
    <includes id="HierarchySideDataOpsInteger_8h" name="HierarchySideDataOpsInteger.h" local="yes" imported="no">HierarchySideDataOpsInteger.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">BoxUtilities.h</includes>
    <includes id="SideDataFactory_8h" name="SideDataFactory.h" local="yes" imported="no">SideDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchySideDataOpsInteger.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/side/</path>
    <filename>HierarchySideDataOpsInteger_8h</filename>
    <includes id="HierarchyDataOpsInteger_8h" name="HierarchyDataOpsInteger.h" local="yes" imported="no">HierarchyDataOpsInteger.h</includes>
    <includes id="PatchSideDataOpsInteger_8h" name="PatchSideDataOpsInteger.h" local="yes" imported="no">PatchSideDataOpsInteger.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchySideDataOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/side/</path>
    <filename>HierarchySideDataOpsReal_8C</filename>
    <includes id="HierarchySideDataOpsReal_8h" name="HierarchySideDataOpsReal.h" local="yes" imported="no">HierarchySideDataOpsReal.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">BoxUtilities.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="SideDataFactory_8h" name="SideDataFactory.h" local="yes" imported="no">SideDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>HierarchySideDataOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/side/</path>
    <filename>HierarchySideDataOpsReal_8h</filename>
    <includes id="HierarchyDataOpsReal_8h" name="HierarchyDataOpsReal.h" local="yes" imported="no">HierarchyDataOpsReal.h</includes>
    <includes id="PatchSideDataOpsReal_8h" name="PatchSideDataOpsReal.h" local="yes" imported="no">PatchSideDataOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataBasicOps.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/side/</path>
    <filename>PatchSideDataBasicOps_8C</filename>
    <includes id="PatchSideDataBasicOps_8h" name="PatchSideDataBasicOps.h" local="yes" imported="no">PatchSideDataBasicOps.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SideGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataBasicOps.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/side/</path>
    <filename>PatchSideDataBasicOps_8h</filename>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">ArrayDataBasicOps.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataMiscellaneousOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/side/</path>
    <filename>PatchSideDataMiscellaneousOpsReal_8C</filename>
    <includes id="PatchSideDataMiscellaneousOpsReal_8h" name="PatchSideDataMiscellaneousOpsReal.h" local="yes" imported="no">PatchSideDataMiscellaneousOpsReal.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SideGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataMiscellaneousOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/side/</path>
    <filename>PatchSideDataMiscellaneousOpsReal_8h</filename>
    <includes id="ArrayDataMiscellaneousOpsReal_8h" name="ArrayDataMiscellaneousOpsReal.h" local="yes" imported="no">ArrayDataMiscellaneousOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>PatchSideDataMiscellaneousOpsReal_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchSideDataNormOpsComplex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/side/</path>
    <filename>PatchSideDataNormOpsComplex_8C</filename>
    <includes id="PatchSideDataNormOpsComplex_8h" name="PatchSideDataNormOpsComplex.h" local="yes" imported="no">PatchSideDataNormOpsComplex.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SideGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataNormOpsComplex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/side/</path>
    <filename>PatchSideDataNormOpsComplex_8h</filename>
    <includes id="ArrayDataNormOpsComplex_8h" name="ArrayDataNormOpsComplex.h" local="yes" imported="no">ArrayDataNormOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>PatchSideDataNormOpsComplex_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchSideDataNormOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/side/</path>
    <filename>PatchSideDataNormOpsReal_8C</filename>
    <includes id="PatchSideDataNormOpsReal_8h" name="PatchSideDataNormOpsReal.h" local="yes" imported="no">PatchSideDataNormOpsReal.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SideGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataNormOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/side/</path>
    <filename>PatchSideDataNormOpsReal_8h</filename>
    <includes id="ArrayDataNormOpsReal_8h" name="ArrayDataNormOpsReal.h" local="yes" imported="no">ArrayDataNormOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>PatchSideDataNormOpsReal_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PatchSideDataOpsComplex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/side/</path>
    <filename>PatchSideDataOpsComplex_8C</filename>
    <includes id="PatchSideDataOpsComplex_8h" name="PatchSideDataOpsComplex.h" local="yes" imported="no">PatchSideDataOpsComplex.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SideGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataOpsComplex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/side/</path>
    <filename>PatchSideDataOpsComplex_8h</filename>
    <includes id="PatchSideDataBasicOps_8h" name="PatchSideDataBasicOps.h" local="yes" imported="no">PatchSideDataBasicOps.h</includes>
    <includes id="PatchSideDataNormOpsComplex_8h" name="PatchSideDataNormOpsComplex.h" local="yes" imported="no">PatchSideDataNormOpsComplex.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataOpsInteger.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/side/</path>
    <filename>PatchSideDataOpsInteger_8C</filename>
    <includes id="PatchSideDataOpsInteger_8h" name="PatchSideDataOpsInteger.h" local="yes" imported="no">PatchSideDataOpsInteger.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SideGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataOpsInteger.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/side/</path>
    <filename>PatchSideDataOpsInteger_8h</filename>
    <includes id="PatchSideDataBasicOps_8h" name="PatchSideDataBasicOps.h" local="yes" imported="no">PatchSideDataBasicOps.h</includes>
    <includes id="ArrayDataNormOpsInteger_8h" name="ArrayDataNormOpsInteger.h" local="yes" imported="no">ArrayDataNormOpsInteger.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataOpsReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/side/</path>
    <filename>PatchSideDataOpsReal_8C</filename>
    <includes id="PatchSideDataOpsReal_8h" name="PatchSideDataOpsReal.h" local="yes" imported="no">PatchSideDataOpsReal.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SideGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>PatchSideDataOpsReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/side/</path>
    <filename>PatchSideDataOpsReal_8h</filename>
    <includes id="PatchSideDataBasicOps_8h" name="PatchSideDataBasicOps.h" local="yes" imported="no">PatchSideDataBasicOps.h</includes>
    <includes id="PatchSideDataMiscellaneousOpsReal_8h" name="PatchSideDataMiscellaneousOpsReal.h" local="yes" imported="no">PatchSideDataMiscellaneousOpsReal.h</includes>
    <includes id="PatchSideDataNormOpsReal_8h" name="PatchSideDataNormOpsReal.h" local="yes" imported="no">PatchSideDataNormOpsReal.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>AsyncBergerRigoutsos.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/clustering/</path>
    <filename>AsyncBergerRigoutsos_8C</filename>
    <includes id="AsyncBergerRigoutsos_8h" name="AsyncBergerRigoutsos.h" local="yes" imported="no">AsyncBergerRigoutsos.h</includes>
    <includes id="BoxComm_8h" name="BoxComm.h" local="yes" imported="no">BoxComm.h</includes>
    <includes id="AsyncBergerRigoutsosNode_8h" name="AsyncBergerRigoutsosNode.h" local="yes" imported="no">AsyncBergerRigoutsosNode.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>AsyncBergerRigoutsos.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/clustering/</path>
    <filename>AsyncBergerRigoutsos_8h</filename>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="BoxGeneratorStrategy_8h" name="BoxGeneratorStrategy.h" local="yes" imported="no">BoxGeneratorStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>AsyncBergerRigoutsosNode.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/clustering/</path>
    <filename>AsyncBergerRigoutsosNode_8C</filename>
    <includes id="AsyncBergerRigoutsosNode_8h" name="AsyncBergerRigoutsosNode.h" local="yes" imported="no">AsyncBergerRigoutsosNode.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>AsyncBergerRigoutsosNode.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/clustering/</path>
    <filename>AsyncBergerRigoutsosNode_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="LayerEdgeSet_8h" name="LayerEdgeSet.h" local="yes" imported="no">LayerEdgeSet.h</includes>
    <includes id="LayerNodeSet_8h" name="LayerNodeSet.h" local="yes" imported="no">LayerNodeSet.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>BergerRigoutsos.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/clustering/</path>
    <filename>BergerRigoutsos_8C</filename>
    <includes id="BergerRigoutsos_8h" name="BergerRigoutsos.h" local="yes" imported="no">BergerRigoutsos.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="BoxComm_8h" name="BoxComm.h" local="yes" imported="no">BoxComm.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="BinaryTree_8h" name="BinaryTree.h" local="yes" imported="no">BinaryTree.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>BergerRigoutsos.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/clustering/</path>
    <filename>BergerRigoutsos_8h</filename>
    <includes id="BoxGeneratorStrategy_8h" name="BoxGeneratorStrategy.h" local="yes" imported="no">BoxGeneratorStrategy.h</includes>
    <includes id="HistogramBox_8h" name="HistogramBox.h" local="yes" imported="no">HistogramBox.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>BoxGeneratorStrategy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/clustering/</path>
    <filename>BoxGeneratorStrategy_8C</filename>
    <includes id="BoxGeneratorStrategy_8h" name="BoxGeneratorStrategy.h" local="yes" imported="no">BoxGeneratorStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>BoxGeneratorStrategy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/clustering/</path>
    <filename>BoxGeneratorStrategy_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>HistogramBox.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/clustering/</path>
    <filename>HistogramBox_8C</filename>
    <includes id="HistogramBox_8h" name="HistogramBox.h" local="yes" imported="no">HistogramBox.h</includes>
    <includes id="BinaryTree_8h" name="BinaryTree.h" local="yes" imported="no">BinaryTree.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellIterator_8h" name="CellIterator.h" local="yes" imported="no">CellIterator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>HistogramBox.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/clustering/</path>
    <filename>HistogramBox_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="HistogramBox_8I" name="HistogramBox.I" local="yes" imported="no">HistogramBox.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>HistogramBox.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/clustering/</path>
    <filename>HistogramBox_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>BaseGriddingAlgorithm.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/gridding/</path>
    <filename>BaseGriddingAlgorithm_8C</filename>
    <includes id="BaseGriddingAlgorithm_8h" name="BaseGriddingAlgorithm.h" local="yes" imported="no">BaseGriddingAlgorithm.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>BaseGriddingAlgorithm.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/gridding/</path>
    <filename>BaseGriddingAlgorithm_8h</filename>
    <includes id="BasePatchHierarchy_8h" name="BasePatchHierarchy.h" local="yes" imported="no">BasePatchHierarchy.h</includes>
    <includes id="TagAndInitializeStrategy_8h" name="TagAndInitializeStrategy.h" local="yes" imported="no">TagAndInitializeStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>GriddingAlgorithm.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/gridding/</path>
    <filename>GriddingAlgorithm_8C</filename>
    <includes id="GriddingAlgorithm_8h" name="GriddingAlgorithm.h" local="yes" imported="no">GriddingAlgorithm.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">BoxUtilities.h</includes>
    <includes id="GridGeometry_8h" name="GridGeometry.h" local="yes" imported="no">GridGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellIterator_8h" name="CellIterator.h" local="yes" imported="no">CellIterator.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">RefineAlgorithm.h</includes>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">RefineSchedule.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PATCHLEVEL_DATANAME_BUFSIZE</name>
      <anchorfile>GriddingAlgorithm_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ALGS_GRIDDING_ALGORITHM_VERSION</name>
      <anchorfile>GriddingAlgorithm_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>GriddingAlgorithm_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GriddingAlgorithm.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/gridding/</path>
    <filename>GriddingAlgorithm_8h</filename>
    <includes id="BaseGriddingAlgorithm_8h" name="BaseGriddingAlgorithm.h" local="yes" imported="no">BaseGriddingAlgorithm.h</includes>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="BoxIOUtility_8h" name="BoxIOUtility.h" local="yes" imported="no">BoxIOUtility.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="ProcessorMapping_8h" name="ProcessorMapping.h" local="yes" imported="no">ProcessorMapping.h</includes>
    <includes id="BoxGeneratorStrategy_8h" name="BoxGeneratorStrategy.h" local="yes" imported="no">BoxGeneratorStrategy.h</includes>
    <includes id="LoadBalanceStrategy_8h" name="LoadBalanceStrategy.h" local="yes" imported="no">LoadBalanceStrategy.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">RefineAlgorithm.h</includes>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">RefineSchedule.h</includes>
    <includes id="GriddingAlgorithm_8I" name="GriddingAlgorithm.I" local="yes" imported="no">GriddingAlgorithm.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>GriddingAlgorithm.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/gridding/</path>
    <filename>GriddingAlgorithm_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>mesh_coarsentags1d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/gridding/</path>
    <filename>mesh__coarsentags1d_8f</filename>
    <member kind="function">
      <type>c c the value on the coarse mesh is c set to one c ***********************************************************************c subroutine</type>
      <name>coarsentags1d</name>
      <anchorfile>mesh__coarsentags1d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(&amp;ifirstc0, ilastc0,&amp;filo0, fihi0,&amp;cilo0, cihi0,&amp;ratio,&amp;arrayf, arrayc) c ***********************************************************************implicit none integer zero</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>mesh__coarsentags1d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mesh_coarsentags2d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/gridding/</path>
    <filename>mesh__coarsentags2d_8f</filename>
    <member kind="function">
      <type>c c the value on the coarse mesh is c set to one c ***********************************************************************c subroutine</type>
      <name>coarsentags2d</name>
      <anchorfile>mesh__coarsentags2d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(&amp;ifirstc0, ifirstc1, ilastc0, ilastc1,&amp;filo0, filo1, fihi0, fihi1,&amp;cilo0, cilo1, cihi0, cihi1,&amp;ratio,&amp;arrayf, arrayc) c ***********************************************************************implicit none integer zero</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>mesh__coarsentags2d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mesh_coarsentags3d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/gridding/</path>
    <filename>mesh__coarsentags3d_8f</filename>
    <member kind="function">
      <type>c c the value on the coarse mesh is c set to one c ***********************************************************************c subroutine</type>
      <name>coarsentags3d</name>
      <anchorfile>mesh__coarsentags3d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(&amp;ifirstc0, ifirstc1, ifirstc2, ilastc0, ilastc1, ilastc2,&amp;filo0, filo1, filo2, fihi0, fihi1, fihi2,&amp;cilo0, cilo1, cilo2, cihi0, cihi1, cihi2,&amp;ratio,&amp;arrayf, arrayc) c ***********************************************************************implicit none integer zero</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>mesh__coarsentags3d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StandardTagAndInitialize.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/gridding/</path>
    <filename>StandardTagAndInitialize_8C</filename>
    <includes id="StandardTagAndInitialize_8h" name="StandardTagAndInitialize.h" local="yes" imported="no">StandardTagAndInitialize.h</includes>
    <includes id="CellIntegerConstantRefine_8h" name="CellIntegerConstantRefine.h" local="yes" imported="no">CellIntegerConstantRefine.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_TIMES</name>
      <anchorfile>StandardTagAndInitialize_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsentags1d_</name>
      <anchorfile>StandardTagAndInitialize_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsentags2d_</name>
      <anchorfile>StandardTagAndInitialize_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsentags3d_</name>
      <anchorfile>StandardTagAndInitialize_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GCD</name>
      <anchorfile>namespaceSAMRAI_1_1mesh.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int a, const int b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StandardTagAndInitialize.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/gridding/</path>
    <filename>StandardTagAndInitialize_8h</filename>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="StandardTagAndInitStrategy_8h" name="StandardTagAndInitStrategy.h" local="yes" imported="no">StandardTagAndInitStrategy.h</includes>
    <includes id="TagAndInitializeStrategy_8h" name="TagAndInitializeStrategy.h" local="yes" imported="no">TagAndInitializeStrategy.h</includes>
    <includes id="StandardTagAndInitialize_8I" name="StandardTagAndInitialize.I" local="yes" imported="no">StandardTagAndInitialize.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>StandardTagAndInitialize.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/gridding/</path>
    <filename>StandardTagAndInitialize_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>StandardTagAndInitStrategy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/gridding/</path>
    <filename>StandardTagAndInitStrategy_8C</filename>
    <includes id="StandardTagAndInitStrategy_8h" name="StandardTagAndInitStrategy.h" local="yes" imported="no">StandardTagAndInitStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>StandardTagAndInitStrategy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/gridding/</path>
    <filename>StandardTagAndInitStrategy_8h</filename>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>StandardTagAndInitStrategy_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TagAndInitializeStrategy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/gridding/</path>
    <filename>TagAndInitializeStrategy_8C</filename>
    <includes id="TagAndInitializeStrategy_8h" name="TagAndInitializeStrategy.h" local="yes" imported="no">TagAndInitializeStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>TagAndInitializeStrategy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/gridding/</path>
    <filename>TagAndInitializeStrategy_8h</filename>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="BasePatchHierarchy_8h" name="BasePatchHierarchy.h" local="yes" imported="no">BasePatchHierarchy.h</includes>
    <includes id="BasePatchLevel_8h" name="BasePatchLevel.h" local="yes" imported="no">BasePatchLevel.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>BalanceUtilities.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/load_balance/</path>
    <filename>BalanceUtilities_8C</filename>
    <includes id="BalanceUtilities_8h" name="BalanceUtilities.h" local="yes" imported="no">BalanceUtilities.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">BoxUtilities.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>BalanceUtilities.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/load_balance/</path>
    <filename>BalanceUtilities_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="ProcessorMapping_8h" name="ProcessorMapping.h" local="yes" imported="no">ProcessorMapping.h</includes>
    <includes id="PatchCellDataNormOpsReal_8h" name="PatchCellDataNormOpsReal.h" local="yes" imported="no">PatchCellDataNormOpsReal.h</includes>
    <includes id="SpatialKey_8h" name="SpatialKey.h" local="yes" imported="no">SpatialKey.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>LoadBalancer.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/load_balance/</path>
    <filename>LoadBalancer_8C</filename>
    <includes id="LoadBalancer_8h" name="LoadBalancer.h" local="yes" imported="no">LoadBalancer.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">BoxUtilities.h</includes>
    <includes id="BoxComm_8h" name="BoxComm.h" local="yes" imported="no">BoxComm.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <includes id="BalanceUtilities_8h" name="BalanceUtilities.h" local="yes" imported="no">BalanceUtilities.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellDataFactory_8h" name="CellDataFactory.h" local="yes" imported="no">CellDataFactory.h</includes>
    <includes id="CellDoubleConstantRefine_8h" name="CellDoubleConstantRefine.h" local="yes" imported="no">CellDoubleConstantRefine.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">RefineAlgorithm.h</includes>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">RefineSchedule.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>LoadBalancer.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/load_balance/</path>
    <filename>LoadBalancer_8h</filename>
    <includes id="LoadBalanceStrategy_8h" name="LoadBalanceStrategy.h" local="yes" imported="no">LoadBalanceStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>LoadBalanceStrategy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/load_balance/</path>
    <filename>LoadBalanceStrategy_8C</filename>
    <includes id="LoadBalanceStrategy_8h" name="LoadBalanceStrategy.h" local="yes" imported="no">LoadBalanceStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>LoadBalanceStrategy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/load_balance/</path>
    <filename>LoadBalanceStrategy_8h</filename>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="ProcessorMapping_8h" name="ProcessorMapping.h" local="yes" imported="no">ProcessorMapping.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>SpatialKey.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/load_balance/</path>
    <filename>SpatialKey_8C</filename>
    <includes id="SpatialKey_8h" name="SpatialKey.h" local="yes" imported="no">SpatialKey.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_BYTE</name>
      <anchorfile>SpatialKey_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITS_PER_HEX_CHAR</name>
      <anchorfile>SpatialKey_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1mesh.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ostream &amp;s, const SpatialKey &amp;spatial_key)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SpatialKey.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/load_balance/</path>
    <filename>SpatialKey_8h</filename>
    <includes id="SpatialKey_8I" name="SpatialKey.I" local="yes" imported="no">SpatialKey.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NUM_COORDS_MIXED_FOR_SPATIAL_KEY</name>
      <anchorfile>SpatialKey_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SpatialKey.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/load_balance/</path>
    <filename>SpatialKey_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>MBDataUtilities.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MBDataUtilities_8C</filename>
    <includes id="MBDataUtilities_8h" name="MBDataUtilities.h" local="yes" imported="no">MBDataUtilities.h</includes>
    <includes id="MBUtilities_8h" name="MBUtilities.h" local="yes" imported="no">MBUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
  </compound>
  <compound kind="file">
    <name>MBDataUtilities.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MBDataUtilities_8h</filename>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <includes id="MultiblockPatchHierarchy_8h" name="MultiblockPatchHierarchy.h" local="yes" imported="no">MultiblockPatchHierarchy.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
  </compound>
  <compound kind="file">
    <name>MBUtilities.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MBUtilities_8C</filename>
    <includes id="MBUtilities_8h" name="MBUtilities.h" local="yes" imported="no">MBUtilities.h</includes>
    <includes id="MBDataUtilities_8h" name="MBDataUtilities.h" local="yes" imported="no">MBDataUtilities.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
  </compound>
  <compound kind="file">
    <name>MBUtilities.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MBUtilities_8h</filename>
    <includes id="MultiblockPatchHierarchy_8h" name="MultiblockPatchHierarchy.h" local="yes" imported="no">MultiblockPatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
  </compound>
  <compound kind="file">
    <name>MultiblockCoarsenAlgorithm.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MultiblockCoarsenAlgorithm_8C</filename>
    <includes id="MultiblockCoarsenAlgorithm_8h" name="MultiblockCoarsenAlgorithm.h" local="yes" imported="no">MultiblockCoarsenAlgorithm.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
  </compound>
  <compound kind="file">
    <name>MultiblockCoarsenAlgorithm.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MultiblockCoarsenAlgorithm_8h</filename>
    <includes id="MultiblockCoarsenSchedule_8h" name="MultiblockCoarsenSchedule.h" local="yes" imported="no">MultiblockCoarsenSchedule.h</includes>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">CoarsenClasses.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>MultiblockCoarsenAlgorithm_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MultiblockCoarsenPatchStrategy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MultiblockCoarsenPatchStrategy_8C</filename>
    <includes id="MultiblockCoarsenPatchStrategy_8h" name="MultiblockCoarsenPatchStrategy.h" local="yes" imported="no">MultiblockCoarsenPatchStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
  </compound>
  <compound kind="file">
    <name>MultiblockCoarsenPatchStrategy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MultiblockCoarsenPatchStrategy_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="CoarsenPatchStrategy_8h" name="CoarsenPatchStrategy.h" local="yes" imported="no">CoarsenPatchStrategy.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MULTIBLOCK_UNDEFINED_BLOCK_NUMBER</name>
      <anchorfile>MultiblockCoarsenPatchStrategy_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MultiblockCoarsenSchedule.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MultiblockCoarsenSchedule_8C</filename>
    <includes id="MultiblockCoarsenSchedule_8h" name="MultiblockCoarsenSchedule.h" local="yes" imported="no">MultiblockCoarsenSchedule.h</includes>
    <includes id="CoarsenCopyTransaction_8h" name="CoarsenCopyTransaction.h" local="yes" imported="no">CoarsenCopyTransaction.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
  </compound>
  <compound kind="file">
    <name>MultiblockCoarsenSchedule.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MultiblockCoarsenSchedule_8h</filename>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="MultiblockPatchHierarchy_8h" name="MultiblockPatchHierarchy.h" local="yes" imported="no">MultiblockPatchHierarchy.h</includes>
    <includes id="MultiblockRefineAlgorithm_8h" name="MultiblockRefineAlgorithm.h" local="yes" imported="no">MultiblockRefineAlgorithm.h</includes>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">CoarsenClasses.h</includes>
    <includes id="MultiblockCoarsenPatchStrategy_8h" name="MultiblockCoarsenPatchStrategy.h" local="yes" imported="no">MultiblockCoarsenPatchStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
  </compound>
  <compound kind="file">
    <name>MultiblockGriddingAlgorithm.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MultiblockGriddingAlgorithm_8C</filename>
    <includes id="MultiblockGriddingAlgorithm_8h" name="MultiblockGriddingAlgorithm.h" local="yes" imported="no">MultiblockGriddingAlgorithm.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">BoxUtilities.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PATCHLEVEL_DATANAME_BUFSIZE</name>
      <anchorfile>MultiblockGriddingAlgorithm_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ALGS_GRIDDING_ALGORITHM_VERSION</name>
      <anchorfile>MultiblockGriddingAlgorithm_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MultiblockGriddingAlgorithm.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MultiblockGriddingAlgorithm_8h</filename>
    <includes id="BaseGriddingAlgorithm_8h" name="BaseGriddingAlgorithm.h" local="yes" imported="no">BaseGriddingAlgorithm.h</includes>
    <includes id="BoxGeneratorStrategy_8h" name="BoxGeneratorStrategy.h" local="yes" imported="no">BoxGeneratorStrategy.h</includes>
    <includes id="BoxIOUtility_8h" name="BoxIOUtility.h" local="yes" imported="no">BoxIOUtility.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <includes id="LoadBalanceStrategy_8h" name="LoadBalanceStrategy.h" local="yes" imported="no">LoadBalanceStrategy.h</includes>
    <includes id="MultiblockGriddingTagger_8h" name="MultiblockGriddingTagger.h" local="yes" imported="no">MultiblockGriddingTagger.h</includes>
    <includes id="MultiblockRefineAlgorithm_8h" name="MultiblockRefineAlgorithm.h" local="yes" imported="no">MultiblockRefineAlgorithm.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="TagAndInitializeStrategy_8h" name="TagAndInitializeStrategy.h" local="yes" imported="no">TagAndInitializeStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
  </compound>
  <compound kind="file">
    <name>MultiblockGriddingTagger.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MultiblockGriddingTagger_8C</filename>
    <includes id="MultiblockGriddingTagger_8h" name="MultiblockGriddingTagger.h" local="yes" imported="no">MultiblockGriddingTagger.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
  </compound>
  <compound kind="file">
    <name>MultiblockGriddingTagger.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MultiblockGriddingTagger_8h</filename>
    <includes id="MultiblockRefinePatchStrategy_8h" name="MultiblockRefinePatchStrategy.h" local="yes" imported="no">MultiblockRefinePatchStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>MultiblockGriddingTagger_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MultiblockPatchHierarchy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MultiblockPatchHierarchy_8C</filename>
    <includes id="MultiblockPatchHierarchy_8h" name="MultiblockPatchHierarchy.h" local="yes" imported="no">MultiblockPatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MBLK_PATCH_HIERARCHY_VERSION</name>
      <anchorfile>MultiblockPatchHierarchy_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BLOCK_NAME_BUF_SIZE</name>
      <anchorfile>MultiblockPatchHierarchy_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MultiblockPatchHierarchy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MultiblockPatchHierarchy_8h</filename>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="BasePatchHierarchy_8h" name="BasePatchHierarchy.h" local="yes" imported="no">BasePatchHierarchy.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="MultiblockPatchLevel_8h" name="MultiblockPatchLevel.h" local="yes" imported="no">MultiblockPatchLevel.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
  </compound>
  <compound kind="file">
    <name>MultiblockPatchLevel.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MultiblockPatchLevel_8C</filename>
    <includes id="MultiblockPatchLevel_8h" name="MultiblockPatchLevel.h" local="yes" imported="no">MultiblockPatchLevel.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
  </compound>
  <compound kind="file">
    <name>MultiblockPatchLevel.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MultiblockPatchLevel_8h</filename>
    <includes id="BasePatchLevel_8h" name="BasePatchLevel.h" local="yes" imported="no">BasePatchLevel.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
  </compound>
  <compound kind="file">
    <name>MultiblockRefineAlgorithm.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MultiblockRefineAlgorithm_8C</filename>
    <includes id="MultiblockRefineAlgorithm_8h" name="MultiblockRefineAlgorithm.h" local="yes" imported="no">MultiblockRefineAlgorithm.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
  </compound>
  <compound kind="file">
    <name>MultiblockRefineAlgorithm.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MultiblockRefineAlgorithm_8h</filename>
    <includes id="MultiblockRefineSchedule_8h" name="MultiblockRefineSchedule.h" local="yes" imported="no">MultiblockRefineSchedule.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">RefineAlgorithm.h</includes>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">RefinePatchStrategy.h</includes>
    <includes id="MultiblockPatchHierarchy_8h" name="MultiblockPatchHierarchy.h" local="yes" imported="no">MultiblockPatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
  </compound>
  <compound kind="file">
    <name>MultiblockRefinePatchStrategy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MultiblockRefinePatchStrategy_8C</filename>
    <includes id="MultiblockRefinePatchStrategy_8h" name="MultiblockRefinePatchStrategy.h" local="yes" imported="no">MultiblockRefinePatchStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
  </compound>
  <compound kind="file">
    <name>MultiblockRefinePatchStrategy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MultiblockRefinePatchStrategy_8h</filename>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="MultiblockRefineSchedule_8h" name="MultiblockRefineSchedule.h" local="yes" imported="no">MultiblockRefineSchedule.h</includes>
    <includes id="CoarsenPatchStrategy_8h" name="CoarsenPatchStrategy.h" local="yes" imported="no">CoarsenPatchStrategy.h</includes>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">RefinePatchStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MULTIBLOCK_UNDEFINED_BLOCK_NUMBER</name>
      <anchorfile>MultiblockRefinePatchStrategy_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MultiblockRefineSchedule.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MultiblockRefineSchedule_8C</filename>
    <includes id="MultiblockRefineSchedule_8h" name="MultiblockRefineSchedule.h" local="yes" imported="no">MultiblockRefineSchedule.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">BoxUtilities.h</includes>
    <includes id="MBUtilities_8h" name="MBUtilities.h" local="yes" imported="no">MBUtilities.h</includes>
    <includes id="MultiblockRefinePatchStrategy_8h" name="MultiblockRefinePatchStrategy.h" local="yes" imported="no">MultiblockRefinePatchStrategy.h</includes>
    <includes id="MultiblockRefineAlgorithm_8h" name="MultiblockRefineAlgorithm.h" local="yes" imported="no">MultiblockRefineAlgorithm.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
  </compound>
  <compound kind="file">
    <name>MultiblockRefineSchedule.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>MultiblockRefineSchedule_8h</filename>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">RefineAlgorithm.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">RefinePatchStrategy.h</includes>
    <includes id="MultiblockPatchHierarchy_8h" name="MultiblockPatchHierarchy.h" local="yes" imported="no">MultiblockPatchHierarchy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
    <member kind="define">
      <type>#define</type>
      <name>MULTIBLOCK_FAKE_LEVEL_NUMBER</name>
      <anchorfile>MultiblockRefineSchedule_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ArrayData.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/array/</path>
    <filename>ArrayData_8C</filename>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PDAT_ARRAYDATA_VERSION</name>
      <anchorfile>ArrayData_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ArrayData.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/array/</path>
    <filename>ArrayData_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="ArrayDataIterator_8h" name="ArrayDataIterator.h" local="yes" imported="no">ArrayDataIterator.h</includes>
    <includes id="ArrayData_8I" name="ArrayData.I" local="yes" imported="no">ArrayData.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayData.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/array/</path>
    <filename>ArrayData_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataIterator.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/array/</path>
    <filename>ArrayDataIterator_8C</filename>
    <includes id="ArrayDataIterator_8h" name="ArrayDataIterator.h" local="yes" imported="no">ArrayDataIterator.h</includes>
  </compound>
  <compound kind="file">
    <name>ArrayDataIterator.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/array/</path>
    <filename>ArrayDataIterator_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="ArrayDataIterator_8I" name="ArrayDataIterator.I" local="yes" imported="no">ArrayDataIterator.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>ArrayDataIterator.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/array/</path>
    <filename>ArrayDataIterator_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>ArrayDataIterator_8I.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellGeometry.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>CellGeometry_8C</filename>
    <includes id="CellGeometry_8h" name="CellGeometry.h" local="yes" imported="no">CellGeometry.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="CellOverlap_8h" name="CellOverlap.h" local="yes" imported="no">CellOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellGeometry.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>CellGeometry_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="CellGeometry_8I" name="CellGeometry.I" local="yes" imported="no">CellGeometry.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellGeometry.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>CellGeometry_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellOverlap.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>CellOverlap_8C</filename>
    <includes id="CellOverlap_8h" name="CellOverlap.h" local="yes" imported="no">CellOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellOverlap.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>CellOverlap_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="CellOverlap_8I" name="CellOverlap.I" local="yes" imported="no">CellOverlap.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellOverlap.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>CellOverlap_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeGeometry.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>EdgeGeometry_8C</filename>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">EdgeGeometry.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="EdgeOverlap_8h" name="EdgeOverlap.h" local="yes" imported="no">EdgeOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeGeometry.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>EdgeGeometry_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="EdgeGeometry_8I" name="EdgeGeometry.I" local="yes" imported="no">EdgeGeometry.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeGeometry.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>EdgeGeometry_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeOverlap.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>EdgeOverlap_8C</filename>
    <includes id="EdgeOverlap_8h" name="EdgeOverlap.h" local="yes" imported="no">EdgeOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeOverlap.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>EdgeOverlap_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="EdgeOverlap_8I" name="EdgeOverlap.I" local="yes" imported="no">EdgeOverlap.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeOverlap.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>EdgeOverlap_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceGeometry.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>FaceGeometry_8C</filename>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">FaceGeometry.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="FaceOverlap_8h" name="FaceOverlap.h" local="yes" imported="no">FaceOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceGeometry.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>FaceGeometry_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="FaceGeometry_8I" name="FaceGeometry.I" local="yes" imported="no">FaceGeometry.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceGeometry.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>FaceGeometry_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceOverlap.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>FaceOverlap_8C</filename>
    <includes id="FaceOverlap_8h" name="FaceOverlap.h" local="yes" imported="no">FaceOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceOverlap.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>FaceOverlap_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="FaceOverlap_8I" name="FaceOverlap.I" local="yes" imported="no">FaceOverlap.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceOverlap.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>FaceOverlap_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeGeometry.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>NodeGeometry_8C</filename>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">NodeGeometry.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="NodeOverlap_8h" name="NodeOverlap.h" local="yes" imported="no">NodeOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeGeometry.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>NodeGeometry_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="NodeGeometry_8I" name="NodeGeometry.I" local="yes" imported="no">NodeGeometry.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeGeometry.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>NodeGeometry_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeOverlap.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>NodeOverlap_8C</filename>
    <includes id="NodeOverlap_8h" name="NodeOverlap.h" local="yes" imported="no">NodeOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeOverlap.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>NodeOverlap_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="NodeOverlap_8I" name="NodeOverlap.I" local="yes" imported="no">NodeOverlap.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeOverlap.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>NodeOverlap_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeGeometry.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>OuteredgeGeometry_8C</filename>
    <includes id="OuteredgeGeometry_8h" name="OuteredgeGeometry.h" local="yes" imported="no">OuteredgeGeometry.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">EdgeGeometry.h</includes>
    <includes id="EdgeOverlap_8h" name="EdgeOverlap.h" local="yes" imported="no">EdgeOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeGeometry.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>OuteredgeGeometry_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="OuteredgeGeometry_8I" name="OuteredgeGeometry.I" local="yes" imported="no">OuteredgeGeometry.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeGeometry.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>OuteredgeGeometry_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceGeometry.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>OuterfaceGeometry_8C</filename>
    <includes id="OuterfaceGeometry_8h" name="OuterfaceGeometry.h" local="yes" imported="no">OuterfaceGeometry.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">FaceGeometry.h</includes>
    <includes id="FaceOverlap_8h" name="FaceOverlap.h" local="yes" imported="no">FaceOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceGeometry.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>OuterfaceGeometry_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="OuterfaceGeometry_8I" name="OuterfaceGeometry.I" local="yes" imported="no">OuterfaceGeometry.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceGeometry.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>OuterfaceGeometry_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeGeometry.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>OuternodeGeometry_8C</filename>
    <includes id="OuternodeGeometry_8h" name="OuternodeGeometry.h" local="yes" imported="no">OuternodeGeometry.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">NodeGeometry.h</includes>
    <includes id="NodeOverlap_8h" name="NodeOverlap.h" local="yes" imported="no">NodeOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeGeometry.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>OuternodeGeometry_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="OuternodeGeometry_8I" name="OuternodeGeometry.I" local="yes" imported="no">OuternodeGeometry.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeGeometry.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>OuternodeGeometry_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideGeometry.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>OutersideGeometry_8C</filename>
    <includes id="OutersideGeometry_8h" name="OutersideGeometry.h" local="yes" imported="no">OutersideGeometry.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SideGeometry.h</includes>
    <includes id="SideOverlap_8h" name="SideOverlap.h" local="yes" imported="no">SideOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideGeometry.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>OutersideGeometry_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="OutersideGeometry_8I" name="OutersideGeometry.I" local="yes" imported="no">OutersideGeometry.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideGeometry.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>OutersideGeometry_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideGeometry.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>SideGeometry_8C</filename>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SideGeometry.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="SideOverlap_8h" name="SideOverlap.h" local="yes" imported="no">SideOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideGeometry.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>SideGeometry_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="SideGeometry_8I" name="SideGeometry.I" local="yes" imported="no">SideGeometry.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideGeometry.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>SideGeometry_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideOverlap.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>SideOverlap_8C</filename>
    <includes id="SideOverlap_8h" name="SideOverlap.h" local="yes" imported="no">SideOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideOverlap.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>SideOverlap_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="SideOverlap_8I" name="SideOverlap.I" local="yes" imported="no">SideOverlap.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideOverlap.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>SideOverlap_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellData.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/cell/</path>
    <filename>CellData_8C</filename>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="CellGeometry_8h" name="CellGeometry.h" local="yes" imported="no">CellGeometry.h</includes>
    <includes id="CellOverlap_8h" name="CellOverlap.h" local="yes" imported="no">CellOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PDAT_CELLDATA_VERSION</name>
      <anchorfile>CellData_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellData.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/cell/</path>
    <filename>CellData_8h</filename>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <includes id="CellIndex_8h" name="CellIndex.h" local="yes" imported="no">CellIndex.h</includes>
    <includes id="CellIterator_8h" name="CellIterator.h" local="yes" imported="no">CellIterator.h</includes>
    <includes id="CellData_8I" name="CellData.I" local="yes" imported="no">CellData.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellData.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/cell/</path>
    <filename>CellData_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellDataFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/cell/</path>
    <filename>CellDataFactory_8C</filename>
    <includes id="CellDataFactory_8h" name="CellDataFactory.h" local="yes" imported="no">CellDataFactory.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellGeometry_8h" name="CellGeometry.h" local="yes" imported="no">CellGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellDataFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/cell/</path>
    <filename>CellDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="CellDataFactory_8I" name="CellDataFactory.I" local="yes" imported="no">CellDataFactory.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>CellDataFactory_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellDataFactory.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/cell/</path>
    <filename>CellDataFactory_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellIndex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/cell/</path>
    <filename>CellIndex_8C</filename>
    <includes id="CellIndex_8h" name="CellIndex.h" local="yes" imported="no">CellIndex.h</includes>
  </compound>
  <compound kind="file">
    <name>CellIndex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/cell/</path>
    <filename>CellIndex_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="CellIndex_8I" name="CellIndex.I" local="yes" imported="no">CellIndex.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellIndex.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/cell/</path>
    <filename>CellIndex_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellIterator.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/cell/</path>
    <filename>CellIterator_8C</filename>
    <includes id="CellIterator_8h" name="CellIterator.h" local="yes" imported="no">CellIterator.h</includes>
  </compound>
  <compound kind="file">
    <name>CellIterator.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/cell/</path>
    <filename>CellIterator_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="CellGeometry_8h" name="CellGeometry.h" local="yes" imported="no">CellGeometry.h</includes>
    <includes id="CellIterator_8I" name="CellIterator.I" local="yes" imported="no">CellIterator.I</includes>
    <includes id="CellIndex_8h" name="CellIndex.h" local="yes" imported="no">CellIndex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellIterator.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/cell/</path>
    <filename>CellIterator_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>CellIterator_8I.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellVariable.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/cell/</path>
    <filename>CellVariable_8C</filename>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <includes id="CellDataFactory_8h" name="CellDataFactory.h" local="yes" imported="no">CellDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellVariable.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/cell/</path>
    <filename>CellVariable_8h</filename>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeData.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/edge/</path>
    <filename>EdgeData_8C</filename>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">EdgeGeometry.h</includes>
    <includes id="EdgeOverlap_8h" name="EdgeOverlap.h" local="yes" imported="no">EdgeOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PDAT_EDGEDATA_VERSION</name>
      <anchorfile>EdgeData_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeData.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/edge/</path>
    <filename>EdgeData_8h</filename>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <includes id="EdgeIndex_8h" name="EdgeIndex.h" local="yes" imported="no">EdgeIndex.h</includes>
    <includes id="EdgeIterator_8h" name="EdgeIterator.h" local="yes" imported="no">EdgeIterator.h</includes>
    <includes id="EdgeData_8I" name="EdgeData.I" local="yes" imported="no">EdgeData.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeData.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/edge/</path>
    <filename>EdgeData_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeDataFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/edge/</path>
    <filename>EdgeDataFactory_8C</filename>
    <includes id="EdgeDataFactory_8h" name="EdgeDataFactory.h" local="yes" imported="no">EdgeDataFactory.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">EdgeGeometry.h</includes>
    <includes id="OuteredgeDataFactory_8h" name="OuteredgeDataFactory.h" local="yes" imported="no">OuteredgeDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeDataFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/edge/</path>
    <filename>EdgeDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="EdgeDataFactory_8I" name="EdgeDataFactory.I" local="yes" imported="no">EdgeDataFactory.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>EdgeDataFactory_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeDataFactory.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/edge/</path>
    <filename>EdgeDataFactory_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeIndex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/edge/</path>
    <filename>EdgeIndex_8C</filename>
    <includes id="EdgeIndex_8h" name="EdgeIndex.h" local="yes" imported="no">EdgeIndex.h</includes>
  </compound>
  <compound kind="file">
    <name>EdgeIndex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/edge/</path>
    <filename>EdgeIndex_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="EdgeIndex_8I" name="EdgeIndex.I" local="yes" imported="no">EdgeIndex.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeIndex.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/edge/</path>
    <filename>EdgeIndex_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeIterator.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/edge/</path>
    <filename>EdgeIterator_8C</filename>
    <includes id="EdgeIterator_8h" name="EdgeIterator.h" local="yes" imported="no">EdgeIterator.h</includes>
  </compound>
  <compound kind="file">
    <name>EdgeIterator.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/edge/</path>
    <filename>EdgeIterator_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">EdgeGeometry.h</includes>
    <includes id="EdgeIterator_8I" name="EdgeIterator.I" local="yes" imported="no">EdgeIterator.I</includes>
    <includes id="EdgeIndex_8h" name="EdgeIndex.h" local="yes" imported="no">EdgeIndex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeIterator.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/edge/</path>
    <filename>EdgeIterator_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>EdgeIterator_8I.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeVariable.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/edge/</path>
    <filename>EdgeVariable_8C</filename>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">EdgeVariable.h</includes>
    <includes id="EdgeDataFactory_8h" name="EdgeDataFactory.h" local="yes" imported="no">EdgeDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeVariable.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/edge/</path>
    <filename>EdgeVariable_8h</filename>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceData.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/face/</path>
    <filename>FaceData_8C</filename>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">FaceGeometry.h</includes>
    <includes id="FaceOverlap_8h" name="FaceOverlap.h" local="yes" imported="no">FaceOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PDAT_FACEDATA_VERSION</name>
      <anchorfile>FaceData_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FaceData.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/face/</path>
    <filename>FaceData_8h</filename>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <includes id="FaceIndex_8h" name="FaceIndex.h" local="yes" imported="no">FaceIndex.h</includes>
    <includes id="FaceIterator_8h" name="FaceIterator.h" local="yes" imported="no">FaceIterator.h</includes>
    <includes id="FaceData_8I" name="FaceData.I" local="yes" imported="no">FaceData.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceData.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/face/</path>
    <filename>FaceData_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceDataFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/face/</path>
    <filename>FaceDataFactory_8C</filename>
    <includes id="FaceDataFactory_8h" name="FaceDataFactory.h" local="yes" imported="no">FaceDataFactory.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">FaceGeometry.h</includes>
    <includes id="OuterfaceDataFactory_8h" name="OuterfaceDataFactory.h" local="yes" imported="no">OuterfaceDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceDataFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/face/</path>
    <filename>FaceDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="FaceDataFactory_8I" name="FaceDataFactory.I" local="yes" imported="no">FaceDataFactory.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>FaceDataFactory_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FaceDataFactory.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/face/</path>
    <filename>FaceDataFactory_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceIndex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/face/</path>
    <filename>FaceIndex_8C</filename>
    <includes id="FaceIndex_8h" name="FaceIndex.h" local="yes" imported="no">FaceIndex.h</includes>
  </compound>
  <compound kind="file">
    <name>FaceIndex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/face/</path>
    <filename>FaceIndex_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="FaceIndex_8I" name="FaceIndex.I" local="yes" imported="no">FaceIndex.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceIndex.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/face/</path>
    <filename>FaceIndex_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceIterator.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/face/</path>
    <filename>FaceIterator_8C</filename>
    <includes id="FaceIterator_8h" name="FaceIterator.h" local="yes" imported="no">FaceIterator.h</includes>
  </compound>
  <compound kind="file">
    <name>FaceIterator.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/face/</path>
    <filename>FaceIterator_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">FaceGeometry.h</includes>
    <includes id="FaceIterator_8I" name="FaceIterator.I" local="yes" imported="no">FaceIterator.I</includes>
    <includes id="FaceIndex_8h" name="FaceIndex.h" local="yes" imported="no">FaceIndex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceIterator.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/face/</path>
    <filename>FaceIterator_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>FaceIterator_8I.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FaceVariable.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/face/</path>
    <filename>FaceVariable_8C</filename>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">FaceVariable.h</includes>
    <includes id="FaceDataFactory_8h" name="FaceDataFactory.h" local="yes" imported="no">FaceDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceVariable.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/face/</path>
    <filename>FaceVariable_8h</filename>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>pdat_dbugfort1d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/fortran/</path>
    <filename>pdat__dbugfort1d_8f</filename>
    <member kind="function">
      <type>c c array iend0 double precision &amp;</type>
      <name>array</name>
      <anchorfile>pdat__dbugfort1d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(fi0-ng:la0+ng) integer ic0 c</arglist>
    </member>
    <member kind="function">
      <type>c c array iend0 double precision &amp;iend0</type>
      <name>write</name>
      <anchorfile>pdat__dbugfort1d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(6,*)&quot;array[&quot;</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>pdat__dbugfort1d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>la0</name>
      <anchorfile>pdat__dbugfort1d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ng</name>
      <anchorfile>pdat__dbugfort1d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ibeg0</name>
      <anchorfile>pdat__dbugfort1d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>iend0</name>
      <anchorfile>pdat__dbugfort1d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c array</type>
      <name>c</name>
      <anchorfile>pdat__dbugfort1d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c array iend0 double precision &amp;iend0</type>
      <name>ic0</name>
      <anchorfile>pdat__dbugfort1d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pdat_dbugfort2d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/fortran/</path>
    <filename>pdat__dbugfort2d_8f</filename>
    <member kind="function">
      <type>c c array iend1 double precision &amp;</type>
      <name>array</name>
      <anchorfile>pdat__dbugfort2d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(fi0-ng:la0+ng,&amp;fi1-ng:la1+ng) integer ic0</arglist>
    </member>
    <member kind="function">
      <type>c c array iend1 double precision &amp;ic1 iend1 do iend0</type>
      <name>write</name>
      <anchorfile>pdat__dbugfort2d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(6,*)&quot;array[&quot;</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>pdat__dbugfort2d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>la0</name>
      <anchorfile>pdat__dbugfort2d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fi1</name>
      <anchorfile>pdat__dbugfort2d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>la1</name>
      <anchorfile>pdat__dbugfort2d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ng</name>
      <anchorfile>pdat__dbugfort2d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ibeg0</name>
      <anchorfile>pdat__dbugfort2d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>iend0</name>
      <anchorfile>pdat__dbugfort2d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ibeg1</name>
      <anchorfile>pdat__dbugfort2d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>iend1</name>
      <anchorfile>pdat__dbugfort2d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c array</type>
      <name>c</name>
      <anchorfile>pdat__dbugfort2d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c array iend1 double precision &amp;ic1 iend1 do</type>
      <name>ic0</name>
      <anchorfile>pdat__dbugfort2d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c array iend1 double precision &amp;ic1 iend1 do iend0</type>
      <name>ic1</name>
      <anchorfile>pdat__dbugfort2d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pdat_dbugfort3d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/fortran/</path>
    <filename>pdat__dbugfort3d_8f</filename>
    <member kind="function">
      <type>c c array iend2 double precision &amp;</type>
      <name>array</name>
      <anchorfile>pdat__dbugfort3d_8f.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(fi0-ng:la0+ng,&amp;fi1-ng:la1+ng,&amp;fi2-ng:la2+ng) integer ic0</arglist>
    </member>
    <member kind="function">
      <type>c c array iend2 double precision ic2 iend2 do iend1 do iend0</type>
      <name>write</name>
      <anchorfile>pdat__dbugfort3d_8f.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(6,*)&quot;array[&quot;</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>pdat__dbugfort3d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>la0</name>
      <anchorfile>pdat__dbugfort3d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fi1</name>
      <anchorfile>pdat__dbugfort3d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>la1</name>
      <anchorfile>pdat__dbugfort3d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fi2</name>
      <anchorfile>pdat__dbugfort3d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>la2</name>
      <anchorfile>pdat__dbugfort3d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ng</name>
      <anchorfile>pdat__dbugfort3d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ibeg0</name>
      <anchorfile>pdat__dbugfort3d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>iend0</name>
      <anchorfile>pdat__dbugfort3d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ibeg1</name>
      <anchorfile>pdat__dbugfort3d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>iend1</name>
      <anchorfile>pdat__dbugfort3d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ibeg2</name>
      <anchorfile>pdat__dbugfort3d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>iend2</name>
      <anchorfile>pdat__dbugfort3d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c array</type>
      <name>c</name>
      <anchorfile>pdat__dbugfort3d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c array iend2 double precision &amp;</type>
      <name>ic1</name>
      <anchorfile>pdat__dbugfort3d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c array iend2 double precision ic2 iend2 do iend1 do</type>
      <name>ic0</name>
      <anchorfile>pdat__dbugfort3d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c array iend2 double precision ic2 iend2 do iend1 do iend0</type>
      <name>ic2</name>
      <anchorfile>pdat__dbugfort3d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IndexData.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/index/</path>
    <filename>IndexData_8C</filename>
    <includes id="IndexData_8h" name="IndexData.h" local="yes" imported="no">IndexData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="CellOverlap_8h" name="CellOverlap.h" local="yes" imported="no">CellOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PDAT_INDEXDATA_VERSION</name>
      <anchorfile>IndexData_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INDEX_NAME_BUF_SIZE</name>
      <anchorfile>IndexData_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IndexData.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/index/</path>
    <filename>IndexData_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="IndexData_8I" name="IndexData.I" local="yes" imported="no">IndexData.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>IndexData.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/index/</path>
    <filename>IndexData_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>IndexDataFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/index/</path>
    <filename>IndexDataFactory_8C</filename>
    <includes id="IndexDataFactory_8h" name="IndexDataFactory.h" local="yes" imported="no">IndexDataFactory.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="CellGeometry_8h" name="CellGeometry.h" local="yes" imported="no">CellGeometry.h</includes>
    <includes id="IndexData_8h" name="IndexData.h" local="yes" imported="no">IndexData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>IndexDataFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/index/</path>
    <filename>IndexDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>IndexDataFactory_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IndexVariable.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/index/</path>
    <filename>IndexVariable_8C</filename>
    <includes id="IndexVariable_8h" name="IndexVariable.h" local="yes" imported="no">IndexVariable.h</includes>
    <includes id="IndexDataFactory_8h" name="IndexDataFactory.h" local="yes" imported="no">IndexDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>IndexVariable.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/index/</path>
    <filename>IndexVariable_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeData.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/node/</path>
    <filename>NodeData_8C</filename>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="NodeOverlap_8h" name="NodeOverlap.h" local="yes" imported="no">NodeOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PDAT_NODEDATA_VERSION</name>
      <anchorfile>NodeData_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeData.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/node/</path>
    <filename>NodeData_8h</filename>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <includes id="NodeIndex_8h" name="NodeIndex.h" local="yes" imported="no">NodeIndex.h</includes>
    <includes id="NodeIterator_8h" name="NodeIterator.h" local="yes" imported="no">NodeIterator.h</includes>
    <includes id="NodeData_8I" name="NodeData.I" local="yes" imported="no">NodeData.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeData.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/node/</path>
    <filename>NodeData_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeDataFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/node/</path>
    <filename>NodeDataFactory_8C</filename>
    <includes id="NodeDataFactory_8h" name="NodeDataFactory.h" local="yes" imported="no">NodeDataFactory.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">NodeGeometry.h</includes>
    <includes id="OuternodeDataFactory_8h" name="OuternodeDataFactory.h" local="yes" imported="no">OuternodeDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeDataFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/node/</path>
    <filename>NodeDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="NodeDataFactory_8I" name="NodeDataFactory.I" local="yes" imported="no">NodeDataFactory.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>NodeDataFactory_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeDataFactory.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/node/</path>
    <filename>NodeDataFactory_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeIndex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/node/</path>
    <filename>NodeIndex_8C</filename>
    <includes id="NodeIndex_8h" name="NodeIndex.h" local="yes" imported="no">NodeIndex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeIndex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/node/</path>
    <filename>NodeIndex_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="NodeIndex_8I" name="NodeIndex.I" local="yes" imported="no">NodeIndex.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeIndex.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/node/</path>
    <filename>NodeIndex_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeIterator.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/node/</path>
    <filename>NodeIterator_8C</filename>
    <includes id="NodeIterator_8h" name="NodeIterator.h" local="yes" imported="no">NodeIterator.h</includes>
  </compound>
  <compound kind="file">
    <name>NodeIterator.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/node/</path>
    <filename>NodeIterator_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">NodeGeometry.h</includes>
    <includes id="NodeIterator_8I" name="NodeIterator.I" local="yes" imported="no">NodeIterator.I</includes>
    <includes id="NodeIndex_8h" name="NodeIndex.h" local="yes" imported="no">NodeIndex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeIterator.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/node/</path>
    <filename>NodeIterator_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>NodeIterator_8I.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeVariable.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/node/</path>
    <filename>NodeVariable_8C</filename>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">NodeVariable.h</includes>
    <includes id="NodeDataFactory_8h" name="NodeDataFactory.h" local="yes" imported="no">NodeDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeVariable.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/node/</path>
    <filename>NodeVariable_8h</filename>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellComplexConstantRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/cell/</path>
    <filename>CellComplexConstantRefine_8C</filename>
    <includes id="CellComplexConstantRefine_8h" name="CellComplexConstantRefine.h" local="yes" imported="no">CellComplexConstantRefine.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conrefcellcplx1d_</name>
      <anchorfile>CellComplexConstantRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefcellcplx2d_</name>
      <anchorfile>CellComplexConstantRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefcellcplx3d_</name>
      <anchorfile>CellComplexConstantRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellComplexConstantRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/cell/</path>
    <filename>CellComplexConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellDoubleConstantRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/cell/</path>
    <filename>CellDoubleConstantRefine_8C</filename>
    <includes id="CellDoubleConstantRefine_8h" name="CellDoubleConstantRefine.h" local="yes" imported="no">CellDoubleConstantRefine.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conrefcelldoub1d_</name>
      <anchorfile>CellDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefcelldoub2d_</name>
      <anchorfile>CellDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefcelldoub3d_</name>
      <anchorfile>CellDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellDoubleConstantRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/cell/</path>
    <filename>CellDoubleConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellFloatConstantRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/cell/</path>
    <filename>CellFloatConstantRefine_8C</filename>
    <includes id="CellFloatConstantRefine_8h" name="CellFloatConstantRefine.h" local="yes" imported="no">CellFloatConstantRefine.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conrefcellflot1d_</name>
      <anchorfile>CellFloatConstantRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefcellflot2d_</name>
      <anchorfile>CellFloatConstantRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefcellflot3d_</name>
      <anchorfile>CellFloatConstantRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellFloatConstantRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/cell/</path>
    <filename>CellFloatConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellIntegerConstantRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/cell/</path>
    <filename>CellIntegerConstantRefine_8C</filename>
    <includes id="CellIntegerConstantRefine_8h" name="CellIntegerConstantRefine.h" local="yes" imported="no">CellIntegerConstantRefine.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conrefcellintg1d_</name>
      <anchorfile>CellIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefcellintg2d_</name>
      <anchorfile>CellIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefcellintg3d_</name>
      <anchorfile>CellIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellIntegerConstantRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/cell/</path>
    <filename>CellIntegerConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeComplexConstantRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/edge/</path>
    <filename>EdgeComplexConstantRefine_8C</filename>
    <includes id="EdgeComplexConstantRefine_8h" name="EdgeComplexConstantRefine.h" local="yes" imported="no">EdgeComplexConstantRefine.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">EdgeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conrefedgecplx1d_</name>
      <anchorfile>EdgeComplexConstantRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefedgecplx2d0_</name>
      <anchorfile>EdgeComplexConstantRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefedgecplx2d1_</name>
      <anchorfile>EdgeComplexConstantRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefedgecplx3d0_</name>
      <anchorfile>EdgeComplexConstantRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefedgecplx3d1_</name>
      <anchorfile>EdgeComplexConstantRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefedgecplx3d2_</name>
      <anchorfile>EdgeComplexConstantRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeComplexConstantRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/edge/</path>
    <filename>EdgeComplexConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeDoubleConstantRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/edge/</path>
    <filename>EdgeDoubleConstantRefine_8C</filename>
    <includes id="EdgeDoubleConstantRefine_8h" name="EdgeDoubleConstantRefine.h" local="yes" imported="no">EdgeDoubleConstantRefine.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">EdgeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conrefedgedoub1d_</name>
      <anchorfile>EdgeDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefedgedoub2d0_</name>
      <anchorfile>EdgeDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefedgedoub2d1_</name>
      <anchorfile>EdgeDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefedgedoub3d0_</name>
      <anchorfile>EdgeDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefedgedoub3d1_</name>
      <anchorfile>EdgeDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefedgedoub3d2_</name>
      <anchorfile>EdgeDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeDoubleConstantRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/edge/</path>
    <filename>EdgeDoubleConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeFloatConstantRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/edge/</path>
    <filename>EdgeFloatConstantRefine_8C</filename>
    <includes id="EdgeFloatConstantRefine_8h" name="EdgeFloatConstantRefine.h" local="yes" imported="no">EdgeFloatConstantRefine.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">EdgeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conrefedgeflot1d_</name>
      <anchorfile>EdgeFloatConstantRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefedgeflot2d0_</name>
      <anchorfile>EdgeFloatConstantRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefedgeflot2d1_</name>
      <anchorfile>EdgeFloatConstantRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefedgeflot3d0_</name>
      <anchorfile>EdgeFloatConstantRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefedgeflot3d1_</name>
      <anchorfile>EdgeFloatConstantRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefedgeflot3d2_</name>
      <anchorfile>EdgeFloatConstantRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeFloatConstantRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/edge/</path>
    <filename>EdgeFloatConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeIntegerConstantRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/edge/</path>
    <filename>EdgeIntegerConstantRefine_8C</filename>
    <includes id="EdgeIntegerConstantRefine_8h" name="EdgeIntegerConstantRefine.h" local="yes" imported="no">EdgeIntegerConstantRefine.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">EdgeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conrefedgeintg1d_</name>
      <anchorfile>EdgeIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefedgeintg2d0_</name>
      <anchorfile>EdgeIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefedgeintg2d1_</name>
      <anchorfile>EdgeIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefedgeintg3d0_</name>
      <anchorfile>EdgeIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefedgeintg3d1_</name>
      <anchorfile>EdgeIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefedgeintg3d2_</name>
      <anchorfile>EdgeIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeIntegerConstantRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/edge/</path>
    <filename>EdgeIntegerConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceComplexConstantRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/face/</path>
    <filename>FaceComplexConstantRefine_8C</filename>
    <includes id="FaceComplexConstantRefine_8h" name="FaceComplexConstantRefine.h" local="yes" imported="no">FaceComplexConstantRefine.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">FaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conreffacecplx1d_</name>
      <anchorfile>FaceComplexConstantRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conreffacecplx2d0_</name>
      <anchorfile>FaceComplexConstantRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conreffacecplx2d1_</name>
      <anchorfile>FaceComplexConstantRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conreffacecplx3d0_</name>
      <anchorfile>FaceComplexConstantRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conreffacecplx3d1_</name>
      <anchorfile>FaceComplexConstantRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conreffacecplx3d2_</name>
      <anchorfile>FaceComplexConstantRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FaceComplexConstantRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/face/</path>
    <filename>FaceComplexConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceDoubleConstantRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/face/</path>
    <filename>FaceDoubleConstantRefine_8C</filename>
    <includes id="FaceDoubleConstantRefine_8h" name="FaceDoubleConstantRefine.h" local="yes" imported="no">FaceDoubleConstantRefine.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">FaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conreffacedoub1d_</name>
      <anchorfile>FaceDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conreffacedoub2d0_</name>
      <anchorfile>FaceDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conreffacedoub2d1_</name>
      <anchorfile>FaceDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conreffacedoub3d0_</name>
      <anchorfile>FaceDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conreffacedoub3d1_</name>
      <anchorfile>FaceDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conreffacedoub3d2_</name>
      <anchorfile>FaceDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FaceDoubleConstantRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/face/</path>
    <filename>FaceDoubleConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceFloatConstantRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/face/</path>
    <filename>FaceFloatConstantRefine_8C</filename>
    <includes id="FaceFloatConstantRefine_8h" name="FaceFloatConstantRefine.h" local="yes" imported="no">FaceFloatConstantRefine.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">FaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conreffaceflot1d_</name>
      <anchorfile>FaceFloatConstantRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conreffaceflot2d0_</name>
      <anchorfile>FaceFloatConstantRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conreffaceflot2d1_</name>
      <anchorfile>FaceFloatConstantRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conreffaceflot3d0_</name>
      <anchorfile>FaceFloatConstantRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conreffaceflot3d1_</name>
      <anchorfile>FaceFloatConstantRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conreffaceflot3d2_</name>
      <anchorfile>FaceFloatConstantRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FaceFloatConstantRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/face/</path>
    <filename>FaceFloatConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceIntegerConstantRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/face/</path>
    <filename>FaceIntegerConstantRefine_8C</filename>
    <includes id="FaceIntegerConstantRefine_8h" name="FaceIntegerConstantRefine.h" local="yes" imported="no">FaceIntegerConstantRefine.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">FaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conreffaceintg1d_</name>
      <anchorfile>FaceIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conreffaceintg2d0_</name>
      <anchorfile>FaceIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conreffaceintg2d1_</name>
      <anchorfile>FaceIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conreffaceintg3d0_</name>
      <anchorfile>FaceIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conreffaceintg3d1_</name>
      <anchorfile>FaceIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conreffaceintg3d2_</name>
      <anchorfile>FaceIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FaceIntegerConstantRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/face/</path>
    <filename>FaceIntegerConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>pdat_concoarsen1d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/fortran/</path>
    <filename>pdat__concoarsen1d_8f</filename>
    <member kind="function">
      <type>c c arrayc c ***********************************************************************implicit none double precision zero</type>
      <name>parameter</name>
      <anchorfile>pdat__concoarsen1d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(zero=0.d0) c integer &amp;ifirstc0</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>pdat__concoarsen1d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc0</name>
      <anchorfile>pdat__concoarsen1d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>filo0</name>
      <anchorfile>pdat__concoarsen1d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi0</name>
      <anchorfile>pdat__concoarsen1d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>cilo0</name>
      <anchorfile>pdat__concoarsen1d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi0</name>
      <anchorfile>pdat__concoarsen1d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ratio</name>
      <anchorfile>pdat__concoarsen1d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>arrayf</name>
      <anchorfile>pdat__concoarsen1d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pdat_concoarsen2d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/fortran/</path>
    <filename>pdat__concoarsen2d_8f</filename>
    <member kind="function">
      <type>c c arrayc c ***********************************************************************implicit none double precision zero</type>
      <name>parameter</name>
      <anchorfile>pdat__concoarsen2d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(zero=0.d0) c integer &amp;ifirstc0</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>pdat__concoarsen2d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirstc1</name>
      <anchorfile>pdat__concoarsen2d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc0</name>
      <anchorfile>pdat__concoarsen2d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc1</name>
      <anchorfile>pdat__concoarsen2d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>filo0</name>
      <anchorfile>pdat__concoarsen2d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>filo1</name>
      <anchorfile>pdat__concoarsen2d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi0</name>
      <anchorfile>pdat__concoarsen2d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi1</name>
      <anchorfile>pdat__concoarsen2d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>cilo0</name>
      <anchorfile>pdat__concoarsen2d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cilo1</name>
      <anchorfile>pdat__concoarsen2d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi0</name>
      <anchorfile>pdat__concoarsen2d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi1</name>
      <anchorfile>pdat__concoarsen2d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ratio</name>
      <anchorfile>pdat__concoarsen2d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>arrayf</name>
      <anchorfile>pdat__concoarsen2d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pdat_concoarsen3d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/fortran/</path>
    <filename>pdat__concoarsen3d_8f</filename>
    <member kind="function">
      <type>c c arrayc c ***********************************************************************implicit none double precision zero</type>
      <name>parameter</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(zero=0.d0) c integer &amp;ifirstc0</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirstc1</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirstc2</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc0</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc1</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc2</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>filo0</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>filo1</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>filo2</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi0</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi1</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi2</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>cilo0</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cilo1</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cilo2</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi0</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi1</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi2</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ratio</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>arrayf</name>
      <anchorfile>pdat__concoarsen3d_8f.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pdat_conrefine1d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/fortran/</path>
    <filename>pdat__conrefine1d_8f</filename>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>pdat__conrefine1d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc0</name>
      <anchorfile>pdat__conrefine1d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ifirstf0</name>
      <anchorfile>pdat__conrefine1d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastf0</name>
      <anchorfile>pdat__conrefine1d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>cilo0</name>
      <anchorfile>pdat__conrefine1d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi0</name>
      <anchorfile>pdat__conrefine1d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>filo0</name>
      <anchorfile>pdat__conrefine1d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi0</name>
      <anchorfile>pdat__conrefine1d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ratio</name>
      <anchorfile>pdat__conrefine1d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>arrayc</name>
      <anchorfile>pdat__conrefine1d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c arrayf c ***********************************************************************implicit none double precision</type>
      <name>half</name>
      <anchorfile>pdat__conrefine1d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pdat_conrefine2d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/fortran/</path>
    <filename>pdat__conrefine2d_8f</filename>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>pdat__conrefine2d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirstc1</name>
      <anchorfile>pdat__conrefine2d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc0</name>
      <anchorfile>pdat__conrefine2d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc1</name>
      <anchorfile>pdat__conrefine2d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ifirstf0</name>
      <anchorfile>pdat__conrefine2d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirstf1</name>
      <anchorfile>pdat__conrefine2d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastf0</name>
      <anchorfile>pdat__conrefine2d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastf1</name>
      <anchorfile>pdat__conrefine2d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>cilo0</name>
      <anchorfile>pdat__conrefine2d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cilo1</name>
      <anchorfile>pdat__conrefine2d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi0</name>
      <anchorfile>pdat__conrefine2d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi1</name>
      <anchorfile>pdat__conrefine2d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>filo0</name>
      <anchorfile>pdat__conrefine2d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>filo1</name>
      <anchorfile>pdat__conrefine2d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi0</name>
      <anchorfile>pdat__conrefine2d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi1</name>
      <anchorfile>pdat__conrefine2d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ratio</name>
      <anchorfile>pdat__conrefine2d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>arrayc</name>
      <anchorfile>pdat__conrefine2d_8f.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c arrayf c ***********************************************************************implicit none double precision</type>
      <name>half</name>
      <anchorfile>pdat__conrefine2d_8f.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pdat_conrefine3d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/fortran/</path>
    <filename>pdat__conrefine3d_8f</filename>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirstc1</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirstc2</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc0</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc1</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastc2</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ifirstf0</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirstf1</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirstf2</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastf0</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastf1</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilastf2</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>cilo0</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cilo1</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cilo2</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi0</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi1</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>cihi2</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>filo0</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>filo1</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>filo2</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi0</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi1</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fihi2</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ratio</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>arrayc</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c arrayf c ***********************************************************************implicit none double precision</type>
      <name>half</name>
      <anchorfile>pdat__conrefine3d_8f.html</anchorfile>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeComplexConstantAverage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/node/</path>
    <filename>NodeComplexConstantAverage_8C</filename>
    <includes id="NodeComplexConstantAverage_8h" name="NodeComplexConstantAverage.h" local="yes" imported="no">NodeComplexConstantAverage.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">NodeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conavgnodecplx1d_</name>
      <anchorfile>NodeComplexConstantAverage_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conavgnodecplx2d_</name>
      <anchorfile>NodeComplexConstantAverage_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conavgnodecplx3d_</name>
      <anchorfile>NodeComplexConstantAverage_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeComplexConstantAverage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/node/</path>
    <filename>NodeComplexConstantAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeDoubleConstantAverage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/node/</path>
    <filename>NodeDoubleConstantAverage_8C</filename>
    <includes id="NodeDoubleConstantAverage_8h" name="NodeDoubleConstantAverage.h" local="yes" imported="no">NodeDoubleConstantAverage.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">NodeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conavgnodedoub1d_</name>
      <anchorfile>NodeDoubleConstantAverage_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conavgnodedoub2d_</name>
      <anchorfile>NodeDoubleConstantAverage_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conavgnodedoub3d_</name>
      <anchorfile>NodeDoubleConstantAverage_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeDoubleConstantAverage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/node/</path>
    <filename>NodeDoubleConstantAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeFloatConstantAverage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/node/</path>
    <filename>NodeFloatConstantAverage_8C</filename>
    <includes id="NodeFloatConstantAverage_8h" name="NodeFloatConstantAverage.h" local="yes" imported="no">NodeFloatConstantAverage.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">NodeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conavgnodeflot1d_</name>
      <anchorfile>NodeFloatConstantAverage_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conavgnodeflot2d_</name>
      <anchorfile>NodeFloatConstantAverage_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conavgnodeflot3d_</name>
      <anchorfile>NodeFloatConstantAverage_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeFloatConstantAverage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/node/</path>
    <filename>NodeFloatConstantAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeIntegerConstantAverage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/node/</path>
    <filename>NodeIntegerConstantAverage_8C</filename>
    <includes id="NodeIntegerConstantAverage_8h" name="NodeIntegerConstantAverage.h" local="yes" imported="no">NodeIntegerConstantAverage.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">NodeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conavgnodeintg1d_</name>
      <anchorfile>NodeIntegerConstantAverage_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conavgnodeintg2d_</name>
      <anchorfile>NodeIntegerConstantAverage_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conavgnodeintg3d_</name>
      <anchorfile>NodeIntegerConstantAverage_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeIntegerConstantAverage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/node/</path>
    <filename>NodeIntegerConstantAverage_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceComplexConstantRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/outerface/</path>
    <filename>OuterfaceComplexConstantRefine_8C</filename>
    <includes id="OuterfaceComplexConstantRefine_8h" name="OuterfaceComplexConstantRefine.h" local="yes" imported="no">OuterfaceComplexConstantRefine.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">OuterfaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfacecplx1d_</name>
      <anchorfile>OuterfaceComplexConstantRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfacecplx2d0_</name>
      <anchorfile>OuterfaceComplexConstantRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfacecplx2d1_</name>
      <anchorfile>OuterfaceComplexConstantRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfacecplx3d0_</name>
      <anchorfile>OuterfaceComplexConstantRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfacecplx3d1_</name>
      <anchorfile>OuterfaceComplexConstantRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfacecplx3d2_</name>
      <anchorfile>OuterfaceComplexConstantRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuterfaceComplexConstantRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/outerface/</path>
    <filename>OuterfaceComplexConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceDoubleConstantRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/outerface/</path>
    <filename>OuterfaceDoubleConstantRefine_8C</filename>
    <includes id="OuterfaceDoubleConstantRefine_8h" name="OuterfaceDoubleConstantRefine.h" local="yes" imported="no">OuterfaceDoubleConstantRefine.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">OuterfaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfacedoub1d_</name>
      <anchorfile>OuterfaceDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfacedoub2d0_</name>
      <anchorfile>OuterfaceDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfacedoub2d1_</name>
      <anchorfile>OuterfaceDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfacedoub3d0_</name>
      <anchorfile>OuterfaceDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfacedoub3d1_</name>
      <anchorfile>OuterfaceDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfacedoub3d2_</name>
      <anchorfile>OuterfaceDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuterfaceDoubleConstantRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/outerface/</path>
    <filename>OuterfaceDoubleConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceFloatConstantRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/outerface/</path>
    <filename>OuterfaceFloatConstantRefine_8C</filename>
    <includes id="OuterfaceFloatConstantRefine_8h" name="OuterfaceFloatConstantRefine.h" local="yes" imported="no">OuterfaceFloatConstantRefine.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">OuterfaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfaceflot1d_</name>
      <anchorfile>OuterfaceFloatConstantRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfaceflot2d0_</name>
      <anchorfile>OuterfaceFloatConstantRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfaceflot2d1_</name>
      <anchorfile>OuterfaceFloatConstantRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfaceflot3d0_</name>
      <anchorfile>OuterfaceFloatConstantRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfaceflot3d1_</name>
      <anchorfile>OuterfaceFloatConstantRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfaceflot3d2_</name>
      <anchorfile>OuterfaceFloatConstantRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuterfaceFloatConstantRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/outerface/</path>
    <filename>OuterfaceFloatConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceIntegerConstantRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/outerface/</path>
    <filename>OuterfaceIntegerConstantRefine_8C</filename>
    <includes id="OuterfaceIntegerConstantRefine_8h" name="OuterfaceIntegerConstantRefine.h" local="yes" imported="no">OuterfaceIntegerConstantRefine.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">OuterfaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfaceintg1d_</name>
      <anchorfile>OuterfaceIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfaceintg2d0_</name>
      <anchorfile>OuterfaceIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfaceintg2d1_</name>
      <anchorfile>OuterfaceIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfaceintg3d0_</name>
      <anchorfile>OuterfaceIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfaceintg3d1_</name>
      <anchorfile>OuterfaceIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefoutfaceintg3d2_</name>
      <anchorfile>OuterfaceIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuterfaceIntegerConstantRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/outerface/</path>
    <filename>OuterfaceIntegerConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeDoubleConstantCoarsen.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/outernode/</path>
    <filename>OuternodeDoubleConstantCoarsen_8C</filename>
    <includes id="OuternodeDoubleConstantCoarsen_8h" name="OuternodeDoubleConstantCoarsen.h" local="yes" imported="no">OuternodeDoubleConstantCoarsen.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="OuternodeData_8h" name="OuternodeData.h" local="yes" imported="no">OuternodeData.h</includes>
    <includes id="OuternodeVariable_8h" name="OuternodeVariable.h" local="yes" imported="no">OuternodeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conavgouternodedoub1d_</name>
      <anchorfile>OuternodeDoubleConstantCoarsen_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conavgouternodedoub2d0_</name>
      <anchorfile>OuternodeDoubleConstantCoarsen_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conavgouternodedoub2d1_</name>
      <anchorfile>OuternodeDoubleConstantCoarsen_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conavgouternodedoub3d0_</name>
      <anchorfile>OuternodeDoubleConstantCoarsen_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conavgouternodedoub3d1_</name>
      <anchorfile>OuternodeDoubleConstantCoarsen_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conavgouternodedoub3d2_</name>
      <anchorfile>OuternodeDoubleConstantCoarsen_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuternodeDoubleConstantCoarsen.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/outernode/</path>
    <filename>OuternodeDoubleConstantCoarsen_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideComplexConstantRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/side/</path>
    <filename>SideComplexConstantRefine_8C</filename>
    <includes id="SideComplexConstantRefine_8h" name="SideComplexConstantRefine.h" local="yes" imported="no">SideComplexConstantRefine.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SideVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conrefsidecplx1d_</name>
      <anchorfile>SideComplexConstantRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefsidecplx2d0_</name>
      <anchorfile>SideComplexConstantRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefsidecplx2d1_</name>
      <anchorfile>SideComplexConstantRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefsidecplx3d0_</name>
      <anchorfile>SideComplexConstantRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefsidecplx3d1_</name>
      <anchorfile>SideComplexConstantRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefsidecplx3d2_</name>
      <anchorfile>SideComplexConstantRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SideComplexConstantRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/side/</path>
    <filename>SideComplexConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideDoubleConstantRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/side/</path>
    <filename>SideDoubleConstantRefine_8C</filename>
    <includes id="SideDoubleConstantRefine_8h" name="SideDoubleConstantRefine.h" local="yes" imported="no">SideDoubleConstantRefine.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SideVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conrefsidedoub1d_</name>
      <anchorfile>SideDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefsidedoub2d0_</name>
      <anchorfile>SideDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefsidedoub2d1_</name>
      <anchorfile>SideDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefsidedoub3d0_</name>
      <anchorfile>SideDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefsidedoub3d1_</name>
      <anchorfile>SideDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefsidedoub3d2_</name>
      <anchorfile>SideDoubleConstantRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SideDoubleConstantRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/side/</path>
    <filename>SideDoubleConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideFloatConstantRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/side/</path>
    <filename>SideFloatConstantRefine_8C</filename>
    <includes id="SideFloatConstantRefine_8h" name="SideFloatConstantRefine.h" local="yes" imported="no">SideFloatConstantRefine.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SideVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conrefsideflot1d_</name>
      <anchorfile>SideFloatConstantRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefsideflot2d0_</name>
      <anchorfile>SideFloatConstantRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefsideflot2d1_</name>
      <anchorfile>SideFloatConstantRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefsideflot3d0_</name>
      <anchorfile>SideFloatConstantRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefsideflot3d1_</name>
      <anchorfile>SideFloatConstantRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefsideflot3d2_</name>
      <anchorfile>SideFloatConstantRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SideFloatConstantRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/side/</path>
    <filename>SideFloatConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideIntegerConstantRefine.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/side/</path>
    <filename>SideIntegerConstantRefine_8C</filename>
    <includes id="SideIntegerConstantRefine_8h" name="SideIntegerConstantRefine.h" local="yes" imported="no">SideIntegerConstantRefine.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SideVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>conrefsideintg1d_</name>
      <anchorfile>SideIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefsideintg2d0_</name>
      <anchorfile>SideIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefsideintg2d1_</name>
      <anchorfile>SideIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefsideintg3d0_</name>
      <anchorfile>SideIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefsideintg3d1_</name>
      <anchorfile>SideIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conrefsideintg3d2_</name>
      <anchorfile>SideIntegerConstantRefine_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int *, const int *, int *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SideIntegerConstantRefine.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/side/</path>
    <filename>SideIntegerConstantRefine_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellComplexLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/cell/</path>
    <filename>CellComplexLinearTimeInterpolateOp_8C</filename>
    <includes id="CellComplexLinearTimeInterpolateOp_8h" name="CellComplexLinearTimeInterpolateOp.h" local="yes" imported="no">CellComplexLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintcellcmplx1d_</name>
      <anchorfile>CellComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintcellcmplx2d_</name>
      <anchorfile>CellComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintcellcmplx3d_</name>
      <anchorfile>CellComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellComplexLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/cell/</path>
    <filename>CellComplexLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellDoubleLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/cell/</path>
    <filename>CellDoubleLinearTimeInterpolateOp_8C</filename>
    <includes id="CellDoubleLinearTimeInterpolateOp_8h" name="CellDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">CellDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintcelldoub1d_</name>
      <anchorfile>CellDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintcelldoub2d_</name>
      <anchorfile>CellDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintcelldoub3d_</name>
      <anchorfile>CellDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellDoubleLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/cell/</path>
    <filename>CellDoubleLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>CellFloatLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/cell/</path>
    <filename>CellFloatLinearTimeInterpolateOp_8C</filename>
    <includes id="CellFloatLinearTimeInterpolateOp_8h" name="CellFloatLinearTimeInterpolateOp.h" local="yes" imported="no">CellFloatLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintcellfloat1d_</name>
      <anchorfile>CellFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintcellfloat2d_</name>
      <anchorfile>CellFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintcellfloat3d_</name>
      <anchorfile>CellFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellFloatLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/cell/</path>
    <filename>CellFloatLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeComplexLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/edge/</path>
    <filename>EdgeComplexLinearTimeInterpolateOp_8C</filename>
    <includes id="EdgeComplexLinearTimeInterpolateOp_8h" name="EdgeComplexLinearTimeInterpolateOp.h" local="yes" imported="no">EdgeComplexLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">EdgeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintedgecmplx1d_</name>
      <anchorfile>EdgeComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintedgecmplx2d0_</name>
      <anchorfile>EdgeComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintedgecmplx2d1_</name>
      <anchorfile>EdgeComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintedgecmplx3d0_</name>
      <anchorfile>EdgeComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintedgecmplx3d1_</name>
      <anchorfile>EdgeComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintedgecmplx3d2_</name>
      <anchorfile>EdgeComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeComplexLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/edge/</path>
    <filename>EdgeComplexLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeDoubleLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/edge/</path>
    <filename>EdgeDoubleLinearTimeInterpolateOp_8C</filename>
    <includes id="EdgeDoubleLinearTimeInterpolateOp_8h" name="EdgeDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">EdgeDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">EdgeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintedgedoub1d_</name>
      <anchorfile>EdgeDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintedgedoub2d0_</name>
      <anchorfile>EdgeDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintedgedoub2d1_</name>
      <anchorfile>EdgeDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintedgedoub3d0_</name>
      <anchorfile>EdgeDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintedgedoub3d1_</name>
      <anchorfile>EdgeDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintedgedoub3d2_</name>
      <anchorfile>EdgeDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeDoubleLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/edge/</path>
    <filename>EdgeDoubleLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>EdgeFloatLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/edge/</path>
    <filename>EdgeFloatLinearTimeInterpolateOp_8C</filename>
    <includes id="EdgeFloatLinearTimeInterpolateOp_8h" name="EdgeFloatLinearTimeInterpolateOp.h" local="yes" imported="no">EdgeFloatLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">EdgeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintedgefloat1d_</name>
      <anchorfile>EdgeFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintedgefloat2d0_</name>
      <anchorfile>EdgeFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintedgefloat2d1_</name>
      <anchorfile>EdgeFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintedgefloat3d0_</name>
      <anchorfile>EdgeFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintedgefloat3d1_</name>
      <anchorfile>EdgeFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintedgefloat3d2_</name>
      <anchorfile>EdgeFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeFloatLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/edge/</path>
    <filename>EdgeFloatLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceComplexLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/face/</path>
    <filename>FaceComplexLinearTimeInterpolateOp_8C</filename>
    <includes id="FaceComplexLinearTimeInterpolateOp_8h" name="FaceComplexLinearTimeInterpolateOp.h" local="yes" imported="no">FaceComplexLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">FaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintfacecmplx1d_</name>
      <anchorfile>FaceComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintfacecmplx2d0_</name>
      <anchorfile>FaceComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintfacecmplx2d1_</name>
      <anchorfile>FaceComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintfacecmplx3d0_</name>
      <anchorfile>FaceComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintfacecmplx3d1_</name>
      <anchorfile>FaceComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintfacecmplx3d2_</name>
      <anchorfile>FaceComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FaceComplexLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/face/</path>
    <filename>FaceComplexLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceDoubleLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/face/</path>
    <filename>FaceDoubleLinearTimeInterpolateOp_8C</filename>
    <includes id="FaceDoubleLinearTimeInterpolateOp_8h" name="FaceDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">FaceDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">FaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintfacedoub1d_</name>
      <anchorfile>FaceDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintfacedoub2d0_</name>
      <anchorfile>FaceDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintfacedoub2d1_</name>
      <anchorfile>FaceDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintfacedoub3d0_</name>
      <anchorfile>FaceDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintfacedoub3d1_</name>
      <anchorfile>FaceDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintfacedoub3d2_</name>
      <anchorfile>FaceDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FaceDoubleLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/face/</path>
    <filename>FaceDoubleLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FaceFloatLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/face/</path>
    <filename>FaceFloatLinearTimeInterpolateOp_8C</filename>
    <includes id="FaceFloatLinearTimeInterpolateOp_8h" name="FaceFloatLinearTimeInterpolateOp.h" local="yes" imported="no">FaceFloatLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">FaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintfacefloat1d_</name>
      <anchorfile>FaceFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintfacefloat2d0_</name>
      <anchorfile>FaceFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintfacefloat2d1_</name>
      <anchorfile>FaceFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintfacefloat3d0_</name>
      <anchorfile>FaceFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintfacefloat3d1_</name>
      <anchorfile>FaceFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintfacefloat3d2_</name>
      <anchorfile>FaceFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FaceFloatLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/face/</path>
    <filename>FaceFloatLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>pdat_lintimint1d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/fortran/</path>
    <filename>pdat__lintimint1d_8f</filename>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one</type>
      <name>parameter</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(one=1.d0) c integer &amp;ifirst0</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi0 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(oilo0:oihi0)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi0 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(nilo0:nihi0)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi0 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(dilo0:dihi0) integer ic0 c c ***********************************************************************c oldfrac</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(ic0)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac real &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double complex &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(ie0)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac real &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double complex &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac real &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double complex &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(oilo0:oihi0+1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac real &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double complex &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac real &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double complex &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(nilo0:nihi0+1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac real &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double complex &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac real &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double complex &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(dilo0:dihi0+1) integer ie0 c c ***********************************************************************c oldfrac</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac real &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double complex &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac real &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double complex &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac real &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double complex &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac real &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double complex &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac real &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double complex &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac real &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double complex &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac real &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double complex &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac real &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double complex &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac real &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double complex &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac real &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double complex &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac real &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double complex &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double precision &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac real &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double complex &amp;&amp;&amp;ilast0 dihi0 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(1) c c ***********************************************************************c oldfrac</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilast0</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>oilo0</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>oihi0</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>nilo0</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>nihi0</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>dilo0</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dihi0</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>tfrac</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint1d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pdat_lintimint2d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/fortran/</path>
    <filename>pdat__lintimint2d_8f</filename>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one</type>
      <name>parameter</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(one=1.d0) c integer &amp;ifirst0</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(oilo0:oihi0,&amp;oilo1:oihi1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(nilo0:nihi0,&amp;nilo1:nihi1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(dilo0:dihi0,&amp;dilo1:dihi1) integer ic0</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(ic0, ic1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(oilo0:oihi0,&amp;oilo1:oihi1+1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(nilo0:nihi0,&amp;nilo1:nihi1+1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(dilo0:dihi0,&amp;dilo1:dihi1+1) integer ie0</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(ie0, ie1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(oilo0:oihi0+1,&amp;oilo1:oihi1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(nilo0:nihi0+1,&amp;nilo1:nihi1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(dilo0:dihi0+1,&amp;dilo1:dihi1) integer ie0</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(ie0, ic1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(oilo1:oihi1+1,&amp;oilo0:oihi0)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(nilo1:nihi1+1,&amp;nilo0:nihi0)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(dilo1:dihi1+1,&amp;dilo0:dihi0) integer ie1</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(ie1, ic0)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(oilo0:oihi0+1,&amp;oilo1:oihi1+1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(nilo0:nihi0+1,&amp;nilo1:nihi1+1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(dilo0:dihi0+1,&amp;dilo1:dihi1+1) integer ie0</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(oilo1:oihi1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(nilo1:nihi1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(dilo1:dihi1) integer ic1 c c ***********************************************************************c oldfrac</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ilast1</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(ic1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ilast1 dihi1 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>(oilo0:oihi0)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ilast1 dihi1 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(nilo0:nihi0)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ilast1 dihi1 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>(dilo0:dihi0) integer ic0 c c ***********************************************************************c oldfrac</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast1 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ilast1 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ilast0</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>(ic0)</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirst1</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilast0</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilast1</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>oilo0</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>oilo1</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>oihi0</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>oihi1</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>nilo0</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>nilo1</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>nihi0</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>nihi1</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>dilo0</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dilo1</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dihi0</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dihi1</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>tfrac</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c</type>
      <name>oldfrac</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do</type>
      <name>ic0</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do</type>
      <name>ie0</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac real &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double complex &amp;&amp;&amp;ie1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi1 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do</type>
      <name>ie1</name>
      <anchorfile>pdat__lintimint2d_8f.html</anchorfile>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pdat_lintimint3d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/fortran/</path>
    <filename>pdat__lintimint3d_8f</filename>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one</type>
      <name>parameter</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(one=1.d0) c integer &amp;ifirst0</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(oilo0:oihi0,&amp;oilo1:oihi1,&amp;oilo2:oihi2)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(nilo0:nihi0,&amp;nilo1:nihi1,&amp;nilo2:nihi2)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(dilo0:dihi0,&amp;dilo1:dihi1,&amp;dilo2:dihi2) integer ic0</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(ic0, ic1, ic2)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(oilo0:oihi0,&amp;oilo1:oihi1+1,&amp;oilo2:oihi2+1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(nilo0:nihi0,&amp;nilo1:nihi1+1,&amp;nilo2:nihi2+1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(dilo0:dihi0,&amp;dilo1:dihi1+1,&amp;dilo2:dihi2+1) integer ie0</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(ie0, ie1, ie2)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(oilo0:oihi0+1,&amp;oilo1:oihi1,&amp;oilo2:oihi2+1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(nilo0:nihi0+1,&amp;nilo1:nihi1,&amp;nilo2:nihi2+1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(dilo0:dihi0+1,&amp;dilo1:dihi1,&amp;dilo2:dihi2+1) integer ie0</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(oilo0:oihi0+1,&amp;oilo1:oihi1+1,&amp;oilo2:oihi2)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>(nilo0:nihi0+1,&amp;nilo1:nihi1+1,&amp;nilo2:nihi2)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(dilo0:dihi0+1,&amp;dilo1:dihi1+1,&amp;dilo2:dihi2) integer ie0</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>(oilo0:oihi0+1,&amp;oilo1:oihi1,&amp;oilo2:oihi2)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>(nilo0:nihi0+1,&amp;nilo1:nihi1,&amp;nilo2:nihi2)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>(dilo0:dihi0+1,&amp;dilo1:dihi1,&amp;dilo2:dihi2) integer ie0</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>(ie0, ic1, ic2)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a53</anchor>
      <arglist>(oilo1:oihi1+1,&amp;oilo2:oihi2,&amp;oilo0:oihi0)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a54</anchor>
      <arglist>(nilo1:nihi1+1,&amp;nilo2:nihi2,&amp;nilo0:nihi0)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a55</anchor>
      <arglist>(dilo1:dihi1+1,&amp;dilo2:dihi2,&amp;dilo0:dihi0) integer ie1</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a56</anchor>
      <arglist>(ie1, ic2, ic0)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a57</anchor>
      <arglist>(oilo2:oihi2+1,&amp;oilo0:oihi0,&amp;oilo1:oihi1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a58</anchor>
      <arglist>(nilo2:nihi2+1,&amp;nilo0:nihi0,&amp;nilo1:nihi1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a59</anchor>
      <arglist>(dilo2:dihi2+1,&amp;dilo0:dihi0,&amp;dilo1:dihi1) integer ie2</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a60</anchor>
      <arglist>(ie2, ic0, ic1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a61</anchor>
      <arglist>(oilo0:oihi0+1,&amp;oilo1:oihi1+1,&amp;oilo2:oihi2+1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a62</anchor>
      <arglist>(nilo0:nihi0+1,&amp;nilo1:nihi1+1,&amp;nilo2:nihi2+1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a63</anchor>
      <arglist>(dilo0:dihi0+1,&amp;dilo1:dihi1+1,&amp;dilo2:dihi2+1) integer ie0</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a64</anchor>
      <arglist>(oilo1:oihi1,&amp;oilo2:oihi2)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a65</anchor>
      <arglist>(nilo1:nihi1,&amp;nilo2:nihi2)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a66</anchor>
      <arglist>(dilo1:dihi1,&amp;dilo2:dihi2) integer ic1</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a67</anchor>
      <arglist>(ic1, ic2)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a68</anchor>
      <arglist>(oilo2:oihi2,&amp;oilo0:oihi0)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a69</anchor>
      <arglist>(nilo2:nihi2,&amp;nilo0:nihi0)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a70</anchor>
      <arglist>(dilo2:dihi2,&amp;dilo0:dihi0) integer ic2</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a71</anchor>
      <arglist>(ic2, ic0)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a72</anchor>
      <arglist>(oilo0:oihi0,&amp;oilo1:oihi1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a73</anchor>
      <arglist>(nilo0:nihi0,&amp;nilo1:nihi1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a74</anchor>
      <arglist>(dilo0:dihi0,&amp;dilo1:dihi1) integer ic0</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a75</anchor>
      <arglist>(ic0, ic1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a76</anchor>
      <arglist>(oilo0:oihi0,&amp;oilo2:oihi2)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a77</anchor>
      <arglist>(nilo0:nihi0,&amp;nilo2:nihi2)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a78</anchor>
      <arglist>(dilo0:dihi0,&amp;dilo2:dihi2) integer ic0</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast0</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a79</anchor>
      <arglist>(ic0, ic2)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a80</anchor>
      <arglist>(oilo0:oihi0,&amp;oilo1:oihi1+1,&amp;oilo2:oihi2)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a81</anchor>
      <arglist>(nilo0:nihi0,&amp;nilo1:nihi1+1,&amp;nilo2:nihi2)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a82</anchor>
      <arglist>(dilo0:dihi0,&amp;dilo1:dihi1+1,&amp;dilo2:dihi2) integer ie0</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a83</anchor>
      <arglist>(oilo0:oihi0,&amp;oilo1:oihi1,&amp;oilo2:oihi2+1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a84</anchor>
      <arglist>(nilo0:nihi0,&amp;nilo1:nihi1,&amp;nilo2:nihi2+1)</arglist>
    </member>
    <member kind="function">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac real ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double complex ic1 c c ***********************************************************************c ilast1 do ilast0 do ilast2 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac real &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic0 c c ***********************************************************************c ilast0 do ilast2 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac real &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast0 dihi2 double precision oldfrac real &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast1 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic2 c c ***********************************************************************c ilast2 do ilast0 dihi2 double precision oldfrac double complex &amp;&amp;&amp;ic1 c c ***********************************************************************c ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>arraydst</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a85</anchor>
      <arglist>(dilo0:dihi0,&amp;dilo1:dihi1,&amp;dilo2:dihi2+1) integer ie0</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirst1</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ifirst2</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilast0</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilast1</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilast2</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>oilo0</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>oilo1</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>oilo2</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>oihi0</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>oihi1</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>oihi2</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>nilo0</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>nilo1</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>nilo2</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>nihi0</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>nihi1</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>nihi2</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>dilo0</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dilo1</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dilo2</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dihi0</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dihi1</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dihi2</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>tfrac</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>arrayold</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>arraynew</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>ic1</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c</type>
      <name>oldfrac</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do</type>
      <name>ic0</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>ie1</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do</type>
      <name>ie0</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision &amp;&amp;&amp;</type>
      <name>ic2</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;arraydst c ***********************************************************************implicit none double precision one dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac real ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double complex ie2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic2 c c ***********************************************************************c ilast2 do ilast1 do ilast0 dihi2 double precision oldfrac double precision ic0 c c ***********************************************************************c ilast0 do ilast2 do ilast1 dihi2 double precision oldfrac double precision ic1 c c ***********************************************************************c ilast1 do ilast0 do</type>
      <name>ie2</name>
      <anchorfile>pdat__lintimint3d_8f.html</anchorfile>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeComplexLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/node/</path>
    <filename>NodeComplexLinearTimeInterpolateOp_8C</filename>
    <includes id="NodeComplexLinearTimeInterpolateOp_8h" name="NodeComplexLinearTimeInterpolateOp.h" local="yes" imported="no">NodeComplexLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">NodeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintnodecmplx1d_</name>
      <anchorfile>NodeComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintnodecmplx2d_</name>
      <anchorfile>NodeComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintnodecmplx3d_</name>
      <anchorfile>NodeComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeComplexLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/node/</path>
    <filename>NodeComplexLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeDoubleLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/node/</path>
    <filename>NodeDoubleLinearTimeInterpolateOp_8C</filename>
    <includes id="NodeDoubleLinearTimeInterpolateOp_8h" name="NodeDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">NodeDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">NodeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintnodedoub1d_</name>
      <anchorfile>NodeDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintnodedoub2d_</name>
      <anchorfile>NodeDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintnodedoub3d_</name>
      <anchorfile>NodeDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeDoubleLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/node/</path>
    <filename>NodeDoubleLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>NodeFloatLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/node/</path>
    <filename>NodeFloatLinearTimeInterpolateOp_8C</filename>
    <includes id="NodeFloatLinearTimeInterpolateOp_8h" name="NodeFloatLinearTimeInterpolateOp.h" local="yes" imported="no">NodeFloatLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">NodeVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintnodefloat1d_</name>
      <anchorfile>NodeFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintnodefloat2d_</name>
      <anchorfile>NodeFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintnodefloat3d_</name>
      <anchorfile>NodeFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NodeFloatLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/node/</path>
    <filename>NodeFloatLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceComplexLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/outerface/</path>
    <filename>OuterfaceComplexLinearTimeInterpolateOp_8C</filename>
    <includes id="OuterfaceComplexLinearTimeInterpolateOp_8h" name="OuterfaceComplexLinearTimeInterpolateOp.h" local="yes" imported="no">OuterfaceComplexLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">OuterfaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutfacecmplx1d_</name>
      <anchorfile>OuterfaceComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutfacecmplx2d0_</name>
      <anchorfile>OuterfaceComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutfacecmplx2d1_</name>
      <anchorfile>OuterfaceComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutfacecmplx3d0_</name>
      <anchorfile>OuterfaceComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutfacecmplx3d1_</name>
      <anchorfile>OuterfaceComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutfacecmplx3d2_</name>
      <anchorfile>OuterfaceComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuterfaceComplexLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/outerface/</path>
    <filename>OuterfaceComplexLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceDoubleLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/outerface/</path>
    <filename>OuterfaceDoubleLinearTimeInterpolateOp_8C</filename>
    <includes id="OuterfaceDoubleLinearTimeInterpolateOp_8h" name="OuterfaceDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">OuterfaceDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">OuterfaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutfacedoub1d_</name>
      <anchorfile>OuterfaceDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutfacedoub2d0_</name>
      <anchorfile>OuterfaceDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutfacedoub2d1_</name>
      <anchorfile>OuterfaceDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutfacedoub3d0_</name>
      <anchorfile>OuterfaceDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutfacedoub3d1_</name>
      <anchorfile>OuterfaceDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutfacedoub3d2_</name>
      <anchorfile>OuterfaceDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuterfaceDoubleLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/outerface/</path>
    <filename>OuterfaceDoubleLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceFloatLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/outerface/</path>
    <filename>OuterfaceFloatLinearTimeInterpolateOp_8C</filename>
    <includes id="OuterfaceFloatLinearTimeInterpolateOp_8h" name="OuterfaceFloatLinearTimeInterpolateOp.h" local="yes" imported="no">OuterfaceFloatLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">OuterfaceData.h</includes>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">OuterfaceVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutfacefloat1d_</name>
      <anchorfile>OuterfaceFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutfacefloat2d0_</name>
      <anchorfile>OuterfaceFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutfacefloat2d1_</name>
      <anchorfile>OuterfaceFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutfacefloat3d0_</name>
      <anchorfile>OuterfaceFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutfacefloat3d1_</name>
      <anchorfile>OuterfaceFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutfacefloat3d2_</name>
      <anchorfile>OuterfaceFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuterfaceFloatLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/outerface/</path>
    <filename>OuterfaceFloatLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideComplexLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/outerside/</path>
    <filename>OutersideComplexLinearTimeInterpolateOp_8C</filename>
    <includes id="OutersideComplexLinearTimeInterpolateOp_8h" name="OutersideComplexLinearTimeInterpolateOp.h" local="yes" imported="no">OutersideComplexLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="OutersideData_8h" name="OutersideData.h" local="yes" imported="no">OutersideData.h</includes>
    <includes id="OutersideVariable_8h" name="OutersideVariable.h" local="yes" imported="no">OutersideVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutsidecmplx1d_</name>
      <anchorfile>OutersideComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutsidecmplx2d0_</name>
      <anchorfile>OutersideComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutsidecmplx2d1_</name>
      <anchorfile>OutersideComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutsidecmplx3d0_</name>
      <anchorfile>OutersideComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutsidecmplx3d1_</name>
      <anchorfile>OutersideComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutsidecmplx3d2_</name>
      <anchorfile>OutersideComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OutersideComplexLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/outerside/</path>
    <filename>OutersideComplexLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideDoubleLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/outerside/</path>
    <filename>OutersideDoubleLinearTimeInterpolateOp_8C</filename>
    <includes id="OutersideDoubleLinearTimeInterpolateOp_8h" name="OutersideDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">OutersideDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="OutersideData_8h" name="OutersideData.h" local="yes" imported="no">OutersideData.h</includes>
    <includes id="OutersideVariable_8h" name="OutersideVariable.h" local="yes" imported="no">OutersideVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutsidedoub1d_</name>
      <anchorfile>OutersideDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutsidedoub2d0_</name>
      <anchorfile>OutersideDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutsidedoub2d1_</name>
      <anchorfile>OutersideDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutsidedoub3d0_</name>
      <anchorfile>OutersideDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutsidedoub3d1_</name>
      <anchorfile>OutersideDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutsidedoub3d2_</name>
      <anchorfile>OutersideDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OutersideDoubleLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/outerside/</path>
    <filename>OutersideDoubleLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideFloatLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/outerside/</path>
    <filename>OutersideFloatLinearTimeInterpolateOp_8C</filename>
    <includes id="OutersideFloatLinearTimeInterpolateOp_8h" name="OutersideFloatLinearTimeInterpolateOp.h" local="yes" imported="no">OutersideFloatLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="OutersideData_8h" name="OutersideData.h" local="yes" imported="no">OutersideData.h</includes>
    <includes id="OutersideVariable_8h" name="OutersideVariable.h" local="yes" imported="no">OutersideVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutsidefloat1d_</name>
      <anchorfile>OutersideFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutsidefloat2d0_</name>
      <anchorfile>OutersideFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutsidefloat2d1_</name>
      <anchorfile>OutersideFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutsidefloat3d0_</name>
      <anchorfile>OutersideFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutsidefloat3d1_</name>
      <anchorfile>OutersideFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintoutsidefloat3d2_</name>
      <anchorfile>OutersideFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OutersideFloatLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/outerside/</path>
    <filename>OutersideFloatLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideComplexLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/side/</path>
    <filename>SideComplexLinearTimeInterpolateOp_8C</filename>
    <includes id="SideComplexLinearTimeInterpolateOp_8h" name="SideComplexLinearTimeInterpolateOp.h" local="yes" imported="no">SideComplexLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SideVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintsidecmplx1d_</name>
      <anchorfile>SideComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintsidecmplx2d0_</name>
      <anchorfile>SideComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintsidecmplx2d1_</name>
      <anchorfile>SideComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintsidecmplx3d0_</name>
      <anchorfile>SideComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintsidecmplx3d1_</name>
      <anchorfile>SideComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintsidecmplx3d2_</name>
      <anchorfile>SideComplexLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const dcomplex *, const dcomplex *, dcomplex *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SideComplexLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/side/</path>
    <filename>SideComplexLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideDoubleLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/side/</path>
    <filename>SideDoubleLinearTimeInterpolateOp_8C</filename>
    <includes id="SideDoubleLinearTimeInterpolateOp_8h" name="SideDoubleLinearTimeInterpolateOp.h" local="yes" imported="no">SideDoubleLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SideVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintsidedoub1d_</name>
      <anchorfile>SideDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintsidedoub2d0_</name>
      <anchorfile>SideDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintsidedoub2d1_</name>
      <anchorfile>SideDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintsidedoub3d0_</name>
      <anchorfile>SideDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintsidedoub3d1_</name>
      <anchorfile>SideDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintsidedoub3d2_</name>
      <anchorfile>SideDoubleLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const double *, const double *, double *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SideDoubleLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/side/</path>
    <filename>SideDoubleLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideFloatLinearTimeInterpolateOp.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/side/</path>
    <filename>SideFloatLinearTimeInterpolateOp_8C</filename>
    <includes id="SideFloatLinearTimeInterpolateOp_8h" name="SideFloatLinearTimeInterpolateOp.h" local="yes" imported="no">SideFloatLinearTimeInterpolateOp.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SideVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="function">
      <type>void</type>
      <name>lintimeintsidefloat1d_</name>
      <anchorfile>SideFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintsidefloat2d0_</name>
      <anchorfile>SideFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintsidefloat2d1_</name>
      <anchorfile>SideFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintsidefloat3d0_</name>
      <anchorfile>SideFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintsidefloat3d1_</name>
      <anchorfile>SideFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lintimeintsidefloat3d2_</name>
      <anchorfile>SideFloatLinearTimeInterpolateOp_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const int &amp;, const double &amp;, const float *, const float *, float *)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SideFloatLinearTimeInterpolateOp.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/side/</path>
    <filename>SideFloatLinearTimeInterpolateOp_8h</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeData.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outeredge/</path>
    <filename>OuteredgeData_8C</filename>
    <includes id="OuteredgeData_8h" name="OuteredgeData.h" local="yes" imported="no">OuteredgeData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <includes id="EdgeGeometry_8h" name="EdgeGeometry.h" local="yes" imported="no">EdgeGeometry.h</includes>
    <includes id="EdgeOverlap_8h" name="EdgeOverlap.h" local="yes" imported="no">EdgeOverlap.h</includes>
    <includes id="OuteredgeGeometry_8h" name="OuteredgeGeometry.h" local="yes" imported="no">OuteredgeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PDAT_OUTEREDGEDATA_VERSION</name>
      <anchorfile>OuteredgeData_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuteredgeData.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outeredge/</path>
    <filename>OuteredgeData_8h</filename>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <includes id="EdgeData_8h" name="EdgeData.h" local="yes" imported="no">EdgeData.h</includes>
    <includes id="EdgeIndex_8h" name="EdgeIndex.h" local="yes" imported="no">EdgeIndex.h</includes>
    <includes id="EdgeOverlap_8h" name="EdgeOverlap.h" local="yes" imported="no">EdgeOverlap.h</includes>
    <includes id="SideIterator_8h" name="SideIterator.h" local="yes" imported="no">SideIterator.h</includes>
    <includes id="OuteredgeData_8I" name="OuteredgeData.I" local="yes" imported="no">OuteredgeData.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeData.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outeredge/</path>
    <filename>OuteredgeData_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeDataFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outeredge/</path>
    <filename>OuteredgeDataFactory_8C</filename>
    <includes id="EdgeDataFactory_8h" name="EdgeDataFactory.h" local="yes" imported="no">EdgeDataFactory.h</includes>
    <includes id="OuteredgeDataFactory_8h" name="OuteredgeDataFactory.h" local="yes" imported="no">OuteredgeDataFactory.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="OuteredgeData_8h" name="OuteredgeData.h" local="yes" imported="no">OuteredgeData.h</includes>
    <includes id="OuteredgeGeometry_8h" name="OuteredgeGeometry.h" local="yes" imported="no">OuteredgeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeDataFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outeredge/</path>
    <filename>OuteredgeDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="OuteredgeDataFactory_8I" name="OuteredgeDataFactory.I" local="yes" imported="no">OuteredgeDataFactory.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>OuteredgeDataFactory_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuteredgeDataFactory.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outeredge/</path>
    <filename>OuteredgeDataFactory_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeVariable.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outeredge/</path>
    <filename>OuteredgeVariable_8C</filename>
    <includes id="OuteredgeVariable_8h" name="OuteredgeVariable.h" local="yes" imported="no">OuteredgeVariable.h</includes>
    <includes id="OuteredgeDataFactory_8h" name="OuteredgeDataFactory.h" local="yes" imported="no">OuteredgeDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuteredgeVariable.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outeredge/</path>
    <filename>OuteredgeVariable_8h</filename>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceData.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outerface/</path>
    <filename>OuterfaceData_8C</filename>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">OuterfaceData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <includes id="FaceGeometry_8h" name="FaceGeometry.h" local="yes" imported="no">FaceGeometry.h</includes>
    <includes id="FaceOverlap_8h" name="FaceOverlap.h" local="yes" imported="no">FaceOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PDAT_OUTERFACEDATA_VERSION</name>
      <anchorfile>OuterfaceData_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuterfaceData.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outerface/</path>
    <filename>OuterfaceData_8h</filename>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <includes id="FaceIndex_8h" name="FaceIndex.h" local="yes" imported="no">FaceIndex.h</includes>
    <includes id="FaceData_8h" name="FaceData.h" local="yes" imported="no">FaceData.h</includes>
    <includes id="OuterfaceData_8I" name="OuterfaceData.I" local="yes" imported="no">OuterfaceData.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceData.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outerface/</path>
    <filename>OuterfaceData_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceDataFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outerface/</path>
    <filename>OuterfaceDataFactory_8C</filename>
    <includes id="OuterfaceDataFactory_8h" name="OuterfaceDataFactory.h" local="yes" imported="no">OuterfaceDataFactory.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">OuterfaceData.h</includes>
    <includes id="OuterfaceGeometry_8h" name="OuterfaceGeometry.h" local="yes" imported="no">OuterfaceGeometry.h</includes>
    <includes id="FaceDataFactory_8h" name="FaceDataFactory.h" local="yes" imported="no">FaceDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceDataFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outerface/</path>
    <filename>OuterfaceDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="OuterfaceDataFactory_8I" name="OuterfaceDataFactory.I" local="yes" imported="no">OuterfaceDataFactory.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>OuterfaceDataFactory_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuterfaceDataFactory.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outerface/</path>
    <filename>OuterfaceDataFactory_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceVariable.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outerface/</path>
    <filename>OuterfaceVariable_8C</filename>
    <includes id="OuterfaceVariable_8h" name="OuterfaceVariable.h" local="yes" imported="no">OuterfaceVariable.h</includes>
    <includes id="OuterfaceDataFactory_8h" name="OuterfaceDataFactory.h" local="yes" imported="no">OuterfaceDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuterfaceVariable.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outerface/</path>
    <filename>OuterfaceVariable_8h</filename>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeData.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outernode/</path>
    <filename>OuternodeData_8C</filename>
    <includes id="OuternodeData_8h" name="OuternodeData.h" local="yes" imported="no">OuternodeData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="NodeGeometry_8h" name="NodeGeometry.h" local="yes" imported="no">NodeGeometry.h</includes>
    <includes id="NodeOverlap_8h" name="NodeOverlap.h" local="yes" imported="no">NodeOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PDAT_OUTERNODEDATA_VERSION</name>
      <anchorfile>OuternodeData_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuternodeData.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outernode/</path>
    <filename>OuternodeData_8h</filename>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="NodeIndex_8h" name="NodeIndex.h" local="yes" imported="no">NodeIndex.h</includes>
    <includes id="NodeOverlap_8h" name="NodeOverlap.h" local="yes" imported="no">NodeOverlap.h</includes>
    <includes id="SideIterator_8h" name="SideIterator.h" local="yes" imported="no">SideIterator.h</includes>
    <includes id="OuternodeData_8I" name="OuternodeData.I" local="yes" imported="no">OuternodeData.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeData.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outernode/</path>
    <filename>OuternodeData_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeDataFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outernode/</path>
    <filename>OuternodeDataFactory_8C</filename>
    <includes id="OuternodeDataFactory_8h" name="OuternodeDataFactory.h" local="yes" imported="no">OuternodeDataFactory.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="NodeDataFactory_8h" name="NodeDataFactory.h" local="yes" imported="no">NodeDataFactory.h</includes>
    <includes id="OuternodeData_8h" name="OuternodeData.h" local="yes" imported="no">OuternodeData.h</includes>
    <includes id="OuternodeGeometry_8h" name="OuternodeGeometry.h" local="yes" imported="no">OuternodeGeometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeDataFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outernode/</path>
    <filename>OuternodeDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="OuternodeDataFactory_8I" name="OuternodeDataFactory.I" local="yes" imported="no">OuternodeDataFactory.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>OuternodeDataFactory_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OuternodeDataFactory.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outernode/</path>
    <filename>OuternodeDataFactory_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeVariable.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outernode/</path>
    <filename>OuternodeVariable_8C</filename>
    <includes id="OuternodeVariable_8h" name="OuternodeVariable.h" local="yes" imported="no">OuternodeVariable.h</includes>
    <includes id="OuternodeDataFactory_8h" name="OuternodeDataFactory.h" local="yes" imported="no">OuternodeDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OuternodeVariable.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outernode/</path>
    <filename>OuternodeVariable_8h</filename>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideData.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outerside/</path>
    <filename>OutersideData_8C</filename>
    <includes id="OutersideData_8h" name="OutersideData.h" local="yes" imported="no">OutersideData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SideGeometry.h</includes>
    <includes id="SideOverlap_8h" name="SideOverlap.h" local="yes" imported="no">SideOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PDAT_OUTERSIDEDATA_VERSION</name>
      <anchorfile>OutersideData_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OutersideData.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outerside/</path>
    <filename>OutersideData_8h</filename>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="SideIndex_8h" name="SideIndex.h" local="yes" imported="no">SideIndex.h</includes>
    <includes id="SideIterator_8h" name="SideIterator.h" local="yes" imported="no">SideIterator.h</includes>
    <includes id="OutersideData_8I" name="OutersideData.I" local="yes" imported="no">OutersideData.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideData.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outerside/</path>
    <filename>OutersideData_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideDataFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outerside/</path>
    <filename>OutersideDataFactory_8C</filename>
    <includes id="OutersideDataFactory_8h" name="OutersideDataFactory.h" local="yes" imported="no">OutersideDataFactory.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="OutersideData_8h" name="OutersideData.h" local="yes" imported="no">OutersideData.h</includes>
    <includes id="OutersideGeometry_8h" name="OutersideGeometry.h" local="yes" imported="no">OutersideGeometry.h</includes>
    <includes id="SideDataFactory_8h" name="SideDataFactory.h" local="yes" imported="no">SideDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideDataFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outerside/</path>
    <filename>OutersideDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="OutersideDataFactory_8I" name="OutersideDataFactory.I" local="yes" imported="no">OutersideDataFactory.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>OutersideDataFactory_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OutersideDataFactory.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outerside/</path>
    <filename>OutersideDataFactory_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideVariable.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outerside/</path>
    <filename>OutersideVariable_8C</filename>
    <includes id="OutersideVariable_8h" name="OutersideVariable.h" local="yes" imported="no">OutersideVariable.h</includes>
    <includes id="OutersideDataFactory_8h" name="OutersideDataFactory.h" local="yes" imported="no">OutersideDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>OutersideVariable.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outerside/</path>
    <filename>OutersideVariable_8h</filename>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideData.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/side/</path>
    <filename>SideData_8C</filename>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SideGeometry.h</includes>
    <includes id="SideOverlap_8h" name="SideOverlap.h" local="yes" imported="no">SideOverlap.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PDAT_SIDEDATA_VERSION</name>
      <anchorfile>SideData_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SideData.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/side/</path>
    <filename>SideData_8h</filename>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <includes id="SideIndex_8h" name="SideIndex.h" local="yes" imported="no">SideIndex.h</includes>
    <includes id="SideIterator_8h" name="SideIterator.h" local="yes" imported="no">SideIterator.h</includes>
    <includes id="SideData_8I" name="SideData.I" local="yes" imported="no">SideData.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideData.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/side/</path>
    <filename>SideData_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideDataFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/side/</path>
    <filename>SideDataFactory_8C</filename>
    <includes id="SideDataFactory_8h" name="SideDataFactory.h" local="yes" imported="no">SideDataFactory.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SideGeometry.h</includes>
    <includes id="OutersideDataFactory_8h" name="OutersideDataFactory.h" local="yes" imported="no">OutersideDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideDataFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/side/</path>
    <filename>SideDataFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="SideDataFactory_8I" name="SideDataFactory.I" local="yes" imported="no">SideDataFactory.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>SideDataFactory_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SideDataFactory.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/side/</path>
    <filename>SideDataFactory_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideIndex.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/side/</path>
    <filename>SideIndex_8C</filename>
    <includes id="SideIndex_8h" name="SideIndex.h" local="yes" imported="no">SideIndex.h</includes>
  </compound>
  <compound kind="file">
    <name>SideIndex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/side/</path>
    <filename>SideIndex_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="SideIndex_8I" name="SideIndex.I" local="yes" imported="no">SideIndex.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideIndex.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/side/</path>
    <filename>SideIndex_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideIterator.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/side/</path>
    <filename>SideIterator_8C</filename>
    <includes id="SideIterator_8h" name="SideIterator.h" local="yes" imported="no">SideIterator.h</includes>
  </compound>
  <compound kind="file">
    <name>SideIterator.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/side/</path>
    <filename>SideIterator_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="SideGeometry_8h" name="SideGeometry.h" local="yes" imported="no">SideGeometry.h</includes>
    <includes id="SideIterator_8I" name="SideIterator.I" local="yes" imported="no">SideIterator.I</includes>
    <includes id="SideIndex_8h" name="SideIndex.h" local="yes" imported="no">SideIndex.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>SideIterator.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/side/</path>
    <filename>SideIterator_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>SideIterator_8I.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SideVariable.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/side/</path>
    <filename>SideVariable_8C</filename>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SideVariable.h</includes>
    <includes id="SideDataFactory_8h" name="SideDataFactory.h" local="yes" imported="no">SideDataFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ALL_DIRECTIONS</name>
      <anchorfile>SideVariable_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SideVariable.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/side/</path>
    <filename>SideVariable_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>FACOperatorStrategy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/FAC/</path>
    <filename>FACOperatorStrategy_8C</filename>
    <includes id="FACOperatorStrategy_8h" name="FACOperatorStrategy.h" local="yes" imported="no">FACOperatorStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>FACOperatorStrategy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/FAC/</path>
    <filename>FACOperatorStrategy_8h</filename>
    <includes id="SAMRAIVectorReal_8h" name="SAMRAIVectorReal.h" local="yes" imported="no">SAMRAIVectorReal.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>FACPreconditioner.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/FAC/</path>
    <filename>FACPreconditioner_8C</filename>
    <includes id="HierarchyDataOpsManager_8h" name="HierarchyDataOpsManager.h" local="yes" imported="no">HierarchyDataOpsManager.h</includes>
    <includes id="FACPreconditioner_8h" name="FACPreconditioner.h" local="yes" imported="no">FACPreconditioner.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>FACPreconditioner.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/FAC/</path>
    <filename>FACPreconditioner_8h</filename>
    <includes id="HierarchyDataOpsReal_8h" name="HierarchyDataOpsReal.h" local="yes" imported="no">HierarchyDataOpsReal.h</includes>
    <includes id="FACOperatorStrategy_8h" name="FACOperatorStrategy.h" local="yes" imported="no">FACOperatorStrategy.h</includes>
    <includes id="SAMRAIVectorReal_8h" name="SAMRAIVectorReal.h" local="yes" imported="no">SAMRAIVectorReal.h</includes>
    <includes id="FACPreconditioner_8I" name="FACPreconditioner.I" local="yes" imported="no">FACPreconditioner.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>FACPreconditioner.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/FAC/</path>
    <filename>FACPreconditioner_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearSolverStrategy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/nonlinear/</path>
    <filename>NonlinearSolverStrategy_8C</filename>
    <includes id="NonlinearSolverStrategy_8h" name="NonlinearSolverStrategy.h" local="yes" imported="no">NonlinearSolverStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearSolverStrategy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/nonlinear/</path>
    <filename>NonlinearSolverStrategy_8h</filename>
    <includes id="SAMRAIVectorReal_8h" name="SAMRAIVectorReal.h" local="yes" imported="no">SAMRAIVectorReal.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>PETScAbstractVectorReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/petsc/</path>
    <filename>PETScAbstractVectorReal_8C</filename>
    <includes id="PETScAbstractVectorReal_8h" name="PETScAbstractVectorReal.h" local="yes" imported="no">PETScAbstractVectorReal.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>PETScAbstractVectorReal_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ABSPVEC_CAST</name>
      <anchorfile>PETScAbstractVectorReal_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PETScAbstractVectorReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/petsc/</path>
    <filename>PETScAbstractVectorReal_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>SNES_SAMRAIContext.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/petsc/</path>
    <filename>SNES__SAMRAIContext_8C</filename>
    <includes id="SNES__SAMRAIContext_8h" name="SNES_SAMRAIContext.h" local="yes" imported="no">SNES_SAMRAIContext.h</includes>
    <includes id="PETSc__SAMRAIVectorReal_8h" name="PETSc_SAMRAIVectorReal.h" local="yes" imported="no">PETSc_SAMRAIVectorReal.h</includes>
    <includes id="SAMRAIVectorReal_8h" name="SAMRAIVectorReal.h" local="yes" imported="no">SAMRAIVectorReal.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SOLV_SNES_SAMRAI_CONTEXT_VERSION</name>
      <anchorfile>SNES__SAMRAIContext_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SNES_SAMRAIContext.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/petsc/</path>
    <filename>SNES__SAMRAIContext_8h</filename>
    <includes id="NonlinearSolverStrategy_8h" name="NonlinearSolverStrategy.h" local="yes" imported="no">NonlinearSolverStrategy.h</includes>
    <includes id="SNESAbstractFunctions_8h" name="SNESAbstractFunctions.h" local="yes" imported="no">SNESAbstractFunctions.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>SNESAbstractFunctions.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/petsc/</path>
    <filename>SNESAbstractFunctions_8C</filename>
    <includes id="SNESAbstractFunctions_8h" name="SNESAbstractFunctions.h" local="yes" imported="no">SNESAbstractFunctions.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>SNESAbstractFunctions.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/petsc/</path>
    <filename>SNESAbstractFunctions_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>KINSOL_SAMRAIContext.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/kinsol/wrapper/</path>
    <filename>KINSOL__SAMRAIContext_8C</filename>
    <includes id="KINSOL__SAMRAIContext_8h" name="KINSOL_SAMRAIContext.h" local="yes" imported="no">KINSOL_SAMRAIContext.h</includes>
    <includes id="PVodeTrio__SAMRAIVector_8h" name="PVodeTrio_SAMRAIVector.h" local="yes" imported="no">PVodeTrio_SAMRAIVector.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SOLV_KINSOL_SAMRAI_CONTEXT_VERSION</name>
      <anchorfile>KINSOL__SAMRAIContext_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KINSOL_SAMRAIContext.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/kinsol/wrapper/</path>
    <filename>KINSOL__SAMRAIContext_8h</filename>
    <includes id="NonlinearSolverStrategy_8h" name="NonlinearSolverStrategy.h" local="yes" imported="no">NonlinearSolverStrategy.h</includes>
    <includes id="KINSOLSolver_8h" name="KINSOLSolver.h" local="yes" imported="no">KINSOLSolver.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>KINSOLAbstractFunctions.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/kinsol/wrapper/</path>
    <filename>KINSOLAbstractFunctions_8C</filename>
    <includes id="KINSOLAbstractFunctions_8h" name="KINSOLAbstractFunctions.h" local="yes" imported="no">KINSOLAbstractFunctions.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>KINSOLAbstractFunctions.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/kinsol/wrapper/</path>
    <filename>KINSOLAbstractFunctions_8h</filename>
    <includes id="PVodeTrioAbstractVector_8h" name="PVodeTrioAbstractVector.h" local="yes" imported="no">PVodeTrioAbstractVector.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>KINSOLSolver.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/kinsol/wrapper/</path>
    <filename>KINSOLSolver_8C</filename>
    <includes id="KINSOLSolver_8h" name="KINSOLSolver.h" local="yes" imported="no">KINSOLSolver.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>KINSOLSolver.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/kinsol/wrapper/</path>
    <filename>KINSOLSolver_8h</filename>
    <includes id="PVodeTrioAbstractVector_8h" name="PVodeTrioAbstractVector.h" local="yes" imported="no">PVodeTrioAbstractVector.h</includes>
    <includes id="KINSOLAbstractFunctions_8h" name="KINSOLAbstractFunctions.h" local="yes" imported="no">KINSOLAbstractFunctions.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>PVODEAbstractFunctions.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/pvode/wrapper/</path>
    <filename>PVODEAbstractFunctions_8C</filename>
    <includes id="PVODEAbstractFunctions_8h" name="PVODEAbstractFunctions.h" local="yes" imported="no">PVODEAbstractFunctions.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>PVODEAbstractFunctions.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/pvode/wrapper/</path>
    <filename>PVODEAbstractFunctions_8h</filename>
    <includes id="PVodeTrioAbstractVector_8h" name="PVodeTrioAbstractVector.h" local="yes" imported="no">PVodeTrioAbstractVector.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>PVODESolver.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/pvode/wrapper/</path>
    <filename>PVODESolver_8C</filename>
    <includes id="PVODESolver_8h" name="PVODESolver.h" local="yes" imported="no">PVODESolver.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="define">
      <type>#define</type>
      <name>STAT_OUTPUT_BUFFER_SIZE</name>
      <anchorfile>PVODESolver_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PVODESolver.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/pvode/wrapper/</path>
    <filename>PVODESolver_8h</filename>
    <includes id="PVODEAbstractFunctions_8h" name="PVODEAbstractFunctions.h" local="yes" imported="no">PVODEAbstractFunctions.h</includes>
    <includes id="PVodeTrioAbstractVector_8h" name="PVodeTrioAbstractVector.h" local="yes" imported="no">PVodeTrioAbstractVector.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>nvector.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/vector/</path>
    <filename>nvector_8h</filename>
    <includes id="solv__NVector_8h" name="solv_NVector.h" local="yes" imported="no">solv_NVector.h</includes>
  </compound>
  <compound kind="file">
    <name>PVodeTrioAbstractVector.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/vector/</path>
    <filename>PVodeTrioAbstractVector_8C</filename>
    <includes id="PVodeTrioAbstractVector_8h" name="PVodeTrioAbstractVector.h" local="yes" imported="no">PVodeTrioAbstractVector.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>PVodeTrioAbstractVector.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/vector/</path>
    <filename>PVodeTrioAbstractVector_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>solv_NVector.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/vector/</path>
    <filename>solv__NVector_8C</filename>
    <includes id="PVodeTrioAbstractVector_8h" name="PVodeTrioAbstractVector.h" local="yes" imported="no">PVodeTrioAbstractVector.h</includes>
    <member kind="typedef">
      <type>SAMRAI::solv::PVodeTrioAbstractVector *</type>
      <name>N_Vector</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>N_Vector</type>
      <name>N_VNew</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int N, void *vec_in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VFree</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(N_Vector v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VPrint</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const N_Vector v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VConst</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const double c, N_Vector v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VScale</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const double c, const N_Vector x, N_Vector z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VLinearSum</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const double a, const N_Vector x, const double b, const N_Vector y, N_Vector z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VProd</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const N_Vector x, const N_Vector y, N_Vector z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VDiv</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const N_Vector x, const N_Vector y, N_Vector z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VAbs</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const N_Vector x, N_Vector z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VInv</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const N_Vector x, N_Vector z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VAddConst</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const N_Vector x, const double b, N_Vector z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>N_VDotProd</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const N_Vector x, const N_Vector y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>N_VMaxNorm</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const N_Vector x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>N_VL1Norm</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const N_Vector x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>N_VWL2Norm</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const N_Vector x, const N_Vector w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>N_VWrmsNorm</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const N_Vector x, const N_Vector w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>N_VMin</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const N_Vector x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N_VConstrProdPos</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const N_Vector c, const N_Vector x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VCompare</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const double c, const N_Vector x, N_Vector z)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N_VInvTest</name>
      <anchorfile>solv__NVector_8C.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const N_Vector x, N_Vector z)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>solv_NVector.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/vector/</path>
    <filename>solv__NVector_8h</filename>
    <member kind="typedef">
      <type>PVodeTrioAbstractVector *</type>
      <name>N_Vector</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>N_Vector</type>
      <name>N_VNew</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(int N, void *machEnv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VFree</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(N_Vector v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VPrint</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const N_Vector v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VConst</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(double c, N_Vector v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VScale</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const double c, const N_Vector x, N_Vector z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VLinearSum</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const double a, const N_Vector x, const double b, const N_Vector y, N_Vector z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VProd</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const N_Vector x, const N_Vector y, N_Vector z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VDiv</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const N_Vector x, const N_Vector y, N_Vector z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VAbs</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const N_Vector x, N_Vector z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VInv</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const N_Vector x, N_Vector z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VAddConst</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const N_Vector x, const double b, N_Vector z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>N_VDotProd</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const N_Vector x, const N_Vector y)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>N_VMaxNorm</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const N_Vector x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>N_VL1Norm</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const N_Vector x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>N_VWL2Norm</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const N_Vector x, const N_Vector w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>N_VWrmsNorm</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const N_Vector x, const N_Vector w)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>N_VMin</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const N_Vector x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N_VConstrProdPos</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const N_Vector c, const N_Vector x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>N_VCompare</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const double c, const N_Vector x, N_Vector z)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>N_VInvTest</name>
      <anchorfile>solv__NVector_8h.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const N_Vector x, N_Vector z)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianRobinBcHelper.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>CartesianRobinBcHelper_8C</filename>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <includes id="PatchCellDataOpsReal_8h" name="PatchCellDataOpsReal.h" local="yes" imported="no">PatchCellDataOpsReal.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <includes id="CartesianRobinBcHelper_8h" name="CartesianRobinBcHelper.h" local="yes" imported="no">CartesianRobinBcHelper.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="function">
      <type>void</type>
      <name>settype1cells2d_</name>
      <anchorfile>CartesianRobinBcHelper_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(double *data, const int &amp;difirst, const int &amp;dilast, const int &amp;djfirst, const int &amp;djlast, const double *a, const double *g, const int &amp;ifirst, const int &amp;ilast, const int &amp;jfirst, const int &amp;jlast, const int &amp;ibeg, const int &amp;iend, const int &amp;jbeg, const int &amp;jend, const int &amp;face, const int &amp;ghos, const int &amp;inte, const int &amp;location, const double &amp;h, const int &amp;zerog)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>settype2cells2d_</name>
      <anchorfile>CartesianRobinBcHelper_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(double *data, const int &amp;difirst, const int &amp;dilast, const int &amp;djfirst, const int &amp;djlast, const int *lower, const int *upper, const int &amp;location)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>settype1cells3d_</name>
      <anchorfile>CartesianRobinBcHelper_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(double *data, const int &amp;difirst, const int &amp;dilast, const int &amp;djfirst, const int &amp;djlast, const int &amp;dkfirst, const int &amp;dklast, const double *a, const double *g, const int &amp;ifirst, const int &amp;ilast, const int &amp;jfirst, const int &amp;jlast, const int &amp;kfirst, const int &amp;klast, const int &amp;ibeg, const int &amp;iend, const int &amp;jbeg, const int &amp;jend, const int &amp;kbeg, const int &amp;kend, const int &amp;face, const int &amp;ghos, const int &amp;inte, const int &amp;location, const double &amp;h, const int &amp;zerog)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>settype2cells3d_</name>
      <anchorfile>CartesianRobinBcHelper_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(double *data, const int &amp;difirst, const int &amp;dilast, const int &amp;djfirst, const int &amp;djlast, const int &amp;dkfirst, const int &amp;dklast, const int *lower, const int *upper, const int &amp;location)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>settype3cells3d_</name>
      <anchorfile>CartesianRobinBcHelper_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(double *data, const int &amp;difirst, const int &amp;dilast, const int &amp;djfirst, const int &amp;djlast, const int &amp;dkfirst, const int &amp;dklast, const int *lower, const int *upper, const int &amp;location)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CartesianRobinBcHelper.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>CartesianRobinBcHelper_8h</filename>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">BoundaryBox.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="NodeData_8h" name="NodeData.h" local="yes" imported="no">NodeData.h</includes>
    <includes id="RobinBcCoefStrategy_8h" name="RobinBcCoefStrategy.h" local="yes" imported="no">RobinBcCoefStrategy.h</includes>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">RefinePatchStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>CellPoissonFACOps.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>CellPoissonFACOps_8C</filename>
    <includes id="CellPoissonFACOps_8h" name="CellPoissonFACOps.h" local="yes" imported="no">CellPoissonFACOps.h</includes>
    <includes id="CartesianGridGeometry_8h" name="CartesianGridGeometry.h" local="yes" imported="no">CartesianGridGeometry.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <includes id="CellDoubleConstantRefine_8h" name="CellDoubleConstantRefine.h" local="yes" imported="no">CellDoubleConstantRefine.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <includes id="OutersideData_8h" name="OutersideData.h" local="yes" imported="no">OutersideData.h</includes>
    <includes id="OutersideVariable_8h" name="OutersideVariable.h" local="yes" imported="no">OutersideVariable.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SideVariable.h</includes>
    <includes id="FACPreconditioner_8h" name="FACPreconditioner.h" local="yes" imported="no">FACPreconditioner.h</includes>
    <includes id="CellPoissonHypreSolver_8h" name="CellPoissonHypreSolver.h" local="yes" imported="no">CellPoissonHypreSolver.h</includes>
    <includes id="CoarsenAlgorithm_8h" name="CoarsenAlgorithm.h" local="yes" imported="no">CoarsenAlgorithm.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <includes id="CoarsenSchedule_8h" name="CoarsenSchedule.h" local="yes" imported="no">CoarsenSchedule.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">RefineAlgorithm.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">RefineSchedule.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="function">
      <type>void</type>
      <name>compfluxvardc2d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(double *xflux, double *yflux, const int *fluxgi, const int *fluxgj, const double *xdiff_coef, const double *ydiff_coef, const int *dcgi, const int *dcgj, const double *soln, const int *solngi, const int *solngj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compfluxcondc2d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(double *xflux, double *yflux, const int *fluxgi, const int *fluxgj, const double &amp;diff_coef, const double *soln, const int *solngi, const int *solngj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rbgswithfluxmaxvardcvarsf2d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const double *xflux, const double *yflux, const int *fluxgi, const int *fluxgj, const double *xdiff_coef, const double *ydiff_coef, const int *dcgi, const int *dcgj, const double *rhs, const int *rhsgi, const int *rhsgj, const double *scalar_field, const int *scalar_field_gi, const int *scalar_field_gj, double *soln, const int *solngi, const int *solngj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const double *dx, const int *offset, const double *maxres)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rbgswithfluxmaxcondcvarsf2d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const double *xflux, const double *yflux, const int *fluxgi, const int *fluxgj, const double &amp;dc, const double *rhs, const int *rhsgi, const int *rhsgj, const double *scalar_field, const int *scalar_field_gi, const int *scalar_field_gj, double *soln, const int *solngi, const int *solngj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const double *dx, const int *offset, const double *maxres)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rbgswithfluxmaxvardcconsf2d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const double *xflux, const double *yflux, const int *fluxgi, const int *fluxgj, const double *xdiff_coef, const double *ydiff_coef, const int *dcgi, const int *dcgj, const double *rhs, const int *rhsgi, const int *rhsgj, const double &amp;scalar_field, double *soln, const int *solngi, const int *solngj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const double *dx, const int *offset, const double *maxres)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rbgswithfluxmaxcondcconsf2d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const double *xflux, const double *yflux, const int *fluxgi, const int *fluxgj, const double &amp;dc, const double *rhs, const int *rhsgi, const int *rhsgj, const double &amp;scalar_field, double *soln, const int *solngi, const int *solngj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const double *dx, const int *offset, const double *maxres)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compresvarsca2d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const double *xflux, const double *yflux, const int *fluxgi, const int *fluxgj, const double *rhs, const int *rhsgi, const int *rhsgj, double *residual, const int *residualgi, const int *residualgj, const double *scalar_field, const int *scalar_field_gi, const int *scalar_field_gj, const double *soln, const int *solngi, const int *solngj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compresconsca2d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const double *xflux, const double *yflux, const int *fluxgi, const int *fluxgj, const double *rhs, const int *rhsgi, const int *rhsgj, double *residual, const int *residualgi, const int *residualgj, const double &amp;scalar_field, const double *soln, const int *solngi, const int *solngj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ewingfixfluxvardc2d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const double *xflux, const double *yflux, const int *fluxgi, const int *fluxgj, const double *xdiff_coef, const double *ydiff_coef, const int *dcgi, const int *dcgj, const double *soln, const int *solngi, const int *solngj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *location_index, const int *ratio_to_coarser, const int *blower, const int *bupper, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ewingfixfluxcondc2d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const double *xflux, const double *yflux, const int *fluxgi, const int *fluxgj, const double &amp;diff_coef, const double *soln, const int *solngi, const int *solngj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *location_index, const int *ratio_to_coarser, const int *blower, const int *bupper, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compfluxvardc3d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(double *xflux, double *yflux, double *zflux, const int *fluxgi, const int *fluxgj, const int *fluxgk, const double *xdiff_coef, const double *ydiff_coef, const double *zdiff_coef, const int *dcgi, const int *dcgj, const int *dcgk, const double *soln, const int *solngi, const int *solngj, const int *solngk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compfluxcondc3d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(double *xflux, double *yflux, double *zflux, const int *fluxgi, const int *fluxgj, const int *fluxgk, const double &amp;diff_coef, const double *soln, const int *solngi, const int *solngj, const int *solngk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rbgswithfluxmaxvardcvarsf3d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const double *xflux, const double *yflux, const double *zflux, const int *fluxgi, const int *fluxgj, const int *fluxgk, const double *xdiff_coef, const double *ydiff_coef, const double *zdiff_coef, const int *dcgi, const int *dcgj, const int *dcgk, const double *rhs, const int *rhsgi, const int *rhsgj, const int *rhsgk, const double *scalar_field, const int *scalar_field_gi, const int *scalar_field_gj, const int *scalar_field_gk, double *soln, const int *solngi, const int *solngj, const int *solngk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const double *dx, const int *offset, const double *maxres)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rbgswithfluxmaxcondcvarsf3d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const double *xflux, const double *yflux, const double *zflux, const int *fluxgi, const int *fluxgj, const int *fluxgk, const double &amp;dc, const double *rhs, const int *rhsgi, const int *rhsgj, const int *rhsgk, const double *scalar_field, const int *scalar_field_gi, const int *scalar_field_gj, const int *scalar_field_gk, double *soln, const int *solngi, const int *solngj, const int *solngk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const double *dx, const int *offset, const double *maxres)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rbgswithfluxmaxvardcconsf3d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const double *xflux, const double *yflux, const double *zflux, const int *fluxgi, const int *fluxgj, const int *fluxgk, const double *xdiff_coef, const double *ydiff_coef, const double *zdiff_coef, const int *dcgi, const int *dcgj, const int *dcgk, const double *rhs, const int *rhsgi, const int *rhsgj, const int *rhsgk, const double &amp;scalar_field, double *soln, const int *solngi, const int *solngj, const int *solngk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const double *dx, const int *offset, const double *maxres)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rbgswithfluxmaxcondcconsf3d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const double *xflux, const double *yflux, const double *zflux, const int *fluxgi, const int *fluxgj, const int *fluxgk, const double &amp;dc, const double *rhs, const int *rhsgi, const int *rhsgj, const int *rhsgk, const double &amp;scalar_field, double *soln, const int *solngi, const int *solngj, const int *solngk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const double *dx, const int *offset, const double *maxres)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compresvarsca3d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const double *xflux, const double *yflux, const double *zflux, const int *fluxgi, const int *fluxgj, const int *fluxgk, const double *rhs, const int *rhsgi, const int *rhsgj, const int *rhsgk, double *residual, const int *residualgi, const int *residualgj, const int *residualgk, const double *scalar_field, const int *scalar_field_gi, const int *scalar_field_gj, const int *scalar_field_gk, const double *soln, const int *solngi, const int *solngj, const int *solngk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compresconsca3d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const double *xflux, const double *yflux, const double *zflux, const int *fluxgi, const int *fluxgj, const int *fluxgk, const double *rhs, const int *rhsgi, const int *rhsgj, const int *rhsgk, double *residual, const int *residualgi, const int *residualgj, const int *residualgk, const double &amp;scalar_field, const double *soln, const int *solngi, const int *solngj, const int *solngk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ewingfixfluxvardc3d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const double *xflux, const double *yflux, const double *zflux, const int *fluxgi, const int *fluxgj, const int *fluxgk, const double *xdiff_coef, const double *ydiff_coef, const double *zdiff_coef, const int *dcgi, const int *dcgj, const int *dcgk, const double *soln, const int *solngi, const int *solngj, const int *solngk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const int *location_index, const int *ratio_to_coarser, const int *blower, const int *bupper, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ewingfixfluxcondc3d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const double *xflux, const double *yflux, const double *zflux, const int *fluxgi, const int *fluxgj, const int *fluxgk, const double &amp;diff_coef, const double *soln, const int *solngi, const int *solngj, const int *solngk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const int *location_index, const int *ratio_to_coarser, const int *blower, const int *bupper, const double *dx)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellPoissonFACOps.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>CellPoissonFACOps_8h</filename>
    <includes id="CoarseFineBoundary_8h" name="CoarseFineBoundary.h" local="yes" imported="no">CoarseFineBoundary.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="HierarchyCellDataOpsReal_8h" name="HierarchyCellDataOpsReal.h" local="yes" imported="no">HierarchyCellDataOpsReal.h</includes>
    <includes id="HierarchySideDataOpsReal_8h" name="HierarchySideDataOpsReal.h" local="yes" imported="no">HierarchySideDataOpsReal.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <includes id="CellDoubleConstantRefine_8h" name="CellDoubleConstantRefine.h" local="yes" imported="no">CellDoubleConstantRefine.h</includes>
    <includes id="OutersideData_8h" name="OutersideData.h" local="yes" imported="no">OutersideData.h</includes>
    <includes id="OutersideVariable_8h" name="OutersideVariable.h" local="yes" imported="no">OutersideVariable.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SideVariable.h</includes>
    <includes id="CartesianRobinBcHelper_8h" name="CartesianRobinBcHelper.h" local="yes" imported="no">CartesianRobinBcHelper.h</includes>
    <includes id="FACPreconditioner_8h" name="FACPreconditioner.h" local="yes" imported="no">FACPreconditioner.h</includes>
    <includes id="FACOperatorStrategy_8h" name="FACOperatorStrategy.h" local="yes" imported="no">FACOperatorStrategy.h</includes>
    <includes id="CellPoissonHypreSolver_8h" name="CellPoissonHypreSolver.h" local="yes" imported="no">CellPoissonHypreSolver.h</includes>
    <includes id="CoarsenAlgorithm_8h" name="CoarsenAlgorithm.h" local="yes" imported="no">CoarsenAlgorithm.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">RefineAlgorithm.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <includes id="SAMRAIVectorReal_8h" name="SAMRAIVectorReal.h" local="yes" imported="no">SAMRAIVectorReal.h</includes>
    <includes id="VariableContext_8h" name="VariableContext.h" local="yes" imported="no">VariableContext.h</includes>
    <includes id="CoarsenSchedule_8h" name="CoarsenSchedule.h" local="yes" imported="no">CoarsenSchedule.h</includes>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">RefineSchedule.h</includes>
    <includes id="CellPoissonFACOps_8I" name="CellPoissonFACOps.I" local="yes" imported="no">CellPoissonFACOps.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>CellPoissonFACOps.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>CellPoissonFACOps_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>CellPoissonFACSolver.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>CellPoissonFACSolver_8C</filename>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <includes id="CellPoissonFACSolver_8h" name="CellPoissonFACSolver.h" local="yes" imported="no">CellPoissonFACSolver.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>CellPoissonFACSolver.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>CellPoissonFACSolver_8h</filename>
    <includes id="FACPreconditioner_8h" name="FACPreconditioner.h" local="yes" imported="no">FACPreconditioner.h</includes>
    <includes id="CellPoissonFACOps_8h" name="CellPoissonFACOps.h" local="yes" imported="no">CellPoissonFACOps.h</includes>
    <includes id="CellPoissonFACSolver_8I" name="CellPoissonFACSolver.I" local="yes" imported="no">CellPoissonFACSolver.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>CellPoissonFACSolver.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>CellPoissonFACSolver_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>CellPoissonHypreSolver.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>CellPoissonHypreSolver_8C</filename>
    <includes id="CellPoissonHypreSolver_8h" name="CellPoissonHypreSolver.h" local="yes" imported="no">CellPoissonHypreSolver.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="CartesianGridGeometry_8h" name="CartesianGridGeometry.h" local="yes" imported="no">CartesianGridGeometry.h</includes>
    <includes id="PatchGeometry_8h" name="PatchGeometry.h" local="yes" imported="no">PatchGeometry.h</includes>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">ArrayDataBasicOps.h</includes>
    <includes id="PatchSideDataBasicOps_8h" name="PatchSideDataBasicOps.h" local="yes" imported="no">PatchSideDataBasicOps.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <includes id="CellIndex_8h" name="CellIndex.h" local="yes" imported="no">CellIndex.h</includes>
    <includes id="CellIterator_8h" name="CellIterator.h" local="yes" imported="no">CellIterator.h</includes>
    <includes id="FaceIndex_8h" name="FaceIndex.h" local="yes" imported="no">FaceIndex.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="SideIndex_8h" name="SideIndex.h" local="yes" imported="no">SideIndex.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SideVariable.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">OuterfaceData.h</includes>
    <includes id="OutersideData_8h" name="OutersideData.h" local="yes" imported="no">OutersideData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>CellPoissonHypreSolver_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compdiagvariablec2d_</name>
      <anchorfile>CellPoissonHypreSolver_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(double *diag, const double *c, const double *offdiagi, const double *offdiagj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const double *cscale, const double *dscale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compdiagscalarc2d_</name>
      <anchorfile>CellPoissonHypreSolver_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(double *diag, const double *c, const double *offdiagi, const double *offdiagj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const double *cscale, const double *dscale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compdiagzeroc2d_</name>
      <anchorfile>CellPoissonHypreSolver_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(double *diag, const double *offdiagi, const double *offdiagj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const double *cscale, const double *dscale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjbdry2d_</name>
      <anchorfile>CellPoissonHypreSolver_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(double *diag, const double *offdiagi, const double *offdiagj, const int *pifirst, const int *pilast, const int *pjfirst, const int *pjlast, const double *acoef, const int *aifirst, const int *ailast, const int *ajfirst, const int *ajlast, const double *Ak0, const int *kifirst, const int *kilast, const int *kjfirst, const int *kjlast, const int *lower, const int *upper, const int *location, const double *h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjbdryconstoffdiags2d_</name>
      <anchorfile>CellPoissonHypreSolver_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(double *diag, const double *offdiag, const int *pifirst, const int *pilast, const int *pjfirst, const int *pjlast, const double *acoef, const int *aifirst, const int *ailast, const int *ajfirst, const int *ajlast, const double *Ak0, const int *kifirst, const int *kilast, const int *kjfirst, const int *kjlast, const int *lower, const int *upper, const int *location, const double *h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjustrhs2d_</name>
      <anchorfile>CellPoissonHypreSolver_8C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(double *rhs, const int *rifirst, const int *rilast, const int *rjfirst, const int *rjlast, const double *Ak0, const int *kifirst, const int *kilast, const int *kjfirst, const int *kjlast, const double *gcoef, const int *aifirst, const int *ailast, const int *ajfirst, const int *ajlast, const int *lower, const int *upper, const int *location)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compdiagvariablec3d_</name>
      <anchorfile>CellPoissonHypreSolver_8C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(double *diag, const double *c, const double *offdiagi, const double *offdiagj, const double *offdiagk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const double *cscale, const double *dscale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compdiagscalarc3d_</name>
      <anchorfile>CellPoissonHypreSolver_8C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(double *diag, const double *c, const double *offdiagi, const double *offdiagj, const double *offdiagk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const double *cscale, const double *dscale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compdiagzeroc3d_</name>
      <anchorfile>CellPoissonHypreSolver_8C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(double *diag, const double *offdiagi, const double *offdiagj, const double *offdiagk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const double *cscale, const double *dscale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjbdry3d_</name>
      <anchorfile>CellPoissonHypreSolver_8C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(double *diag, const double *offdiagi, const double *offdiagj, const double *offdiagk, const int *pifirst, const int *pilast, const int *pjfirst, const int *pjlast, const int *pkfirst, const int *pklast, const double *acoef, const int *aifirst, const int *ailast, const int *ajfirst, const int *ajlast, const int *akfirst, const int *aklast, const double *Ak0, const int *kifirst, const int *kilast, const int *kjfirst, const int *kjlast, const int *kkfirst, const int *kklast, const int *lower, const int *upper, const int *location, const double *h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjbdryconstoffdiags3d_</name>
      <anchorfile>CellPoissonHypreSolver_8C.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(double *diag, const double *offdiag, const int *pifirst, const int *pilast, const int *pjfirst, const int *pjlast, const int *pkfirst, const int *pklast, const double *acoef, const int *aifirst, const int *ailast, const int *ajfirst, const int *ajlast, const int *akfirst, const int *aklast, const double *Ak0, const int *kifirst, const int *kilast, const int *kjfirst, const int *kjlast, const int *kkfirst, const int *kklast, const int *lower, const int *upper, const int *location, const double *h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjustrhs3d_</name>
      <anchorfile>CellPoissonHypreSolver_8C.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(double *rhs, const int *rifirst, const int *rilast, const int *rjfirst, const int *rjlast, const int *rkfirst, const int *rklast, const double *Ak0, const int *kifirst, const int *kilast, const int *kjfirst, const int *kjlast, const int *kkfirst, const int *kklast, const double *gcoef, const int *aifirst, const int *ailast, const int *ajfirst, const int *ajlast, const int *akfirst, const int *aklast, const int *lower, const int *upper, const int *location)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CellPoissonHypreSolver.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>CellPoissonHypreSolver_8h</filename>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="CoarseFineBoundary_8h" name="CoarseFineBoundary.h" local="yes" imported="no">CoarseFineBoundary.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="VariableContext_8h" name="VariableContext.h" local="yes" imported="no">VariableContext.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="OutersideVariable_8h" name="OutersideVariable.h" local="yes" imported="no">OutersideVariable.h</includes>
    <includes id="GhostCellRobinBcCoefs_8h" name="GhostCellRobinBcCoefs.h" local="yes" imported="no">GhostCellRobinBcCoefs.h</includes>
    <includes id="PoissonSpecifications_8h" name="PoissonSpecifications.h" local="yes" imported="no">PoissonSpecifications.h</includes>
    <includes id="SimpleCellRobinBcCoefs_8h" name="SimpleCellRobinBcCoefs.h" local="yes" imported="no">SimpleCellRobinBcCoefs.h</includes>
    <includes id="CellPoissonHypreSolver_8I" name="CellPoissonHypreSolver.I" local="yes" imported="no">CellPoissonHypreSolver.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>CellPoissonHypreSolver.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>CellPoissonHypreSolver_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>GhostCellRobinBcCoefs.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>GhostCellRobinBcCoefs_8C</filename>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">ArrayDataBasicOps.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <includes id="GhostCellRobinBcCoefs_8h" name="GhostCellRobinBcCoefs.h" local="yes" imported="no">GhostCellRobinBcCoefs.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>GhostCellRobinBcCoefs.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>GhostCellRobinBcCoefs_8h</filename>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">BoundaryBox.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <includes id="RobinBcCoefStrategy_8h" name="RobinBcCoefStrategy.h" local="yes" imported="no">RobinBcCoefStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>LocationIndexRobinBcCoefs.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>LocationIndexRobinBcCoefs_8C</filename>
    <includes id="LocationIndexRobinBcCoefs_8h" name="LocationIndexRobinBcCoefs.h" local="yes" imported="no">LocationIndexRobinBcCoefs.h</includes>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="Index_8h" name="Index.h" local="yes" imported="no">Index.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>LocationIndexRobinBcCoefs.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>LocationIndexRobinBcCoefs_8h</filename>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">BoundaryBox.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <includes id="RobinBcCoefStrategy_8h" name="RobinBcCoefStrategy.h" local="yes" imported="no">RobinBcCoefStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>PoissonSpecifications.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>PoissonSpecifications_8C</filename>
    <includes id="PoissonSpecifications_8h" name="PoissonSpecifications.h" local="yes" imported="no">PoissonSpecifications.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>PoissonSpecifications.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>PoissonSpecifications_8h</filename>
    <includes id="PoissonSpecifications_8I" name="PoissonSpecifications.I" local="yes" imported="no">PoissonSpecifications.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="define">
      <type>#define</type>
      <name>included_String</name>
      <anchorfile>PoissonSpecifications_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PoissonSpecifications.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>PoissonSpecifications_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>RobinBcCoefStrategy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>RobinBcCoefStrategy_8C</filename>
    <includes id="RobinBcCoefStrategy_8h" name="RobinBcCoefStrategy.h" local="yes" imported="no">RobinBcCoefStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>RobinBcCoefStrategy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>RobinBcCoefStrategy_8h</filename>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">BoundaryBox.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleCellRobinBcCoefs.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>SimpleCellRobinBcCoefs_8C</filename>
    <includes id="CartesianPatchGeometry_8h" name="CartesianPatchGeometry.h" local="yes" imported="no">CartesianPatchGeometry.h</includes>
    <includes id="ArrayDataBasicOps_8h" name="ArrayDataBasicOps.h" local="yes" imported="no">ArrayDataBasicOps.h</includes>
    <includes id="CellData_8h" name="CellData.h" local="yes" imported="no">CellData.h</includes>
    <includes id="OuterfaceData_8h" name="OuterfaceData.h" local="yes" imported="no">OuterfaceData.h</includes>
    <includes id="SideData_8h" name="SideData.h" local="yes" imported="no">SideData.h</includes>
    <includes id="SimpleCellRobinBcCoefs_8h" name="SimpleCellRobinBcCoefs.h" local="yes" imported="no">SimpleCellRobinBcCoefs.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>SimpleCellRobinBcCoefs_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DIRICHLET</name>
      <anchorfile>SimpleCellRobinBcCoefs_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NEUMANN</name>
      <anchorfile>SimpleCellRobinBcCoefs_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIXED</name>
      <anchorfile>SimpleCellRobinBcCoefs_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleCellRobinBcCoefs.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>SimpleCellRobinBcCoefs_8h</filename>
    <includes id="BoundaryBox_8h" name="BoundaryBox.h" local="yes" imported="no">BoundaryBox.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="ArrayData_8h" name="ArrayData.h" local="yes" imported="no">ArrayData.h</includes>
    <includes id="RobinBcCoefStrategy_8h" name="RobinBcCoefStrategy.h" local="yes" imported="no">RobinBcCoefStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>solv_cartesianrobinbchelper2d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>solv__cartesianrobinbchelper2d_8f</filename>
    <member kind="function">
      <type>c c zerog c ***********************************************************************implicit none integer djlast double precision</type>
      <name>data</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(difirst:dilast, djfirst:djlast) integer ifirst</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>difirst</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dilast</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>djfirst</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>djlast</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>a</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>g</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ifirst</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilast</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>jfirst</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>jlast</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ibeg</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>iend</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>jbeg</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>jend</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>face</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ghos</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>inte</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>location</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>h</name>
      <anchorfile>solv__cartesianrobinbchelper2d_8f.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>solv_cartesianrobinbchelper3d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>solv__cartesianrobinbchelper3d_8f</filename>
    <member kind="function">
      <type>c c zerog c ***********************************************************************implicit none integer dklast double precision &amp;</type>
      <name>data</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(difirst:dilast, djfirst:djlast, dkfirst:dklast) integer ifirst</arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>difirst</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dilast</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>djfirst</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>djlast</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dkfirst</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dklast</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>a</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>g</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ifirst</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilast</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>jfirst</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>jlast</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>kfirst</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>klast</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ibeg</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>iend</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>jbeg</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>jend</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>kbeg</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>kend</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>face</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ghos</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>inte</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>location</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>h</name>
      <anchorfile>solv__cartesianrobinbchelper3d_8f.html</anchorfile>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>solv_cellpoissonfacops2d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>solv__cellpoissonfacops2d_8f</filename>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>solv__cellpoissonfacops2d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>yflux</name>
      <anchorfile>solv__cellpoissonfacops2d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fluxgi</name>
      <anchorfile>solv__cellpoissonfacops2d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fluxgj</name>
      <anchorfile>solv__cellpoissonfacops2d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>xdc</name>
      <anchorfile>solv__cellpoissonfacops2d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ydc</name>
      <anchorfile>solv__cellpoissonfacops2d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dcgi</name>
      <anchorfile>solv__cellpoissonfacops2d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dcgj</name>
      <anchorfile>solv__cellpoissonfacops2d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>soln</name>
      <anchorfile>solv__cellpoissonfacops2d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>solngi</name>
      <anchorfile>solv__cellpoissonfacops2d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>solngj</name>
      <anchorfile>solv__cellpoissonfacops2d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ifirst</name>
      <anchorfile>solv__cellpoissonfacops2d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilast</name>
      <anchorfile>solv__cellpoissonfacops2d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>jfirst</name>
      <anchorfile>solv__cellpoissonfacops2d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>jlast</name>
      <anchorfile>solv__cellpoissonfacops2d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>solv_cellpoissonfacops3d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>solv__cellpoissonfacops3d_8f</filename>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>yflux</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>zflux</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fluxgi</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fluxgj</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>fluxgk</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>xdc</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ydc</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>zdc</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dcgi</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dcgj</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>dcgk</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>soln</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>solngi</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>solngj</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>solngk</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ifirst</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilast</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>jfirst</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>jlast</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>kfirst</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>klast</name>
      <anchorfile>solv__cellpoissonfacops3d_8f.html</anchorfile>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>solv_cellpoissonhypresolver2d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>solv__cellpoissonhypresolver2d_8f</filename>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>solv__cellpoissonhypresolver2d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>c</name>
      <anchorfile>solv__cellpoissonhypresolver2d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>offdiagi</name>
      <anchorfile>solv__cellpoissonhypresolver2d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>offdiagj</name>
      <anchorfile>solv__cellpoissonhypresolver2d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ifirst</name>
      <anchorfile>solv__cellpoissonhypresolver2d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilast</name>
      <anchorfile>solv__cellpoissonhypresolver2d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>jfirst</name>
      <anchorfile>solv__cellpoissonhypresolver2d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>jlast</name>
      <anchorfile>solv__cellpoissonhypresolver2d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>cscale</name>
      <anchorfile>solv__cellpoissonhypresolver2d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>solv_cellpoissonhypresolver3d.f</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>solv__cellpoissonhypresolver3d_8f</filename>
    <member kind="variable">
      <type>c c</type>
      <name>File</name>
      <anchorfile>solv__cellpoissonhypresolver3d_8f.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>c</name>
      <anchorfile>solv__cellpoissonhypresolver3d_8f.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>offdiagi</name>
      <anchorfile>solv__cellpoissonhypresolver3d_8f.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>offdiagj</name>
      <anchorfile>solv__cellpoissonhypresolver3d_8f.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>offdiagk</name>
      <anchorfile>solv__cellpoissonhypresolver3d_8f.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>ifirst</name>
      <anchorfile>solv__cellpoissonhypresolver3d_8f.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>ilast</name>
      <anchorfile>solv__cellpoissonhypresolver3d_8f.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>jfirst</name>
      <anchorfile>solv__cellpoissonhypresolver3d_8f.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>jlast</name>
      <anchorfile>solv__cellpoissonhypresolver3d_8f.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>kfirst</name>
      <anchorfile>solv__cellpoissonhypresolver3d_8f.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c</type>
      <name>klast</name>
      <anchorfile>solv__cellpoissonhypresolver3d_8f.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>c c &amp;</type>
      <name>cscale</name>
      <anchorfile>solv__cellpoissonhypresolver3d_8f.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PETSc_SAMRAIVectorReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/vectors/</path>
    <filename>PETSc__SAMRAIVectorReal_8C</filename>
    <includes id="PETSc__SAMRAIVectorReal_8h" name="PETSc_SAMRAIVectorReal.h" local="yes" imported="no">PETSc_SAMRAIVectorReal.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>PETSc_SAMRAIVectorReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/vectors/</path>
    <filename>PETSc__SAMRAIVectorReal_8h</filename>
    <includes id="PETScAbstractVectorReal_8h" name="PETScAbstractVectorReal.h" local="yes" imported="no">PETScAbstractVectorReal.h</includes>
    <includes id="SAMRAIVectorReal_8h" name="SAMRAIVectorReal.h" local="yes" imported="no">SAMRAIVectorReal.h</includes>
    <includes id="PETSc__SAMRAIVectorReal_8I" name="PETSc_SAMRAIVectorReal.I" local="yes" imported="no">PETSc_SAMRAIVectorReal.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>PETSc_SAMRAIVectorReal.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/vectors/</path>
    <filename>PETSc__SAMRAIVectorReal_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SPVEC_CAST</name>
      <anchorfile>PETSc__SAMRAIVectorReal_8I.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PVodeTrio_SAMRAIVector.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/vectors/</path>
    <filename>PVodeTrio__SAMRAIVector_8C</filename>
    <includes id="PVodeTrio__SAMRAIVector_8h" name="PVodeTrio_SAMRAIVector.h" local="yes" imported="no">PVodeTrio_SAMRAIVector.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>PVodeTrio_SAMRAIVector.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/vectors/</path>
    <filename>PVodeTrio__SAMRAIVector_8h</filename>
    <includes id="PVodeTrioAbstractVector_8h" name="PVodeTrioAbstractVector.h" local="yes" imported="no">PVodeTrioAbstractVector.h</includes>
    <includes id="SAMRAIVectorReal_8h" name="SAMRAIVectorReal.h" local="yes" imported="no">SAMRAIVectorReal.h</includes>
    <includes id="PVodeTrio__SAMRAIVector_8I" name="PVodeTrio_SAMRAIVector.I" local="yes" imported="no">PVodeTrio_SAMRAIVector.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>PVodeTrio_SAMRAIVector.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/vectors/</path>
    <filename>PVodeTrio__SAMRAIVector_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SKVEC_CAST</name>
      <anchorfile>PVodeTrio__SAMRAIVector_8I.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SAMRAIVectorReal.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/vectors/</path>
    <filename>SAMRAIVectorReal_8C</filename>
    <includes id="SAMRAIVectorReal_8h" name="SAMRAIVectorReal.h" local="yes" imported="no">SAMRAIVectorReal.h</includes>
    <includes id="HierarchyCellDataOpsReal_8h" name="HierarchyCellDataOpsReal.h" local="yes" imported="no">HierarchyCellDataOpsReal.h</includes>
    <includes id="HierarchyEdgeDataOpsReal_8h" name="HierarchyEdgeDataOpsReal.h" local="yes" imported="no">HierarchyEdgeDataOpsReal.h</includes>
    <includes id="HierarchyFaceDataOpsReal_8h" name="HierarchyFaceDataOpsReal.h" local="yes" imported="no">HierarchyFaceDataOpsReal.h</includes>
    <includes id="HierarchyNodeDataOpsReal_8h" name="HierarchyNodeDataOpsReal.h" local="yes" imported="no">HierarchyNodeDataOpsReal.h</includes>
    <includes id="HierarchySideDataOpsReal_8h" name="HierarchySideDataOpsReal.h" local="yes" imported="no">HierarchySideDataOpsReal.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <includes id="CellVariable_8h" name="CellVariable.h" local="yes" imported="no">CellVariable.h</includes>
    <includes id="EdgeVariable_8h" name="EdgeVariable.h" local="yes" imported="no">EdgeVariable.h</includes>
    <includes id="FaceVariable_8h" name="FaceVariable.h" local="yes" imported="no">FaceVariable.h</includes>
    <includes id="NodeVariable_8h" name="NodeVariable.h" local="yes" imported="no">NodeVariable.h</includes>
    <includes id="SideVariable_8h" name="SideVariable.h" local="yes" imported="no">SideVariable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DESCRIPTOR_ID_ARRAY_SCRATCH_SPACE</name>
      <anchorfile>SAMRAIVectorReal_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SAMRAIVectorReal.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/vectors/</path>
    <filename>SAMRAIVectorReal_8h</filename>
    <includes id="HierarchyDataOpsReal_8h" name="HierarchyDataOpsReal.h" local="yes" imported="no">HierarchyDataOpsReal.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <includes id="SAMRAIVectorReal_8I" name="SAMRAIVectorReal.I" local="yes" imported="no">SAMRAIVectorReal.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>SAMRAIVectorReal_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SAMRAIVectorReal.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/vectors/</path>
    <filename>SAMRAIVectorReal_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>Boolean.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>Boolean_8h</filename>
  </compound>
  <compound kind="file">
    <name>Complex.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>Complex_8h</filename>
    <namespace>std</namespace>
    <member kind="typedef">
      <type>complex&lt; double &gt;</type>
      <name>dcomplex</name>
      <anchorfile>Complex_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IEEE.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>IEEE_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>IEEE.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>IEEE_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>IEEE.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>IEEE_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>List.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>List_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>List.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>List_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>List.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>List_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>List_8I.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>toolbox_2base_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/database/</path>
    <filename>toolbox_2database_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/inputdb/</path>
    <filename>toolbox_2inputdb_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/</path>
    <filename>toolbox_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>toolbox_2memory_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/parallel/</path>
    <filename>toolbox_2parallel_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/restartdb/</path>
    <filename>toolbox_2restartdb_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/stream/</path>
    <filename>toolbox_2stream_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/timers/</path>
    <filename>toolbox_2timers_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/boxes/</path>
    <filename>hierarchy_2boxes_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/dlbg/</path>
    <filename>hierarchy_2dlbg_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/</path>
    <filename>hierarchy_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/patches/</path>
    <filename>hierarchy_2patches_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/hierarchy/variables/</path>
    <filename>hierarchy_2variables_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::hier</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>transfer_2datamovers_2locally__active_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/</path>
    <filename>transfer_2datamovers_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>transfer_2datamovers_2standard_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/</path>
    <filename>transfer_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/operators/</path>
    <filename>transfer_2operators_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/array/</path>
    <filename>patchdata_2array_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/boxgeometry/</path>
    <filename>patchdata_2boxgeometry_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/cell/</path>
    <filename>patchdata_2cell_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/edge/</path>
    <filename>patchdata_2edge_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/face/</path>
    <filename>patchdata_2face_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/fortran/</path>
    <filename>patchdata_2fortran_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/index/</path>
    <filename>patchdata_2index_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/</path>
    <filename>patchdata_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/node/</path>
    <filename>patchdata_2node_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/cell/</path>
    <filename>patchdata_2operators_2constant_2cell_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/fortran/</path>
    <filename>patchdata_2operators_2constant_2fortran_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/constant/outernode/</path>
    <filename>patchdata_2operators_2constant_2outernode_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/</path>
    <filename>patchdata_2operators_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/cell/</path>
    <filename>patchdata_2operators_2time__interpolate_2cell_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/fortran/</path>
    <filename>patchdata_2operators_2time__interpolate_2fortran_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/operators/time_interpolate/</path>
    <filename>patchdata_2operators_2time__interpolate_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outeredge/</path>
    <filename>patchdata_2outeredge_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outerface/</path>
    <filename>patchdata_2outerface_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outernode/</path>
    <filename>patchdata_2outernode_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/outerside/</path>
    <filename>patchdata_2outerside_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/patchdata/side/</path>
    <filename>patchdata_2side_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::pdat</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/array/</path>
    <filename>mathops_2array_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/cell/</path>
    <filename>mathops_2cell_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/hierarchy/</path>
    <filename>mathops_2hierarchy_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mathops/</path>
    <filename>mathops_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::math</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/clustering/</path>
    <filename>mesh_2clustering_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/gridding/</path>
    <filename>mesh_2gridding_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/load_balance/</path>
    <filename>mesh_2load__balance_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/mesh/</path>
    <filename>mesh_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mesh</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/multiblock/</path>
    <filename>multiblock_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::mblk</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/grid_geom/</path>
    <filename>geometry_2cartesian_2grid__geom_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/</path>
    <filename>geometry_2cartesian_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/cell/</path>
    <filename>geometry_2cartesian_2operators_2cell_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/operators/fortran/</path>
    <filename>geometry_2cartesian_2operators_2fortran_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/cartesian/patch_geom/</path>
    <filename>geometry_2cartesian_2patch__geom_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/</path>
    <filename>geometry_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/skeleton/grid_geom/</path>
    <filename>geometry_2skeleton_2grid__geom_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/skeleton/</path>
    <filename>geometry_2skeleton_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/skeleton/operators/</path>
    <filename>geometry_2skeleton_2operators_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/geometry/skeleton/patch_geom/</path>
    <filename>geometry_2skeleton_2patch__geom_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::geom</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/FAC/</path>
    <filename>solvers_2FAC_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/</path>
    <filename>solvers_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/nonlinear/</path>
    <filename>solvers_2nonlinear_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/</path>
    <filename>solvers_2packages_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/petsc/</path>
    <filename>solvers_2packages_2petsc_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/kinsol/</path>
    <filename>solvers_2packages_2pvode__trio_2kinsol_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/kinsol/wrapper/</path>
    <filename>solvers_2packages_2pvode__trio_2kinsol_2wrapper_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/</path>
    <filename>solvers_2packages_2pvode__trio_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/pvode/</path>
    <filename>solvers_2packages_2pvode__trio_2pvode_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/pvode/wrapper/</path>
    <filename>solvers_2packages_2pvode__trio_2pvode_2wrapper_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/packages/pvode_trio/vector/</path>
    <filename>solvers_2packages_2pvode__trio_2vector_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/poisson/</path>
    <filename>solvers_2poisson_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/solvers/vectors/</path>
    <filename>solvers_2vectors_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::solv</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/locally_active/</path>
    <filename>algorithm_2femutils_2locally__active_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/</path>
    <filename>algorithm_2femutils_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/femutils/standard/</path>
    <filename>algorithm_2femutils_2standard_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/hyperbolic/</path>
    <filename>algorithm_2hyperbolic_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/implicit/</path>
    <filename>algorithm_2implicit_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/</path>
    <filename>algorithm_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/method_of_lines/</path>
    <filename>algorithm_2method__of__lines_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/algorithm/time_refinement/</path>
    <filename>algorithm_2time__refinement_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::algs</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/boundary/</path>
    <filename>apputils_2boundary_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/embedded_boundary/</path>
    <filename>apputils_2embedded__boundary_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/</path>
    <filename>apputils_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>manual.dox</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/apputils/plotting/</path>
    <filename>apputils_2plotting_2manual_8dox</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="file">
    <name>MathUtilities.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>MathUtilities_8C</filename>
  </compound>
  <compound kind="file">
    <name>MathUtilities.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>MathUtilities_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>MathUtilities.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>MathUtilities_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>ParallelBuffer.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>ParallelBuffer_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>ParallelBuffer_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_BUFFER_SIZE</name>
      <anchorfile>ParallelBuffer_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ParallelBuffer.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>ParallelBuffer_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>PIO.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>PIO_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>PIO_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ostream</type>
      <name>pout</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(&amp;pout_buffer)</arglist>
    </member>
    <member kind="function">
      <type>ostream</type>
      <name>perr</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(&amp;perr_buffer)</arglist>
    </member>
    <member kind="function">
      <type>ostream</type>
      <name>plog</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(&amp;plog_buffer)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ParallelBuffer</type>
      <name>pout_buffer</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ParallelBuffer</type>
      <name>perr_buffer</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ParallelBuffer</type>
      <name>plog_buffer</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PIO.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>PIO_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="variable">
      <type>ostream</type>
      <name>pout</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ostream</type>
      <name>perr</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ostream</type>
      <name>plog</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SAMRAIManager.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>SAMRAIManager_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>badnew</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SAMRAIManager.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>SAMRAIManager_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>ShutdownRegistry.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>ShutdownRegistry_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>ShutdownRegistry_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ShutdownRegistry.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>ShutdownRegistry_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Tracer.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>Tracer_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Tracer.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>Tracer_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Tracer.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>Tracer_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Utilities.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>Utilities_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Utilities.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>Utilities_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL_STATEMENT</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NULL_USE</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_ERROR</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_WARNING</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_ASSERT</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(EXP)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PETSC_SAMRAI_ERROR</name>
      <anchorfile>Utilities_8h.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ierr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Utilities.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/base/</path>
    <filename>Utilities_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Database.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/database/</path>
    <filename>Database_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Database.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/database/</path>
    <filename>Database_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Database.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/database/</path>
    <filename>Database_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>DatabaseBox.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/database/</path>
    <filename>DatabaseBox_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>DatabaseBox.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/database/</path>
    <filename>DatabaseBox_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DatabaseBox_MAX_DIM</name>
      <anchorfile>DatabaseBox_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DatabaseBox.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/database/</path>
    <filename>DatabaseBox_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Serializable.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/database/</path>
    <filename>Serializable_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Serializable.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/database/</path>
    <filename>Serializable_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Serializable.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/database/</path>
    <filename>Serializable_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Grammar.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/inputdb/</path>
    <filename>Grammar_8C</filename>
    <namespace>tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>YYBISON</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSKELETON_NAME</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYPURE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYLSP_NEEDED</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_AND</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_ASSIGN</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_CHAR</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_CLOSE_CURLY</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_CLOSE_PAREN</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_CLOSE_SQBKT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_COMMA</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_DIV</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_DOUBLE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_ELSE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_EXP</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_EQUALS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_GREATER_EQUALS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_GREATER</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_LESS_EQUALS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_LESS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_FALSE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_INTEGER</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_KEYWORD</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_MINUS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_MULT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_NOT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_NOT_EQUALS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_OR</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_OPEN_CURLY</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_OPEN_PAREN</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_OPEN_SQBKT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_PLUS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_QUESTION</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_SEMI</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_STRING</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_TRUE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_NEGATION</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_COMPLEX</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_DOUBLE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_INTEGER</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_BOOL</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_BOX</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_CHAR</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_STRING</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IS_NUMBER</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PROMOTE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(X, Y)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYDEBUG</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYERROR_VERBOSE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yystype</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTYPE_IS_DECLARED</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTYPE_IS_TRIVIAL</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTACK_ALLOC</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTACK_FREE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTACK_GAP_MAXIMUM</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTACK_BYTES</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a55</anchor>
      <arglist>(N)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYCOPY</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a56</anchor>
      <arglist>(To, From, Count)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTACK_RELOCATE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a57</anchor>
      <arglist>(Stack)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYFINAL</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYLAST</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYNTOKENS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYNNTS</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYNRULES</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYNSTATES</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYUNDEFTOK</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYMAXUTOK</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYTRANSLATE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a66</anchor>
      <arglist>(YYX)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYPACT_NINF</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYTABLE_NINF</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSIZE_T</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yyerrok</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yyclearin</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYEMPTY</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYEOF</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYACCEPT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYABORT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYERROR</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYFAIL</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYRECOVERING</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYBACKUP</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a79</anchor>
      <arglist>(Token, Value)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYTERROR</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYERRCODE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYLLOC_DEFAULT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a82</anchor>
      <arglist>(Current, Rhs, N)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYLEX</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYDPRINTF</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a84</anchor>
      <arglist>(Args)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYDSYMPRINT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a85</anchor>
      <arglist>(Args)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYDSYMPRINTF</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a86</anchor>
      <arglist>(Title, Token, Value, Location)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_STACK_PRINT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a87</anchor>
      <arglist>(Bottom, Top)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_REDUCE_PRINT</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a88</anchor>
      <arglist>(Rule)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYINITDEPTH</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYMAXDEPTH</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYPOPSTACK</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>YYSTYPE</type>
      <name>YYSTYPE</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>yysigned_char</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>yytokentype</name>
      <anchor>a161</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_AND</name>
      <anchor>a161a109</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_ASSIGN</name>
      <anchor>a161a110</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_CHAR</name>
      <anchor>a161a111</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_CLOSE_CURLY</name>
      <anchor>a161a112</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_CLOSE_PAREN</name>
      <anchor>a161a113</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_CLOSE_SQBKT</name>
      <anchor>a161a114</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_COMMA</name>
      <anchor>a161a115</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_DIV</name>
      <anchor>a161a116</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_DOUBLE</name>
      <anchor>a161a117</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_ELSE</name>
      <anchor>a161a118</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_EXP</name>
      <anchor>a161a119</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_EQUALS</name>
      <anchor>a161a120</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_GREATER_EQUALS</name>
      <anchor>a161a121</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_GREATER</name>
      <anchor>a161a122</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_LESS_EQUALS</name>
      <anchor>a161a123</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_LESS</name>
      <anchor>a161a124</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_FALSE</name>
      <anchor>a161a125</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_INTEGER</name>
      <anchor>a161a126</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_KEYWORD</name>
      <anchor>a161a127</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_MINUS</name>
      <anchor>a161a128</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_MULT</name>
      <anchor>a161a129</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_NOT</name>
      <anchor>a161a130</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_NOT_EQUALS</name>
      <anchor>a161a131</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_OR</name>
      <anchor>a161a132</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_OPEN_CURLY</name>
      <anchor>a161a133</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_OPEN_PAREN</name>
      <anchor>a161a134</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_OPEN_SQBKT</name>
      <anchor>a161a135</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_PLUS</name>
      <anchor>a161a136</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_QUESTION</name>
      <anchor>a161a137</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_SEMI</name>
      <anchor>a161a138</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_STRING</name>
      <anchor>a161a139</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_TRUE</name>
      <anchor>a161a140</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_NEGATION</name>
      <anchor>a161a141</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>yylex</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yyerror</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a143</anchor>
      <arglist>(const char *const error)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>delete_list</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a144</anchor>
      <arglist>(KeyData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>to_boolean</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a145</anchor>
      <arglist>(KeyData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>to_integer</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a146</anchor>
      <arglist>(KeyData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>to_double</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a147</anchor>
      <arglist>(KeyData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>to_complex</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a148</anchor>
      <arglist>(KeyData *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KeyData *</type>
      <name>binary_op</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a149</anchor>
      <arglist>(KeyData *, KeyData *, const int)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KeyData *</type>
      <name>compare_op</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a150</anchor>
      <arglist>(KeyData *, KeyData *, const int)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KeyData *</type>
      <name>eval_function</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a151</anchor>
      <arglist>(KeyData *, const string &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KeyData *</type>
      <name>lookup_variable</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a152</anchor>
      <arglist>(const string &amp;, const int, const bool)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>yydestruct</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a153</anchor>
      <arglist>(int yytype, YYSTYPE *yyvaluep)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>yyparse</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a154</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KeyData *</type>
      <name>binary_op</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a155</anchor>
      <arglist>(KeyData *a, KeyData *b, const int op)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KeyData *</type>
      <name>compare_op</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a156</anchor>
      <arglist>(KeyData *a, KeyData *b, const int op)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>imag_thunk</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a157</anchor>
      <arglist>(const dcomplex &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>real_thunk</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a158</anchor>
      <arglist>(const dcomplex &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parser_static_table_initialize</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a159</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KeyData *</type>
      <name>lookup_variable</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a160</anchor>
      <arglist>(const string &amp;key, const int index, const bool is_array)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static string</type>
      <name>type_names</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a92</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>yytranslate</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a95</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>yyr1</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a96</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>yyr2</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a97</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>yydefact</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a98</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const yysigned_char</type>
      <name>yydefgoto</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a99</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const short</type>
      <name>yypact</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a100</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const yysigned_char</type>
      <name>yypgoto</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a101</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>yytable</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a102</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const yysigned_char</type>
      <name>yycheck</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a103</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>yystos</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a104</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yychar</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a105</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>YYSTYPE</type>
      <name>yylval</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a106</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yynerrs</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a107</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static arith_functions</type>
      <name>af</name>
      <anchorfile>Grammar_8C.html</anchorfile>
      <anchor>a108</anchor>
      <arglist>[20]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Grammar.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/inputdb/</path>
    <filename>Grammar_8h</filename>
    <class kind="union">YYSTYPE</class>
    <member kind="define">
      <type>#define</type>
      <name>T_AND</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_ASSIGN</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_CHAR</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_CLOSE_CURLY</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_CLOSE_PAREN</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_CLOSE_SQBKT</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_COMMA</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_DIV</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_DOUBLE</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_ELSE</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_EXP</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_EQUALS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_GREATER_EQUALS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_GREATER</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_LESS_EQUALS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_LESS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_FALSE</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_INTEGER</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_KEYWORD</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_MINUS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_MULT</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_NOT</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_NOT_EQUALS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_OR</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_OPEN_CURLY</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_OPEN_PAREN</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_OPEN_SQBKT</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_PLUS</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_QUESTION</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_SEMI</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_STRING</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_TRUE</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T_NEGATION</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yystype</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTYPE_IS_DECLARED</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTYPE_IS_TRIVIAL</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>YYSTYPE</type>
      <name>YYSTYPE</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>yytokentype</name>
      <anchor>a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_AND</name>
      <anchor>a71a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_ASSIGN</name>
      <anchor>a71a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_CHAR</name>
      <anchor>a71a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_CLOSE_CURLY</name>
      <anchor>a71a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_CLOSE_PAREN</name>
      <anchor>a71a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_CLOSE_SQBKT</name>
      <anchor>a71a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_COMMA</name>
      <anchor>a71a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_DIV</name>
      <anchor>a71a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_DOUBLE</name>
      <anchor>a71a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_ELSE</name>
      <anchor>a71a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_EXP</name>
      <anchor>a71a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_EQUALS</name>
      <anchor>a71a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_GREATER_EQUALS</name>
      <anchor>a71a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_GREATER</name>
      <anchor>a71a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_LESS_EQUALS</name>
      <anchor>a71a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_LESS</name>
      <anchor>a71a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_FALSE</name>
      <anchor>a71a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_INTEGER</name>
      <anchor>a71a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_KEYWORD</name>
      <anchor>a71a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_MINUS</name>
      <anchor>a71a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_MULT</name>
      <anchor>a71a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_NOT</name>
      <anchor>a71a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_NOT_EQUALS</name>
      <anchor>a71a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_OR</name>
      <anchor>a71a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_OPEN_CURLY</name>
      <anchor>a71a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_OPEN_PAREN</name>
      <anchor>a71a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_OPEN_SQBKT</name>
      <anchor>a71a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_PLUS</name>
      <anchor>a71a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_QUESTION</name>
      <anchor>a71a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_SEMI</name>
      <anchor>a71a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_STRING</name>
      <anchor>a71a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_TRUE</name>
      <anchor>a71a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>T_NEGATION</name>
      <anchor>a71a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>YYSTYPE</type>
      <name>yylval</name>
      <anchorfile>Grammar_8h.html</anchorfile>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InputDatabase.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/inputdb/</path>
    <filename>InputDatabase_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>KEY_DATABASE</name>
      <anchorfile>InputDatabase_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_BOOL_ARRAY</name>
      <anchorfile>InputDatabase_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_BOX_ARRAY</name>
      <anchorfile>InputDatabase_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_CHAR_ARRAY</name>
      <anchorfile>InputDatabase_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_COMPLEX_ARRAY</name>
      <anchorfile>InputDatabase_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_DOUBLE_ARRAY</name>
      <anchorfile>InputDatabase_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_FLOAT_ARRAY</name>
      <anchorfile>InputDatabase_8C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_INT_ARRAY</name>
      <anchorfile>InputDatabase_8C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_STRING_ARRAY</name>
      <anchorfile>InputDatabase_8C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PRINT_DEFAULT</name>
      <anchorfile>InputDatabase_8C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PRINT_INPUT</name>
      <anchorfile>InputDatabase_8C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PRINT_UNUSED</name>
      <anchorfile>InputDatabase_8C.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SSTREAM_BUFFER</name>
      <anchorfile>InputDatabase_8C.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INPUT_DB_ERROR</name>
      <anchorfile>InputDatabase_8C.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(X)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InputDatabase.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/inputdb/</path>
    <filename>InputDatabase_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>InputDatabase.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/inputdb/</path>
    <filename>InputDatabase_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>InputManager.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/inputdb/</path>
    <filename>InputManager_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>InputManager_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InputManager.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/inputdb/</path>
    <filename>InputManager_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Parser.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/inputdb/</path>
    <filename>Parser_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>Parser_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>yyparse</name>
      <anchorfile>Parser_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yyrestart</name>
      <anchorfile>Parser_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(FILE *)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parser_static_table_initialize</name>
      <anchorfile>Parser_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Parser.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/inputdb/</path>
    <filename>Parser_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Parser.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/inputdb/</path>
    <filename>Parser_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Scanner.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/inputdb/</path>
    <filename>Scanner_8C</filename>
    <includes id="Grammar_8h" name="Grammar.h" local="yes" imported="no">Grammar.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>FLEX_SCANNER</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_FLEX_MAJOR_VERSION</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_FLEX_MINOR_VERSION</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yyconst</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_PROTO</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(proto)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_NULL</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_SC_TO_UI</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BEGIN</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_START</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YYSTATE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_STATE_EOF</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(state)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_NEW_FILE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_END_OF_BUFFER_CHAR</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_BUF_SIZE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EOB_ACT_CONTINUE_SCAN</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EOB_ACT_END_OF_FILE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EOB_ACT_LAST_MATCH</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yyless</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>unput</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_BUFFER_NEW</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_BUFFER_NORMAL</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_BUFFER_EOF_PENDING</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_CURRENT_BUFFER</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_FLUSH_BUFFER</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yy_new_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yy_set_interactive</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(is_interactive)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yy_set_bol</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(at_bol)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_AT_BOL</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yywrap</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_SKIP_YYWRAP</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yytext_ptr</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_DO_BEFORE_ACTION</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_NUM_RULES</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_END_OF_BUFFER</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REJECT</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yymore</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_MORE_ADJ</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_RESTORE_YY_MORE_OFFSET</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INITIAL</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_NEVER_INTERACTIVE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_NO_UNPUT</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_INPUT</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(b, r, s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TOKEN</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXIMUM_INCLUDE_DEPTH</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMMENT</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_NO_PUSH_STATE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_NO_POP_STATE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_NO_TOP_STATE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_READ_BUF_SIZE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ECHO</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yyterminate</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_START_STACK_INCR</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_FATAL_ERROR</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_DECL</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_BREAK</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_RULE_SETUP</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_EXIT_FAILURE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yyless</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a57</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="typedef">
      <type>yy_buffer_state *</type>
      <name>YY_BUFFER_STATE</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>yy_size_t</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>YY_CHAR</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>yy_state_type</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yyrestart</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yy_switch_to_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yy_load_buffer_state</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>YY_BUFFER_STATE</type>
      <name>yy_create_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yy_delete_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yy_init_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yy_flush_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>YY_BUFFER_STATE</type>
      <name>yy_scan_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>YY_BUFFER_STATE</type>
      <name>yy_scan_string</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>YY_BUFFER_STATE</type>
      <name>yy_scan_bytes</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>yy_flex_alloc</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>yy_flex_realloc</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>yy_flex_free</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static yy_state_type</type>
      <name>yy_get_previous_state</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static yy_state_type</type>
      <name>yy_try_NUL_trans</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>yy_get_next_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>yy_fatal_error</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a100</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>input</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>yylex</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a102</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static yy_state_type</type>
      <name>yy_try_NUL_trans</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a103</anchor>
      <arglist>(yy_state_type yy_current_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yyrestart</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a104</anchor>
      <arglist>(FILE *input_file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yy_switch_to_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a105</anchor>
      <arglist>(YY_BUFFER_STATE new_buffer)</arglist>
    </member>
    <member kind="function">
      <type>YY_BUFFER_STATE</type>
      <name>yy_create_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a106</anchor>
      <arglist>(FILE *file, int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yy_delete_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a107</anchor>
      <arglist>(YY_BUFFER_STATE b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yy_init_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a108</anchor>
      <arglist>(YY_BUFFER_STATE b, FILE *file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yy_flush_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a109</anchor>
      <arglist>(YY_BUFFER_STATE b)</arglist>
    </member>
    <member kind="function">
      <type>YY_BUFFER_STATE</type>
      <name>yy_scan_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a110</anchor>
      <arglist>(char *base, yy_size_t size)</arglist>
    </member>
    <member kind="function">
      <type>YY_BUFFER_STATE</type>
      <name>yy_scan_string</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a111</anchor>
      <arglist>(char *yy_str)</arglist>
    </member>
    <member kind="function">
      <type>YY_BUFFER_STATE</type>
      <name>yy_scan_bytes</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a112</anchor>
      <arglist>(char *bytes, int len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>yy_fatal_error</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a113</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>yy_flex_alloc</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a114</anchor>
      <arglist>(yy_size_t size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>yy_flex_realloc</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a115</anchor>
      <arglist>(void *ptr, yy_size_t size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>yy_flex_free</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a116</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yyleng</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>yyin</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>yyout</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static YY_BUFFER_STATE</type>
      <name>yy_current_buffer</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static char</type>
      <name>yy_hold_char</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>yy_n_chars</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static char *</type>
      <name>yy_c_buf_p</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>yy_init</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>yy_start</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>yy_did_buffer_switch_on_eof</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>yytext</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static short int</type>
      <name>yy_accept</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a73</anchor>
      <arglist>[96]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>yy_ec</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a74</anchor>
      <arglist>[256]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>yy_meta</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a75</anchor>
      <arglist>[47]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static short int</type>
      <name>yy_base</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a76</anchor>
      <arglist>[103]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static short int</type>
      <name>yy_def</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a77</anchor>
      <arglist>[103]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static short int</type>
      <name>yy_nxt</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a78</anchor>
      <arglist>[206]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static short int</type>
      <name>yy_chk</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a79</anchor>
      <arglist>[206]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static yy_state_type</type>
      <name>yy_last_accepting_state</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static char *</type>
      <name>yy_last_accepting_cpos</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static YY_BUFFER_STATE</type>
      <name>s_include_stack</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a82</anchor>
      <arglist>[16]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>s_include_stack_top</name>
      <anchorfile>Scanner_8C.html</anchorfile>
      <anchor>a83</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Arena.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>Arena_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Arena.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>Arena_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>Arena_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(size_t bytes, SAMRAI::tbox::Arena *arena)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Arena.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>Arena_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>Arena_8I.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(size_t bytes, SAMRAI::tbox::Arena *arena)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ArenaManager.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>ArenaManager_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>ArenaManager_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ArenaManager.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>ArenaManager_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Array.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>Array_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Array.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>Array_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Array.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>Array_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>Array_8I.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstPointer.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>ConstPointer_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>ConstPointer.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>ConstPointer_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>ConstPointer.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>ConstPointer_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>ConstPointer_8I.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConstPointerBase.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>ConstPointerBase_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>ConstPointerBase.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>ConstPointerBase_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>ConstPointerBase.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>ConstPointerBase_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>FixedArena.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>FixedArena_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>FixedArena.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>FixedArena_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>MemoryUtilities.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>MemoryUtilities_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>MemoryUtilities.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>MemoryUtilities_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Pointer.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>Pointer_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Pointer.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>Pointer_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Pointer.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>Pointer_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>Pointer_8I.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PointerBase.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>PointerBase_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>PointerBase.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>PointerBase_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>PointerBase.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>PointerBase_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>ReferenceCounter.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>ReferenceCounter_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>ReferenceCounter.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>ReferenceCounter_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>ReferenceCounter.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>ReferenceCounter_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>ReferenceCounter_8I.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ScratchArena.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>ScratchArena_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>ScratchArena.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>ScratchArena_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>ScratchArena.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>ScratchArena_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>StandardArena.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>StandardArena_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>StandardArena.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>StandardArena_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>StandardArena.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/memory/</path>
    <filename>StandardArena_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>AsyncCommGroup.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/parallel/</path>
    <filename>AsyncCommGroup_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>AsyncCommGroup.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/parallel/</path>
    <filename>AsyncCommGroup_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>AsyncCommGroup.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/parallel/</path>
    <filename>AsyncCommGroup_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>AsyncCommStage.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/parallel/</path>
    <filename>AsyncCommStage_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>AsyncCommStage.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/parallel/</path>
    <filename>AsyncCommStage_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>JobRelauncher.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/parallel/</path>
    <filename>JobRelauncher_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>JobRelauncher.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/parallel/</path>
    <filename>JobRelauncher_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>MPI.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/parallel/</path>
    <filename>MPI_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>MPI.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/parallel/</path>
    <filename>MPI_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>MPI.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/parallel/</path>
    <filename>MPI_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>RelaunchableJob.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/parallel/</path>
    <filename>RelaunchableJob_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Schedule.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/parallel/</path>
    <filename>Schedule_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>SCHEDULE_SIZE_TAG</name>
      <anchorfile>Schedule_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCHEDULE_DATA_TAG</name>
      <anchorfile>Schedule_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; Pointer&lt; Transaction &gt; &gt;::Iterator</type>
      <name>ITERATOR</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Schedule.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/parallel/</path>
    <filename>Schedule_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Transaction.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/parallel/</path>
    <filename>Transaction_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Transaction.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/parallel/</path>
    <filename>Transaction_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>HDFDatabase.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/restartdb/</path>
    <filename>HDFDatabase_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>KEY_DATABASE</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_BOOL_ARRAY</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_BOX_ARRAY</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_CHAR_ARRAY</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_COMPLEX_ARRAY</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_DOUBLE_ARRAY</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_FLOAT_ARRAY</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_INT_ARRAY</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_STRING_ARRAY</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_BOOL_SCALAR</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_BOX_SCALAR</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_CHAR_SCALAR</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_COMPLEX_SCALAR</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_DOUBLE_SCALAR</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_FLOAT_SCALAR</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_INT_SCALAR</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KEY_STRING_SCALAR</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>H5T_SAMRAI_INT</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>H5T_SAMRAI_FLOAT</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>H5T_SAMRAI_DOUBLE</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>H5T_SAMRAI_BOOL</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>H5T_SAMRAI_ATTR</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BEGIN_SUPPRESS_HDF5_WARNINGS</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>END_SUPPRESS_HDF5_WARNINGS</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ASSERT_HDF5_RETURN_VALUES</name>
      <anchorfile>HDFDatabase_8C.html</anchorfile>
      <anchor>a24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>HDFDatabase.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/restartdb/</path>
    <filename>HDFDatabase_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_HDFDATABSE_MAX_DIMENSION</name>
      <anchorfile>HDFDatabase_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NullDatabase.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/restartdb/</path>
    <filename>NullDatabase_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>NullDatabase.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/restartdb/</path>
    <filename>NullDatabase_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>NullDatabase.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/restartdb/</path>
    <filename>NullDatabase_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>RestartManager.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/restartdb/</path>
    <filename>RestartManager_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>RestartManager_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NAME_BUFSIZE</name>
      <anchorfile>RestartManager_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RestartManager.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/restartdb/</path>
    <filename>RestartManager_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>RestartManager.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/restartdb/</path>
    <filename>RestartManager_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractStream.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/stream/</path>
    <filename>AbstractStream_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractStream.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/stream/</path>
    <filename>AbstractStream_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractStream.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/stream/</path>
    <filename>AbstractStream_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>FileStream.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/stream/</path>
    <filename>FileStream_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>FileStream.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/stream/</path>
    <filename>FileStream_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>FileStream.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/stream/</path>
    <filename>FileStream_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>IOStream.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/stream/</path>
    <filename>IOStream_8h</filename>
  </compound>
  <compound kind="file">
    <name>MessageStream.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/stream/</path>
    <filename>MessageStream_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PACK</name>
      <anchorfile>MessageStream_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(m_data, m_size, m_bytes)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNPACK</name>
      <anchorfile>MessageStream_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(m_data, m_size, m_bytes)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MessageStream.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/stream/</path>
    <filename>MessageStream_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>MessageStream.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/stream/</path>
    <filename>MessageStream_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>XDRStream.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/stream/</path>
    <filename>XDRStream_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>XDR_PACK_OPAQUE</name>
      <anchorfile>XDRStream_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(m_data, m_size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XDR_UNPACK_OPAQUE</name>
      <anchorfile>XDRStream_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(m_data, m_size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XDR_PACK_VECTOR</name>
      <anchorfile>XDRStream_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(m_data, m_size, m_type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>XDR_UNPACK_VECTOR</name>
      <anchorfile>XDRStream_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(m_data, m_size, m_type)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>XDRStream.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/stream/</path>
    <filename>XDRStream_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>XDRStream.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/stream/</path>
    <filename>XDRStream_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>XDRStream_8I.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Clock.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/timers/</path>
    <filename>Clock_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Clock.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/timers/</path>
    <filename>Clock_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Statistic.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/timers/</path>
    <filename>Statistic_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_STATISTIC_VERSION</name>
      <anchorfile>Statistic_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARRAY_INCREMENT</name>
      <anchorfile>Statistic_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Statistic.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/timers/</path>
    <filename>Statistic_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Statistic.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/timers/</path>
    <filename>Statistic_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Statistician.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/timers/</path>
    <filename>Statistician_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>Statistician_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_STATISTICRESTARTDATABASE_VERSION</name>
      <anchorfile>Statistician_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STATISTICIAN_MAX_STATS</name>
      <anchorfile>Statistician_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COLUMN_WIDTH</name>
      <anchorfile>Statistician_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Statistician.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/timers/</path>
    <filename>Statistician_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>StatTransaction.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/timers/</path>
    <filename>StatTransaction_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>StatTransaction.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/timers/</path>
    <filename>StatTransaction_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Timer.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/timers/</path>
    <filename>Timer_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>TBOX_TIMER_VERSION</name>
      <anchorfile>Timer_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TIMER_MAX_CONCURRENT_TIMERS</name>
      <anchorfile>Timer_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/timers/</path>
    <filename>Timer_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>Timer.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/timers/</path>
    <filename>Timer_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>TimerManager.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/timers/</path>
    <filename>TimerManager_8C</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>TimerManager_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TIMER_MANAGER_MAX_TIMERS</name>
      <anchorfile>TimerManager_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TIMER_UNREG_ACCESS_TIME</name>
      <anchorfile>TimerManager_8C.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TIMER_REG_ACCESS_TIME</name>
      <anchorfile>TimerManager_8C.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAIN_TIMER_IDENTIFIER</name>
      <anchorfile>TimerManager_8C.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INACTIVE_TIMER_IDENTIFIER</name>
      <anchorfile>TimerManager_8C.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimerManager.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/toolbox/timers/</path>
    <filename>TimerManager_8h</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::tbox</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataCoarsenAlgorithm.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>LocallyActiveDataCoarsenAlgorithm_8C</filename>
    <includes id="LocallyActiveDataCoarsenAlgorithm_8h" name="LocallyActiveDataCoarsenAlgorithm.h" local="yes" imported="no">LocallyActiveDataCoarsenAlgorithm.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="LocallyActiveVariableDatabase_8h" name="LocallyActiveVariableDatabase.h" local="yes" imported="no">LocallyActiveVariableDatabase.h</includes>
    <includes id="StandardLocallyActiveDataCoarsenTransactionFactory_8h" name="StandardLocallyActiveDataCoarsenTransactionFactory.h" local="yes" imported="no">StandardLocallyActiveDataCoarsenTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataCoarsenAlgorithm.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>LocallyActiveDataCoarsenAlgorithm_8h</filename>
    <includes id="LocallyActiveDataPatchLevelManager_8h" name="LocallyActiveDataPatchLevelManager.h" local="yes" imported="no">LocallyActiveDataPatchLevelManager.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">CoarsenClasses.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <includes id="LocallyActiveDataCoarsenSchedule_8h" name="LocallyActiveDataCoarsenSchedule.h" local="yes" imported="no">LocallyActiveDataCoarsenSchedule.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataCoarsenPatchStrategy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>LocallyActiveDataCoarsenPatchStrategy_8C</filename>
    <includes id="LocallyActiveDataCoarsenPatchStrategy_8h" name="LocallyActiveDataCoarsenPatchStrategy.h" local="yes" imported="no">LocallyActiveDataCoarsenPatchStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataCoarsenPatchStrategy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>LocallyActiveDataCoarsenPatchStrategy_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataCoarsenSchedule.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>LocallyActiveDataCoarsenSchedule_8C</filename>
    <includes id="LocallyActiveDataCoarsenSchedule_8h" name="LocallyActiveDataCoarsenSchedule.h" local="yes" imported="no">LocallyActiveDataCoarsenSchedule.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="BoxGraph_8h" name="BoxGraph.h" local="yes" imported="no">BoxGraph.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="BoxTree_8h" name="BoxTree.h" local="yes" imported="no">BoxTree.h</includes>
    <includes id="LocallyActiveVariableDatabase_8h" name="LocallyActiveVariableDatabase.h" local="yes" imported="no">LocallyActiveVariableDatabase.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="ProcessorMapping_8h" name="ProcessorMapping.h" local="yes" imported="no">ProcessorMapping.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataCoarsenSchedule.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>LocallyActiveDataCoarsenSchedule_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="LocallyActiveDataPatchLevelManager_8h" name="LocallyActiveDataPatchLevelManager.h" local="yes" imported="no">LocallyActiveDataPatchLevelManager.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">CoarsenClasses.h</includes>
    <includes id="LocallyActiveDataCoarsenPatchStrategy_8h" name="LocallyActiveDataCoarsenPatchStrategy.h" local="yes" imported="no">LocallyActiveDataCoarsenPatchStrategy.h</includes>
    <includes id="LocallyActiveDataRefineAlgorithm_8h" name="LocallyActiveDataRefineAlgorithm.h" local="yes" imported="no">LocallyActiveDataRefineAlgorithm.h</includes>
    <includes id="LocallyActiveDataCoarsenTransactionFactory_8h" name="LocallyActiveDataCoarsenTransactionFactory.h" local="yes" imported="no">LocallyActiveDataCoarsenTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataCoarsenTransactionFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>LocallyActiveDataCoarsenTransactionFactory_8C</filename>
    <includes id="LocallyActiveDataCoarsenTransactionFactory_8h" name="LocallyActiveDataCoarsenTransactionFactory.h" local="yes" imported="no">LocallyActiveDataCoarsenTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataCoarsenTransactionFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>LocallyActiveDataCoarsenTransactionFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">CoarsenClasses.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataFillBox.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>LocallyActiveDataFillBox_8C</filename>
    <includes id="LocallyActiveDataFillBox_8h" name="LocallyActiveDataFillBox.h" local="yes" imported="no">LocallyActiveDataFillBox.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataFillBox.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>LocallyActiveDataFillBox_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">CoarsenClasses.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataFillBoxSet.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>LocallyActiveDataFillBoxSet_8C</filename>
    <includes id="LocallyActiveDataFillBoxSet_8h" name="LocallyActiveDataFillBoxSet.h" local="yes" imported="no">LocallyActiveDataFillBoxSet.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataFillBoxSet.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>LocallyActiveDataFillBoxSet_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="FillBoxSet_8h" name="FillBoxSet.h" local="yes" imported="no">FillBoxSet.h</includes>
    <includes id="LocallyActiveDataFillBox_8h" name="LocallyActiveDataFillBox.h" local="yes" imported="no">LocallyActiveDataFillBox.h</includes>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">CoarsenClasses.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataRefineAlgorithm.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>LocallyActiveDataRefineAlgorithm_8C</filename>
    <includes id="LocallyActiveDataRefineAlgorithm_8h" name="LocallyActiveDataRefineAlgorithm.h" local="yes" imported="no">LocallyActiveDataRefineAlgorithm.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="LocallyActiveVariableDatabase_8h" name="LocallyActiveVariableDatabase.h" local="yes" imported="no">LocallyActiveVariableDatabase.h</includes>
    <includes id="StandardLocallyActiveDataRefineTransactionFactory_8h" name="StandardLocallyActiveDataRefineTransactionFactory.h" local="yes" imported="no">StandardLocallyActiveDataRefineTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataRefineAlgorithm.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>LocallyActiveDataRefineAlgorithm_8h</filename>
    <includes id="LocallyActiveDataPatchLevelManager_8h" name="LocallyActiveDataPatchLevelManager.h" local="yes" imported="no">LocallyActiveDataPatchLevelManager.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <includes id="LocallyActiveDataRefinePatchStrategy_8h" name="LocallyActiveDataRefinePatchStrategy.h" local="yes" imported="no">LocallyActiveDataRefinePatchStrategy.h</includes>
    <includes id="LocallyActiveDataRefineSchedule_8h" name="LocallyActiveDataRefineSchedule.h" local="yes" imported="no">LocallyActiveDataRefineSchedule.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>LocallyActiveDataRefineAlgorithm_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataRefinePatchStrategy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>LocallyActiveDataRefinePatchStrategy_8C</filename>
    <includes id="LocallyActiveDataRefinePatchStrategy_8h" name="LocallyActiveDataRefinePatchStrategy.h" local="yes" imported="no">LocallyActiveDataRefinePatchStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataRefinePatchStrategy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>LocallyActiveDataRefinePatchStrategy_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="LocallyActiveDataFillBoxSet_8h" name="LocallyActiveDataFillBoxSet.h" local="yes" imported="no">LocallyActiveDataFillBoxSet.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataRefineSchedule.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>LocallyActiveDataRefineSchedule_8C</filename>
    <includes id="LocallyActiveDataRefineSchedule_8h" name="LocallyActiveDataRefineSchedule.h" local="yes" imported="no">LocallyActiveDataRefineSchedule.h</includes>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="BoxTree_8h" name="BoxTree.h" local="yes" imported="no">BoxTree.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">BoxUtilities.h</includes>
    <includes id="LocallyActiveVariableDatabase_8h" name="LocallyActiveVariableDatabase.h" local="yes" imported="no">LocallyActiveVariableDatabase.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="ProcessorMapping_8h" name="ProcessorMapping.h" local="yes" imported="no">ProcessorMapping.h</includes>
    <includes id="LocallyActiveDataFillBox_8h" name="LocallyActiveDataFillBox.h" local="yes" imported="no">LocallyActiveDataFillBox.h</includes>
    <includes id="RefineCopyTransaction_8h" name="RefineCopyTransaction.h" local="yes" imported="no">RefineCopyTransaction.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>LocallyActiveDataRefineSchedule_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BIG_GHOST_CELL_WIDTH</name>
      <anchorfile>LocallyActiveDataRefineSchedule_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataRefineSchedule.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>LocallyActiveDataRefineSchedule_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="LocallyActiveDataPatchLevelManager_8h" name="LocallyActiveDataPatchLevelManager.h" local="yes" imported="no">LocallyActiveDataPatchLevelManager.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="GridGeometry_8h" name="GridGeometry.h" local="yes" imported="no">GridGeometry.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <includes id="LocallyActiveDataRefineTransactionFactory_8h" name="LocallyActiveDataRefineTransactionFactory.h" local="yes" imported="no">LocallyActiveDataRefineTransactionFactory.h</includes>
    <includes id="LocallyActiveDataFillBoxSet_8h" name="LocallyActiveDataFillBoxSet.h" local="yes" imported="no">LocallyActiveDataFillBoxSet.h</includes>
    <includes id="LocallyActiveDataRefinePatchStrategy_8h" name="LocallyActiveDataRefinePatchStrategy.h" local="yes" imported="no">LocallyActiveDataRefinePatchStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataRefineTransactionFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>LocallyActiveDataRefineTransactionFactory_8C</filename>
    <includes id="LocallyActiveDataRefineTransactionFactory_8h" name="LocallyActiveDataRefineTransactionFactory.h" local="yes" imported="no">LocallyActiveDataRefineTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>LocallyActiveDataRefineTransactionFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>LocallyActiveDataRefineTransactionFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="LocallyActiveDataPatchLevelManager_8h" name="LocallyActiveDataPatchLevelManager.h" local="yes" imported="no">LocallyActiveDataPatchLevelManager.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>StandardLocallyActiveDataCoarsenTransactionFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>StandardLocallyActiveDataCoarsenTransactionFactory_8C</filename>
    <includes id="StandardLocallyActiveDataCoarsenTransactionFactory_8h" name="StandardLocallyActiveDataCoarsenTransactionFactory.h" local="yes" imported="no">StandardLocallyActiveDataCoarsenTransactionFactory.h</includes>
    <includes id="CoarsenCopyTransaction_8h" name="CoarsenCopyTransaction.h" local="yes" imported="no">CoarsenCopyTransaction.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>StandardLocallyActiveDataCoarsenTransactionFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>StandardLocallyActiveDataCoarsenTransactionFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">CoarsenClasses.h</includes>
    <includes id="LocallyActiveDataCoarsenTransactionFactory_8h" name="LocallyActiveDataCoarsenTransactionFactory.h" local="yes" imported="no">LocallyActiveDataCoarsenTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>StandardLocallyActiveDataRefineTransactionFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>StandardLocallyActiveDataRefineTransactionFactory_8C</filename>
    <includes id="StandardLocallyActiveDataRefineTransactionFactory_8h" name="StandardLocallyActiveDataRefineTransactionFactory.h" local="yes" imported="no">StandardLocallyActiveDataRefineTransactionFactory.h</includes>
    <includes id="RefineCopyTransaction_8h" name="RefineCopyTransaction.h" local="yes" imported="no">RefineCopyTransaction.h</includes>
    <includes id="RefineTimeTransaction_8h" name="RefineTimeTransaction.h" local="yes" imported="no">RefineTimeTransaction.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>StandardLocallyActiveDataRefineTransactionFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/locally_active/</path>
    <filename>StandardLocallyActiveDataRefineTransactionFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <includes id="LocallyActiveDataRefineTransactionFactory_8h" name="LocallyActiveDataRefineTransactionFactory.h" local="yes" imported="no">LocallyActiveDataRefineTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenAlgorithm.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>CoarsenAlgorithm_8C</filename>
    <includes id="CoarsenAlgorithm_8h" name="CoarsenAlgorithm.h" local="yes" imported="no">CoarsenAlgorithm.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <includes id="StandardCoarsenTransactionFactory_8h" name="StandardCoarsenTransactionFactory.h" local="yes" imported="no">StandardCoarsenTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenAlgorithm.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>CoarsenAlgorithm_8h</filename>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">CoarsenClasses.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <includes id="CoarsenSchedule_8h" name="CoarsenSchedule.h" local="yes" imported="no">CoarsenSchedule.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenClasses.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>CoarsenClasses_8C</filename>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">CoarsenClasses.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenClasses.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>CoarsenClasses_8h</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>CoarsenClasses_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CoarsenCopyTransaction.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>CoarsenCopyTransaction_8C</filename>
    <includes id="CoarsenCopyTransaction_8h" name="CoarsenCopyTransaction.h" local="yes" imported="no">CoarsenCopyTransaction.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">CoarsenClasses.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenCopyTransaction.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>CoarsenCopyTransaction_8h</filename>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">CoarsenClasses.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenPatchStrategy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>CoarsenPatchStrategy_8C</filename>
    <includes id="CoarsenPatchStrategy_8h" name="CoarsenPatchStrategy.h" local="yes" imported="no">CoarsenPatchStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenPatchStrategy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>CoarsenPatchStrategy_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenSchedule.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>CoarsenSchedule_8C</filename>
    <includes id="CoarsenSchedule_8h" name="CoarsenSchedule.h" local="yes" imported="no">CoarsenSchedule.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="BoxGraph_8h" name="BoxGraph.h" local="yes" imported="no">BoxGraph.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="BoxTree_8h" name="BoxTree.h" local="yes" imported="no">BoxTree.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="ProcessorMapping_8h" name="ProcessorMapping.h" local="yes" imported="no">ProcessorMapping.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenSchedule.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>CoarsenSchedule_8h</filename>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">ComponentSelector.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="CoarsenPatchStrategy_8h" name="CoarsenPatchStrategy.h" local="yes" imported="no">CoarsenPatchStrategy.h</includes>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">RefineAlgorithm.h</includes>
    <includes id="CoarsenTransactionFactory_8h" name="CoarsenTransactionFactory.h" local="yes" imported="no">CoarsenTransactionFactory.h</includes>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">CoarsenClasses.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenTransactionFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>CoarsenTransactionFactory_8C</filename>
    <includes id="CoarsenTransactionFactory_8h" name="CoarsenTransactionFactory.h" local="yes" imported="no">CoarsenTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenTransactionFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>CoarsenTransactionFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">CoarsenClasses.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>FillBoxSet.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>FillBoxSet_8C</filename>
    <includes id="FillBoxSet_8h" name="FillBoxSet.h" local="yes" imported="no">FillBoxSet.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>FillBoxSet.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>FillBoxSet_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="FillBoxSet_8I" name="FillBoxSet.I" local="yes" imported="no">FillBoxSet.I</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>FillBoxSet.I</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>FillBoxSet_8I</filename>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineAlgorithm.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>RefineAlgorithm_8C</filename>
    <includes id="RefineAlgorithm_8h" name="RefineAlgorithm.h" local="yes" imported="no">RefineAlgorithm.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <includes id="StandardRefineTransactionFactory_8h" name="StandardRefineTransactionFactory.h" local="yes" imported="no">StandardRefineTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineAlgorithm.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>RefineAlgorithm_8h</filename>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">RefinePatchStrategy.h</includes>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">RefineSchedule.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>RefineAlgorithm_8h.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RefineClasses.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>RefineClasses_8C</filename>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchDataFactory_8h" name="PatchDataFactory.h" local="yes" imported="no">PatchDataFactory.h</includes>
    <includes id="PatchDescriptor_8h" name="PatchDescriptor.h" local="yes" imported="no">PatchDescriptor.h</includes>
    <includes id="VariableDatabase_8h" name="VariableDatabase.h" local="yes" imported="no">VariableDatabase.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineClasses.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>RefineClasses_8h</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineCopyTransaction.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>RefineCopyTransaction_8C</filename>
    <includes id="RefineCopyTransaction_8h" name="RefineCopyTransaction.h" local="yes" imported="no">RefineCopyTransaction.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>RefineCopyTransaction_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RefineCopyTransaction.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>RefineCopyTransaction_8h</filename>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefinePatchStrategy.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>RefinePatchStrategy_8C</filename>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">RefinePatchStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefinePatchStrategy.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>RefinePatchStrategy_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxArray_8h" name="BoxArray.h" local="yes" imported="no">BoxArray.h</includes>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineSchedule.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>RefineSchedule_8C</filename>
    <includes id="RefineSchedule_8h" name="RefineSchedule.h" local="yes" imported="no">RefineSchedule.h</includes>
    <includes id="BoxGeometry_8h" name="BoxGeometry.h" local="yes" imported="no">BoxGeometry.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="BoxTop_8h" name="BoxTop.h" local="yes" imported="no">BoxTop.h</includes>
    <includes id="BoxGraph_8h" name="BoxGraph.h" local="yes" imported="no">BoxGraph.h</includes>
    <includes id="BoxTree_8h" name="BoxTree.h" local="yes" imported="no">BoxTree.h</includes>
    <includes id="BoxUtilities_8h" name="BoxUtilities.h" local="yes" imported="no">BoxUtilities.h</includes>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">ComponentSelector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="PatchGeometry_8h" name="PatchGeometry.h" local="yes" imported="no">PatchGeometry.h</includes>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">RefinePatchStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>RefineSchedule_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BIG_GHOST_CELL_WIDTH</name>
      <anchorfile>RefineSchedule_8C.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RefineSchedule.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>RefineSchedule_8h</filename>
    <includes id="BoxList_8h" name="BoxList.h" local="yes" imported="no">BoxList.h</includes>
    <includes id="ComponentSelector_8h" name="ComponentSelector.h" local="yes" imported="no">ComponentSelector.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="PatchHierarchy_8h" name="PatchHierarchy.h" local="yes" imported="no">PatchHierarchy.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="FillBoxSet_8h" name="FillBoxSet.h" local="yes" imported="no">FillBoxSet.h</includes>
    <includes id="RefineTransactionFactory_8h" name="RefineTransactionFactory.h" local="yes" imported="no">RefineTransactionFactory.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <includes id="RefinePatchStrategy_8h" name="RefinePatchStrategy.h" local="yes" imported="no">RefinePatchStrategy.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineTimeTransaction.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>RefineTimeTransaction_8C</filename>
    <includes id="RefineTimeTransaction_8h" name="RefineTimeTransaction.h" local="yes" imported="no">RefineTimeTransaction.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>RefineTimeTransaction_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RefineTimeTransaction.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>RefineTimeTransaction_8h</filename>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineTransactionFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>RefineTransactionFactory_8C</filename>
    <includes id="RefineTransactionFactory_8h" name="RefineTransactionFactory.h" local="yes" imported="no">RefineTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineTransactionFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>RefineTransactionFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>StandardCoarsenTransactionFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>StandardCoarsenTransactionFactory_8C</filename>
    <includes id="StandardCoarsenTransactionFactory_8h" name="StandardCoarsenTransactionFactory.h" local="yes" imported="no">StandardCoarsenTransactionFactory.h</includes>
    <includes id="CoarsenCopyTransaction_8h" name="CoarsenCopyTransaction.h" local="yes" imported="no">CoarsenCopyTransaction.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>StandardCoarsenTransactionFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>StandardCoarsenTransactionFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="CoarsenClasses_8h" name="CoarsenClasses.h" local="yes" imported="no">CoarsenClasses.h</includes>
    <includes id="CoarsenTransactionFactory_8h" name="CoarsenTransactionFactory.h" local="yes" imported="no">CoarsenTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>StandardRefineTransactionFactory.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>StandardRefineTransactionFactory_8C</filename>
    <includes id="StandardRefineTransactionFactory_8h" name="StandardRefineTransactionFactory.h" local="yes" imported="no">StandardRefineTransactionFactory.h</includes>
    <includes id="RefineCopyTransaction_8h" name="RefineCopyTransaction.h" local="yes" imported="no">RefineCopyTransaction.h</includes>
    <includes id="RefineTimeTransaction_8h" name="RefineTimeTransaction.h" local="yes" imported="no">RefineTimeTransaction.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>StandardRefineTransactionFactory.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/datamovers/standard/</path>
    <filename>StandardRefineTransactionFactory_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="BoxOverlap_8h" name="BoxOverlap.h" local="yes" imported="no">BoxOverlap.h</includes>
    <includes id="PatchLevel_8h" name="PatchLevel.h" local="yes" imported="no">PatchLevel.h</includes>
    <includes id="RefineClasses_8h" name="RefineClasses.h" local="yes" imported="no">RefineClasses.h</includes>
    <includes id="RefineTransactionFactory_8h" name="RefineTransactionFactory.h" local="yes" imported="no">RefineTransactionFactory.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenOperator.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/operators/</path>
    <filename>CoarsenOperator_8C</filename>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>CoarsenOperator.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/operators/</path>
    <filename>CoarsenOperator_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>Geometry.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/operators/</path>
    <filename>Geometry_8C</filename>
    <includes id="Geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>Geometry_8C.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Geometry.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/operators/</path>
    <filename>Geometry_8h</filename>
    <includes id="GridGeometry_8h" name="GridGeometry.h" local="yes" imported="no">GridGeometry.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <includes id="CoarsenOperator_8h" name="CoarsenOperator.h" local="yes" imported="no">CoarsenOperator.h</includes>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineOperator.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/operators/</path>
    <filename>RefineOperator_8C</filename>
    <includes id="RefineOperator_8h" name="RefineOperator.h" local="yes" imported="no">RefineOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>RefineOperator.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/operators/</path>
    <filename>RefineOperator_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="IntVector_8h" name="IntVector.h" local="yes" imported="no">IntVector.h</includes>
    <includes id="Patch_8h" name="Patch.h" local="yes" imported="no">Patch.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>TimeInterpolateOperator.C</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/operators/</path>
    <filename>TimeInterpolateOperator_8C</filename>
    <includes id="TimeInterpolateOperator_8h" name="TimeInterpolateOperator.h" local="yes" imported="no">TimeInterpolateOperator.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="file">
    <name>TimeInterpolateOperator.h</name>
    <path>/home/sinha2/SAMRAI-2.1/SAMRAI/source/transfer/operators/</path>
    <filename>TimeInterpolateOperator_8h</filename>
    <includes id="Box_8h" name="Box.h" local="yes" imported="no">Box.h</includes>
    <includes id="PatchData_8h" name="PatchData.h" local="yes" imported="no">PatchData.h</includes>
    <includes id="Variable_8h" name="Variable.h" local="yes" imported="no">Variable.h</includes>
    <namespace>SAMRAI</namespace>
    <namespace>SAMRAI::xfer</namespace>
  </compound>
  <compound kind="struct">
    <name>arith_functions</name>
    <filename>structarith__functions.html</filename>
    <member kind="variable">
      <type>string</type>
      <name>d_name</name>
      <anchorfile>structarith__functions.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double(*</type>
      <name>d_r2r_func</name>
      <anchorfile>structarith__functions.html</anchorfile>
      <anchor>o1</anchor>
      <arglist>)(double)</arglist>
    </member>
    <member kind="variable">
      <type>dcomplex(*</type>
      <name>d_c2c_func</name>
      <anchorfile>structarith__functions.html</anchorfile>
      <anchor>o2</anchor>
      <arglist>)(const dcomplex &amp;)</arglist>
    </member>
    <member kind="variable">
      <type>double(*</type>
      <name>d_c2r_func</name>
      <anchorfile>structarith__functions.html</anchorfile>
      <anchor>o3</anchor>
      <arglist>)(const dcomplex &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>tbox::DescribedClass</name>
    <filename>classtbox_1_1DescribedClass.html</filename>
  </compound>
  <compound kind="class">
    <name>tbox::DescribedClass</name>
    <filename>classtbox_1_1DescribedClass.html</filename>
  </compound>
  <compound kind="class">
    <name>tbox::DescribedClass</name>
    <filename>classtbox_1_1DescribedClass.html</filename>
  </compound>
  <compound kind="class">
    <name>tbox::DescribedClass</name>
    <filename>classtbox_1_1DescribedClass.html</filename>
  </compound>
  <compound kind="struct">
    <name>KeyData</name>
    <filename>structKeyData.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>d_node_type</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_array_type</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_array_size</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KeyData *</type>
      <name>d_next</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>d_bool</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DatabaseBox</type>
      <name>d_box</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>d_char</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>dcomplex</type>
      <name>d_complex</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>d_double</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_integer</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>d_string</name>
      <anchorfile>structKeyData.html</anchorfile>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>XDR</name>
    <filename>structXDR.html</filename>
  </compound>
  <compound kind="struct">
    <name>yy_buffer_state</name>
    <filename>structyy__buffer__state.html</filename>
    <member kind="variable">
      <type>FILE *</type>
      <name>yy_input_file</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>yy_ch_buf</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>yy_buf_pos</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>yy_size_t</type>
      <name>yy_buf_size</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_n_chars</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_is_our_buffer</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_is_interactive</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_at_bol</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_fill_buffer</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_buffer_status</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>yyalloc</name>
    <filename>unionyyalloc.html</filename>
    <member kind="variable">
      <type>short</type>
      <name>yyss</name>
      <anchorfile>unionyyalloc.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>YYSTYPE</type>
      <name>yyvs</name>
      <anchorfile>unionyyalloc.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>YYSTYPE</name>
    <filename>unionYYSTYPE.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>u_char</name>
      <anchorfile>unionYYSTYPE.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>u_double</name>
      <anchorfile>unionYYSTYPE.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>u_integer</name>
      <anchorfile>unionYYSTYPE.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KeyData *</type>
      <name>u_keydata</name>
      <anchorfile>unionYYSTYPE.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string *</type>
      <name>u_keyword</name>
      <anchorfile>unionYYSTYPE.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string *</type>
      <name>u_string</name>
      <anchorfile>unionYYSTYPE.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KeyData *</type>
      <name>u_keydata</name>
      <anchorfile>unionYYSTYPE.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string *</type>
      <name>u_keyword</name>
      <anchorfile>unionYYSTYPE.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string *</type>
      <name>u_string</name>
      <anchorfile>unionYYSTYPE.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>package_toolbox_base</name>
    <title>Base Toolbox Classes</title>
    <filename>package_toolbox_base</filename>
  </compound>
  <compound kind="page">
    <name>package_toolbox_database</name>
    <title>Generic Database Support</title>
    <filename>package_toolbox_database</filename>
  </compound>
  <compound kind="page">
    <name>package_toolbox_inputdb</name>
    <title>Input Database</title>
    <filename>package_toolbox_inputdb</filename>
  </compound>
  <compound kind="page">
    <name>package_toolbox</name>
    <title>The Toolbox Package</title>
    <filename>package_toolbox</filename>
  </compound>
  <compound kind="page">
    <name>package_toolbox_memory</name>
    <title>Memory Support</title>
    <filename>package_toolbox_memory</filename>
  </compound>
  <compound kind="page">
    <name>package_toolbox_parallel</name>
    <title>Parallel Toolbox Classes</title>
    <filename>package_toolbox_parallel</filename>
  </compound>
  <compound kind="page">
    <name>package_toolbox_restartdb</name>
    <title>Restart Database</title>
    <filename>package_toolbox_restartdb</filename>
  </compound>
  <compound kind="page">
    <name>package_toolbox_stream</name>
    <title>Stream Toolbox Classes</title>
    <filename>package_toolbox_stream</filename>
  </compound>
  <compound kind="page">
    <name>package_toolbox_timers</name>
    <title>Timer Classes</title>
    <filename>package_toolbox_timers</filename>
  </compound>
  <compound kind="page">
    <name>package_hierarchy_boxes</name>
    <title>Box Calculus</title>
    <filename>package_hierarchy_boxes</filename>
  </compound>
  <compound kind="page">
    <name>package_hierarchy_dlbg</name>
    <title>Nearest neighbor data for mesh</title>
    <filename>package_hierarchy_dlbg</filename>
  </compound>
  <compound kind="page">
    <name>package_hierarchy</name>
    <title>The Hierarchy Package</title>
    <filename>package_hierarchy</filename>
  </compound>
  <compound kind="page">
    <name>package_hierarchy_patches</name>
    <title>AMR Patch Hierarchy Management</title>
    <filename>package_hierarchy_patches</filename>
  </compound>
  <compound kind="page">
    <name>package_hierarchy_variables</name>
    <title>AMR Patch Data and Variable Management</title>
    <filename>package_hierarchy_variables</filename>
  </compound>
  <compound kind="page">
    <name>package_transfer_datamovers_locallyactive</name>
    <title>Locally-Active Data Communication Classes</title>
    <filename>package_transfer_datamovers_locallyactive</filename>
  </compound>
  <compound kind="page">
    <name>package_transfer_datamovers</name>
    <title>Support for Moving Data on SAMR Meshes</title>
    <filename>package_transfer_datamovers</filename>
  </compound>
  <compound kind="page">
    <name>package_transfer_datamovers_standard</name>
    <title>Standard Data Communication Classes</title>
    <filename>package_transfer_datamovers_standard</filename>
  </compound>
  <compound kind="page">
    <name>package_transfer</name>
    <title>The Transfer Package</title>
    <filename>package_transfer</filename>
  </compound>
  <compound kind="page">
    <name>package_transfer_operators</name>
    <title>Patch Data Transfer Operators</title>
    <filename>package_transfer_operators</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_array</name>
    <title>Array-based Patch Data Support</title>
    <filename>package_patchdata_array</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_boxgeometry</name>
    <title>Box Geometry Computation</title>
    <filename>package_patchdata_boxgeometry</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_cell</name>
    <title>Cell Patch Data</title>
    <filename>package_patchdata_cell</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_edge</name>
    <title>Edge Patch Data</title>
    <filename>package_patchdata_edge</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_face</name>
    <title>Face Patch Data</title>
    <filename>package_patchdata_face</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_fortran</name>
    <title>Support for Patch Data Numerical Routines in FORTRAN</title>
    <filename>package_patchdata_fortran</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_index</name>
    <title>Index Patch Data</title>
    <filename>package_patchdata_index</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata</name>
    <title>The Patchdata Package</title>
    <filename>package_patchdata</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_node</name>
    <title>Node Patch Data</title>
    <filename>package_patchdata_node</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_operators_constant_cell</name>
    <title>Cell Data Constant Operators</title>
    <filename>package_patchdata_operators_constant_cell</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_generic_ops_constant_fortran</name>
    <title>Constant Transfer Operator Numerical Routines</title>
    <filename>package_patchdata_generic_ops_constant_fortran</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_operators_constant_outernode</name>
    <title>Outernode Data Constant Operators</title>
    <filename>package_patchdata_operators_constant_outernode</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_operators</name>
    <title>Mesh-Independent operators</title>
    <filename>package_patchdata_operators</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_operators_time_interpolate_cell</name>
    <title>Time Interpolation Operators for Cell Data</title>
    <filename>package_patchdata_operators_time_interpolate_cell</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_operators_time_interpolate_fortran</name>
    <title>Time Interpolation Numerical Routines</title>
    <filename>package_patchdata_operators_time_interpolate_fortran</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_operators_time_interpolate</name>
    <title>Time Interpolation Operators</title>
    <filename>package_patchdata_operators_time_interpolate</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_outeredge</name>
    <title>Outeredge Patch Data</title>
    <filename>package_patchdata_outeredge</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_outerface</name>
    <title>Outerface Patch Data</title>
    <filename>package_patchdata_outerface</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_outernode</name>
    <title>Outernode Patch Data</title>
    <filename>package_patchdata_outernode</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_outerside</name>
    <title>Outerside Patch Data</title>
    <filename>package_patchdata_outerside</filename>
  </compound>
  <compound kind="page">
    <name>package_patchdata_side</name>
    <title>Side Patch Data</title>
    <filename>package_patchdata_side</filename>
  </compound>
  <compound kind="page">
    <name>package_mathops_array</name>
    <title>Basic Array Data Operations</title>
    <filename>package_mathops_array</filename>
  </compound>
  <compound kind="page">
    <name>package_mathops_cell</name>
    <title>Cell Patch Data Operations</title>
    <filename>package_mathops_cell</filename>
  </compound>
  <compound kind="page">
    <name>package_mathops_hierarchy</name>
    <title>Hierarchy Data Operation Base Classes</title>
    <filename>package_mathops_hierarchy</filename>
  </compound>
  <compound kind="page">
    <name>package_mathematical_operations</name>
    <title>Mathematical Operations Package</title>
    <filename>package_mathematical_operations</filename>
  </compound>
  <compound kind="page">
    <name>package_mesh_clustering</name>
    <title>Box Generation</title>
    <filename>package_mesh_clustering</filename>
  </compound>
  <compound kind="page">
    <name>package_mesh_gridding</name>
    <title>Patch Hierarchy Construction and Adaptive Meshing</title>
    <filename>package_mesh_gridding</filename>
  </compound>
  <compound kind="page">
    <name>package_mesh_load_balance</name>
    <title>Load Balancing</title>
    <filename>package_mesh_load_balance</filename>
  </compound>
  <compound kind="page">
    <name>package_mesh</name>
    <title>The Mesh Package</title>
    <filename>package_mesh</filename>
  </compound>
  <compound kind="page">
    <name>package_multiblock</name>
    <title>The Multiblock Package</title>
    <filename>package_multiblock</filename>
  </compound>
  <compound kind="page">
    <name>package_geometry_cartesian_grid_geom</name>
    <title>Cartesian Grid Geometry</title>
    <filename>package_geometry_cartesian_grid_geom</filename>
  </compound>
  <compound kind="page">
    <name>package_geometry_cartesian</name>
    <title>Basic Cartesian Mesh Geometry Support</title>
    <filename>package_geometry_cartesian</filename>
  </compound>
  <compound kind="page">
    <name>package_geometry_cartesian_operators_cell</name>
    <title>Cell Data Operators</title>
    <filename>package_geometry_cartesian_operators_cell</filename>
  </compound>
  <compound kind="page">
    <name>package_geometry_cartesian_operators_fortran</name>
    <title>Cartesian Transfer Operator Numerical Routines</title>
    <filename>package_geometry_cartesian_operators_fortran</filename>
  </compound>
  <compound kind="page">
    <name>package_geometry_cartesian_patch_geom</name>
    <title>Cartesian Patch Geometry</title>
    <filename>package_geometry_cartesian_patch_geom</filename>
  </compound>
  <compound kind="page">
    <name>package_geometry</name>
    <title>The Geometry Package</title>
    <filename>package_geometry</filename>
  </compound>
  <compound kind="page">
    <name>package_geometry_skeleton_grid_geom</name>
    <title>Skeleton Grid Geometry</title>
    <filename>package_geometry_skeleton_grid_geom</filename>
  </compound>
  <compound kind="page">
    <name>package_geometry_skeleton</name>
    <title>Skeleton Geometry Support</title>
    <filename>package_geometry_skeleton</filename>
  </compound>
  <compound kind="page">
    <name>package_geometry_skeleton_operators</name>
    <title>Skeleton Operators</title>
    <filename>package_geometry_skeleton_operators</filename>
  </compound>
  <compound kind="page">
    <name>package_geometry_skeleton_patch_geom</name>
    <title>Skeleton Patch Geometry</title>
    <filename>package_geometry_skeleton_patch_geom</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_FAC</name>
    <title>FAC preconditioner on a SAMRAI hierarchy</title>
    <filename>package_solvers_FAC</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers</name>
    <title>The Solver Package</title>
    <filename>package_solvers</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_nonlinear</name>
    <title>Nonlinear solver</title>
    <filename>package_solvers_nonlinear</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_packages</name>
    <title>Interfaces to Solver Libraries</title>
    <filename>package_solvers_packages</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_packages_petsc</name>
    <title>PETSc Vector Interface</title>
    <filename>package_solvers_packages_petsc</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_packages_pvode_trio_kinsol</name>
    <title>KINSOL Vector and Nonlinear Solver Interface</title>
    <filename>package_solvers_packages_pvode_trio_kinsol</filename>
  </compound>
  <compound kind="page">
    <name>package::solvers::packages::pvode::trio::kinsol::wrapper</name>
    <title>KINSOL Nonlinear Algebraic Equation Solver C++ Wrapper</title>
    <filename>package::solvers::packages::pvode::trio::kinsol::wrapper</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_packages_pvode_trio</name>
    <title>Interfaces for the PVode Trio of Solvers</title>
    <filename>package_solvers_packages_pvode_trio</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_packages_pvode_trio_pvode</name>
    <title>PVODE ODE solver interface</title>
    <filename>package_solvers_packages_pvode_trio_pvode</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_packages_pvode_trio_pvode_wrapper</name>
    <title>PVODE ODE System Solver C++ Wrapper</title>
    <filename>package_solvers_packages_pvode_trio_pvode_wrapper</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_packages_pvode_trio_vector</name>
    <title>PVode Trio Vector Interface</title>
    <filename>package_solvers_packages_pvode_trio_vector</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_poisson</name>
    <title>Poisson solvers on a SAMRAI hierarchy</title>
    <filename>package_solvers_poisson</filename>
  </compound>
  <compound kind="page">
    <name>package_solvers_vectors</name>
    <title>SAMRAI Vector Facilities</title>
    <filename>package_solvers_vectors</filename>
  </compound>
  <compound kind="page">
    <name>package_algorithm_femutils_locallyactive</name>
    <title>Locally-active Data Summation Operations</title>
    <filename>package_algorithm_femutils_locallyactive</filename>
  </compound>
  <compound kind="page">
    <name>package_algorithm_femutils</name>
    <title>Rudimentary Support for Finite Element Operations on SAMR Meshes</title>
    <filename>package_algorithm_femutils</filename>
  </compound>
  <compound kind="page">
    <name>package_algorithm_femutils_standard</name>
    <title>Standard Data Summation Operations</title>
    <filename>package_algorithm_femutils_standard</filename>
  </compound>
  <compound kind="page">
    <name>package_algorithm_hyperbolic</name>
    <title>Hyperbolic Conservation Law Integration</title>
    <filename>package_algorithm_hyperbolic</filename>
  </compound>
  <compound kind="page">
    <name>package_algorithm_implicit</name>
    <title>Implicit time-marching algorithms</title>
    <filename>package_algorithm_implicit</filename>
  </compound>
  <compound kind="page">
    <name>package_algorithm</name>
    <title>The Algorithm Package</title>
    <filename>package_algorithm</filename>
  </compound>
  <compound kind="page">
    <name>package_algorithm_method_of_lines</name>
    <title>Time Integration with Method of Lines</title>
    <filename>package_algorithm_method_of_lines</filename>
  </compound>
  <compound kind="page">
    <name>package_algorithm_time_refinement</name>
    <title>Time Integration with Local Time Refinement</title>
    <filename>package_algorithm_time_refinement</filename>
  </compound>
  <compound kind="page">
    <name>package_apputils_boundary</name>
    <title>Support for physical boundary conditions</title>
    <filename>package_apputils_boundary</filename>
  </compound>
  <compound kind="page">
    <name>package_embedded_boundary</name>
    <title>Support for Embedded Boundary construction</title>
    <filename>package_embedded_boundary</filename>
  </compound>
  <compound kind="page">
    <name>package_apputils</name>
    <title>The Application Utilities Package</title>
    <filename>package_apputils</filename>
  </compound>
  <compound kind="page">
    <name>package_apputils_plotting</name>
    <title>Visualization Data File Generation</title>
    <filename>package_apputils_plotting</filename>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI</name>
    <filename>namespaceSAMRAI.html</filename>
    <namespace>SAMRAI::tbox</namespace>
    <namespace>SAMRAI::hier</namespace>
    <namespace>SAMRAI::xfer</namespace>
    <namespace>SAMRAI::pdat</namespace>
    <namespace>SAMRAI::math</namespace>
    <namespace>SAMRAI::mesh</namespace>
    <namespace>SAMRAI::mblk</namespace>
    <namespace>SAMRAI::geom</namespace>
    <namespace>SAMRAI::solv</namespace>
    <namespace>SAMRAI::algs</namespace>
    <namespace>SAMRAI::appu</namespace>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::algs</name>
    <filename>namespaceSAMRAI_1_1algs.html</filename>
    <class kind="class">SAMRAI::algs::LocallyActiveDataOuteredgeSumTransactionFactory</class>
    <class kind="class">SAMRAI::algs::LocallyActiveDataOuternodeSumTransactionFactory</class>
    <class kind="class">SAMRAI::algs::LocallyActiveDataPatchBoundaryEdgeSum</class>
    <class kind="class">SAMRAI::algs::LocallyActiveDataPatchBoundaryNodeSum</class>
    <class kind="class">SAMRAI::algs::OuteredgeSumTransaction</class>
    <class kind="class">SAMRAI::algs::OuteredgeSumTransactionFactory</class>
    <class kind="class">SAMRAI::algs::OuternodeSumTransaction</class>
    <class kind="class">SAMRAI::algs::OuternodeSumTransactionFactory</class>
    <class kind="class">SAMRAI::algs::PatchBoundaryEdgeSum</class>
    <class kind="class">SAMRAI::algs::PatchBoundaryNodeSum</class>
    <class kind="class">SAMRAI::algs::HyperbolicLevelIntegrator</class>
    <class kind="class">SAMRAI::algs::HyperbolicPatchStrategy</class>
    <class kind="class">SAMRAI::algs::ImplicitEquationStrategy</class>
    <class kind="class">SAMRAI::algs::ImplicitIntegrator</class>
    <class kind="class">SAMRAI::algs::MethodOfLinesIntegrator</class>
    <class kind="class">SAMRAI::algs::MethodOfLinesPatchStrategy</class>
    <class kind="class">SAMRAI::algs::TimeRefinementIntegrator</class>
    <class kind="class">SAMRAI::algs::TimeRefinementLevelStrategy</class>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::LocallyActiveDataOuteredgeSumTransactionFactory</name>
    <filename>classSAMRAI_1_1algs_1_1LocallyActiveDataOuteredgeSumTransactionFactory.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::LocallyActiveDataRefineTransactionFactory</base>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataOuteredgeSumTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataOuteredgeSumTransactionFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocallyActiveDataOuteredgeSumTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataOuteredgeSumTransactionFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefineItems</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataOuteredgeSumTransactionFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const typename xfer::RefineClasses&lt; DIM &gt;::Data **refine_items, int num_refine_items)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetRefineItems</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataOuteredgeSumTransactionFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataOuteredgeSumTransactionFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt; overlap, int dst_patch_id, int src_patch_id, int ritem_id, const hier::Box&lt; DIM &gt; &amp;box=hier::Box&lt; DIM &gt;(), bool use_time_interpolation=false, tbox::Pointer&lt; tbox::Arena &gt; pool=(tbox::Arena *)(0)) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocessScratchSpace</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataOuteredgeSumTransactionFactory.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, double fill_time, const hier::LocallyActiveDataPatchLevelManager&lt; DIM &gt; &amp;preprocess_mgr) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::LocallyActiveDataOuternodeSumTransactionFactory</name>
    <filename>classSAMRAI_1_1algs_1_1LocallyActiveDataOuternodeSumTransactionFactory.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::LocallyActiveDataRefineTransactionFactory</base>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataOuternodeSumTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataOuternodeSumTransactionFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocallyActiveDataOuternodeSumTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataOuternodeSumTransactionFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefineItems</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataOuternodeSumTransactionFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const typename xfer::RefineClasses&lt; DIM &gt;::Data **refine_items, int num_refine_items)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetRefineItems</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataOuternodeSumTransactionFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataOuternodeSumTransactionFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt; overlap, int dst_patch_id, int src_patch_id, int ritem_id, const hier::Box&lt; DIM &gt; &amp;box=hier::Box&lt; DIM &gt;(), bool use_time_interpolation=false, tbox::Pointer&lt; tbox::Arena &gt; pool=(tbox::Arena *)(0)) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocessScratchSpace</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataOuternodeSumTransactionFactory.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, double fill_time, const hier::LocallyActiveDataPatchLevelManager&lt; DIM &gt; &amp;preprocess_mgr) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::LocallyActiveDataPatchBoundaryEdgeSum</name>
    <filename>classSAMRAI_1_1algs_1_1LocallyActiveDataPatchBoundaryEdgeSum.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataPatchBoundaryEdgeSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataPatchBoundaryEdgeSum.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocallyActiveDataPatchBoundaryEdgeSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataPatchBoundaryEdgeSum.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataPatchBoundaryEdgeSum.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int edge_data_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataPatchBoundaryEdgeSum.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, tbox::Pointer&lt; hier::LocallyActiveDataPatchLevelManager&lt; DIM &gt; &gt; level_mgr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataPatchBoundaryEdgeSum.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::LocallyActiveDataPatchBoundaryNodeSum</name>
    <filename>classSAMRAI_1_1algs_1_1LocallyActiveDataPatchBoundaryNodeSum.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataPatchBoundaryNodeSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataPatchBoundaryNodeSum.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocallyActiveDataPatchBoundaryNodeSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataPatchBoundaryNodeSum.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataPatchBoundaryNodeSum.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int node_data_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataPatchBoundaryNodeSum.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, tbox::Pointer&lt; hier::LocallyActiveDataPatchLevelManager&lt; DIM &gt; &gt; level_mgr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataPatchBoundaryNodeSum.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1LocallyActiveDataPatchBoundaryNodeSum.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const bool fill_hanging_nodes=false) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::OuteredgeSumTransaction</name>
    <filename>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::tbox::Transaction</base>
    <member kind="function">
      <type></type>
      <name>OuteredgeSumTransaction</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt; overlap, int dst_patch, int src_patch, int refine_item_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuteredgeSumTransaction</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>computeIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>computeOutgoingMessageSize</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSourceProcessor</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDestinationProcessor</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::AbstractStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(tbox::AbstractStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyLocalData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setRefineItems</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const typename xfer::RefineClasses&lt; DIM &gt;::Data **refine_items, int num_refine_items)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unsetRefineItems</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransaction.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::OuteredgeSumTransactionFactory</name>
    <filename>classSAMRAI_1_1algs_1_1OuteredgeSumTransactionFactory.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineTransactionFactory</base>
    <member kind="function">
      <type></type>
      <name>OuteredgeSumTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransactionFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuteredgeSumTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransactionFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefineItems</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransactionFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const typename xfer::RefineClasses&lt; DIM &gt;::Data **refine_items, int num_refine_items)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetRefineItems</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransactionFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransactionFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt; overlap, int dst_patch_id, int src_patch_id, int ritem_id, const hier::Box&lt; DIM &gt; &amp;box=hier::Box&lt; DIM &gt;(), bool use_time_interpolation=false, tbox::Pointer&lt; tbox::Arena &gt; pool=(tbox::Arena *)(0)) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocessScratchSpace</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuteredgeSumTransactionFactory.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, double fill_time, const hier::ComponentSelector &amp;preprocess_vector) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::OuternodeSumTransaction</name>
    <filename>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::tbox::Transaction</base>
    <member kind="function">
      <type></type>
      <name>OuternodeSumTransaction</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt; overlap, int dst_patch, int src_patch, int refine_item_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuternodeSumTransaction</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>computeIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>computeOutgoingMessageSize</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSourceProcessor</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDestinationProcessor</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::AbstractStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(tbox::AbstractStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyLocalData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setRefineItems</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const typename xfer::RefineClasses&lt; DIM &gt;::Data **refine_items, int num_refine_items)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unsetRefineItems</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransaction.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::OuternodeSumTransactionFactory</name>
    <filename>classSAMRAI_1_1algs_1_1OuternodeSumTransactionFactory.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineTransactionFactory</base>
    <member kind="function">
      <type></type>
      <name>OuternodeSumTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransactionFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuternodeSumTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransactionFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefineItems</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransactionFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const typename xfer::RefineClasses&lt; DIM &gt;::Data **refine_items, int num_refine_items)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetRefineItems</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransactionFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransactionFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt; overlap, int dst_patch_id, int src_patch_id, int ritem_id, const hier::Box&lt; DIM &gt; &amp;box=hier::Box&lt; DIM &gt;(), bool use_time_interpolation=false, tbox::Pointer&lt; tbox::Arena &gt; pool=(tbox::Arena *)(0)) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocessScratchSpace</name>
      <anchorfile>classSAMRAI_1_1algs_1_1OuternodeSumTransactionFactory.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, double fill_time, const hier::ComponentSelector &amp;preprocess_vector) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::PatchBoundaryEdgeSum</name>
    <filename>classSAMRAI_1_1algs_1_1PatchBoundaryEdgeSum.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>PatchBoundaryEdgeSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryEdgeSum.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PatchBoundaryEdgeSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryEdgeSum.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryEdgeSum.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int edge_data_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryEdgeSum.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryEdgeSum.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::PatchBoundaryNodeSum</name>
    <filename>classSAMRAI_1_1algs_1_1PatchBoundaryNodeSum.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>PatchBoundaryNodeSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryNodeSum.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PatchBoundaryNodeSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryNodeSum.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryNodeSum.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int node_data_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryNodeSum.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryNodeSum.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSum</name>
      <anchorfile>classSAMRAI_1_1algs_1_1PatchBoundaryNodeSum.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const bool fill_hanging_nodes=false) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::HyperbolicLevelIntegrator</name>
    <filename>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::algs::TimeRefinementLevelStrategy</base>
    <base>SAMRAI::mesh::StandardTagAndInitStrategy</base>
    <base>SAMRAI::tbox::Serializable</base>
    <member kind="enumeration">
      <name>HYP_VAR_TYPE</name>
      <anchor>w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIME_DEP</name>
      <anchor>w5w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INPUT</name>
      <anchor>w5w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_FILL</name>
      <anchor>w5w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLUX</name>
      <anchor>w5w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TEMPORARY</name>
      <anchor>w5w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HyperbolicLevelIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, tbox::Pointer&lt; tbox::Database &gt; input_db, HyperbolicPatchStrategy&lt; DIM &gt; *patch_strategy, bool register_for_restart=true, bool use_time_refinement=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HyperbolicLevelIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeLevelIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; mesh::BaseGriddingAlgorithm&lt; DIM &gt; &gt; base_gridding_alg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLevelDt</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt; level, const double dt_time, const bool initial_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxFinerLevelDt</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int finer_level_number, const double coarse_dt, const hier::IntVector&lt; DIM &gt; &amp;ratio_to_coarser)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>advanceLevel</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt; level, const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const double current_time, const double new_time, const bool first_step, const bool last_step, const bool regrid_advance=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>standardLevelSynchronization</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level, const int finest_level, const double sync_time, const tbox::Array&lt; double &gt; &amp;old_times)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>standardLevelSynchronization</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level, const int finest_level, const double sync_time, const double old_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>synchronizeNewLevels</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level, const int finest_level, const double sync_time, const bool initial_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetTimeDependentData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt; level, const double new_time, const bool can_be_refined)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetDataToPreadvanceState</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt; level)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeLevelData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int level_number, const double init_data_time, const bool can_be_refined, const bool initial_time, const tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt; old_level=tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt;((0)), const bool allocate_data=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetHierarchyConfiguration</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyGradientDetector</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int level_number, const double error_data_time, const int tag_index, const bool initial_time, const bool uses_richardson_extrapolation_too)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyRichardsonExtrapolation</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, const double error_data_time, const int tag_index, const double deltat, const int error_coarsen_ratio, const bool initial_time, const bool uses_gradient_detector_too)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>coarsenDataForRichardsonExtrapolation</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int level_number, const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; coarse_level, const double coarsen_data_time, const bool before_advance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerVariable</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; var, const hier::IntVector&lt; DIM &gt; ghosts, const HYP_VAR_TYPE h_v_type, const tbox::Pointer&lt; xfer::Geometry&lt; DIM &gt; &gt; transfer_geom, const string &amp;coarsen_name=string(), const string &amp;refine_name=string())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; db)</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::VariableContext &gt;</type>
      <name>getCurrentContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::VariableContext &gt;</type>
      <name>getNewContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::VariableContext &gt;</type>
      <name>getOldContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::VariableContext &gt;</type>
      <name>getScratchContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::VariableContext &gt;</type>
      <name>getPlotContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usingRefinedTimestepping</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getFromInput</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; db, bool is_from_restart)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessFluxData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, const double cur_time, const double new_time, const bool regrid_advance, const bool first_step, const bool last_step)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessFluxData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, const bool regrid_advance, const bool first_step, const bool last_step)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>copyTimeDependentData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, const tbox::Pointer&lt; hier::VariableContext &gt; src_context, const tbox::Pointer&lt; hier::VariableContext &gt; dst_context)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>synchronizeLevelWithCoarser</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicLevelIntegrator.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; fine, const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; coarse, const double sync_time, const double coarse_sim_time)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::HyperbolicPatchStrategy</name>
    <filename>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefinePatchStrategy</base>
    <base>SAMRAI::xfer::CoarsenPatchStrategy</base>
    <member kind="function">
      <type></type>
      <name>HyperbolicPatchStrategy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HyperbolicPatchStrategy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>registerModelVariables</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(HyperbolicLevelIntegrator&lt; DIM &gt; *integrator)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setupLoadBalancer</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(HyperbolicLevelIntegrator&lt; DIM &gt; *integrator, mesh::GriddingAlgorithm&lt; DIM &gt; *gridding_algorithm)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeDataOnPatch</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const double data_time, const bool initial_time)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>computeStableDtOnPatch</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const bool initial_time, const double dt_time)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeFluxesOnPatch</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const double time, const double dt)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>conservativeDifferenceOnPatch</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const double time, const double dt, bool at_syncronization)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessAdvanceLevelState</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; &amp;level, double current_time, double dt, bool first_step, bool last_step, bool regrid_advance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessAdvanceLevelState</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; &amp;level, double current_time, double dt, bool first_step, bool last_step, bool regrid_advance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tagGradientDetectorCells</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const double regrid_time, const bool initial_error, const int tag_index, const bool uses_richardson_extrapolation_too)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tagRichardsonExtrapolationCells</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const int error_level_number, const tbox::Pointer&lt; hier::VariableContext &gt; coarsened_fine, const tbox::Pointer&lt; hier::VariableContext &gt; advanced_coarse, const double regrid_time, const double deltat, const int error_coarsen_ratio, const bool initial_error, const int tag_index, const bool uses_gradient_detector_too)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPhysicalBoundaryConditions</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const double fill_time, const hier::IntVector&lt; DIM &gt; &amp;ghost_width_to_fill)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual hier::IntVector&lt; DIM &gt;</type>
      <name>getRefineOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessRefine</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessRefine</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual hier::IntVector&lt; DIM &gt;</type>
      <name>getCoarsenOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessCoarsen</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessCoarsen</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::VariableContext &gt;</type>
      <name>getDataContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(tbox::Pointer&lt; hier::VariableContext &gt; context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearDataContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1HyperbolicPatchStrategy.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::ImplicitEquationStrategy</name>
    <filename>classSAMRAI_1_1algs_1_1ImplicitEquationStrategy.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>ImplicitEquationStrategy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitEquationStrategy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImplicitEquationStrategy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitEquationStrategy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setupSolutionVector</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitEquationStrategy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; solv::SAMRAIVectorReal&lt; DIM, double &gt; &gt; solution)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getInitialDt</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitEquationStrategy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getNextDt</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitEquationStrategy.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const bool good_solution, const int solver_retcode)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setInitialGuess</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitEquationStrategy.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const bool first_step, const double current_time, const double current_dt, const double old_dt)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>checkNewSolution</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitEquationStrategy.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int solver_retcode)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateSolution</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitEquationStrategy.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const double new_time)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::ImplicitIntegrator</name>
    <filename>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::tbox::Serializable</base>
    <member kind="function">
      <type></type>
      <name>ImplicitIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, tbox::Pointer&lt; tbox::Database &gt; input_db, ImplicitEquationStrategy&lt; DIM &gt; *implicit_equations, solv::NonlinearSolverStrategy&lt; DIM &gt; *nonlinear_solver, const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImplicitIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advanceSolution</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const double dt, const bool first_step)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNextDt</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const bool good_solution, const int solver_retcode)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkNewSolution</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int solver_retcode) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>updateSolution</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getInitialTime</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFinalTime</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCurrentTime</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCurrentDt</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntegratorStep</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxIntegratorSteps</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stepsRemaining</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1algs_1_1ImplicitIntegrator.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; db)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::MethodOfLinesIntegrator</name>
    <filename>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::tbox::Serializable</base>
    <base>SAMRAI::mesh::StandardTagAndInitStrategy</base>
    <member kind="enumeration">
      <name>MOL_VAR_TYPE</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOLN</name>
      <anchor>w2w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RHS</name>
      <anchor>w2w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MethodOfLinesIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, tbox::Pointer&lt; tbox::Database &gt; input_db, MethodOfLinesPatchStrategy&lt; DIM &gt; *patch_strategy, bool register_for_restart=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MethodOfLinesIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; mesh::GriddingAlgorithm&lt; DIM &gt; &gt; gridding_alg)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTimestep</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const double time) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceHierarchy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const double time, const double dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerVariable</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; variable, const hier::IntVector&lt; DIM &gt; &amp;ghosts, const MOL_VAR_TYPE m_v_type, const tbox::Pointer&lt; xfer::Geometry&lt; DIM &gt; &gt; &amp;transfer_geom, const string &amp;coarsen_name=string(), const string &amp;refine_name=string())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeLevelData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int level_number, const double init_time, const bool can_be_refined, const bool initial_time, const tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt; old_level=tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt;((0)), const bool allocate_data=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetHierarchyConfiguration</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyGradientDetector</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int level_number, const double time, const int tag_index, const bool initial_time, const bool uses_richardson_extrapolation_too)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesIntegrator.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; db)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::MethodOfLinesPatchStrategy</name>
    <filename>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefinePatchStrategy</base>
    <base>SAMRAI::xfer::CoarsenPatchStrategy</base>
    <member kind="function">
      <type></type>
      <name>MethodOfLinesPatchStrategy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~MethodOfLinesPatchStrategy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>registerModelVariables</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(MethodOfLinesIntegrator&lt; DIM &gt; *integrator)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeDataOnPatch</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const double time, const bool initial_time) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>computeStableDtOnPatch</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const double time) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>singleStep</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const double dt, const double alpha_1, const double alpha_2, const double beta) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tagGradientDetectorCells</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const double regrid_time, const bool initial_error, const int tag_index, const bool uses_richardson_extrapolation_too)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPhysicalBoundaryConditions</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const double fill_time, const hier::IntVector&lt; DIM &gt; &amp;ghost_width_to_fill)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual hier::IntVector&lt; DIM &gt;</type>
      <name>getRefineOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessRefine</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessRefine</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual hier::IntVector&lt; DIM &gt;</type>
      <name>getCoarsenOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessCoarsen</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessCoarsen</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::VariableContext &gt;</type>
      <name>getInteriorWithGhostsContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::VariableContext &gt;</type>
      <name>getInteriorContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInteriorWithGhostsContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(tbox::Pointer&lt; hier::VariableContext &gt; context)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInteriorContext</name>
      <anchorfile>classSAMRAI_1_1algs_1_1MethodOfLinesPatchStrategy.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(tbox::Pointer&lt; hier::VariableContext &gt; context)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::TimeRefinementIntegrator</name>
    <filename>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::tbox::Serializable</base>
    <member kind="function">
      <type></type>
      <name>TimeRefinementIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, tbox::Pointer&lt; tbox::Database &gt; input_db, tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, TimeRefinementLevelStrategy&lt; DIM &gt; *level_integrator, tbox::Pointer&lt; mesh::BaseGriddingAlgorithm&lt; DIM &gt; &gt; gridding_algorithm, bool register_for_restart=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TimeRefinementIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>initializeHierarchy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>advanceHierarchy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const double dt, const bool rebalance_coarsest=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>atRegridPoint</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getIntegratorTime</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStartTime</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEndTime</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIntegratorStep</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxIntegratorSteps</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stepsRemaining</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stepsRemaining</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLevelDtActual</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLevelDtMax</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLevelSimTime</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLevelStep</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLevelMaxSteps</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; TimeRefinementLevelStrategy&lt; DIM &gt; &gt;</type>
      <name>getLevelIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; mesh::BaseGriddingAlgorithm&lt; DIM &gt; &gt;</type>
      <name>getGriddingAlgorithm</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstLevelStep</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lastLevelStep</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRegridInterval</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int regrid_interval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDataForLevel</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(ostream &amp;os, const int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementIntegrator.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; db)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::algs::TimeRefinementLevelStrategy</name>
    <filename>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>TimeRefinementLevelStrategy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeRefinementLevelStrategy</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeLevelIntegrator</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; mesh::BaseGriddingAlgorithm&lt; DIM &gt; &gt; gridding_alg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getLevelDt</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt; level, const double dt_time, const bool initial_time)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMaxFinerLevelDt</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int finer_level_number, const double coarse_dt, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>advanceLevel</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt; level, const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const double current_time, const double new_time, const bool first_step, const bool last_step, const bool regrid_advance=false)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>standardLevelSynchronization</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level, const int finest_level, const double sync_time, const tbox::Array&lt; double &gt; &amp;old_times)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>standardLevelSynchronization</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level, const int finest_level, const double sync_time, const double old_time)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>synchronizeNewLevels</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level, const int finest_level, const double sync_time, const bool initial_time)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetTimeDependentData</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt; level, const double new_time, const bool can_be_refined)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetDataToPreadvanceState</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt; level)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>usingRefinedTimestepping</name>
      <anchorfile>classSAMRAI_1_1algs_1_1TimeRefinementLevelStrategy.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::appu</name>
    <filename>namespaceSAMRAI_1_1appu.html</filename>
    <class kind="class">SAMRAI::appu::BoundaryUtilityStrategy</class>
    <class kind="class">SAMRAI::appu::BoundaryNode</class>
    <class kind="class">SAMRAI::appu::CutCell</class>
    <class kind="class">SAMRAI::appu::EmbeddedBoundaryDefines</class>
    <class kind="class">SAMRAI::appu::EmbeddedBoundaryGeometry</class>
    <class kind="class">SAMRAI::appu::EmbeddedBoundaryShape</class>
    <class kind="class">SAMRAI::appu::EmbeddedBoundaryShapePolygon</class>
    <class kind="class">SAMRAI::appu::EmbeddedBoundaryShapeSphere</class>
    <class kind="class">SAMRAI::appu::CartesianVizamraiDataWriter</class>
    <class kind="class">SAMRAI::appu::VisDerivedDataStrategy</class>
    <class kind="class">SAMRAI::appu::VisItDataWriter</class>
    <class kind="class">SAMRAI::appu::VisMaterialsDataStrategy</class>
    <class kind="struct">SAMRAI::appu::CartesianBoundaryUtilities2</class>
    <class kind="struct">SAMRAI::appu::CartesianBoundaryUtilities3</class>
  </compound>
  <compound kind="class">
    <name>SAMRAI::appu::BoundaryUtilityStrategy</name>
    <filename>classSAMRAI_1_1appu_1_1BoundaryUtilityStrategy.html</filename>
    <member kind="function">
      <type></type>
      <name>BoundaryUtilityStrategy</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryUtilityStrategy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoundaryUtilityStrategy</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryUtilityStrategy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readDirichletBoundaryDataEntry</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryUtilityStrategy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; db, string &amp;db_name, int bdry_location_index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readNeumannBoundaryDataEntry</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryUtilityStrategy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; db, string &amp;db_name, int bdry_location_index)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::appu::BoundaryNode</name>
    <filename>classSAMRAI_1_1appu_1_1BoundaryNode.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>BoundaryNode</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundaryNode</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const pdat::NodeIndex&lt; DIM &gt; &amp;in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundaryNode</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const appu::BoundaryNode&lt; DIM &gt; &amp;bdry_node)</arglist>
    </member>
    <member kind="function">
      <type>BoundaryNode &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const appu::BoundaryNode&lt; DIM &gt; &amp;bdry_node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoundaryNode</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>pdat::NodeIndex&lt; DIM &gt;</type>
      <name>getIndex</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getNodeOnBoundary</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberNearestNeighborNodes</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOutsideNeighborNodes</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Array&lt; pdat::NodeIndex&lt; DIM &gt; &gt;</type>
      <name>getNearestNeighborNodes</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>pdat::NodeIndex&lt; DIM &gt;</type>
      <name>getNearestNeighborNode</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getClosestBoundaryPoint</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getClosestBoundaryPoint</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistanceToBoundary</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getNormalToBoundary</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNormalToBoundary</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeOnBoundary</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumOutsideNeighborNodes</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, int &gt; &gt; &amp;node_flag, hier::Index&lt; DIM &gt; &amp;cut_cell_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighborNode</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(pdat::NodeIndex&lt; DIM &gt; &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearestNeighborNodes</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, int &gt; &gt; &amp;node_flag, hier::Index&lt; DIM &gt; &amp;cut_cell_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClosestBoundaryPoint</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const double *location)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClosestBoundaryPoint</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const double location, const int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistanceToBoundary</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(tbox::Pointer&lt; hier::Patch&lt; DIM &gt; &gt; &amp;patch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistanceToBoundary</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const double dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNormalToBoundary</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(tbox::Pointer&lt; hier::Patch&lt; DIM &gt; &gt; &amp;patch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNormalToBoundary</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const double *normal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNormalToBoundary</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const double normal, const int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setOnBoundaryThreshold</name>
      <anchorfile>classSAMRAI_1_1appu_1_1BoundaryNode.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const double th)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::appu::CutCell</name>
    <filename>classSAMRAI_1_1appu_1_1CutCell.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>CutCell</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CutCell</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const pdat::CellIndex&lt; DIM &gt; &amp;cut_cell)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CutCell</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const appu::CutCell&lt; DIM &gt; &amp;cut_cell)</arglist>
    </member>
    <member kind="function">
      <type>CutCell &amp;</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const appu::CutCell&lt; DIM &gt; &amp;cut_cell)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CutCell</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>pdat::CellIndex&lt; DIM &gt;</type>
      <name>getIndex</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getVolume</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getArea</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getArea</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getNormal</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNormal</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFrontArea</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getFrontCentroid</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFrontCentroid</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSurrVolume</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNewBase</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int i, const int j) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberBoundaryNodes</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoundaryNode&lt; DIM &gt;</type>
      <name>getBoundaryNode</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFluxFront</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int m) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const double volume)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArea</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const double area, const int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNormal</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const double normal, const int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNormal</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const double *normal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSurrVolume</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const double surrvol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrontArea</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const double area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrontCentroid</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const double centroid, const int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSplit</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNewBase</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const double base, const int i, const int j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNewBase</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const double *base)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNewBase</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFluxFront</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const int m, const double front)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaryNode</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(const BoundaryNode&lt; DIM &gt; &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaryNode</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(const BoundaryNode&lt; DIM &gt; &amp;node, const int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaryNode</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(const pdat::NodeIndex&lt; DIM &gt; &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printVolumeAndAreas</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printNormal</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printBoundaryNodes</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAll</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copySourceItem</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(hier::Index&lt; DIM &gt; &amp;index, const hier::IntVector&lt; DIM &gt; &amp;src_offset, appu::CutCell&lt; DIM &gt; &amp;src_item)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(tbox::AbstractStream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::IntVector&lt; DIM &gt; &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromDatabase</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; &amp;database)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; &amp;database)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>enableBoundaryNodeStorage</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>boundaryNodesEnabled</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CutCell.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::appu::EmbeddedBoundaryDefines</name>
    <filename>classSAMRAI_1_1appu_1_1EmbeddedBoundaryDefines.html</filename>
    <member kind="enumeration">
      <name>CELL_TYPE</name>
      <anchor>w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOLID</name>
      <anchor>w8w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CUT</name>
      <anchor>w8w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BORDER</name>
      <anchor>w8w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLOW</name>
      <anchor>w8w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>NODE_TYPE</name>
      <anchor>w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTSIDE</name>
      <anchor>w9w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INSIDE</name>
      <anchor>w9w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOUNDARY</name>
      <anchor>w9w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ONBOUNDARY</name>
      <anchor>w9w7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::appu::EmbeddedBoundaryGeometry</name>
    <filename>classSAMRAI_1_1appu_1_1EmbeddedBoundaryGeometry.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::appu::VisMaterialsDataStrategy</base>
    <base>SAMRAI::xfer::RefinePatchStrategy</base>
    <base>SAMRAI::tbox::Serializable</base>
    <member kind="enumeration">
      <name>CELL_TYPE</name>
      <anchor>w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOLID</name>
      <anchor>w8w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CUT</name>
      <anchor>w8w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BORDER</name>
      <anchor>w8w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLOW</name>
      <anchor>w8w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>NODE_TYPE</name>
      <anchor>w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTSIDE</name>
      <anchor>w9w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INSIDE</name>
      <anchor>w9w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOUNDARY</name>
      <anchor>w9w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ONBOUNDARY</name>
      <anchor>w9w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EmbeddedBoundaryGeometry</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryGeometry.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, tbox::Pointer&lt; tbox::Database &gt; input_db=(0), const tbox::Pointer&lt; geom::CartesianGridGeometry&lt; DIM &gt; &gt; grid_geom=(0), const hier::IntVector&lt; DIM &gt; &amp;nghosts=hier::IntVector&lt; DIM &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EmbeddedBoundaryGeometry</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryGeometry.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildEmbeddedBoundaryOnLevel</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryGeometry.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy=(0), const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; old_level=(0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tagInsideOutsideNodesOnLevel</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryGeometry.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerVisItDataWriter</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryGeometry.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; appu::VisItDataWriter&lt; DIM &gt; &gt; visit_writer)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCellFlagDataId</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryGeometry.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCellVolumeDataId</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryGeometry.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndexCutCellDataId</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryGeometry.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNodeInsideOutsideDataId</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryGeometry.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeTotalVolumeOnLevel</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryGeometry.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGridGeometry</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryGeometry.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const tbox::Pointer&lt; geom::CartesianGridGeometry&lt; DIM &gt; &gt; grid_geom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeLevelEmbeddedBoundaryDataToFile</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryGeometry.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, const string &amp;dirname) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>packMaterialFractionsIntoDoubleBuffer</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryGeometry.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(double *dbuffer, const hier::Patch&lt; DIM &gt; &amp;patch, const hier::Box&lt; DIM &gt; &amp;region, const string &amp;material_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhysicalBoundaryConditions</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryGeometry.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const double fill_time, const hier::IntVector&lt; DIM &gt; &amp;ghost_width_to_fill)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessRefine</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryGeometry.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessRefine</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryGeometry.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual hier::IntVector&lt; DIM &gt;</type>
      <name>getRefineOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryGeometry.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryGeometry.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; db)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::appu::EmbeddedBoundaryShape</name>
    <filename>classSAMRAI_1_1appu_1_1EmbeddedBoundaryShape.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>EmbeddedBoundaryShape</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryShape.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EmbeddedBoundaryShape</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryShape.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryShape.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const double *xyz) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>isInside</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryShape.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int *nx, const double *dx, const double *origin, int *inout) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryShape.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ostream &amp;os) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::appu::EmbeddedBoundaryShapePolygon</name>
    <filename>classSAMRAI_1_1appu_1_1EmbeddedBoundaryShapePolygon.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::appu::EmbeddedBoundaryShape</base>
    <member kind="function">
      <type></type>
      <name>EmbeddedBoundaryShapePolygon</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryShapePolygon.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, tbox::Pointer&lt; tbox::Database &gt; input_db)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EmbeddedBoundaryShapePolygon</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryShapePolygon.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryShapePolygon.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const double *xyz) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>isInside</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryShapePolygon.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int *nx, const double *dx, const double *origin, int *inout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryShapePolygon.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::appu::EmbeddedBoundaryShapeSphere</name>
    <filename>classSAMRAI_1_1appu_1_1EmbeddedBoundaryShapeSphere.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::appu::EmbeddedBoundaryShape</base>
    <member kind="function">
      <type></type>
      <name>EmbeddedBoundaryShapeSphere</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryShapeSphere.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, tbox::Pointer&lt; tbox::Database &gt; input_db)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EmbeddedBoundaryShapeSphere</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryShapeSphere.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryShapeSphere.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const double *xyz) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>isInside</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryShapeSphere.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int *nx, const double *dx, const double *origin, int *inout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1appu_1_1EmbeddedBoundaryShapeSphere.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::appu::CartesianVizamraiDataWriter</name>
    <filename>classSAMRAI_1_1appu_1_1CartesianVizamraiDataWriter.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>CartesianVizamraiDataWriter</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CartesianVizamraiDataWriter.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianVizamraiDataWriter</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CartesianVizamraiDataWriter.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinestLevelToPlot</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CartesianVizamraiDataWriter.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int finest_level_number)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRatioToCoarserLevel</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CartesianVizamraiDataWriter.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int level_number, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlotDataToDouble</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CartesianVizamraiDataWriter.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlotDataToFloat</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CartesianVizamraiDataWriter.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDerivedDataWriter</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CartesianVizamraiDataWriter.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(VisDerivedDataStrategy&lt; DIM &gt; *derived_writer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirectoryName</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CartesianVizamraiDataWriter.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const string &amp;directory_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerPlotScalar</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CartesianVizamraiDataWriter.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const string &amp;variable_name, int data_id, int depth_id=0, double scale_factor=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevelPlotScalar</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CartesianVizamraiDataWriter.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const string &amp;variable_name, int level_number, int data_id, int depth_id=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerPlotVector</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CartesianVizamraiDataWriter.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const string &amp;variable_name, int data_id, double scale_factor=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevelPlotVector</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CartesianVizamraiDataWriter.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const string &amp;variable_name, int level_number, int data_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerDerivedPlotScalar</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CartesianVizamraiDataWriter.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const string &amp;variable_name, VisDerivedDataStrategy&lt; DIM &gt; *derived_writer=(VisDerivedDataStrategy&lt; DIM &gt; *)(0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerDerivedPlotVector</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CartesianVizamraiDataWriter.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const string &amp;variable_name, int depth, VisDerivedDataStrategy&lt; DIM &gt; *derived_writer=(VisDerivedDataStrategy&lt; DIM &gt; *)(0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writePlotData</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CartesianVizamraiDataWriter.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const string &amp;file_name, int extension=-1, double plot_time=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1appu_1_1CartesianVizamraiDataWriter.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::appu::VisDerivedDataStrategy</name>
    <filename>classSAMRAI_1_1appu_1_1VisDerivedDataStrategy.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>VisDerivedDataStrategy</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisDerivedDataStrategy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VisDerivedDataStrategy</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisDerivedDataStrategy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>packDerivedDataIntoDoubleBuffer</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisDerivedDataStrategy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(double *buffer, const hier::Patch&lt; DIM &gt; &amp;patch, const hier::Box&lt; DIM &gt; &amp;region, const string &amp;variable_name, int depth_index)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::appu::VisItDataWriter</name>
    <filename>classSAMRAI_1_1appu_1_1VisItDataWriter.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>VisItDataWriter</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, const string &amp;dump_directory_name, int number_procs_per_file=1, bool is_multiblock=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VisItDataWriter</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultDerivedDataWriter</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(VisDerivedDataStrategy&lt; DIM &gt; *default_derived_writer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaterialsDataWriter</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(VisMaterialsDataStrategy&lt; DIM &gt; *materials_data_writer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerPlotQuantity</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const string &amp;variable_name, const string &amp;variable_type, const int patch_data_index, const int start_depth_index=0, const double scale_factor=1.0, const string &amp;variable_centering=&quot;UNKNOWN&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerDerivedPlotQuantity</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const string &amp;variable_name, const string &amp;variable_type, VisDerivedDataStrategy&lt; DIM &gt; *derived_writer=(VisDerivedDataStrategy&lt; DIM &gt; *)(0), const double scale_factor=1.0, const string &amp;variable_centering=&quot;CELL&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevelPlotQuantity</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const string &amp;variable_name, const int level_number, const int patch_data_index, const int start_depth_index=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerNodeCoordinates</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int patch_data_index, const int start_depth_index=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSingleNodeCoordinate</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int coordinate_number, const int patch_data_index, const int depth_index=0, const double scale_factor=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerMaterialNames</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const tbox::Array&lt; string &gt; &amp;material_names)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerSpeciesNames</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const string &amp;material_name, const tbox::Array&lt; string &gt; &amp;species_names)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writePlotData</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, int time_step, double simulation_time=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSummaryFilename</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisItDataWriter.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::appu::VisMaterialsDataStrategy</name>
    <filename>classSAMRAI_1_1appu_1_1VisMaterialsDataStrategy.html</filename>
    <templarg>DIM</templarg>
    <member kind="enumeration">
      <name>PACK_RETURN_TYPE</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VISIT_ALLZERO</name>
      <anchor>w3w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VISIT_ALLONE</name>
      <anchor>w3w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VISIT_MIXED</name>
      <anchor>w3w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VisMaterialsDataStrategy</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisMaterialsDataStrategy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VisMaterialsDataStrategy</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisMaterialsDataStrategy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>packMaterialFractionsIntoDoubleBuffer</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisMaterialsDataStrategy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(double *buffer, const hier::Patch&lt; DIM &gt; &amp;patch, const hier::Box&lt; DIM &gt; &amp;region, const string &amp;material_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>packSpeciesFractionsIntoDoubleBuffer</name>
      <anchorfile>classSAMRAI_1_1appu_1_1VisMaterialsDataStrategy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(double *buffer, const hier::Patch&lt; DIM &gt; &amp;patch, const hier::Box&lt; DIM &gt; &amp;region, const string &amp;material_name, const string &amp;species_name)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::appu::CartesianBoundaryUtilities2</name>
    <filename>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities2.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>readBoundaryInput</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities2.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(BoundaryUtilityStrategy *bdry_strategy, tbox::Pointer&lt; tbox::Database &gt; bdry_db, tbox::Array&lt; int &gt; &amp;edge_conds, tbox::Array&lt; int &gt; &amp;node_conds, const hier::IntVector&lt; 2 &gt; &amp;periodic)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fillEdgeBoundaryData</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities2.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(const string &amp;varname, tbox::Pointer&lt; pdat::CellData&lt; 2, double &gt; &gt; &amp;vardata, const hier::Patch&lt; 2 &gt; &amp;patch, const hier::IntVector&lt; 2 &gt; &amp;ghost_width_to_fill, const tbox::Array&lt; int &gt; &amp;bdry_edge_conds, const tbox::Array&lt; double &gt; &amp;bdry_edge_values)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fillNodeBoundaryData</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities2.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(const string &amp;varname, tbox::Pointer&lt; pdat::CellData&lt; 2, double &gt; &gt; &amp;vardata, const hier::Patch&lt; 2 &gt; &amp;patch, const hier::IntVector&lt; 2 &gt; &amp;ghost_width_to_fill, const tbox::Array&lt; int &gt; &amp;bdry_node_conds, const tbox::Array&lt; double &gt; &amp;bdry_edge_values)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getEdgeLocationForNodeBdry</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities2.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(int node_loc, int node_btype)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>checkBdryData</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities2.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>(const string &amp;varname, const hier::Patch&lt; 2 &gt; &amp;patch, int data_id, int depth, const hier::IntVector&lt; 2 &gt; &amp;gcw_to_check, const hier::BoundaryBox&lt; 2 &gt; &amp;bbox, int bcase, double bstate)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::appu::CartesianBoundaryUtilities3</name>
    <filename>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities3.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>readBoundaryInput</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities3.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(BoundaryUtilityStrategy *bdry_strategy, tbox::Pointer&lt; tbox::Database &gt; bdry_db, tbox::Array&lt; int &gt; &amp;face_conds, tbox::Array&lt; int &gt; &amp;edge_conds, tbox::Array&lt; int &gt; &amp;node_conds, const hier::IntVector&lt; 3 &gt; &amp;periodic)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fillFaceBoundaryData</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities3.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(const string &amp;varname, tbox::Pointer&lt; pdat::CellData&lt; 3, double &gt; &gt; &amp;vardata, const hier::Patch&lt; 3 &gt; &amp;patch, const hier::IntVector&lt; 3 &gt; &amp;ghost_width_to_fill, const tbox::Array&lt; int &gt; &amp;bdry_face_conds, const tbox::Array&lt; double &gt; &amp;bdry_face_values)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fillEdgeBoundaryData</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities3.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(const string &amp;varname, tbox::Pointer&lt; pdat::CellData&lt; 3, double &gt; &gt; &amp;vardata, const hier::Patch&lt; 3 &gt; &amp;patch, const hier::IntVector&lt; 3 &gt; &amp;ghost_width_to_fill, const tbox::Array&lt; int &gt; &amp;bdry_edge_conds, const tbox::Array&lt; double &gt; &amp;bdry_face_values)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fillNodeBoundaryData</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities3.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(const string &amp;varname, tbox::Pointer&lt; pdat::CellData&lt; 3, double &gt; &gt; &amp;vardata, const hier::Patch&lt; 3 &gt; &amp;patch, const hier::IntVector&lt; 3 &gt; &amp;ghost_width_to_fill, const tbox::Array&lt; int &gt; &amp;bdry_node_conds, const tbox::Array&lt; double &gt; &amp;bdry_face_values)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getFaceLocationForEdgeBdry</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities3.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>(int edge_loc, int edge_btype)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getFaceLocationForNodeBdry</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities3.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>(int node_loc, int node_btype)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>checkBdryData</name>
      <anchorfile>structSAMRAI_1_1appu_1_1CartesianBoundaryUtilities3.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>(const string &amp;varname, const hier::Patch&lt; 3 &gt; &amp;patch, int data_id, int depth, const hier::IntVector&lt; 3 &gt; &amp;gcw_to_check, const hier::BoundaryBox&lt; 3 &gt; &amp;bbox, int bcase, double bstate)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::geom</name>
    <filename>namespaceSAMRAI_1_1geom.html</filename>
    <class kind="class">SAMRAI::geom::CartesianGridGeometry</class>
    <class kind="class">SAMRAI::geom::CartesianCellComplexConservativeLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianCellComplexLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianCellComplexWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianCellDoubleConservativeLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianCellDoubleLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianCellDoubleWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianCellFloatConservativeLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianCellFloatLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianCellFloatWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianEdgeComplexWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianEdgeDoubleConservativeLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianEdgeDoubleWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianEdgeFloatConservativeLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianEdgeFloatWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianFaceComplexWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianFaceDoubleConservativeLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianFaceDoubleWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianFaceFloatConservativeLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianFaceFloatWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianNodeComplexLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianNodeDoubleLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianNodeFloatLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianOuterfaceComplexWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianOuterfaceDoubleWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianOuterfaceFloatWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianOutersideDoubleWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianSideComplexWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianSideDoubleConservativeLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianSideDoubleWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianSideFloatConservativeLinearRefine</class>
    <class kind="class">SAMRAI::geom::CartesianSideFloatWeightedAverage</class>
    <class kind="class">SAMRAI::geom::CartesianPatchGeometry</class>
    <class kind="class">SAMRAI::geom::SkeletonGridGeometry</class>
    <class kind="class">SAMRAI::geom::SkeletonCoarsen</class>
    <class kind="class">SAMRAI::geom::SkeletonRefine</class>
    <class kind="class">SAMRAI::geom::SkeletonPatchGeometry</class>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianGridGeometry</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::Geometry</base>
    <base>SAMRAI::tbox::Serializable</base>
    <member kind="function">
      <type></type>
      <name>CartesianGridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, tbox::Pointer&lt; tbox::Database &gt; input_db, bool register_for_restart=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CartesianGridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const string &amp;object_name, const double *x_lo, const double *x_up, const hier::BoxArray&lt; DIM &gt; &amp;domain, bool register_for_restart=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianGridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::GridGeometry&lt; DIM &gt; &gt;</type>
      <name>makeRefinedGridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const string &amp;fine_geom_name, const hier::IntVector&lt; DIM &gt; &amp;refine_ratio, bool register_for_restart) const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::GridGeometry&lt; DIM &gt; &gt;</type>
      <name>makeCoarsenedGridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const string &amp;coarse_geom_name, const hier::IntVector&lt; DIM &gt; &amp;coarsen_ratio, bool register_for_restart) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGeometryDataOnPatch</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const hier::IntVector&lt; DIM &gt; &amp;ratio_to_level_zero, const tbox::Array&lt; tbox::Array&lt; bool &gt; &gt; &amp;touches_regular_bdry, const tbox::Array&lt; tbox::Array&lt; bool &gt; &gt; &amp;touches_periodic_bdry) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGeometryData</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const double *x_lo, const double *x_up, const hier::BoxArray&lt; DIM &gt; &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getDx</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getXLower</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getXUpper</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianGridGeometry.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; db)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianCellComplexConservativeLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianCellComplexConservativeLinearRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianCellComplexConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexConservativeLinearRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianCellComplexConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexConservativeLinearRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexConservativeLinearRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexConservativeLinearRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexConservativeLinearRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexConservativeLinearRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexConservativeLinearRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianCellComplexLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianCellComplexLinearRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianCellComplexLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexLinearRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianCellComplexLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexLinearRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexLinearRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexLinearRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexLinearRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexLinearRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexLinearRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianCellComplexWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianCellComplexWeightedAverage.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianCellComplexWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexWeightedAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianCellComplexWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexWeightedAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexWeightedAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexWeightedAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexWeightedAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexWeightedAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellComplexWeightedAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianCellDoubleConservativeLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianCellDoubleConservativeLinearRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianCellDoubleConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianCellDoubleConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianCellDoubleLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianCellDoubleLinearRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianCellDoubleLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleLinearRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianCellDoubleLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleLinearRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleLinearRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleLinearRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleLinearRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleLinearRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleLinearRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianCellDoubleWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianCellDoubleWeightedAverage.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianCellDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleWeightedAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianCellDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleWeightedAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleWeightedAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleWeightedAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleWeightedAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleWeightedAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellDoubleWeightedAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianCellFloatConservativeLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianCellFloatConservativeLinearRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianCellFloatConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianCellFloatConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianCellFloatLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianCellFloatLinearRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianCellFloatLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatLinearRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianCellFloatLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatLinearRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatLinearRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatLinearRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatLinearRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatLinearRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatLinearRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianCellFloatWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianCellFloatWeightedAverage.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianCellFloatWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatWeightedAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianCellFloatWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatWeightedAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatWeightedAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatWeightedAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatWeightedAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatWeightedAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianCellFloatWeightedAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianEdgeComplexWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianEdgeComplexWeightedAverage.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianEdgeComplexWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeComplexWeightedAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianEdgeComplexWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeComplexWeightedAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeComplexWeightedAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeComplexWeightedAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeComplexWeightedAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeComplexWeightedAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeComplexWeightedAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianEdgeDoubleConservativeLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleConservativeLinearRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianEdgeDoubleConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianEdgeDoubleConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianEdgeDoubleWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleWeightedAverage.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianEdgeDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleWeightedAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianEdgeDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleWeightedAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleWeightedAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleWeightedAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleWeightedAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleWeightedAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeDoubleWeightedAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianEdgeFloatConservativeLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianEdgeFloatConservativeLinearRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianEdgeFloatConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianEdgeFloatConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianEdgeFloatWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianEdgeFloatWeightedAverage.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianEdgeFloatWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatWeightedAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianEdgeFloatWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatWeightedAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatWeightedAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatWeightedAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatWeightedAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatWeightedAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianEdgeFloatWeightedAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianFaceComplexWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianFaceComplexWeightedAverage.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianFaceComplexWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceComplexWeightedAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianFaceComplexWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceComplexWeightedAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceComplexWeightedAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceComplexWeightedAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceComplexWeightedAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceComplexWeightedAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceComplexWeightedAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianFaceDoubleConservativeLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianFaceDoubleConservativeLinearRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianFaceDoubleConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianFaceDoubleConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianFaceDoubleWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianFaceDoubleWeightedAverage.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianFaceDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianFaceDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianFaceFloatConservativeLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianFaceFloatConservativeLinearRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianFaceFloatConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianFaceFloatConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianFaceFloatWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianFaceFloatWeightedAverage.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianFaceFloatWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatWeightedAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianFaceFloatWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatWeightedAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatWeightedAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatWeightedAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatWeightedAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatWeightedAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianFaceFloatWeightedAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianNodeComplexLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianNodeComplexLinearRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianNodeComplexLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeComplexLinearRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianNodeComplexLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeComplexLinearRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeComplexLinearRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeComplexLinearRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeComplexLinearRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeComplexLinearRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeComplexLinearRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianNodeDoubleLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianNodeDoubleLinearRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianNodeDoubleLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeDoubleLinearRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianNodeDoubleLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeDoubleLinearRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeDoubleLinearRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeDoubleLinearRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeDoubleLinearRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeDoubleLinearRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeDoubleLinearRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianNodeFloatLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianNodeFloatLinearRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianNodeFloatLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeFloatLinearRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianNodeFloatLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeFloatLinearRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeFloatLinearRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeFloatLinearRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeFloatLinearRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeFloatLinearRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianNodeFloatLinearRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianOuterfaceComplexWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianOuterfaceComplexWeightedAverage.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianOuterfaceComplexWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceComplexWeightedAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianOuterfaceComplexWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceComplexWeightedAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceComplexWeightedAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceComplexWeightedAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceComplexWeightedAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceComplexWeightedAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceComplexWeightedAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianOuterfaceDoubleWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianOuterfaceDoubleWeightedAverage.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianOuterfaceDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianOuterfaceDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceDoubleWeightedAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianOuterfaceFloatWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianOuterfaceFloatWeightedAverage.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianOuterfaceFloatWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceFloatWeightedAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianOuterfaceFloatWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceFloatWeightedAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceFloatWeightedAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceFloatWeightedAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceFloatWeightedAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceFloatWeightedAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOuterfaceFloatWeightedAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianOutersideDoubleWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianOutersideDoubleWeightedAverage.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianOutersideDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOutersideDoubleWeightedAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianOutersideDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOutersideDoubleWeightedAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOutersideDoubleWeightedAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOutersideDoubleWeightedAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOutersideDoubleWeightedAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOutersideDoubleWeightedAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianOutersideDoubleWeightedAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianSideComplexWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianSideComplexWeightedAverage.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianSideComplexWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideComplexWeightedAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianSideComplexWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideComplexWeightedAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideComplexWeightedAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideComplexWeightedAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideComplexWeightedAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideComplexWeightedAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideComplexWeightedAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianSideDoubleConservativeLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianSideDoubleConservativeLinearRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianSideDoubleConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianSideDoubleConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleConservativeLinearRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianSideDoubleWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianSideDoubleWeightedAverage.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianSideDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleWeightedAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianSideDoubleWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleWeightedAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleWeightedAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleWeightedAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleWeightedAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleWeightedAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideDoubleWeightedAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianSideFloatConservativeLinearRefine</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianSideFloatConservativeLinearRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianSideFloatConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianSideFloatConservativeLinearRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatConservativeLinearRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianSideFloatWeightedAverage</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianSideFloatWeightedAverage.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>CartesianSideFloatWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatWeightedAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianSideFloatWeightedAverage</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatWeightedAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatWeightedAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatWeightedAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatWeightedAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatWeightedAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianSideFloatWeightedAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::CartesianPatchGeometry</name>
    <filename>classSAMRAI_1_1geom_1_1CartesianPatchGeometry.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::PatchGeometry</base>
    <member kind="function">
      <type></type>
      <name>CartesianPatchGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianPatchGeometry.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;ratio_to_level_zero, const tbox::Array&lt; tbox::Array&lt; bool &gt; &gt; &amp;touches_regular_bdry, const tbox::Array&lt; tbox::Array&lt; bool &gt; &gt; &amp;touches_periodic_bdry, const double *dx, const double *x_lo, const double *x_hi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CartesianPatchGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianPatchGeometry.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getDx</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianPatchGeometry.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getXLower</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianPatchGeometry.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const double *</type>
      <name>getXUpper</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianPatchGeometry.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1geom_1_1CartesianPatchGeometry.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::SkeletonGridGeometry</name>
    <filename>classSAMRAI_1_1geom_1_1SkeletonGridGeometry.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::Geometry</base>
    <base>SAMRAI::tbox::Serializable</base>
    <member kind="function">
      <type></type>
      <name>SkeletonGridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonGridGeometry.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, tbox::Pointer&lt; tbox::Database &gt; input_db, bool register_for_restart=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SkeletonGridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonGridGeometry.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const string &amp;object_name, const hier::BoxArray&lt; DIM &gt; &amp;level_domain, bool register_for_restart=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SkeletonGridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonGridGeometry.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::GridGeometry&lt; DIM &gt; &gt;</type>
      <name>makeRefinedGridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonGridGeometry.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const string &amp;fine_geom_name, const hier::IntVector&lt; DIM &gt; &amp;refine_ratio, bool register_for_restart) const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::GridGeometry&lt; DIM &gt; &gt;</type>
      <name>makeCoarsenedGridGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonGridGeometry.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const string &amp;coarse_geom_name, const hier::IntVector&lt; DIM &gt; &amp;coarsen_ratio, bool register_for_restart) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGeometryDataOnPatch</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonGridGeometry.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const hier::IntVector&lt; DIM &gt; &amp;ratio_to_level_zero, const tbox::Array&lt; tbox::Array&lt; bool &gt; &gt; &amp;touches_regular_bdry, const tbox::Array&lt; tbox::Array&lt; bool &gt; &gt; &amp;touches_periodic_bdry) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonGridGeometry.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonGridGeometry.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; db)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::SkeletonCoarsen</name>
    <filename>classSAMRAI_1_1geom_1_1SkeletonCoarsen.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>SkeletonCoarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonCoarsen.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SkeletonCoarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonCoarsen.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonCoarsen.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonCoarsen.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonCoarsen.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonCoarsen.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonCoarsen.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::SkeletonRefine</name>
    <filename>classSAMRAI_1_1geom_1_1SkeletonRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>SkeletonRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SkeletonRefine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::geom::SkeletonPatchGeometry</name>
    <filename>classSAMRAI_1_1geom_1_1SkeletonPatchGeometry.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::PatchGeometry</base>
    <member kind="function">
      <type></type>
      <name>SkeletonPatchGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonPatchGeometry.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;ratio_to_level_zero, const tbox::Array&lt; tbox::Array&lt; bool &gt; &gt; &amp;touches_regular_bdry, const tbox::Array&lt; tbox::Array&lt; bool &gt; &gt; &amp;touches_periodic_bdry)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SkeletonPatchGeometry</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonPatchGeometry.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1geom_1_1SkeletonPatchGeometry.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::hier</name>
    <filename>namespaceSAMRAI_1_1hier.html</filename>
    <class kind="class">SAMRAI::hier::BinaryTree</class>
    <class kind="class">SAMRAI::hier::Box</class>
    <class kind="class">SAMRAI::hier::BoxIterator</class>
    <class kind="class">SAMRAI::hier::BoxArray</class>
    <class kind="struct">SAMRAI::hier::BoxComm</class>
    <class kind="class">SAMRAI::hier::BoxGraph</class>
    <class kind="struct">SAMRAI::hier::BoxGraphUtilities</class>
    <class kind="class">SAMRAI::hier::BoxIOUtility</class>
    <class kind="class">SAMRAI::hier::BoxList</class>
    <class kind="class">SAMRAI::hier::BoxTop</class>
    <class kind="class">SAMRAI::hier::BoxTree</class>
    <class kind="class">SAMRAI::hier::BoxTreeNode</class>
    <class kind="struct">SAMRAI::hier::BoxUtilities</class>
    <class kind="class">SAMRAI::hier::Index</class>
    <class kind="class">SAMRAI::hier::IntVector</class>
    <class kind="class">SAMRAI::hier::LayerEdgeSet</class>
    <class kind="class">SAMRAI::hier::LayerHierarchy</class>
    <class kind="class">SAMRAI::hier::LayerNode</class>
    <class kind="class">SAMRAI::hier::LayerNodeSet</class>
    <class kind="class">SAMRAI::hier::BasePatchHierarchy</class>
    <class kind="class">SAMRAI::hier::BasePatchLevel</class>
    <class kind="class">SAMRAI::hier::BoundaryBox</class>
    <class kind="class">SAMRAI::hier::BoundaryLookupTable</class>
    <class kind="class">SAMRAI::hier::CoarseFineBoundary</class>
    <class kind="class">SAMRAI::hier::GridGeometry</class>
    <class kind="class">SAMRAI::hier::Patch</class>
    <class kind="class">SAMRAI::hier::PatchFactory</class>
    <class kind="class">SAMRAI::hier::PatchGeometry</class>
    <class kind="class">SAMRAI::hier::PatchHierarchy</class>
    <class kind="class">SAMRAI::hier::PatchLevel</class>
    <class kind="class">SAMRAI::hier::PatchLevelIterator</class>
    <class kind="class">SAMRAI::hier::PatchLevelFactory</class>
    <class kind="class">SAMRAI::hier::ProcessorMapping</class>
    <class kind="class">SAMRAI::hier::BoxGeometry</class>
    <class kind="class">SAMRAI::hier::BoxOverlap</class>
    <class kind="class">SAMRAI::hier::ComponentSelector</class>
    <class kind="class">SAMRAI::hier::LocallyActiveDataPatchLevelManager</class>
    <class kind="class">SAMRAI::hier::LocallyActiveDataPatchLevelIterator</class>
    <class kind="class">SAMRAI::hier::LocallyActiveVariableDatabase</class>
    <class kind="class">SAMRAI::hier::PatchData</class>
    <class kind="class">SAMRAI::hier::PatchDataFactory</class>
    <class kind="class">SAMRAI::hier::PatchDescriptor</class>
    <class kind="class">SAMRAI::hier::Variable</class>
    <class kind="class">SAMRAI::hier::VariableContext</class>
    <class kind="class">SAMRAI::hier::VariableDatabase</class>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(istream &amp;s, Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ostream &amp;s, const Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>buildTboxArrayFromList</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Array&lt; int &gt; &amp;array, const tbox::List&lt; int &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(istream &amp;s, IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ostream &amp;s, const IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ostream &amp;co, const LayerNode&lt; DIM &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1hier.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ostream &amp;s, const Patch&lt; DIM &gt; &amp;patch)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BinaryTree</name>
    <filename>classSAMRAI_1_1hier_1_1BinaryTree.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>BinaryTree</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BinaryTree.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const ProcessorMapping &amp;mapping, const BoxArray&lt; DIM &gt; &amp;boxes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BinaryTree</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BinaryTree.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>participates</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BinaryTree.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int node_id, const Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>findParticipatingAnscestor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BinaryTree.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findParticipatingDescendants</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BinaryTree.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box, tbox::Array&lt; int &gt; &amp;id_out)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BinaryTree.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box, int *data, int len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partialBcast</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BinaryTree.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;participants_box, Box&lt; DIM &gt; &amp;box_to_bcast)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partialBcast</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BinaryTree.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;participants_box, int &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildParticipatingCommunicator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BinaryTree.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box, tbox::MPI::comm old_comm, tbox::MPI::group &amp;new_group, tbox::MPI::comm &amp;new_comm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::Box</name>
    <filename>classSAMRAI_1_1hier_1_1Box.html</filename>
    <templarg>DIM</templarg>
    <member kind="typedef">
      <type>BoxIterator&lt; DIM &gt;</type>
      <name>Iterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const Index&lt; DIM &gt; &amp;lower, const Index&lt; DIM &gt; &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const tbox::DatabaseBox &amp;box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Box</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Box&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>Index&lt; DIM &gt; &amp;</type>
      <name>lower</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index&lt; DIM &gt; &amp;</type>
      <name>upper</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Index&lt; DIM &gt; &amp;</type>
      <name>lower</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Index&lt; DIM &gt; &amp;</type>
      <name>upper</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>lower</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>upper</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>lower</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>upper</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEmpty</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberCells</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt;</type>
      <name>numberCells</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>longestDimension</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>offset</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const Index&lt; DIM &gt; &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const Index&lt; DIM &gt; &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>Box&lt; DIM &gt;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>Box&lt; DIM &gt;</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>Box&lt; DIM &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>coalesceWith</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grow</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grow</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const int direction, const int ghosts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>growLower</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>growLower</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(const int direction, const int ghosts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>growUpper</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>growUpper</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(const int direction, const int ghosts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shift</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shift</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(const int direction, const int offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(const int rotation_number)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>Box&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(const tbox::DatabaseBox &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>Box&lt; DIM &gt; &amp;</type>
      <name>Box_from_DatabaseBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(const tbox::DatabaseBox &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_Box_from_DatabaseBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(const tbox::DatabaseBox &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>tbox::DatabaseBox</type>
      <name>DatabaseBox_from_Box</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator tbox::DatabaseBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator tbox::DatabaseBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Box&lt; DIM &gt;</type>
      <name>grow</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box, const IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Box&lt; DIM &gt;</type>
      <name>shift</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box, const IntVector&lt; DIM &gt; &amp;offset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Box&lt; DIM &gt;</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box, const IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Box&lt; DIM &gt;</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box, const IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="friend">
      <type>friend istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>n0</anchor>
      <arglist>(istream &amp;s, Box&lt; D &gt; &amp;box)</arglist>
    </member>
    <member kind="friend">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Box.html</anchorfile>
      <anchor>n1</anchor>
      <arglist>(ostream &amp;s, const Box&lt; D &gt; &amp;box)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxIterator</name>
    <filename>classSAMRAI_1_1hier_1_1BoxIterator.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>BoxIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const BoxIterator&lt; DIM &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>BoxIterator&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const BoxIterator&lt; DIM &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoxIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>const Index&lt; DIM &gt; &amp;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Index&lt; DIM &gt; &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const void *</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const BoxIterator&lt; DIM &gt; &amp;iterator) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIterator.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const BoxIterator&lt; DIM &gt; &amp;iterator) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxArray</name>
    <filename>classSAMRAI_1_1hier_1_1BoxArray.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>BoxArray</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int n=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxArray</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const tbox::Array&lt; Box&lt; DIM &gt; &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxArray</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const BoxArray&lt; DIM &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxArray</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const BoxList&lt; DIM &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxArray</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const tbox::Array&lt; tbox::DatabaseBox &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator tbox::Array</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoxArray&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Array&lt; tbox::DatabaseBox &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>BoxArray&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const BoxArray&lt; DIM &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>BoxArray&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const BoxList&lt; DIM &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoxArray</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Box&lt; DIM &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type>const Box&lt; DIM &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>Box&lt; DIM &gt; &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type>const Box&lt; DIM &gt; &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>BoxArray&lt; DIM &gt; &amp;</type>
      <name>BoxArray_from_Array</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(tbox::Array&lt; tbox::DatabaseBox &gt; array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_BoxArray_from_Array</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(tbox::Array&lt; tbox::DatabaseBox &gt; array)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const Index&lt; DIM &gt; &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grow</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shift</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(int rotation_number)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeBoxArray</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxArray.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(ostream &amp;os=tbox::plog) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::hier::BoxComm</name>
    <filename>structSAMRAI_1_1hier_1_1BoxComm.html</filename>
    <templarg>DIM</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bcastBox</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxComm.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(Box&lt; DIM &gt; &amp;box, const int root=0, tbox::MPI::comm=tbox::MPI::commWorld)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bcastBoxList</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxComm.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(BoxList&lt; DIM &gt; &amp;box_list, const int root=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bcastBoxArray</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxComm.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(BoxArray&lt; DIM &gt; &amp;box_array, const int root=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sendBox</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxComm.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box, const int rcvr_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sendBox</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxComm.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box, const tbox::Array&lt; int &gt; &amp;rcvr_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>recvBox</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxComm.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>(Box&lt; DIM &gt; &amp;box, const int sender_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>exchangeBoxArraysAndWeightArrays</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxComm.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>(const BoxArray&lt; DIM &gt; &amp;box_array_in, const tbox::Array&lt; double &gt; &amp;weights_in, BoxArray&lt; DIM &gt; &amp;box_array_out, tbox::Array&lt; double &gt; &amp;weights_out)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxGraph</name>
    <filename>classSAMRAI_1_1hier_1_1BoxGraph.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>BoxGraph</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxGraph.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const BoxArray&lt; DIM &gt; &amp;src_box_array, const tbox::Array&lt; tbox::List&lt; IntVector&lt; DIM &gt; &gt; &gt; &amp;src_shifts, const ProcessorMapping &amp;src_mapping, const BoxArray&lt; DIM &gt; &amp;dst_box_array, const IntVector&lt; DIM &gt; &amp;dst_grow=IntVector&lt; DIM &gt;(1), int sort_dimension=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxGraph</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxGraph.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const BoxArray&lt; DIM &gt; &amp;src_box_array, const tbox::Array&lt; tbox::List&lt; IntVector&lt; DIM &gt; &gt; &gt; &amp;src_shifts, const BoxArray&lt; DIM &gt; &amp;dst_box_array, const IntVector&lt; DIM &gt; &amp;dst_grow=IntVector&lt; DIM &gt;(1), int sort_dimension=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxGraph</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxGraph.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const BoxArray&lt; DIM &gt; &amp;src_box_array, const BoxArray&lt; DIM &gt; &amp;dst_box_array, const IntVector&lt; DIM &gt; &amp;dst_grow=IntVector&lt; DIM &gt;(1), int sort_dimension=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoxGraph</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxGraph.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Array&lt; int &gt; &amp;</type>
      <name>getSrcOverlapIndices</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxGraph.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int dst_index)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Array&lt; int &gt; &amp;</type>
      <name>getLocalSrcOverlapIndices</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxGraph.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int dst_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIntersections</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxGraph.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(BoxList&lt; DIM &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGraph</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxGraph.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(ostream &amp;os=tbox::plog)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::hier::BoxGraphUtilities</name>
    <filename>structSAMRAI_1_1hier_1_1BoxGraphUtilities.html</filename>
    <templarg>DIM</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>makeBoxesPlusPeriodicBoxes</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxGraphUtilities.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(BoxArray&lt; DIM &gt; &amp;out_boxes, const BoxArray&lt; DIM &gt; &amp;in_boxes, const tbox::Array&lt; tbox::List&lt; IntVector&lt; DIM &gt; &gt; &gt; &amp;shifts)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>makeBoxesPlusPeriodicBoxes</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxGraphUtilities.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(BoxArray&lt; DIM &gt; &amp;out_boxes, tbox::Array&lt; int &gt; &amp;out_indices, const BoxArray&lt; DIM &gt; &amp;in_boxes, const tbox::Array&lt; tbox::List&lt; IntVector&lt; DIM &gt; &gt; &gt; &amp;shifts)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>countPeriodicBoxes</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxGraphUtilities.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(const tbox::Array&lt; tbox::List&lt; IntVector&lt; DIM &gt; &gt; &gt; &amp;shifts)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>qsortIntCompare</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxGraphUtilities.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(const void *v, const void *w)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxIOUtility</name>
    <filename>classSAMRAI_1_1hier_1_1BoxIOUtility.html</filename>
    <templarg>DIM</templarg>
    <member kind="enumeration">
      <name>IOTYPE</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ</name>
      <anchor>w2w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRITE</name>
      <anchor>w2w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxIOUtility</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIOUtility.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;dirname, const IOTYPE iotype)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoxIOUtility</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIOUtility.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLevelBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIOUtility.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(BoxArray&lt; DIM &gt; &amp;level_boxes, const int level_number, const int entry_number)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putLevelBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIOUtility.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const BoxArray&lt; DIM &gt; &amp;level_boxes, const int level_number, const int entry_number)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfLevels</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIOUtility.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfEntries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIOUtility.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int level_number)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeLevelBoxesDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIOUtility.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxIOUtility.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxList</name>
    <filename>classSAMRAI_1_1hier_1_1BoxList.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::tbox::List&lt; Box&lt; DIM &gt; &gt;</base>
    <member kind="typedef">
      <type>tbox::List&lt; Box&lt; DIM &gt; &gt;::Iterator</type>
      <name>Iterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxList</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxList</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxList</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const BoxList&lt; DIM &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxList</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const BoxArray&lt; DIM &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>BoxList&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const BoxList&lt; DIM &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoxList</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>simplifyBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unionBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unionBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const BoxList&lt; DIM &gt; &amp;boxes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIntersections</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;takeaway)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIntersections</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const BoxList&lt; DIM &gt; &amp;takeaway)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIntersections</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box, const Box&lt; DIM &gt; &amp;takeaway)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersectBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersectBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const BoxList&lt; DIM &gt; &amp;boxes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coalesceBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortDescendingBoxSizes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalSizeOfBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const Index&lt; DIM &gt; &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grow</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shift</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boxesIntersect</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Box&lt; DIM &gt;</type>
      <name>getBoundingBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxList.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(ostream &amp;os=tbox::plog) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxTop</name>
    <filename>classSAMRAI_1_1hier_1_1BoxTop.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>BoxTop</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTop.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const BoxArray&lt; DIM &gt; &amp;in_boxes, const tbox::Array&lt; tbox::List&lt; IntVector&lt; DIM &gt; &gt; &gt; &amp;in_shifts)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxTop</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTop.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const BoxArray&lt; DIM &gt; &amp;in_boxes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoxTop</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTop.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findOverlappingBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTop.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(BoxArray&lt; DIM &gt; &amp;overlaps, const Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findOverlappingBoxIndices</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTop.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Array&lt; int &gt; &amp;indices, const Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findOverlappingBoxesAndIndices</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTop.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(BoxArray&lt; DIM &gt; &amp;overlaps, tbox::Array&lt; int &gt; &amp;indices, const Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIntersections</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTop.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(BoxList&lt; DIM &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTop.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(ostream &amp;os=tbox::plog)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxTree</name>
    <filename>classSAMRAI_1_1hier_1_1BoxTree.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>BoxTree</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTree.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const BoxArray&lt; DIM &gt; &amp;boxes, const tbox::Array&lt; tbox::List&lt; IntVector&lt; DIM &gt; &gt; &gt; &amp;box_shifts, const ProcessorMapping &amp;box_mapping, int min_length=10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxTree</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTree.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const BoxArray&lt; DIM &gt; &amp;boxes, const tbox::Array&lt; tbox::List&lt; IntVector&lt; DIM &gt; &gt; &gt; &amp;box_shifts, int min_length=10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxTree</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTree.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const BoxArray&lt; DIM &gt; &amp;boxes, int min_length=10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoxTree</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTree.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findOverlapIndices</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTree.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Array&lt; int &gt; &amp;indices, const Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findLocalOverlapIndices</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTree.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Array&lt; int &gt; &amp;indices, const Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findOverlapBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTree.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(BoxList&lt; DIM &gt; &amp;overlap_boxes, const Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIntersections</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTree.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(BoxList&lt; DIM &gt; &amp;list) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxTreeNode</name>
    <filename>classSAMRAI_1_1hier_1_1BoxTreeNode.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>BoxTreeNode</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTreeNode.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const tbox::Array&lt; typename BoxTreeNode&lt; DIM &gt;::Triple &gt; box_triples, bool have_mapping, int min_length=10, int dim=DIM-1, int recurse_level=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoxTreeNode</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTreeNode.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findOverlapIndices</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTreeNode.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::List&lt; int &gt; &amp;indices, const Box&lt; DIM &gt; &amp;box, bool find_local_boxes, int recurse_level=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findOverlapBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTreeNode.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(BoxList&lt; DIM &gt; &amp;overlap_boxes, const Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>count</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxTreeNode.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <class kind="struct">SAMRAI::hier::BoxTreeNode::Triple</class>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::hier::BoxTreeNode::Triple</name>
    <filename>structSAMRAI_1_1hier_1_1BoxTreeNode_1_1Triple.html</filename>
    <member kind="variable">
      <type>Box&lt; DIM &gt;</type>
      <name>box</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxTreeNode_1_1Triple.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>idx</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxTreeNode_1_1Triple.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>owner</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxTreeNode_1_1Triple.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::hier::BoxUtilities</name>
    <filename>structSAMRAI_1_1hier_1_1BoxUtilities.html</filename>
    <templarg>DIM</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>checkBoxConstraints</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box, const IntVector&lt; DIM &gt; &amp;min_size, const IntVector&lt; DIM &gt; &amp;cut_factor, const IntVector&lt; DIM &gt; &amp;bad_interval, const BoxArray&lt; DIM &gt; &amp;physical_boxes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>chopBoxes</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(BoxList&lt; DIM &gt; &amp;boxes, const IntVector&lt; DIM &gt; &amp;max_size, const IntVector&lt; DIM &gt; &amp;min_size, const IntVector&lt; DIM &gt; &amp;cut_factor, const IntVector&lt; DIM &gt; &amp;bad_interval, const BoxArray&lt; DIM &gt; &amp;physical_boxes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>chopBox</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(BoxList&lt; DIM &gt; &amp;boxes, const Box&lt; DIM &gt; &amp;box, const tbox::Array&lt; tbox::List&lt; int &gt; &gt; cut_points)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>extendBoxToDomainBoundary</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(Box&lt; DIM &gt; &amp;box, const BoxList&lt; DIM &gt; &amp;domain, const IntVector&lt; DIM &gt; &amp;ext_ghosts)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>extendBoxesToDomainBoundary</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>(BoxList&lt; DIM &gt; &amp;boxes, const BoxList&lt; DIM &gt; &amp;domain, const IntVector&lt; DIM &gt; &amp;ext_ghosts)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>growBoxesWithinDomain</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>(BoxList&lt; DIM &gt; &amp;boxes, const BoxList&lt; DIM &gt; &amp;domain, const IntVector&lt; DIM &gt; &amp;min_size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>findBestCutPointsGivenMax</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>(tbox::Array&lt; tbox::List&lt; int &gt; &gt; &amp;cut_points, const Box&lt; DIM &gt; &amp;box, const IntVector&lt; DIM &gt; &amp;max_size, const IntVector&lt; DIM &gt; &amp;min_size, const IntVector&lt; DIM &gt; &amp;cut_factor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>findBestCutPointsForDirectionGivenMax</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>e7</anchor>
      <arglist>(const int idir, tbox::List&lt; int &gt; &amp;cut_points, const Box&lt; DIM &gt; &amp;box, const int max_size, const int min_size, const int cut_factor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>findBestCutPointsGivenNumber</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>e8</anchor>
      <arglist>(tbox::Array&lt; tbox::List&lt; int &gt; &gt; &amp;cut_points, const Box&lt; DIM &gt; &amp;box, const IntVector&lt; DIM &gt; &amp;number_boxes, const IntVector&lt; DIM &gt; &amp;min_size, const IntVector&lt; DIM &gt; &amp;cut_factor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>findBestCutPointsForDirectionGivenNumber</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>e9</anchor>
      <arglist>(const int idir, tbox::List&lt; int &gt; &amp;cut_points, const Box&lt; DIM &gt; &amp;box, const int num_boxes, const int min_size, const int cut_factor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>checkBoxForBadCutPoints</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>e10</anchor>
      <arglist>(IntVector&lt; DIM &gt; &amp;bad_cut_information, const Box&lt; DIM &gt; &amp;box, const BoxArray&lt; DIM &gt; &amp;physical_boxes, const IntVector&lt; DIM &gt; &amp;bad_interval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>checkBoxForBadCutPointsInDirection</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>e11</anchor>
      <arglist>(const int dir, const Box&lt; DIM &gt; &amp;box, const BoxArray&lt; DIM &gt; &amp;physical_boxes, const IntVector&lt; DIM &gt; &amp;bad_interval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findBadCutPoints</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>e12</anchor>
      <arglist>(tbox::Array&lt; tbox::Array&lt; bool &gt; &gt; &amp;bad_cuts, const Box&lt; DIM &gt; &amp;box, const BoxArray&lt; DIM &gt; &amp;physical_boxes, const IntVector&lt; DIM &gt; &amp;bad_interval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findBadCutPointsForDirection</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>e13</anchor>
      <arglist>(const int dir, tbox::Array&lt; bool &gt; &amp;bad_cuts, const Box&lt; DIM &gt; &amp;box, const BoxArray&lt; DIM &gt; &amp;physical_boxes, const IntVector&lt; DIM &gt; &amp;bad_interval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fixBadCutPoints</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>e14</anchor>
      <arglist>(tbox::Array&lt; tbox::List&lt; int &gt; &gt; &amp;cuts, const tbox::Array&lt; tbox::Array&lt; bool &gt; &gt; &amp;bad_cuts, const Box&lt; DIM &gt; &amp;box, const IntVector&lt; DIM &gt; &amp;min_size, const IntVector&lt; DIM &gt; &amp;cut_factor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fixBadCutPointsForDirection</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>e15</anchor>
      <arglist>(const int dir, tbox::List&lt; int &gt; &amp;cuts, const tbox::Array&lt; bool &gt; &amp;bad_cuts, const Box&lt; DIM &gt; &amp;box, const int min_size, const int cut_factor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findBadCutPointsForBorderAndDirection</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>e16</anchor>
      <arglist>(const int id, tbox::Array&lt; bool &gt; &amp;bad_cuts, const Box&lt; DIM &gt; &amp;box, const Box&lt; DIM &gt; &amp;border, const int bad_interval)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>makeNonOverlappingBoxLists</name>
      <anchorfile>structSAMRAI_1_1hier_1_1BoxUtilities.html</anchorfile>
      <anchor>e17</anchor>
      <arglist>(tbox::Array&lt; BoxList&lt; DIM &gt; &gt; &amp;box_list_array, const BoxArray&lt; DIM &gt; &amp;boxes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::Index</name>
    <filename>classSAMRAI_1_1hier_1_1Index.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::IntVector</base>
    <member kind="function">
      <type></type>
      <name>Index</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Index</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Index</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int i, const int j)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Index</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int i, const int j, const int k)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Index</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const tbox::Array&lt; int &gt; i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Index</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const Index&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const Index&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Index</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index&lt; DIM &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index&lt; DIM &gt;</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Index&lt; DIM &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index&lt; DIM &gt;</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Index&lt; DIM &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index&lt; DIM &gt;</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Index&lt; DIM &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index&lt; DIM &gt;</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Index&lt; DIM &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index&lt; DIM &gt;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Index&lt; DIM &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index&lt; DIM &gt;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Index&lt; DIM &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index&lt; DIM &gt;</type>
      <name>operator/</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Index&lt; DIM &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>Index&lt; DIM &gt;</type>
      <name>operator/</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Index.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::IntVector</name>
    <filename>classSAMRAI_1_1hier_1_1IntVector.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>IntVector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int i, const int j)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int i, const int j, const int k)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const tbox::Array&lt; int &gt; a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntVector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IntVector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int *</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const int *</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt;</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt;</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt;</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt;</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt;</type>
      <name>operator/</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt;</type>
      <name>operator/</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt;</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getProduct</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntVector&lt; DIM &gt;</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;a, const IntVector&lt; DIM &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntVector&lt; DIM &gt;</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;a, const IntVector&lt; DIM &gt; &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>n0</anchor>
      <arglist>(istream &amp;s, IntVector&lt; DIMENSION &gt; &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1IntVector.html</anchorfile>
      <anchor>n1</anchor>
      <arglist>(ostream &amp;s, const IntVector&lt; DIMENSION &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::LayerEdgeSet</name>
    <filename>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</filename>
    <templarg>DIM</templarg>
    <member kind="typedef">
      <type>LayerNode&lt; DIM &gt;</type>
      <name>Node</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Node::LocalIndex</type>
      <name>LocalIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LayerNodeSet&lt; DIM &gt;::NodeContainer</type>
      <name>NodeContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LayerNodeSet&lt; DIM &gt;::NodeContainer</type>
      <name>NabrContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; LocalIndex, NabrContainer &gt;</type>
      <name>Connectivity</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ParallelState</name>
      <anchor>w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTED</name>
      <anchor>w7w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GLOBALIZED</name>
      <anchor>w7w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LayerEdgeSet</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LayerEdgeSet</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const NodeContainer &amp;</type>
      <name>getNodeContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int rank=-1) const </arglist>
    </member>
    <member kind="function">
      <type>const Connectivity &amp;</type>
      <name>getConnectivity</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int rank=-1) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getBaseRefinementRatio</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getHeadRefinementRatio</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachPartner</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(LayerEdgeSet &amp;partner)</arglist>
    </member>
    <member kind="function">
      <type>LayerEdgeSet &amp;</type>
      <name>createPartner</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const LayerNodeSet&lt; DIM &gt; &amp;partner_base, const Connectivity *partner_connectivity=NULL)</arglist>
    </member>
    <member kind="function">
      <type>LayerEdgeSet &amp;</type>
      <name>getPartner</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LayerEdgeSet &amp;</type>
      <name>getPartner</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ParallelState parallel_state, const LayerNodeSet&lt; DIM &gt; &amp;base_layer, const hier::IntVector&lt; DIM &gt; &amp;head_refinement_ratio, const hier::IntVector&lt; DIM &gt; &amp;gcw=hier::IntVector&lt; DIM &gt;(1), const Connectivity *connectivity=NULL)</arglist>
    </member>
    <member kind="function">
      <type>LayerEdgeSet &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const LayerEdgeSet &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findEdges</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bridge</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const LayerEdgeSet &amp;edge_to_head, const LayerEdgeSet &amp;edge_to_base)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceNodes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const LayerEdgeSet &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParallelState</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const ParallelState parallel_state)</arglist>
    </member>
    <member kind="function">
      <type>ParallelState</type>
      <name>getParallelState</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocateData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;gcw)</arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getMaxGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(ostream &amp;co, int debase_depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printEdgeStats</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(ostream &amp;co) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkNodeNabrCorrespondance</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkNodeConsistency</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConnectivity</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const LayerNodeSet&lt; DIM &gt; &amp;head) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>findEdges</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(LayerEdgeSet &amp;a, LayerEdgeSet &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>checkNodeConsistency</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerEdgeSet.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(const NodeContainer &amp;local_nodes, const Connectivity &amp;cnect, const LayerNodeSet&lt; DIM &gt; &amp;head_layer)</arglist>
    </member>
    <class kind="struct">SAMRAI::hier::LayerEdgeSet::CommunicationStruct</class>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::hier::LayerEdgeSet::CommunicationStruct</name>
    <filename>structSAMRAI_1_1hier_1_1LayerEdgeSet_1_1CommunicationStruct.html</filename>
    <member kind="function">
      <type></type>
      <name>CommunicationStruct</name>
      <anchorfile>structSAMRAI_1_1hier_1_1LayerEdgeSet_1_1CommunicationStruct.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>send_mesg</name>
      <anchorfile>structSAMRAI_1_1hier_1_1LayerEdgeSet_1_1CommunicationStruct.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tbox::MPI::request</type>
      <name>send_rqst</name>
      <anchorfile>structSAMRAI_1_1hier_1_1LayerEdgeSet_1_1CommunicationStruct.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>send_size</name>
      <anchorfile>structSAMRAI_1_1hier_1_1LayerEdgeSet_1_1CommunicationStruct.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>send_done</name>
      <anchorfile>structSAMRAI_1_1hier_1_1LayerEdgeSet_1_1CommunicationStruct.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector&lt; int &gt;</type>
      <name>recv_mesg</name>
      <anchorfile>structSAMRAI_1_1hier_1_1LayerEdgeSet_1_1CommunicationStruct.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tbox::MPI::request</type>
      <name>recv_rqst</name>
      <anchorfile>structSAMRAI_1_1hier_1_1LayerEdgeSet_1_1CommunicationStruct.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>recv_size</name>
      <anchorfile>structSAMRAI_1_1hier_1_1LayerEdgeSet_1_1CommunicationStruct.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>recv_done</name>
      <anchorfile>structSAMRAI_1_1hier_1_1LayerEdgeSet_1_1CommunicationStruct.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::LayerHierarchy</name>
    <filename>classSAMRAI_1_1hier_1_1LayerHierarchy.html</filename>
    <templarg>DIM</templarg>
    <member kind="typedef">
      <type>LayerEdgeSet&lt; DIM &gt;</type>
      <name>LayerEdges</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerHierarchy.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LayerNodeSet&lt; DIM &gt;</type>
      <name>LayerNodes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerHierarchy.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LayerHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerHierarchy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LayerHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerHierarchy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const LayerNodes &amp;</type>
      <name>getNodes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerHierarchy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>const LayerEdges &amp;</type>
      <name>getPeerEdges</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerHierarchy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>const LayerEdges &amp;</type>
      <name>getFineEdges</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerHierarchy.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>const LayerEdges &amp;</type>
      <name>getCoarseEdges</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerHierarchy.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int level_number) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::LayerNode</name>
    <filename>classSAMRAI_1_1hier_1_1LayerNode.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::Box</base>
    <member kind="typedef">
      <type>int</type>
      <name>LocalIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNode.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LayerNode</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNode.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LayerNode</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNode.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const LocalIndex index=-1, const int owner_rank=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LayerNode</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNode.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOwnerRank</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNode.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LocalIndex</type>
      <name>getLocalIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNode.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::Box&lt; DIM &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNode.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const hier::Box&lt; DIM &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNode.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNode.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const LayerNode &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNode.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const LayerNode &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNode.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const LayerNode &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNode.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const LayerNode &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNode.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const LayerNode &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNode.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const LayerNode &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToIntBuffer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNode.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(int *buffer) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromIntBuffer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNode.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int *buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>commBufferSize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNode.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNode.html</anchorfile>
      <anchor>n0</anchor>
      <arglist>(std::ostream &amp;co, const LayerNode&lt; D &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::LayerNodeSet</name>
    <filename>classSAMRAI_1_1hier_1_1LayerNodeSet.html</filename>
    <templarg>DIM</templarg>
    <member kind="typedef">
      <type>LayerNode&lt; DIM &gt;</type>
      <name>Node</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>set&lt; Node &gt;</type>
      <name>NodeContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ParallelState</name>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISTRIBUTED</name>
      <anchor>w4w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GLOBALIZED</name>
      <anchor>w4w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LayerNodeSet</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LayerNodeSet</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const LayerNodeSet &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LayerNodeSet</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>LayerNodeSet &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const LayerNodeSet &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>const NodeContainer &amp;</type>
      <name>getNodeContainer</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int rank=-1) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getRefinementRatio</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefinementRatio</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTo</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const hier::PatchLevel&lt; DIM &gt; &amp;level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTo</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const LayerNodeSet &amp;layer)</arglist>
    </member>
    <member kind="function">
      <type>NodeContainer::iterator</type>
      <name>addBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const bool use_vacant_index=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseNode</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const typename NodeContainer::iterator &amp;inode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseNode</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNode</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int local_index, const int owner=-1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNode</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(Node &amp;node) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParallelState</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const ParallelState parallel_state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParallelState</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(LayerNodeSet *layers, const int num_layers, ParallelState parallel_state) const </arglist>
    </member>
    <member kind="function">
      <type>ParallelState</type>
      <name>getParallelState</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocateData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LayerNodeSet.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(ostream &amp;os, int detail_depth=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BasePatchHierarchy</name>
    <filename>classSAMRAI_1_1hier_1_1BasePatchHierarchy.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::tbox::Serializable</base>
    <member kind="function">
      <type></type>
      <name>BasePatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BasePatchHierarchy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasePatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BasePatchHierarchy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt;</type>
      <name>getPatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BasePatchHierarchy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int l) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>finerLevelExists</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BasePatchHierarchy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int l) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getFinestLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BasePatchHierarchy.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumberLevels</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BasePatchHierarchy.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BasePatchHierarchy.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int max_levels)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BasePatchHierarchy.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BasePatchHierarchy.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database, const ComponentSelector &amp;patchdata_write_table)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BasePatchLevel</name>
    <filename>classSAMRAI_1_1hier_1_1BasePatchLevel.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>BasePatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BasePatchLevel.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasePatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BasePatchLevel.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BasePatchLevel.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>allocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BasePatchLevel.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int id, const double timestamp=0.0, tbox::Pointer&lt; tbox::Arena &gt; pool=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>allocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BasePatchLevel.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::ComponentSelector &amp;components, const double timestamp=0.0, tbox::Pointer&lt; tbox::Arena &gt; pool=NULL)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deallocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BasePatchLevel.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deallocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BasePatchLevel.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const hier::ComponentSelector &amp;components)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setTime</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BasePatchLevel.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const double timestamp, const int id)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setTime</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BasePatchLevel.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const double timestamp, const hier::ComponentSelector &amp;components)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setTime</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BasePatchLevel.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const double timestamp)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getRatio</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BasePatchLevel.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoundaryBox</name>
    <filename>classSAMRAI_1_1hier_1_1BoundaryBox.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>BoundaryBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundaryBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box, const int bdry_type, const int location_index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundaryBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const BoundaryBox&lt; DIM &gt; &amp;boundary_box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoundaryBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box&lt; DIM &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBoundaryType</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocationIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsMultiblockSingularity</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(bool is_mblk_singularity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIsMultiblockSingularity</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BoundaryBox&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryBox.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const BoundaryBox&lt; DIM &gt; &amp;boundary_box)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoundaryLookupTable</name>
    <filename>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type>const tbox::Array&lt; int &gt; &amp;</type>
      <name>getDirections</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int loc, const int codim) const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Array&lt; int &gt; &amp;</type>
      <name>getMaxLocationIndices</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLower</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int loc, const int codim, const int dim) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpper</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int loc, const int codim, const int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mapLocationIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int loc) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BoundaryLookupTable&lt; DIM &gt; *</type>
      <name>getLookupTable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>freeLookupTable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setUsingOriginalLocations</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(const bool use_original)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BoundaryLookupTable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~BoundaryLookupTable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoundaryLookupTable.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::CoarseFineBoundary</name>
    <filename>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>CoarseFineBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoarseFineBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const PatchHierarchy&lt; DIM &gt; &amp;hierarchy, int ln, const IntVector&lt; DIM &gt; &amp;max_ghost_width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeFromHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const PatchHierarchy&lt; DIM &gt; &amp;hierarchy, int ln, const IntVector&lt; DIM &gt; &amp;max_ghost_width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeFromLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const PatchLevel&lt; DIM &gt; &amp;level, const PatchLevel&lt; DIM &gt; &amp;level0, const IntVector&lt; DIM &gt; &amp;max_ghost_width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Array&lt; BoundaryBox&lt; DIM &gt; &gt; &amp;</type>
      <name>getBoundaries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int pn, int boundary_type) const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Array&lt; BoundaryBox&lt; DIM &gt; &gt; &amp;</type>
      <name>getNodeBoundaries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int pn) const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Array&lt; BoundaryBox&lt; DIM &gt; &gt; &amp;</type>
      <name>getEdgeBoundaries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int pn) const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Array&lt; BoundaryBox&lt; DIM &gt; &gt; &amp;</type>
      <name>getFaceBoundaries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int pn) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1CoarseFineBoundary.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::GridGeometry</name>
    <filename>classSAMRAI_1_1hier_1_1GridGeometry.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>GridGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GridGeometry.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GridGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GridGeometry.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findPatchesTouchingBoundaries</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GridGeometry.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Array&lt; tbox::Array&lt; tbox::Array&lt; bool &gt; &gt; &gt; &amp;touches_regular_bdry, tbox::Array&lt; tbox::Array&lt; tbox::Array&lt; bool &gt; &gt; &gt; &amp;touches_periodic_bdry, const PatchLevel&lt; DIM &gt; &amp;level, const IntVector&lt; DIM &gt; &amp;periodic_shift, const BoxArray&lt; DIM &gt; &amp;domain) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGeometryOnPatches</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GridGeometry.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchLevel&lt; DIM &gt; &amp;level, const hier::IntVector&lt; DIM &gt; &amp;ratio_to_level_zero, tbox::Array&lt; tbox::Array&lt; tbox::Array&lt; bool &gt; &gt; &gt; &amp;touches_regular_bdry, tbox::Array&lt; tbox::Array&lt; tbox::Array&lt; bool &gt; &gt; &gt; &amp;touches_periodic_bdry, bool defer_boundary_box_creation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaryBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GridGeometry.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(hier::PatchLevel&lt; DIM &gt; &amp;level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeShiftsForLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GridGeometry.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Array&lt; tbox::List&lt; IntVector&lt; DIM &gt; &gt; &gt; &amp;shifts, const PatchLevel&lt; DIM &gt; &amp;level, const BoxArray&lt; DIM &gt; &amp;physical_domain) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePhysicalDomain</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GridGeometry.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(BoxArray&lt; DIM &gt; &amp;domain, const IntVector&lt; DIM &gt; &amp;ratio_to_level_zero) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhysicalDomain</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GridGeometry.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const BoxArray&lt; DIM &gt; &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>const BoxArray&lt; DIM &gt; &amp;</type>
      <name>getPhysicalDomain</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GridGeometry.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDomainIsSingleBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GridGeometry.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GridGeometry.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializePeriodicShift</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GridGeometry.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;directions)</arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt;</type>
      <name>getPeriodicShift</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GridGeometry.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;ratio_to_level_zero=IntVector&lt; DIM &gt;(1)) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt;</type>
      <name>computeMaxGhostWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GridGeometry.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(tbox::Pointer&lt; PatchDescriptor&lt; DIM &gt; &gt; descriptor)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tbox::Pointer&lt; hier::GridGeometry&lt; DIM &gt; &gt;</type>
      <name>makeRefinedGridGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GridGeometry.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const string &amp;fine_geom_name, const hier::IntVector&lt; DIM &gt; &amp;refine_ratio, bool register_for_restart) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tbox::Pointer&lt; hier::GridGeometry&lt; DIM &gt; &gt;</type>
      <name>makeCoarsenedGridGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GridGeometry.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const string &amp;coarse_geom_name, const hier::IntVector&lt; DIM &gt; &amp;coarsen_ratio, bool register_for_restart) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setGeometryDataOnPatch</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GridGeometry.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const hier::IntVector&lt; DIM &gt; &amp;ratio_to_level_zero, const tbox::Array&lt; tbox::Array&lt; bool &gt; &gt; &amp;touches_regular_bdry, const tbox::Array&lt; tbox::Array&lt; bool &gt; &gt; &amp;touches_periodic_bdry) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBoundaryBoxesOnLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GridGeometry.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(tbox::Array&lt; BoundaryBox&lt; DIM &gt; &gt; boundaries[], const PatchLevel&lt; DIM &gt; &amp;level, const IntVector&lt; DIM &gt; &amp;periodic_shift, const IntVector&lt; DIM &gt; &amp;ghost_width, const BoxArray&lt; DIM &gt; &amp;domain, bool do_all_patches=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBoundaryBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1GridGeometry.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(tbox::Array&lt; BoundaryBox&lt; DIM &gt; &gt; boundaries[DIM], const Box&lt; DIM &gt; &amp;box, const BoxArray&lt; DIM &gt; &amp;domain_boxes, const IntVector&lt; DIM &gt; &amp;ghosts, const IntVector&lt; DIM &gt; &amp;periodic_shift) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::Patch</name>
    <filename>classSAMRAI_1_1hier_1_1Patch.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>Patch</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box, tbox::Pointer&lt; PatchDescriptor&lt; DIM &gt; &gt; descriptor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Patch</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box&lt; DIM &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPatchNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int p)</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; PatchDescriptor&lt; DIM &gt; &gt;</type>
      <name>getPatchDescriptor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; PatchData&lt; DIM &gt; &gt;</type>
      <name>getPatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int id) const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; PatchData&lt; DIM &gt; &gt;</type>
      <name>getPatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; Variable&lt; DIM &gt; &gt; variable, const tbox::Pointer&lt; VariableContext &gt; context) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int id, tbox::Pointer&lt; PatchData&lt; DIM &gt; &gt; data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkAllocated</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int id) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSizeOfPatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int id) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getSizeOfPatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const ComponentSelector &amp;components) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int id, const double time=0.0, tbox::Pointer&lt; tbox::Arena &gt; pool=(0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const ComponentSelector &amp;components, const double time=0.0, tbox::Pointer&lt; tbox::Arena &gt; pool=(0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const ComponentSelector &amp;components)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(tbox::Pointer&lt; PatchGeometry&lt; DIM &gt; &gt; geometry)</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; PatchGeometry&lt; DIM &gt; &gt;</type>
      <name>getPatchGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const double timestamp, const int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const double timestamp, const ComponentSelector &amp;components)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const double timestamp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPatchLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int level_number)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchInHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(bool in_hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database, ComponentSelector component_selector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database, const ComponentSelector &amp;patchdata_write_table)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recursivePrint</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(ostream &amp;os, const string &amp;border=string(), unsigned short depth=0) const </arglist>
    </member>
    <member kind="friend">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Patch.html</anchorfile>
      <anchor>n0</anchor>
      <arglist>(ostream &amp;s, const Patch&lt; D &gt; &amp;patch)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchFactory</name>
    <filename>classSAMRAI_1_1hier_1_1PatchFactory.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>PatchFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; Patch&lt; DIM &gt; &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box, tbox::Pointer&lt; PatchDescriptor&lt; DIM &gt; &gt; descriptor) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchGeometry</name>
    <filename>classSAMRAI_1_1hier_1_1PatchGeometry.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>PatchGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;ratio_to_level_zero, const tbox::Array&lt; tbox::Array&lt; bool &gt; &gt; &amp;touches_regular_bdry, const tbox::Array&lt; tbox::Array&lt; bool &gt; &gt; &amp;touches_periodic_bdry)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Array&lt; BoundaryBox&lt; DIM &gt; &gt; *</type>
      <name>getPatchBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaryBoxesOnPatch</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const tbox::Array&lt; BoundaryBox&lt; DIM &gt; &gt; bdry[DIM])</arglist>
    </member>
    <member kind="function">
      <type>const IntVector&lt; DIM &gt; &amp;</type>
      <name>getRatio</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectsPhysicalBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Array&lt; BoundaryBox&lt; DIM &gt; &gt; &amp;</type>
      <name>getNodeBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Array&lt; BoundaryBox&lt; DIM &gt; &gt; &amp;</type>
      <name>getEdgeBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Array&lt; BoundaryBox&lt; DIM &gt; &gt; &amp;</type>
      <name>getFaceBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Array&lt; BoundaryBox&lt; DIM &gt; &gt; &amp;</type>
      <name>getCodimensionBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int codim) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCodimensionBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const tbox::Array&lt; BoundaryBox&lt; DIM &gt; &gt; &amp;bdry_boxes, const int codim)</arglist>
    </member>
    <member kind="function">
      <type>Box&lt; DIM &gt;</type>
      <name>getBoundaryFillBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const BoundaryBox&lt; DIM &gt; &amp;bbox, const Box&lt; DIM &gt; &amp;patch_box, const IntVector&lt; DIM &gt; &amp;gcw) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTouchesRegularBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTouchesPeriodicBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTouchesRegularBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(int axis, int upperlower) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTouchesPeriodicBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(int axis, int upperlower) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchGeometry.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchHierarchy</name>
    <filename>classSAMRAI_1_1hier_1_1PatchHierarchy.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::BasePatchHierarchy</base>
    <member kind="function">
      <type></type>
      <name>PatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, tbox::Pointer&lt; GridGeometry&lt; DIM &gt; &gt; geometry, bool register_for_restart=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>makeRefinedPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const string &amp;fine_hierarchy_name, const hier::IntVector&lt; DIM &gt; &amp;refine_ratio, bool register_for_restart) const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>makeCoarsenedPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const string &amp;coarse_hierarchy_name, const hier::IntVector&lt; DIM &gt; &amp;coarsen_ratio, bool register_for_restart) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeNewPatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int l, const IntVector&lt; DIM &gt; &amp;ratio_to_coarsest, const BoxArray&lt; DIM &gt; &amp;patch_boxes, const ProcessorMapping &amp;mapping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int l)</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; BasePatchLevel&lt; DIM &gt; &gt;</type>
      <name>getPatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int l) const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; PatchDescriptor&lt; DIM &gt; &gt;</type>
      <name>getPatchDescriptor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>levelExists</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int l) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>finerLevelExists</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int l) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberLevels</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFinestLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(tbox::Pointer&lt; PatchFactory&lt; DIM &gt; &gt; factory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchLevelFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(tbox::Pointer&lt; PatchLevelFactory&lt; DIM &gt; &gt; factory)</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; GridGeometry&lt; DIM &gt; &gt;</type>
      <name>getGridGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database, const ComponentSelector &amp;patchdata_write_table)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int max_levels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database, const ComponentSelector component_selector, const int max_levels=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recursivePrint</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchHierarchy.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(ostream &amp;os, const string &amp;border=string(), unsigned short depth=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchLevel</name>
    <filename>classSAMRAI_1_1hier_1_1PatchLevel.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::BasePatchLevel</base>
    <member kind="typedef">
      <type>PatchLevelIterator&lt; DIM &gt;</type>
      <name>Iterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const BoxArray&lt; DIM &gt; &amp;boxes, const ProcessorMapping &amp;mapping, const IntVector&lt; DIM &gt; &amp;ratio_to_level_zero, const tbox::Pointer&lt; GridGeometry&lt; DIM &gt; &gt; grid_geometry, const tbox::Pointer&lt; PatchDescriptor&lt; DIM &gt; &gt; descriptor, tbox::Pointer&lt; PatchFactory&lt; DIM &gt; &gt; factory=(0), bool defer_boundary_box_creation=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; level_database, tbox::Pointer&lt; GridGeometry&lt; DIM &gt; &gt; grid_geometry, tbox::Pointer&lt; PatchDescriptor&lt; DIM &gt; &gt; descriptor, tbox::Pointer&lt; PatchFactory&lt; DIM &gt; &gt; factory, ComponentSelector component_selector=ComponentSelector(false), bool defer_boundary_box_creation=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int l)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNextCoarserHierarchyLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNextCoarserHierarchyLevelNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int l)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLevelInHierarchy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(bool in_hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfPatches</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; Patch&lt; DIM &gt; &gt;</type>
      <name>getPatch</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int p) const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; PatchDescriptor&lt; DIM &gt; &gt;</type>
      <name>getPatchDescriptor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; PatchFactory&lt; DIM &gt; &gt;</type>
      <name>getPatchFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; GridGeometry&lt; DIM &gt; &gt;</type>
      <name>getGridGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefinedPatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; coarse_level, const hier::IntVector&lt; DIM &gt; &amp;refine_ratio, const tbox::Pointer&lt; hier::GridGeometry&lt; DIM &gt; &gt; fine_grid_geometry=(0), bool defer_boundary_box_creation=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarsenedPatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; fine_level, const hier::IntVector&lt; DIM &gt; &amp;coarsen_ratio, const tbox::Pointer&lt; hier::GridGeometry&lt; DIM &gt; &gt; coarse_grid_geom=(0), bool defer_boundary_box_creation=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaryBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BoxArray&lt; DIM &gt; &amp;</type>
      <name>getPhysicalDomain</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BoxArray&lt; DIM &gt; &amp;</type>
      <name>getBoxes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Array&lt; tbox::List&lt; IntVector&lt; DIM &gt; &gt; &gt; &amp;</type>
      <name>getShiftsForLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ProcessorMapping &amp;</type>
      <name>getProcessorMapping</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IntVector&lt; DIM &gt; &amp;</type>
      <name>getRatio</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IntVector&lt; DIM &gt; &amp;</type>
      <name>getRatioToCoarserLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRatioToCoarserLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMappingForPatch</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const int p) const </arglist>
    </member>
    <member kind="function">
      <type>const Box&lt; DIM &gt; &amp;</type>
      <name>getBoxForPatch</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const int p) const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::List&lt; IntVector&lt; DIM &gt; &gt; &amp;</type>
      <name>getShiftsForPatch</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const int p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>patchTouchesRegularBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const int p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>patchTouchesPeriodicBoundary</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const int p) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const int id, const double timestamp=0.0, tbox::Pointer&lt; tbox::Arena &gt; pool=(0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(const ComponentSelector &amp;components, const double timestamp=0.0, tbox::Pointer&lt; tbox::Arena &gt; pool=(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkAllocated</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(const int id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(const int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(const ComponentSelector &amp;components)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(const double timestamp, const int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(const double timestamp, const ComponentSelector &amp;components)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(const double timestamp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database, ComponentSelector component_selector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database, const ComponentSelector &amp;patchdata_write_table)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>recursivePrint</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(ostream &amp;os, const string &amp;border=string(), unsigned short depth=0)</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; BoxGraph&lt; DIM &gt; &gt;</type>
      <name>getBoxGraph</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; BoxTop&lt; DIM &gt; &gt;</type>
      <name>getBoxTop</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; BoxTree&lt; DIM &gt; &gt;</type>
      <name>getBoxTree</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; BinaryTree&lt; DIM &gt; &gt;</type>
      <name>getBinaryTree</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevel.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchLevelIterator</name>
    <filename>classSAMRAI_1_1hier_1_1PatchLevelIterator.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>PatchLevelIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelIterator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PatchLevelIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelIterator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const PatchLevel&lt; DIM &gt; &amp;pl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PatchLevelIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelIterator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const PatchLevel&lt; DIM &gt; *pl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PatchLevelIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelIterator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const PatchLevelIterator&lt; DIM &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelIterator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const PatchLevel&lt; DIM &gt; &amp;pl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelIterator.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const PatchLevel&lt; DIM &gt; *pl)</arglist>
    </member>
    <member kind="function">
      <type>PatchLevelIterator&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelIterator.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const PatchLevelIterator&lt; DIM &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PatchLevelIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelIterator.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelIterator.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelIterator.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelIterator.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const void *</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelIterator.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelIterator.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelIterator.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelIterator.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const PatchLevelIterator&lt; DIM &gt; &amp;iterator) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelIterator.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const PatchLevelIterator&lt; DIM &gt; &amp;iterator) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchLevelFactory</name>
    <filename>classSAMRAI_1_1hier_1_1PatchLevelFactory.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>PatchLevelFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchLevelFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; PatchLevel&lt; DIM &gt; &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const BoxArray&lt; DIM &gt; &amp;boxes, const ProcessorMapping &amp;mapping, const IntVector&lt; DIM &gt; &amp;ratio_to_level_zero, const tbox::Pointer&lt; GridGeometry&lt; DIM &gt; &gt; grid_geometry, const tbox::Pointer&lt; PatchDescriptor&lt; DIM &gt; &gt; descriptor, tbox::Pointer&lt; PatchFactory&lt; DIM &gt; &gt; factory=(0)) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; PatchLevel&lt; DIM &gt; &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchLevelFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database, const tbox::Pointer&lt; GridGeometry&lt; DIM &gt; &gt; grid_geometry, const tbox::Pointer&lt; PatchDescriptor&lt; DIM &gt; &gt; descriptor, tbox::Pointer&lt; PatchFactory&lt; DIM &gt; &gt; factory=(0), const ComponentSelector component_selector=ComponentSelector(false)) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::ProcessorMapping</name>
    <filename>classSAMRAI_1_1hier_1_1ProcessorMapping.html</filename>
    <member kind="function">
      <type></type>
      <name>ProcessorMapping</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProcessorMapping</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProcessorMapping</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const ProcessorMapping &amp;mapping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProcessorMapping</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const tbox::Array&lt; int &gt; &amp;mapping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ProcessorMapping</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMappingSize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberNodes</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getProcessorAssignment</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProcessorAssignment</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int i, const int p)</arglist>
    </member>
    <member kind="function">
      <type>tbox::Array&lt; int &gt;</type>
      <name>getProcessorMapping</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProcessorMapping</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const tbox::Array&lt; int &gt; &amp;mapping)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfLocalIndices</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Array&lt; int &gt; &amp;</type>
      <name>getLocalIndices</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSizeOfMappingArray</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMappingLocal</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ProcessorMapping.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int i) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxGeometry</name>
    <filename>classSAMRAI_1_1hier_1_1BoxGeometry.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>BoxGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxGeometry.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoxGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxGeometry.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; BoxOverlap&lt; DIM &gt; &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxGeometry.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const BoxGeometry&lt; DIM &gt; &amp;src_geometry, const Box&lt; DIM &gt; &amp;src_mask, const bool overwrite_interior, const IntVector&lt; DIM &gt; &amp;src_offset) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tbox::Pointer&lt; BoxOverlap&lt; DIM &gt; &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxGeometry.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const BoxGeometry&lt; DIM &gt; &amp;dst_geometry, const BoxGeometry&lt; DIM &gt; &amp;src_geometry, const Box&lt; DIM &gt; &amp;src_mask, const bool overwrite_interior, const IntVector&lt; DIM &gt; &amp;src_offset, const bool retry) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::BoxOverlap</name>
    <filename>classSAMRAI_1_1hier_1_1BoxOverlap.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>BoxOverlap</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxOverlap.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoxOverlap</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxOverlap.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isOverlapEmpty</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxOverlap.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const IntVector&lt; DIM &gt; &amp;</type>
      <name>getSourceOffset</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxOverlap.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1hier_1_1BoxOverlap.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::ComponentSelector</name>
    <filename>classSAMRAI_1_1hier_1_1ComponentSelector.html</filename>
    <member kind="function">
      <type></type>
      <name>ComponentSelector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const bool flag=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComponentSelector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const ComponentSelector &amp;flags)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ComponentSelector</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ComponentSelector &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const ComponentSelector &amp;flags)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const ComponentSelector &amp;flags) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const ComponentSelector &amp;flags) const </arglist>
    </member>
    <member kind="function">
      <type>ComponentSelector</type>
      <name>operator|</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const ComponentSelector &amp;flags) const </arglist>
    </member>
    <member kind="function">
      <type>ComponentSelector</type>
      <name>operator &amp;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const ComponentSelector &amp;flags) const </arglist>
    </member>
    <member kind="function">
      <type>ComponentSelector</type>
      <name>operator!</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ComponentSelector</type>
      <name>andNot</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const ComponentSelector &amp;flags) const </arglist>
    </member>
    <member kind="function">
      <type>ComponentSelector &amp;</type>
      <name>operator|=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const ComponentSelector &amp;flags)</arglist>
    </member>
    <member kind="function">
      <type>ComponentSelector &amp;</type>
      <name>operator &amp;=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const ComponentSelector &amp;flags)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSet</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFlag</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clrFlag</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllFlags</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clrAllFlags</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1ComponentSelector.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(ostream &amp;os=tbox::plog) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::LocallyActiveDataPatchLevelManager</name>
    <filename>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</filename>
    <templarg>DIM</templarg>
    <member kind="typedef">
      <type>LocallyActiveDataPatchLevelIterator&lt; DIM &gt;</type>
      <name>Iterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataPatchLevelManager</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataPatchLevelManager</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const hier::PatchLevel&lt; DIM &gt; &amp;level)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataPatchLevelManager</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocallyActiveDataPatchLevelManager</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>getIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int patch_data_index) const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>getIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; variable) const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt;</type>
      <name>getPatchLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const hier::PatchLevel&lt; DIM &gt; &amp;level) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkLevel</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const hier::PatchLevel&lt; DIM &gt; *level) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const hier::PatchLevel&lt; DIM &gt; &amp;level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPatchDataActive</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(int patch_data_index, int patch_number) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::ComponentSelector &amp;</type>
      <name>getAllPatchDataActive</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(int patch_number) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchDataActive</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(int patch_data_index, int patch_number)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchDataActive</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const hier::ComponentSelector &amp;active_indices, int patch_number)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllPatchDataActive</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(int patch_number)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchDataActive</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const hier::ComponentSelector &amp;active_indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchDataInactive</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(int patch_data_index, int patch_number)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllPatchDataInactive</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(int patch_number)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllPatchDataInactive</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAllActiveDataInfo</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkAllocated</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(int patch_data_index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(int patch_data_index, double timestamp=0.0, tbox::Pointer&lt; tbox::Arena &gt; pool=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateAllPatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(double timestamp=0.0, tbox::Pointer&lt; tbox::Arena &gt; pool=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateAllPatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(int patch_number, double timestamp=0.0, tbox::Pointer&lt; tbox::Arena &gt; pool=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocatePatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(int patch_data_index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocateAllPatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocateAllPatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(int patch_number) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(ostream &amp;os=tbox::plog) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>LocallyActiveDataPatchLevelIterator&lt; DIM &gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelManager.html</anchorfile>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::LocallyActiveDataPatchLevelIterator</name>
    <filename>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelIterator.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataPatchLevelIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelIterator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataPatchLevelIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelIterator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; variable, const hier::PatchLevel&lt; DIM &gt; &amp;pl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataPatchLevelIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelIterator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; variable, const hier::PatchLevel&lt; DIM &gt; *pl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataPatchLevelIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelIterator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int patch_data_index, const hier::PatchLevel&lt; DIM &gt; *pl, const tbox::Array&lt; tbox::Pointer&lt; hier::ComponentSelector &gt; &gt; *active_data_indices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataPatchLevelIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelIterator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const LocallyActiveDataPatchLevelIterator&lt; DIM &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelIterator.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; variable, const hier::PatchLevel&lt; DIM &gt; &amp;pl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelIterator.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; variable, const hier::PatchLevel&lt; DIM &gt; *pl)</arglist>
    </member>
    <member kind="function">
      <type>LocallyActiveDataPatchLevelIterator&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelIterator.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const LocallyActiveDataPatchLevelIterator&lt; DIM &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocallyActiveDataPatchLevelIterator</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelIterator.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelIterator.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelIterator.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelIterator.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const void *</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelIterator.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelIterator.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelIterator.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelIterator.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const LocallyActiveDataPatchLevelIterator&lt; DIM &gt; &amp;iterator) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveDataPatchLevelIterator.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const LocallyActiveDataPatchLevelIterator &amp;iterator) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::LocallyActiveVariableDatabase</name>
    <filename>classSAMRAI_1_1hier_1_1LocallyActiveVariableDatabase.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::VariableDatabase</base>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::PatchDescriptor&lt; DIM &gt; &gt;</type>
      <name>getPatchDescriptor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveVariableDatabase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::VariableContext &gt;</type>
      <name>getSharedContext</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveVariableDatabase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>registerVariable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveVariableDatabase.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; variable, const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt;</type>
      <name>getVariable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveVariableDatabase.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkVariableExists</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveVariableDatabase.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkVariableExists</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveVariableDatabase.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; variable) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkVariablePatchDataIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveVariableDatabase.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; Variable&lt; DIM &gt; &gt; variable, int data_id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mapVariableToIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveVariableDatabase.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; variable) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mapIndexToVariable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveVariableDatabase.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int index, tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;variable) const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::LocallyActiveDataPatchLevelManager&lt; DIM &gt; &gt;</type>
      <name>getLocallyActiveDataPatchLevelManager</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveVariableDatabase.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLocallyActiveDataPatchLevelManager</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveVariableDatabase.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveVariableDatabase.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ostream &amp;os=tbox::plog) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LocallyActiveVariableDatabase&lt; DIM &gt; *</type>
      <name>getDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveVariableDatabase.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LocallyActiveVariableDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveVariableDatabase.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~LocallyActiveVariableDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveVariableDatabase.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>LocallyActiveDataPatchLevelIterator&lt; DIM &gt;</name>
      <anchorfile>classSAMRAI_1_1hier_1_1LocallyActiveVariableDatabase.html</anchorfile>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchData</name>
    <filename>classSAMRAI_1_1hier_1_1PatchData.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>PatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;domain, const IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Box&lt; DIM &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Box&lt; DIM &gt; &amp;</type>
      <name>getGhostBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const IntVector&lt; DIM &gt; &amp;</type>
      <name>getGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const double timestamp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTime</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const PatchData&lt; DIM &gt; &amp;src)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(PatchData&lt; DIM &gt; &amp;dst) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const PatchData&lt; DIM &gt; &amp;src, const BoxOverlap&lt; DIM &gt; &amp;overlap)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(PatchData&lt; DIM &gt; &amp;dst, const BoxOverlap&lt; DIM &gt; &amp;overlap) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const BoxOverlap&lt; DIM &gt; &amp;overlap) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const BoxOverlap&lt; DIM &gt; &amp;overlap) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const BoxOverlap&lt; DIM &gt; &amp;overlap)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFromDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getSpecializedFromDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putSpecializedToDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setGhostBox</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchData.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;ghost_box)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchDataFactory</name>
    <filename>classSAMRAI_1_1hier_1_1PatchDataFactory.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>PatchDataFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchDataFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tbox::Pointer&lt; PatchDataFactory&lt; DIM &gt; &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tbox::Pointer&lt; PatchData&lt; DIM &gt; &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box, tbox::Pointer&lt; tbox::Arena &gt; pool=(tbox::Arena *) NULL) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tbox::Pointer&lt; BoxGeometry&lt; DIM &gt; &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const IntVector&lt; DIM &gt; &amp;</type>
      <name>getDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const IntVector&lt; DIM &gt; &amp;ghosts)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const Box&lt; DIM &gt; &amp;box) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDataFactory.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const tbox::Pointer&lt; PatchDataFactory&lt; DIM &gt; &gt; &amp;dst_pdf) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::PatchDescriptor</name>
    <filename>classSAMRAI_1_1hier_1_1PatchDescriptor.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>PatchDescriptor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchDescriptor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>definePatchDataComponent</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const string &amp;name, tbox::Pointer&lt; PatchDataFactory&lt; DIM &gt; &gt; factory)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePatchDataComponent</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; PatchDataFactory&lt; DIM &gt; &gt;</type>
      <name>getPatchDataFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; PatchDataFactory&lt; DIM &gt; &gt;</type>
      <name>getPatchDataFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxNumberRegisteredComponents</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mapNameToIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>mapIndexToName</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int id) const </arglist>
    </member>
    <member kind="function">
      <type>IntVector&lt; DIM &gt;</type>
      <name>getMaxGhostWidth</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1PatchDescriptor.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ostream &amp;stream=tbox::plog) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::Variable</name>
    <filename>classSAMRAI_1_1hier_1_1Variable.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>Variable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Variable.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;name, const tbox::Pointer&lt; PatchDataFactory&lt; DIM &gt; &gt; factory)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Variable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Variable.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInstanceIdentifier</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Variable.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getName</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Variable.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Variable.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Variable.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchDataFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Variable.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(tbox::Pointer&lt; PatchDataFactory&lt; DIM &gt; &gt; factory)</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; PatchDataFactory&lt; DIM &gt; &gt;</type>
      <name>getPatchDataFactory</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Variable.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getCurrentMaximumInstanceNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1Variable.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::VariableContext</name>
    <filename>classSAMRAI_1_1hier_1_1VariableContext.html</filename>
    <member kind="function">
      <type></type>
      <name>VariableContext</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableContext.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VariableContext</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableContext.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableContext.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getName</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableContext.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableContext.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const VariableContext &amp;other) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getCurrentMaximumInstanceNumber</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableContext.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::hier::VariableDatabase</name>
    <filename>classSAMRAI_1_1hier_1_1VariableDatabase.html</filename>
    <templarg>DIM</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchDescriptor&lt; DIM &gt; &gt;</type>
      <name>getPatchDescriptor</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::VariableContext &gt;</type>
      <name>getContext</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkContextExists</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addVariable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; variable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt;</type>
      <name>getVariable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkVariableExists</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>registerClonedPatchDataIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; variable, int old_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>registerPatchDataIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; variable, int data_id=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removePatchDataIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int data_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkVariablePatchDataIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; variable, int data_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>registerVariableAndContext</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; variable, const tbox::Pointer&lt; hier::VariableContext &gt; context, const hier::IntVector&lt; DIM &gt; &amp;ghosts=hier::IntVector&lt; DIM &gt;(0))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>mapVariableAndContextToIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; variable, const tbox::Pointer&lt; hier::VariableContext &gt; context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>mapIndexToVariable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int index, tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;variable) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>mapIndexToVariableAndContext</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int index, tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;variable, tbox::Pointer&lt; hier::VariableContext &gt; &amp;context) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual hier::ComponentSelector</type>
      <name>getPatchDataRestartTable</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPatchDataRegisteredForRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerPatchDataForRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unregisterPatchDataForRestart</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(ostream &amp;os=tbox::plog, bool print_only_user_defined_variables=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>makeInternalSAMRAIWorkVariablePatchDataIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; variable, const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeInternalSAMRAIWorkVariablePatchDataIndex</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(int data_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VariableDatabase&lt; DIM &gt; *</type>
      <name>getDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>freeDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VariableDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~VariableDatabase</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>idUndefined</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getVariableId</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(const string &amp;name) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerSingletonSubclassInstance</name>
      <anchorfile>classSAMRAI_1_1hier_1_1VariableDatabase.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>(hier::VariableDatabase&lt; DIM &gt; *subclass_instance)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::math</name>
    <filename>namespaceSAMRAI_1_1math.html</filename>
    <class kind="class">SAMRAI::math::ArrayDataBasicOps</class>
    <class kind="class">SAMRAI::math::ArrayDataMiscellaneousOpsReal</class>
    <class kind="class">SAMRAI::math::ArrayDataNormOpsComplex</class>
    <class kind="class">SAMRAI::math::ArrayDataNormOpsInteger</class>
    <class kind="class">SAMRAI::math::ArrayDataNormOpsReal</class>
    <class kind="class">SAMRAI::math::HierarchyCellDataOpsComplex</class>
    <class kind="class">SAMRAI::math::HierarchyCellDataOpsInteger</class>
    <class kind="class">SAMRAI::math::HierarchyCellDataOpsReal</class>
    <class kind="class">SAMRAI::math::PatchCellDataBasicOps</class>
    <class kind="class">SAMRAI::math::PatchCellDataMiscellaneousOpsReal</class>
    <class kind="class">SAMRAI::math::PatchCellDataNormOpsComplex</class>
    <class kind="class">SAMRAI::math::PatchCellDataNormOpsReal</class>
    <class kind="class">SAMRAI::math::PatchCellDataOpsComplex</class>
    <class kind="class">SAMRAI::math::PatchCellDataOpsInteger</class>
    <class kind="class">SAMRAI::math::PatchCellDataOpsReal</class>
    <class kind="class">SAMRAI::math::HierarchyEdgeDataOpsComplex</class>
    <class kind="class">SAMRAI::math::HierarchyEdgeDataOpsInteger</class>
    <class kind="class">SAMRAI::math::HierarchyEdgeDataOpsReal</class>
    <class kind="class">SAMRAI::math::PatchEdgeDataBasicOps</class>
    <class kind="class">SAMRAI::math::PatchEdgeDataMiscellaneousOpsReal</class>
    <class kind="class">SAMRAI::math::PatchEdgeDataNormOpsComplex</class>
    <class kind="class">SAMRAI::math::PatchEdgeDataNormOpsReal</class>
    <class kind="class">SAMRAI::math::PatchEdgeDataOpsComplex</class>
    <class kind="class">SAMRAI::math::PatchEdgeDataOpsInteger</class>
    <class kind="class">SAMRAI::math::PatchEdgeDataOpsReal</class>
    <class kind="class">SAMRAI::math::HierarchyFaceDataOpsComplex</class>
    <class kind="class">SAMRAI::math::HierarchyFaceDataOpsInteger</class>
    <class kind="class">SAMRAI::math::HierarchyFaceDataOpsReal</class>
    <class kind="class">SAMRAI::math::PatchFaceDataBasicOps</class>
    <class kind="class">SAMRAI::math::PatchFaceDataMiscellaneousOpsReal</class>
    <class kind="class">SAMRAI::math::PatchFaceDataNormOpsComplex</class>
    <class kind="class">SAMRAI::math::PatchFaceDataNormOpsReal</class>
    <class kind="class">SAMRAI::math::PatchFaceDataOpsComplex</class>
    <class kind="class">SAMRAI::math::PatchFaceDataOpsInteger</class>
    <class kind="class">SAMRAI::math::PatchFaceDataOpsReal</class>
    <class kind="class">SAMRAI::math::HierarchyDataOpsComplex</class>
    <class kind="class">SAMRAI::math::HierarchyDataOpsInteger</class>
    <class kind="class">SAMRAI::math::HierarchyDataOpsManager</class>
    <class kind="class">SAMRAI::math::HierarchyDataOpsReal</class>
    <class kind="class">SAMRAI::math::HierarchyNodeDataOpsComplex</class>
    <class kind="class">SAMRAI::math::HierarchyNodeDataOpsInteger</class>
    <class kind="class">SAMRAI::math::HierarchyNodeDataOpsReal</class>
    <class kind="class">SAMRAI::math::PatchNodeDataBasicOps</class>
    <class kind="class">SAMRAI::math::PatchNodeDataMiscellaneousOpsReal</class>
    <class kind="class">SAMRAI::math::PatchNodeDataNormOpsComplex</class>
    <class kind="class">SAMRAI::math::PatchNodeDataNormOpsReal</class>
    <class kind="class">SAMRAI::math::PatchNodeDataOpsComplex</class>
    <class kind="class">SAMRAI::math::PatchNodeDataOpsInteger</class>
    <class kind="class">SAMRAI::math::PatchNodeDataOpsReal</class>
    <class kind="class">SAMRAI::math::HierarchySideDataOpsComplex</class>
    <class kind="class">SAMRAI::math::HierarchySideDataOpsInteger</class>
    <class kind="class">SAMRAI::math::HierarchySideDataOpsReal</class>
    <class kind="class">SAMRAI::math::PatchSideDataBasicOps</class>
    <class kind="class">SAMRAI::math::PatchSideDataMiscellaneousOpsReal</class>
    <class kind="class">SAMRAI::math::PatchSideDataNormOpsComplex</class>
    <class kind="class">SAMRAI::math::PatchSideDataNormOpsReal</class>
    <class kind="class">SAMRAI::math::PatchSideDataOpsComplex</class>
    <class kind="class">SAMRAI::math::PatchSideDataOpsInteger</class>
    <class kind="class">SAMRAI::math::PatchSideDataOpsReal</class>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::ArrayDataBasicOps</name>
    <filename>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>ArrayDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(pdat::ArrayData&lt; DIM, TYPE &gt; &amp;dst, const TYPE &amp;alpha, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(pdat::ArrayData&lt; DIM, TYPE &gt; &amp;dst, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src, const TYPE &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(pdat::ArrayData&lt; DIM, TYPE &gt; &amp;dst, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src1, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(pdat::ArrayData&lt; DIM, TYPE &gt; &amp;dst, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src1, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(pdat::ArrayData&lt; DIM, TYPE &gt; &amp;dst, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src1, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(pdat::ArrayData&lt; DIM, TYPE &gt; &amp;dst, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src1, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(pdat::ArrayData&lt; DIM, TYPE &gt; &amp;dst, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(pdat::ArrayData&lt; DIM, TYPE &gt; &amp;dst, const TYPE &amp;alpha, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src1, const TYPE &amp;beta, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(pdat::ArrayData&lt; DIM, TYPE &gt; &amp;dst, const TYPE &amp;alpha, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src1, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(pdat::ArrayData&lt; DIM, TYPE &gt; &amp;dst, const TYPE &amp;alpha, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src1, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataBasicOps.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(pdat::ArrayData&lt; DIM, TYPE &gt; &amp;dst, const TYPE &amp;width, const TYPE &amp;low, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::ArrayDataMiscellaneousOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>ArrayDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPosWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;data1, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;data2, const pdat::ArrayData&lt; DIM, double &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;data1, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;data2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalarWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(pdat::ArrayData&lt; DIM, TYPE &gt; &amp;dst, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src, const TYPE &amp;alpha, const pdat::ArrayData&lt; DIM, double &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(pdat::ArrayData&lt; DIM, TYPE &gt; &amp;dst, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src, const TYPE &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocalWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(pdat::ArrayData&lt; DIM, TYPE &gt; &amp;dst, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src, const pdat::ArrayData&lt; DIM, double &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(pdat::ArrayData&lt; DIM, TYPE &gt; &amp;dst, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;numer, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;denom, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;numer, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;denom, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::ArrayDataNormOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>ArrayDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(pdat::ArrayData&lt; DIM, double &gt; &amp;dst, const pdat::ArrayData&lt; DIM, dcomplex &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, dcomplex &gt; &amp;data, const pdat::ArrayData&lt; DIM, double &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1NormWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, dcomplex &gt; &amp;data, const pdat::ArrayData&lt; DIM, double &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, dcomplex &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2NormWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, dcomplex &gt; &amp;data, const pdat::ArrayData&lt; DIM, double &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, dcomplex &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2NormWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, dcomplex &gt; &amp;data, const pdat::ArrayData&lt; DIM, dcomplex &gt; &amp;wgt, const pdat::ArrayData&lt; DIM, double &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, dcomplex &gt; &amp;data, const pdat::ArrayData&lt; DIM, dcomplex &gt; &amp;wgt, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNormWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, dcomplex &gt; &amp;data, const pdat::ArrayData&lt; DIM, double &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, dcomplex &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dotWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, dcomplex &gt; &amp;data1, const pdat::ArrayData&lt; DIM, dcomplex &gt; &amp;data2, const pdat::ArrayData&lt; DIM, double &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, dcomplex &gt; &amp;data1, const pdat::ArrayData&lt; DIM, dcomplex &gt; &amp;data2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsComplex.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, dcomplex &gt; &amp;data, const pdat::ArrayData&lt; DIM, double &gt; &amp;vol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::ArrayDataNormOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1ArrayDataNormOpsInteger.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>ArrayDataNormOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsInteger.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayDataNormOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsInteger.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsInteger.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(pdat::ArrayData&lt; DIM, int &gt; &amp;dst, const pdat::ArrayData&lt; DIM, int &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::ArrayDataNormOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>ArrayDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;data, const pdat::ArrayData&lt; DIM, double &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(pdat::ArrayData&lt; DIM, TYPE &gt; &amp;dst, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1NormWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;data, const pdat::ArrayData&lt; DIM, double &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2NormWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;data, const pdat::ArrayData&lt; DIM, double &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2NormWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;data, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;weight, const pdat::ArrayData&lt; DIM, double &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;data, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNormWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;data, const pdat::ArrayData&lt; DIM, double &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dotWithControlVolume</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;data1, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;data2, const pdat::ArrayData&lt; DIM, double &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;data1, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;data2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1ArrayDataNormOpsReal.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;data, const pdat::ArrayData&lt; DIM, double &gt; &amp;vol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyCellDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::math::HierarchyDataOpsComplex</base>
    <member kind="function">
      <type></type>
      <name>HierarchyCellDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyCellDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int data_id, ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int data_id, const dcomplex &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int dst_id, const int src_id, const dcomplex &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const dcomplex &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int data_id, const dcomplex &amp;width, const dcomplex &amp;low, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsComplex.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyCellDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::math::HierarchyDataOpsInteger</base>
    <member kind="function">
      <type></type>
      <name>HierarchyCellDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyCellDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int data_id, ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int data_id, const int &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int dst_id, const int src_id, const int &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsInteger.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int data_id, const int &amp;width, const int &amp;low, const bool interior_only=true) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyCellDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::math::HierarchyDataOpsReal</base>
    <member kind="function">
      <type></type>
      <name>HierarchyCellDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyCellDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int data_id, ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int data_id, const TYPE &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const TYPE &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int data_id, const TYPE &amp;width, const TYPE &amp;low, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(const int dst_id, const int src_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyCellDataOpsReal.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchCellDataBasicOps</name>
    <filename>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchCellDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchCellDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src, const TYPE &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src1, const TYPE &amp;beta, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataBasicOps.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;width, const TYPE &amp;low, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchCellDataMiscellaneousOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchCellDataMiscellaneousOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchCellDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchCellDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;data1, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;data2, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; cvol=((pdat::CellData&lt; DIM, double &gt; *)(0))) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src, const TYPE &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; cvol=((pdat::CellData&lt; DIM, double &gt; *)(0))) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; cvol=((pdat::CellData&lt; DIM, double &gt; *)(0))) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;numer, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;denom, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;numer, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;denom, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchCellDataNormOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>PatchCellDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchCellDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, dcomplex &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::CellData&lt; DIM, dcomplex &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, dcomplex &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::CellData&lt; DIM, dcomplex &gt; &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, dcomplex &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::CellData&lt; DIM, dcomplex &gt; &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, dcomplex &gt; &gt; &amp;data1, const tbox::Pointer&lt; pdat::CellData&lt; DIM, dcomplex &gt; &gt; &amp;data2, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsComplex.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; vol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchCellDataNormOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchCellDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchCellDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; cvol=((pdat::CellData&lt; DIM, double &gt; *)(0))) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;data1, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;data2, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataNormOpsReal.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::CellData&lt; DIM, double &gt; &gt; vol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchCellDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1PatchCellDataOpsComplex.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::math::PatchCellDataBasicOps&lt; DIM, dcomplex &gt;</base>
    <base>SAMRAI::math::PatchCellDataNormOpsComplex</base>
    <member kind="function">
      <type></type>
      <name>PatchCellDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsComplex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchCellDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsComplex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsComplex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, dcomplex &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::CellData&lt; DIM, dcomplex &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsComplex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; hier::Patch&lt; DIM &gt; &gt; patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsComplex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsComplex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, dcomplex &gt; &gt; &amp;dst, const dcomplex &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchCellDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1PatchCellDataOpsInteger.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::math::PatchCellDataBasicOps&lt; DIM, int &gt;</base>
    <member kind="function">
      <type></type>
      <name>PatchCellDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsInteger.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchCellDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsInteger.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsInteger.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, int &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsInteger.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, int &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::CellData&lt; DIM, int &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsInteger.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::Patch&lt; DIM &gt; &gt; patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsInteger.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, int &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsInteger.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, int &gt; &gt; &amp;dst, const int &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsInteger.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, int &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::CellData&lt; DIM, int &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchCellDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchCellDataOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::math::PatchCellDataBasicOps</base>
    <base>SAMRAI::math::PatchCellDataMiscellaneousOpsReal</base>
    <base>SAMRAI::math::PatchCellDataNormOpsReal</base>
    <member kind="function">
      <type></type>
      <name>PatchCellDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchCellDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; hier::Patch&lt; DIM &gt; &gt; patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchCellDataOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; pdat::CellData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyEdgeDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::math::HierarchyDataOpsComplex</base>
    <member kind="function">
      <type></type>
      <name>HierarchyEdgeDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyEdgeDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int data_id, ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int data_id, const dcomplex &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int dst_id, const int src_id, const dcomplex &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const dcomplex &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int data_id, const dcomplex &amp;width, const dcomplex &amp;low, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsComplex.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyEdgeDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::math::HierarchyDataOpsInteger</base>
    <member kind="function">
      <type></type>
      <name>HierarchyEdgeDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyEdgeDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int data_id, ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int data_id, const int &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int dst_id, const int src_id, const int &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsInteger.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int data_id, const int &amp;width, const int &amp;low, const bool interior_only=true) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyEdgeDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::math::HierarchyDataOpsReal</base>
    <member kind="function">
      <type></type>
      <name>HierarchyEdgeDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyEdgeDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int data_id, ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int data_id, const TYPE &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const TYPE &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int data_id, const TYPE &amp;width, const TYPE &amp;low, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(const int dst_id, const int src_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyEdgeDataOpsReal.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchEdgeDataBasicOps</name>
    <filename>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchEdgeDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchEdgeDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src, const TYPE &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src1, const TYPE &amp;beta, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataBasicOps.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;width, const TYPE &amp;low, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchEdgeDataMiscellaneousOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchEdgeDataMiscellaneousOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchEdgeDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchEdgeDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;data1, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;data2, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; cvol=((pdat::EdgeData&lt; DIM, double &gt; *)(0))) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src, const TYPE &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; cvol=((pdat::EdgeData&lt; DIM, double &gt; *)(0))) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; cvol=((pdat::EdgeData&lt; DIM, double &gt; *)(0))) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;numer, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;denom, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;numer, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;denom, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchEdgeDataNormOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>PatchEdgeDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchEdgeDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, dcomplex &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, dcomplex &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, dcomplex &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, dcomplex &gt; &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, dcomplex &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, dcomplex &gt; &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, dcomplex &gt; &gt; &amp;data1, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, dcomplex &gt; &gt; &amp;data2, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsComplex.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; vol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchEdgeDataNormOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchEdgeDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchEdgeDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; cvol=((pdat::EdgeData&lt; DIM, double &gt; *)(0))) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;data1, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;data2, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataNormOpsReal.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, double &gt; &gt; vol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchEdgeDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1PatchEdgeDataOpsComplex.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::math::PatchEdgeDataBasicOps&lt; DIM, dcomplex &gt;</base>
    <base>SAMRAI::math::PatchEdgeDataNormOpsComplex</base>
    <member kind="function">
      <type></type>
      <name>PatchEdgeDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsComplex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchEdgeDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsComplex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsComplex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, dcomplex &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, dcomplex &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsComplex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; hier::Patch&lt; DIM &gt; &gt; patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsComplex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsComplex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, dcomplex &gt; &gt; &amp;dst, const dcomplex &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchEdgeDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1PatchEdgeDataOpsInteger.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::math::PatchEdgeDataBasicOps&lt; DIM, int &gt;</base>
    <member kind="function">
      <type></type>
      <name>PatchEdgeDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsInteger.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchEdgeDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsInteger.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsInteger.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, int &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsInteger.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, int &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, int &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsInteger.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::Patch&lt; DIM &gt; &gt; patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsInteger.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, int &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsInteger.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, int &gt; &gt; &amp;dst, const int &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsInteger.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, int &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, int &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchEdgeDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchEdgeDataOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::math::PatchEdgeDataBasicOps</base>
    <base>SAMRAI::math::PatchEdgeDataMiscellaneousOpsReal</base>
    <base>SAMRAI::math::PatchEdgeDataNormOpsReal</base>
    <member kind="function">
      <type></type>
      <name>PatchEdgeDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchEdgeDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; hier::Patch&lt; DIM &gt; &gt; patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchEdgeDataOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; pdat::EdgeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyFaceDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::math::HierarchyDataOpsComplex</base>
    <member kind="function">
      <type></type>
      <name>HierarchyFaceDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyFaceDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int data_id, ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int data_id, const dcomplex &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int dst_id, const int src_id, const dcomplex &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const dcomplex &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int data_id, const dcomplex &amp;width, const dcomplex &amp;low, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsComplex.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyFaceDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::math::HierarchyDataOpsInteger</base>
    <member kind="function">
      <type></type>
      <name>HierarchyFaceDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyFaceDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int data_id, ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int data_id, const int &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int dst_id, const int src_id, const int &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsInteger.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int data_id, const int &amp;width, const int &amp;low, const bool interior_only=true) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyFaceDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::math::HierarchyDataOpsReal</base>
    <member kind="function">
      <type></type>
      <name>HierarchyFaceDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyFaceDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int data_id, ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int data_id, const TYPE &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const TYPE &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int data_id, const TYPE &amp;width, const TYPE &amp;low, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(const int dst_id, const int src_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyFaceDataOpsReal.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchFaceDataBasicOps</name>
    <filename>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchFaceDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchFaceDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src, const TYPE &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src1, const TYPE &amp;beta, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataBasicOps.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;width, const TYPE &amp;low, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchFaceDataMiscellaneousOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchFaceDataMiscellaneousOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchFaceDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchFaceDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;data1, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;data2, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; cvol=((pdat::FaceData&lt; DIM, double &gt; *)(0))) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src, const TYPE &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; cvol=((pdat::FaceData&lt; DIM, double &gt; *)(0))) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; cvol=((pdat::FaceData&lt; DIM, double &gt; *)(0))) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;numer, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;denom, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;numer, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;denom, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchFaceDataNormOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>PatchFaceDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchFaceDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, dcomplex &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, dcomplex &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, dcomplex &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, dcomplex &gt; &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, dcomplex &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, dcomplex &gt; &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, dcomplex &gt; &gt; &amp;data1, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, dcomplex &gt; &gt; &amp;data2, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsComplex.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; vol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchFaceDataNormOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchFaceDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchFaceDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;data1, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;data2, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataNormOpsReal.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, double &gt; &gt; vol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchFaceDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1PatchFaceDataOpsComplex.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::math::PatchFaceDataBasicOps&lt; DIM, dcomplex &gt;</base>
    <base>SAMRAI::math::PatchFaceDataNormOpsComplex</base>
    <member kind="function">
      <type></type>
      <name>PatchFaceDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsComplex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchFaceDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsComplex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsComplex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, dcomplex &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, dcomplex &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsComplex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; hier::Patch&lt; DIM &gt; &gt; patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsComplex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsComplex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, dcomplex &gt; &gt; &amp;dst, const dcomplex &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchFaceDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1PatchFaceDataOpsInteger.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::math::PatchFaceDataBasicOps&lt; DIM, int &gt;</base>
    <member kind="function">
      <type></type>
      <name>PatchFaceDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsInteger.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchFaceDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsInteger.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsInteger.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, int &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsInteger.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, int &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, int &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsInteger.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::Patch&lt; DIM &gt; &gt; patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsInteger.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, int &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsInteger.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, int &gt; &gt; &amp;dst, const int &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsInteger.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, int &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, int &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchFaceDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchFaceDataOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::math::PatchFaceDataBasicOps</base>
    <base>SAMRAI::math::PatchFaceDataMiscellaneousOpsReal</base>
    <base>SAMRAI::math::PatchFaceDataNormOpsReal</base>
    <member kind="function">
      <type></type>
      <name>PatchFaceDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchFaceDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; hier::Patch&lt; DIM &gt; &gt; patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchFaceDataOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; pdat::FaceData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>HierarchyDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int coarsest_level, const int finest_level)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int data1_id, const int data2_id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int data_id, ostream &amp;s, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int data_id, const dcomplex &amp;alpha, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int dst_id, const int src_id, const dcomplex &amp;alpha, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const dcomplex &amp;beta, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int data_id, const dcomplex &amp;width, const dcomplex &amp;low, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int data_id, const int vol_id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsComplex.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>HierarchyDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int coarsest_level, const int finest_level)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int data1_id, const int data2_id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int data_id, ostream &amp;s, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int data_id, const int &amp;alpha, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int dst_id, const int src_id, const int &amp;alpha, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int &amp;beta, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsInteger.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int data_id, const int &amp;width, const int &amp;low, const bool interior_only=true) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyDataOpsManager</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyDataOpsManager.html</filename>
    <templarg>DIM</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; HierarchyDataOpsReal&lt; DIM, double &gt; &gt;</type>
      <name>getOperationsDouble</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsManager.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;variable, tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; &amp;hierarchy, bool get_unique=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; HierarchyDataOpsInteger&lt; DIM &gt; &gt;</type>
      <name>getOperationsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsManager.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;variable, tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; &amp;hierarchy, bool get_unique=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HierarchyDataOpsManager&lt; DIM &gt; *</type>
      <name>getManager</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsManager.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>freeManager</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsManager.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HierarchyDataOpsManager</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsManager.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyDataOpsManager</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsManager.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerSingletonSubclassInstance</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsManager.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(HierarchyDataOpsManager&lt; DIM &gt; *subclass_instance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>HierarchyDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int coarsest_level, const int finest_level)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int data1_id, const int data2_id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int data_id, ostream &amp;s, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int data_id, const TYPE &amp;alpha, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const TYPE &amp;beta, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int data_id, const TYPE &amp;width, const TYPE &amp;low, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const int data_id, const int vol_id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1, bool local_only=false) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(const int dst_id, const int src_id, const int vol_id=-1) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyDataOpsReal.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyNodeDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::math::HierarchyDataOpsComplex</base>
    <member kind="function">
      <type></type>
      <name>HierarchyNodeDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyNodeDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int data_id, ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int data_id, const dcomplex &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int dst_id, const int src_id, const dcomplex &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const dcomplex &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int data_id, const dcomplex &amp;width, const dcomplex &amp;low, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsComplex.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyNodeDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::math::HierarchyDataOpsInteger</base>
    <member kind="function">
      <type></type>
      <name>HierarchyNodeDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyNodeDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int data_id, ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int data_id, const int &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int dst_id, const int src_id, const int &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsInteger.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int data_id, const int &amp;width, const int &amp;low, const bool interior_only=true) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchyNodeDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::math::HierarchyDataOpsReal</base>
    <member kind="function">
      <type></type>
      <name>HierarchyNodeDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchyNodeDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int data_id, ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int data_id, const TYPE &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const TYPE &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int data_id, const TYPE &amp;width, const TYPE &amp;low, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(const int dst_id, const int src_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchyNodeDataOpsReal.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchNodeDataBasicOps</name>
    <filename>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchNodeDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchNodeDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src, const TYPE &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src1, const TYPE &amp;beta, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataBasicOps.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;width, const TYPE &amp;low, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchNodeDataMiscellaneousOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchNodeDataMiscellaneousOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchNodeDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchNodeDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;data1, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;data2, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; cvol=((pdat::NodeData&lt; DIM, double &gt; *)(0))) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src, const TYPE &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; cvol=((pdat::NodeData&lt; DIM, double &gt; *)(0))) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; cvol=((pdat::NodeData&lt; DIM, double &gt; *)(0))) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;numer, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;denom, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;numer, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;denom, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchNodeDataNormOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>PatchNodeDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchNodeDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, dcomplex &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, dcomplex &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, dcomplex &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, dcomplex &gt; &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, dcomplex &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, dcomplex &gt; &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, dcomplex &gt; &gt; &amp;data1, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, dcomplex &gt; &gt; &amp;data2, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsComplex.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; vol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchNodeDataNormOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchNodeDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchNodeDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;data1, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;data2, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataNormOpsReal.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, double &gt; &gt; vol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchNodeDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1PatchNodeDataOpsComplex.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::math::PatchNodeDataBasicOps&lt; DIM, dcomplex &gt;</base>
    <base>SAMRAI::math::PatchNodeDataNormOpsComplex</base>
    <member kind="function">
      <type></type>
      <name>PatchNodeDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsComplex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchNodeDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsComplex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsComplex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, dcomplex &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, dcomplex &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsComplex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; hier::Patch&lt; DIM &gt; &gt; patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsComplex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsComplex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, dcomplex &gt; &gt; &amp;dst, const dcomplex &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchNodeDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1PatchNodeDataOpsInteger.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::math::PatchNodeDataBasicOps&lt; DIM, int &gt;</base>
    <member kind="function">
      <type></type>
      <name>PatchNodeDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsInteger.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchNodeDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsInteger.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsInteger.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, int &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsInteger.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, int &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, int &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsInteger.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::Patch&lt; DIM &gt; &gt; patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsInteger.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, int &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsInteger.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, int &gt; &gt; &amp;dst, const int &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsInteger.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, int &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, int &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchNodeDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchNodeDataOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::math::PatchNodeDataBasicOps</base>
    <base>SAMRAI::math::PatchNodeDataMiscellaneousOpsReal</base>
    <base>SAMRAI::math::PatchNodeDataNormOpsReal</base>
    <member kind="function">
      <type></type>
      <name>PatchNodeDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchNodeDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; hier::Patch&lt; DIM &gt; &gt; patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchNodeDataOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; pdat::NodeData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchySideDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::math::HierarchyDataOpsComplex</base>
    <member kind="function">
      <type></type>
      <name>HierarchySideDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchySideDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int data_id, ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int data_id, const dcomplex &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int dst_id, const int src_id, const dcomplex &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const dcomplex &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int dst_id, const dcomplex &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int data_id, const dcomplex &amp;width, const dcomplex &amp;low, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsComplex.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchySideDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::math::HierarchyDataOpsInteger</base>
    <member kind="function">
      <type></type>
      <name>HierarchySideDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchySideDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int data_id, ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int data_id, const int &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int dst_id, const int src_id, const int &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int dst_id, const int &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsInteger.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int data_id, const int &amp;width, const int &amp;low, const bool interior_only=true) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::HierarchySideDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::math::HierarchyDataOpsReal</base>
    <member kind="function">
      <type></type>
      <name>HierarchySideDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level=-1, const int finest_level=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HierarchySideDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int data_id, ostream &amp;s, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int data_id, const TYPE &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int dst_id, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const TYPE &amp;beta, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int dst_id, const TYPE &amp;alpha, const int src1_id, const int src2_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int dst_id, const int src_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const int data_id, const TYPE &amp;width, const TYPE &amp;low, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int data_id, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const int data_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const int data_id, const int weight_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const int data_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(const int data_id, const int vol_id) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(const int data1_id, const int data2_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(const int dst_id, const int src_id, const TYPE &amp;alpha, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(const int dst_id, const int src_id, const int vol_id=-1) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1HierarchySideDataOpsReal.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(const int numer_id, const int denom_id, bool local_only=false) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchSideDataBasicOps</name>
    <filename>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchSideDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchSideDataBasicOps</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src, const TYPE &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src1, const TYPE &amp;beta, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axmy</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src1, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src2, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataBasicOps.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;width, const TYPE &amp;low, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchSideDataMiscellaneousOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchSideDataMiscellaneousOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchSideDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchSideDataMiscellaneousOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;data1, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;data2, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; cvol=((pdat::SideData&lt; DIM, double &gt; *)(0))) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src, const TYPE &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; cvol=((pdat::SideData&lt; DIM, double &gt; *)(0))) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; cvol=((pdat::SideData&lt; DIM, double &gt; *)(0))) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;numer, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;denom, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>minPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataMiscellaneousOpsReal.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;numer, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;denom, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchSideDataNormOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>PatchSideDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchSideDataNormOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, dcomplex &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::SideData&lt; DIM, dcomplex &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, dcomplex &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::SideData&lt; DIM, dcomplex &gt; &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, dcomplex &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::SideData&lt; DIM, dcomplex &gt; &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, dcomplex &gt; &gt; &amp;data1, const tbox::Pointer&lt; pdat::SideData&lt; DIM, dcomplex &gt; &gt; &amp;data2, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsComplex.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; vol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchSideDataNormOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>PatchSideDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchSideDataNormOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sumControlVolumes</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; &amp;cvol, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;data, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;weight, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;data1, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;data2, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; cvol=(0)) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>integral</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataNormOpsReal.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, const tbox::Pointer&lt; pdat::SideData&lt; DIM, double &gt; &gt; vol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchSideDataOpsComplex</name>
    <filename>classSAMRAI_1_1math_1_1PatchSideDataOpsComplex.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::math::PatchSideDataBasicOps&lt; DIM, dcomplex &gt;</base>
    <base>SAMRAI::math::PatchSideDataNormOpsComplex</base>
    <member kind="function">
      <type></type>
      <name>PatchSideDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsComplex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchSideDataOpsComplex</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsComplex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsComplex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, dcomplex &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::SideData&lt; DIM, dcomplex &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsComplex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; hier::Patch&lt; DIM &gt; &gt; patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsComplex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, dcomplex &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsComplex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, dcomplex &gt; &gt; &amp;dst, const dcomplex &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchSideDataOpsInteger</name>
    <filename>classSAMRAI_1_1math_1_1PatchSideDataOpsInteger.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::math::PatchSideDataBasicOps&lt; DIM, int &gt;</base>
    <member kind="function">
      <type></type>
      <name>PatchSideDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsInteger.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchSideDataOpsInteger</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsInteger.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numberOfEntries</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsInteger.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, int &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsInteger.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, int &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::SideData&lt; DIM, int &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsInteger.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::Patch&lt; DIM &gt; &gt; patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsInteger.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, int &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsInteger.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, int &gt; &gt; &amp;dst, const int &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsInteger.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, int &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::SideData&lt; DIM, int &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::math::PatchSideDataOpsReal</name>
    <filename>classSAMRAI_1_1math_1_1PatchSideDataOpsReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::math::PatchSideDataBasicOps</base>
    <base>SAMRAI::math::PatchSideDataMiscellaneousOpsReal</base>
    <base>SAMRAI::math::PatchSideDataNormOpsReal</base>
    <member kind="function">
      <type></type>
      <name>PatchSideDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PatchSideDataOpsReal</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;dst, const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; hier::Patch&lt; DIM &gt; &gt; patch, const int data1_id, const int data2_id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printData</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;data, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;s=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1math_1_1PatchSideDataOpsReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; pdat::SideData&lt; DIM, TYPE &gt; &gt; &amp;dst, const TYPE &amp;alpha, const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::mblk</name>
    <filename>namespaceSAMRAI_1_1mblk.html</filename>
    <class kind="class">SAMRAI::mblk::MBDataUtilities</class>
    <class kind="class">SAMRAI::mblk::MBUtilities</class>
    <class kind="class">SAMRAI::mblk::MultiblockCoarsenAlgorithm</class>
    <class kind="class">SAMRAI::mblk::MultiblockCoarsenPatchStrategy</class>
    <class kind="class">SAMRAI::mblk::MultiblockCoarsenSchedule</class>
    <class kind="class">SAMRAI::mblk::MultiblockGriddingAlgorithm</class>
    <class kind="class">SAMRAI::mblk::MultiblockGriddingTagger</class>
    <class kind="class">SAMRAI::mblk::MultiblockPatchHierarchy</class>
    <class kind="class">SAMRAI::mblk::MultiblockPatchLevel</class>
    <class kind="class">SAMRAI::mblk::MultiblockRefineAlgorithm</class>
    <class kind="class">SAMRAI::mblk::MultiblockRefinePatchStrategy</class>
    <class kind="class">SAMRAI::mblk::MultiblockRefineSchedule</class>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mblk::MBDataUtilities</name>
    <filename>classSAMRAI_1_1mblk_1_1MBDataUtilities.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>MBDataUtilities</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MBDataUtilities.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MBDataUtilities</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MBDataUtilities.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>translateAndCopyCellData</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MBDataUtilities.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(pdat::CellData&lt; DIM, TYPE &gt; &amp;dst, const pdat::CellData&lt; DIM, TYPE &gt; &amp;src, const hier::IntVector&lt; DIM &gt; &amp;shift, const typename MultiblockPatchHierarchy&lt; DIM &gt;::RotationIdentifier rotate)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>translateAndCopyNodeData</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MBDataUtilities.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(pdat::NodeData&lt; DIM, TYPE &gt; &amp;dst, const pdat::NodeData&lt; DIM, TYPE &gt; &amp;src, const hier::IntVector&lt; DIM &gt; &amp;shift, const typename MultiblockPatchHierarchy&lt; DIM &gt;::RotationIdentifier rotate)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>translateAndCopyFaceData</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MBDataUtilities.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(pdat::FaceData&lt; DIM, TYPE &gt; &amp;dst, const pdat::FaceData&lt; DIM, TYPE &gt; &amp;src, const hier::IntVector&lt; DIM &gt; &amp;shift, const typename MultiblockPatchHierarchy&lt; DIM &gt;::RotationIdentifier rotate)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>translateAndCopySideData</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MBDataUtilities.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(pdat::SideData&lt; DIM, TYPE &gt; &amp;dst, const pdat::SideData&lt; DIM, TYPE &gt; &amp;src, const hier::IntVector&lt; DIM &gt; &amp;shift, const typename MultiblockPatchHierarchy&lt; DIM &gt;::RotationIdentifier rotate)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>translateAndCopyEdgeData</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MBDataUtilities.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>(pdat::EdgeData&lt; DIM, TYPE &gt; &amp;dst, const pdat::EdgeData&lt; DIM, TYPE &gt; &amp;src, const hier::IntVector&lt; DIM &gt; &amp;shift, const typename MultiblockPatchHierarchy&lt; DIM &gt;::RotationIdentifier rotate)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>translateAndCopyArrayData</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MBDataUtilities.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>(pdat::ArrayData&lt; DIM, TYPE &gt; &amp;dst, const pdat::ArrayData&lt; DIM, TYPE &gt; &amp;src, const hier::IntVector&lt; DIM &gt; &amp;shift, const typename MultiblockPatchHierarchy&lt; DIM &gt;::RotationIdentifier rotate)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mblk::MBUtilities</name>
    <filename>classSAMRAI_1_1mblk_1_1MBUtilities.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>MBUtilities</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MBUtilities.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MBUtilities</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MBUtilities.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>translateAndCopyData</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MBUtilities.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst, const hier::PatchData&lt; DIM &gt; &amp;src, const hier::IntVector&lt; DIM &gt; &amp;shift, const typename MultiblockPatchHierarchy&lt; DIM &gt;::RotationIdentifier rotate)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>rotateIndex</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MBUtilities.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(int *index, const typename MultiblockPatchHierarchy&lt; DIM &gt;::RotationIdentifier rotation)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mblk::MultiblockCoarsenAlgorithm</name>
    <filename>classSAMRAI_1_1mblk_1_1MultiblockCoarsenAlgorithm.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>MultiblockCoarsenAlgorithm</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockCoarsenAlgorithm.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; MultiblockPatchHierarchy&lt; DIM &gt; &gt; multiblock, bool fill_coarse_data=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiblockCoarsenAlgorithm</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockCoarsenAlgorithm.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCoarsen</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockCoarsenAlgorithm.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int dst, const int src, const tbox::Pointer&lt; xfer::CoarsenOperator&lt; DIM &gt; &gt; opcoarsen, const hier::IntVector&lt; DIM &gt; &amp;gcw_to_coarsen=hier::IntVector&lt; DIM &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; MultiblockCoarsenSchedule&lt; DIM &gt; &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockCoarsenAlgorithm.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; MultiblockPatchLevel&lt; DIM &gt; &gt; crse_level, tbox::Pointer&lt; MultiblockPatchLevel&lt; DIM &gt; &gt; fine_level, MultiblockCoarsenPatchStrategy&lt; DIM &gt; *patch_strategy=((MultiblockCoarsenPatchStrategy&lt; DIM &gt; *)(0)), MultiblockRefinePatchStrategy&lt; DIM &gt; *refine_strategy=((MultiblockRefinePatchStrategy&lt; DIM &gt; *)(0))) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mblk::MultiblockCoarsenPatchStrategy</name>
    <filename>classSAMRAI_1_1mblk_1_1MultiblockCoarsenPatchStrategy.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenPatchStrategy</base>
    <member kind="function">
      <type></type>
      <name>MultiblockCoarsenPatchStrategy</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockCoarsenPatchStrategy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiblockCoarsenPatchStrategy</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockCoarsenPatchStrategy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual hier::IntVector&lt; DIM &gt;</type>
      <name>getMultiblockCoarsenOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockCoarsenPatchStrategy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessCoarsen</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockCoarsenPatchStrategy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessCoarsen</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockCoarsenPatchStrategy.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCoarsenBlockNumber</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockCoarsenPatchStrategy.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int block_number)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCoarsenBlockNumber</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockCoarsenPatchStrategy.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearCoarsenBlockNumber</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockCoarsenPatchStrategy.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>d_block_number</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockCoarsenPatchStrategy.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mblk::MultiblockCoarsenSchedule</name>
    <filename>classSAMRAI_1_1mblk_1_1MultiblockCoarsenSchedule.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>MultiblockCoarsenSchedule</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockCoarsenSchedule.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; MultiblockPatchLevel&lt; DIM &gt; &gt; crse_level, tbox::Pointer&lt; MultiblockPatchLevel&lt; DIM &gt; &gt; fine_level, const tbox::Pointer&lt; xfer::CoarsenClasses&lt; DIM &gt; &gt; coarsen_classes, tbox::Pointer&lt; MultiblockPatchHierarchy&lt; DIM &gt; &gt; multiblock, MultiblockCoarsenPatchStrategy&lt; DIM &gt; *coarsen_strategy, MultiblockRefinePatchStrategy&lt; DIM &gt; *refine_strategy, bool fill_coarse_data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiblockCoarsenSchedule</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockCoarsenSchedule.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsenData</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockCoarsenSchedule.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; xfer::CoarsenClasses&lt; DIM &gt; &gt; &amp;</type>
      <name>getEquivalenceClasses</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockCoarsenSchedule.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mblk::MultiblockGriddingAlgorithm</name>
    <filename>classSAMRAI_1_1mblk_1_1MultiblockGriddingAlgorithm.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::mesh::BaseGriddingAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>MultiblockGriddingAlgorithm</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingAlgorithm.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, tbox::Pointer&lt; tbox::Database &gt; input_db, tbox::Pointer&lt; MultiblockPatchHierarchy&lt; DIM &gt; &gt; multiblock, tbox::Pointer&lt; mesh::TagAndInitializeStrategy&lt; DIM &gt; &gt; level_strategy, tbox::Pointer&lt; mesh::BoxGeneratorStrategy&lt; DIM &gt; &gt; generator, tbox::Pointer&lt; mesh::LoadBalanceStrategy&lt; DIM &gt; &gt; balancer, MultiblockGriddingTagger&lt; DIM &gt; *mb_tagger_strategy=(MultiblockGriddingTagger&lt; DIM &gt; *)(0), bool register_for_restart=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiblockGriddingAlgorithm</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingAlgorithm.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>makeCoarsestLevel</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingAlgorithm.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; multiblock, const double level_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>makeFinerLevel</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingAlgorithm.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; multiblock, const double level_time, const bool initial_time, const int tag_buffer, const double regrid_start_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>regridAllFinerLevels</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingAlgorithm.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; multiblock, const int level_number, const double regrid_time, const tbox::Array&lt; int &gt; &amp;tag_buffer, tbox::Array&lt; double &gt; regrid_start_time=tbox::Array&lt; double &gt;(), const bool level_is_coarsest_to_sync=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>errorEstimationUsesTimeIntegration</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingAlgorithm.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getErrorCoarsenRatio</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingAlgorithm.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>levelCanBeRefined</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingAlgorithm.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; mesh::TagAndInitializeStrategy&lt; DIM &gt; &gt;</type>
      <name>getTagAndInitializeStrategy</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingAlgorithm.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMaxLevels</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingAlgorithm.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getRatioToCoarserLevel</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingAlgorithm.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int level_number) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getEfficiencyTolerance</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingAlgorithm.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(int level_number) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCombineEfficiency</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingAlgorithm.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(int level_number) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getProperNestingBuffer</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingAlgorithm.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(int level_number) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getSmallestPatchSize</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingAlgorithm.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getLargestPatchSize</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingAlgorithm.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingAlgorithm.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; db)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mblk::MultiblockGriddingTagger</name>
    <filename>classSAMRAI_1_1mblk_1_1MultiblockGriddingTagger.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::mblk::MultiblockRefinePatchStrategy</base>
    <member kind="function">
      <type></type>
      <name>MultiblockGriddingTagger</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingTagger.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiblockGriddingTagger</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingTagger.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScratchTagPatchDataIndex</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingTagger.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int buf_tag_indx)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPhysicalBoundaryConditions</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingTagger.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const double fill_time, const hier::IntVector&lt; DIM &gt; &amp;ghost_width_to_fill)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fillSingularityBoundaryConditions</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingTagger.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, tbox::List&lt; typename MultiblockRefineSchedule&lt; DIM &gt;::SingularityPatch &gt; &amp;singularity_patches, const double fill_time, const hier::Box&lt; DIM &gt; &amp;fill_box, const hier::BoundaryBox&lt; DIM &gt; &amp;boundary_box)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual hier::IntVector&lt; DIM &gt;</type>
      <name>getRefineOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingTagger.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessRefine</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingTagger.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessRefine</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockGriddingTagger.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mblk::MultiblockPatchHierarchy</name>
    <filename>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::BasePatchHierarchy</base>
    <member kind="enumeration">
      <name>RotationIdentifier</name>
      <anchor>w29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_ROTATE</name>
      <anchor>w29w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IUP_JUP</name>
      <anchor>w29w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JUP_IDOWN</name>
      <anchor>w29w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDOWN_JDOWN</name>
      <anchor>w29w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JDOWN_IUP</name>
      <anchor>w29w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IUP_JUP_KUP</name>
      <anchor>w29w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KUP_IUP_JUP</name>
      <anchor>w29w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JUP_KUP_IUP</name>
      <anchor>w29w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDOWN_KUP_JUP</name>
      <anchor>w29w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KUP_JUP_IDOWN</name>
      <anchor>w29w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JUP_IDOWN_KUP</name>
      <anchor>w29w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KDOWN_JUP_IUP</name>
      <anchor>w29w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IUP_KDOWN_JUP</name>
      <anchor>w29w12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JUP_IUP_KDOWN</name>
      <anchor>w29w13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KDOWN_IDOWN_JUP</name>
      <anchor>w29w14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDOWN_JUP_KDOWN</name>
      <anchor>w29w15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JUP_KDOWN_IDOWN</name>
      <anchor>w29w16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JDOWN_IUP_KUP</name>
      <anchor>w29w17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IUP_KUP_JDOWN</name>
      <anchor>w29w18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KUP_JDOWN_IUP</name>
      <anchor>w29w19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JDOWN_KUP_IDOWN</name>
      <anchor>w29w20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDOWN_JDOWN_KUP</name>
      <anchor>w29w21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KUP_IDOWN_JDOWN</name>
      <anchor>w29w22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JDOWN_KDOWN_IUP</name>
      <anchor>w29w23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KDOWN_IUP_JDOWN</name>
      <anchor>w29w24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IUP_JDOWN_KDOWN</name>
      <anchor>w29w25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JDOWN_IDOWN_KDOWN</name>
      <anchor>w29w26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KDOWN_JDOWN_IDOWN</name>
      <anchor>w29w27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IDOWN_KDOWN_JDOWN</name>
      <anchor>w29w28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiblockPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, tbox::Pointer&lt; tbox::Database &gt; input_db, tbox::Array&lt; tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; &gt; &amp;hierarchies, const bool register_for_restart=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiblockPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; &amp;</type>
      <name>getHierarchy</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int block_num)</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; MultiblockPatchLevel&lt; DIM &gt; &gt;</type>
      <name>getMultiblockPatchLevel</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int level_num) const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt;</type>
      <name>getPatchLevel</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int level_num) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjustMultiblockPatchLevelBoundaries</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; MultiblockPatchLevel&lt; DIM &gt; &gt; level)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberBlocks</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberNeighbors</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int block_number)</arglist>
    </member>
    <member kind="function">
      <type>tbox::List&lt; Neighbor &gt; &amp;</type>
      <name>getNeighbors</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int block_number)</arglist>
    </member>
    <member kind="function">
      <type>hier::BoxList&lt; DIM &gt; &amp;</type>
      <name>getSingularityBoxList</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int block_number)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTranslatedBlock</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(hier::BoxArray&lt; DIM &gt; &amp;block_boxes, const int base_block, const int translated_block)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translateBoxArray</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(hier::BoxArray&lt; DIM &gt; &amp;boxes, const hier::IntVector&lt; DIM &gt; &amp;ratio, const int base_block, const int translated_block)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFinestLevelNumber</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberLevels</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>finerLevelExists</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int ln) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDomainOutsideBlock</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(hier::BoxList&lt; DIM &gt; &amp;domain_outside_block, const int block_number)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reducedConnectivityExists</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int block_number) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database, const hier::ComponentSelector &amp;patchdata_write_table)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int max_levels)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RotationIdentifier</type>
      <name>getReverseRotationIdentifier</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const RotationIdentifier rotation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>calculateReverseShift</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(hier::IntVector&lt; DIM &gt; &amp;back_shift, const hier::IntVector&lt; DIM &gt; &amp;shift, const RotationIdentifier back_rotation)</arglist>
    </member>
    <class kind="struct">SAMRAI::mblk::MultiblockPatchHierarchy::Neighbor</class>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::mblk::MultiblockPatchHierarchy::Neighbor</name>
    <filename>structSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy_1_1Neighbor.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>d_id</name>
      <anchorfile>structSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy_1_1Neighbor.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hier::BoxArray&lt; DIM &gt;</type>
      <name>d_translated_domain</name>
      <anchorfile>structSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy_1_1Neighbor.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RotationIdentifier</type>
      <name>d_rotation</name>
      <anchorfile>structSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy_1_1Neighbor.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>d_shift</name>
      <anchorfile>structSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy_1_1Neighbor.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>d_is_singularity</name>
      <anchorfile>structSAMRAI_1_1mblk_1_1MultiblockPatchHierarchy_1_1Neighbor.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mblk::MultiblockPatchLevel</name>
    <filename>classSAMRAI_1_1mblk_1_1MultiblockPatchLevel.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::BasePatchLevel</base>
    <member kind="function">
      <type></type>
      <name>MultiblockPatchLevel</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchLevel.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Array&lt; tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; &gt; &amp;levels)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiblockPatchLevel</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchLevel.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt;</type>
      <name>getPatchLevelForBlock</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchLevel.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int id) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocatePatchData</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchLevel.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int id, const double timestamp=0.0, tbox::Pointer&lt; tbox::Arena &gt; pool=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocatePatchData</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchLevel.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::ComponentSelector &amp;components, const double timestamp=0.0, tbox::Pointer&lt; tbox::Arena &gt; pool=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocatePatchData</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchLevel.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocatePatchData</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchLevel.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const hier::ComponentSelector &amp;components)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchLevel.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const double timestamp, const int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchLevel.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const double timestamp, const hier::ComponentSelector &amp;components)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchLevel.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const double timestamp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberBlocks</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchLevel.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLevelNumber</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchLevel.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getRatio</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockPatchLevel.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mblk::MultiblockRefineAlgorithm</name>
    <filename>classSAMRAI_1_1mblk_1_1MultiblockRefineAlgorithm.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>MultiblockRefineAlgorithm</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefineAlgorithm.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; xfer::RefineAlgorithm&lt; DIM &gt; &gt; refine_alg, tbox::Pointer&lt; MultiblockPatchHierarchy&lt; DIM &gt; &gt; multiblock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiblockRefineAlgorithm</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefineAlgorithm.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerRefine</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefineAlgorithm.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int dst, const int src, const int scratch, tbox::Pointer&lt; xfer::RefineOperator&lt; DIM &gt; &gt; oprefine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerRefine</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefineAlgorithm.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int dst, const int src, const int src_told, const int src_tnew, const int scratch, tbox::Pointer&lt; xfer::RefineOperator&lt; DIM &gt; &gt; oprefine, tbox::Pointer&lt; xfer::TimeInterpolateOperator&lt; DIM &gt; &gt; optime)</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; MultiblockRefineSchedule&lt; DIM &gt; &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefineAlgorithm.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; MultiblockPatchLevel&lt; DIM &gt; &gt; level, MultiblockRefinePatchStrategy&lt; DIM &gt; *patch_strategy=((MultiblockRefinePatchStrategy&lt; DIM &gt; *) NULL)) const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; MultiblockRefineSchedule&lt; DIM &gt; &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefineAlgorithm.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; MultiblockPatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; MultiblockPatchLevel&lt; DIM &gt; &gt; src_level, MultiblockRefinePatchStrategy&lt; DIM &gt; *patch_strategy=((MultiblockRefinePatchStrategy&lt; DIM &gt; *) NULL)) const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; MultiblockRefineSchedule&lt; DIM &gt; &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefineAlgorithm.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(tbox::Pointer&lt; MultiblockPatchLevel&lt; DIM &gt; &gt; level, const int next_coarser_level, tbox::Pointer&lt; MultiblockPatchHierarchy&lt; DIM &gt; &gt; multiblock, MultiblockRefinePatchStrategy&lt; DIM &gt; *patch_strategy=((MultiblockRefinePatchStrategy&lt; DIM &gt; *) NULL)) const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; MultiblockRefineSchedule&lt; DIM &gt; &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefineAlgorithm.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::Pointer&lt; MultiblockPatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; MultiblockPatchLevel&lt; DIM &gt; &gt; src_level, const int next_coarser_level, tbox::Pointer&lt; MultiblockPatchHierarchy&lt; DIM &gt; &gt; multiblock, MultiblockRefinePatchStrategy&lt; DIM &gt; *patch_strategy=((MultiblockRefinePatchStrategy&lt; DIM &gt; *) NULL)) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mblk::MultiblockRefinePatchStrategy</name>
    <filename>classSAMRAI_1_1mblk_1_1MultiblockRefinePatchStrategy.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefinePatchStrategy</base>
    <member kind="function">
      <type></type>
      <name>MultiblockRefinePatchStrategy</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefinePatchStrategy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiblockRefinePatchStrategy</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefinePatchStrategy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPhysicalBoundaryConditions</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefinePatchStrategy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const double fill_time, const hier::IntVector&lt; DIM &gt; &amp;ghost_width_to_fill)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>fillSingularityBoundaryConditions</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefinePatchStrategy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, tbox::List&lt; typename MultiblockRefineSchedule&lt; DIM &gt;::SingularityPatch &gt; &amp;singularity_patches, const double fill_time, const hier::Box&lt; DIM &gt; &amp;fill_box, const hier::BoundaryBox&lt; DIM &gt; &amp;boundary_box)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual hier::IntVector&lt; DIM &gt;</type>
      <name>getRefineOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefinePatchStrategy.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessRefine</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefinePatchStrategy.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessRefine</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefinePatchStrategy.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFillingCoarseScratch</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefinePatchStrategy.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const bool filling_coarse_scratch)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBlockNumber</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefinePatchStrategy.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int block_number)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getBlockNumber</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefinePatchStrategy.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearBlockNumber</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefinePatchStrategy.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>d_filling_coarse_scratch</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefinePatchStrategy.html</anchorfile>
      <anchor>p0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>d_block_number</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefinePatchStrategy.html</anchorfile>
      <anchor>p1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mblk::MultiblockRefineSchedule</name>
    <filename>classSAMRAI_1_1mblk_1_1MultiblockRefineSchedule.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>MultiblockRefineSchedule</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefineSchedule.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; MultiblockPatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; MultiblockPatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; MultiblockPatchHierarchy&lt; DIM &gt; &gt; multiblock, tbox::Pointer&lt; xfer::RefineAlgorithm&lt; DIM &gt; &gt; refine_alg, MultiblockRefinePatchStrategy&lt; DIM &gt; *strategy, bool use_time_refinement=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiblockRefineSchedule</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefineSchedule.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(tbox::Pointer&lt; MultiblockPatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; MultiblockPatchLevel&lt; DIM &gt; &gt; src_level, const int next_coarser_level, tbox::Pointer&lt; MultiblockPatchHierarchy&lt; DIM &gt; &gt; multiblock, tbox::Pointer&lt; xfer::RefineAlgorithm&lt; DIM &gt; &gt; refine_alg, MultiblockRefinePatchStrategy&lt; DIM &gt; *strategy, bool use_time_refinement=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiblockRefineSchedule</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefineSchedule.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillData</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefineSchedule.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(double fill_time, bool do_physical_boundary_fill=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeSourceVector</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefineSchedule.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(hier::ComponentSelector &amp;allocate_vector) const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; xfer::RefineClasses&lt; DIM &gt; &gt; &amp;</type>
      <name>getEquivalenceClasses</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefineSchedule.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateScratchSpace</name>
      <anchorfile>classSAMRAI_1_1mblk_1_1MultiblockRefineSchedule.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, double fill_time, hier::ComponentSelector &amp;allocate_vector) const </arglist>
    </member>
    <class kind="struct">SAMRAI::mblk::MultiblockRefineSchedule::SingularityPatch</class>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::mblk::MultiblockRefineSchedule::SingularityPatch</name>
    <filename>structSAMRAI_1_1mblk_1_1MultiblockRefineSchedule_1_1SingularityPatch.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>d_id</name>
      <anchorfile>structSAMRAI_1_1mblk_1_1MultiblockRefineSchedule_1_1SingularityPatch.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tbox::Pointer&lt; hier::Patch&lt; DIM &gt; &gt;</type>
      <name>d_patch</name>
      <anchorfile>structSAMRAI_1_1mblk_1_1MultiblockRefineSchedule_1_1SingularityPatch.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::mesh</name>
    <filename>namespaceSAMRAI_1_1mesh.html</filename>
    <class kind="class">SAMRAI::mesh::AsyncBergerRigoutsos</class>
    <class kind="class">SAMRAI::mesh::AsyncBergerRigoutsosNode</class>
    <class kind="class">SAMRAI::mesh::BergerRigoutsos</class>
    <class kind="class">SAMRAI::mesh::BoxGeneratorStrategy</class>
    <class kind="class">SAMRAI::mesh::HistogramBox</class>
    <class kind="class">SAMRAI::mesh::BaseGriddingAlgorithm</class>
    <class kind="class">SAMRAI::mesh::GriddingAlgorithm</class>
    <class kind="class">SAMRAI::mesh::StandardTagAndInitialize</class>
    <class kind="class">SAMRAI::mesh::StandardTagAndInitStrategy</class>
    <class kind="class">SAMRAI::mesh::TagAndInitializeStrategy</class>
    <class kind="struct">SAMRAI::mesh::BalanceUtilities</class>
    <class kind="class">SAMRAI::mesh::LoadBalancer</class>
    <class kind="class">SAMRAI::mesh::LoadBalanceStrategy</class>
    <class kind="class">SAMRAI::mesh::SpatialKey</class>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>GCD</name>
      <anchorfile>namespaceSAMRAI_1_1mesh.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int a, const int b)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceSAMRAI_1_1mesh.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(ostream &amp;s, const SpatialKey &amp;spatial_key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::AsyncBergerRigoutsos</name>
    <filename>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsos.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::mesh::BoxGeneratorStrategy</base>
    <member kind="function">
      <type></type>
      <name>AsyncBergerRigoutsos</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsos.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AsyncBergerRigoutsos</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsos.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findBoxesContainingTags</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsos.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(hier::BoxList&lt; DIM &gt; &amp;boxes, const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, const int tag_data_index, const int tag_val, const hier::Box&lt; DIM &gt; &amp;bound_box, const hier::IntVector&lt; DIM &gt; &amp;min_box, const double efficiency_tol, const double combine_tol) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::AsyncBergerRigoutsosNode</name>
    <filename>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::tbox::RelaunchableJob</base>
    <member kind="typedef">
      <type>hier::LayerNodeSet&lt; DIM &gt;::Node</type>
      <name>GraphNode</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hier::LayerNodeSet&lt; DIM &gt;::NodeContainer</type>
      <name>GraphNodeContainer</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hier::LayerEdgeSet&lt; DIM &gt;::NabrContainer</type>
      <name>GraphNabrContainer</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hier::LayerEdgeSet&lt; DIM &gt;::Connectivity</type>
      <name>Connectivity</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>set&lt; int &gt;</type>
      <name>IntSet</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>OwnerMode</name>
      <anchor>w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SINGLE_OWNER</name>
      <anchor>w9w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOST_OVERLAP</name>
      <anchor>w9w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEWEST_OWNED</name>
      <anchor>w9w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEAST_ACTIVE</name>
      <anchor>w9w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AsyncBergerRigoutsosNode</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(CommonParams *common_params, const hier::Box&lt; DIM &gt; *bound_box=NULL, mesh::AsyncBergerRigoutsosNode&lt; DIM &gt; *parent=NULL, const int child_number=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AsyncBergerRigoutsosNode</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;max_gcw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlgorithmAdvanceMode</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const string &amp;algo_advance_mode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOwnerMode</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const string &amp;mode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseLevelBoxes</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComputeEdges</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int compute_edges)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runAlgorithm</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const hier::LayerNodeSet&lt; DIM &gt; &amp;</type>
      <name>getNewNodes</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Connectivity &amp;</type>
      <name>getNewCnect</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ostream &amp;os, int detail_level=0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxNodes</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxGeneration</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxOwnership</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAvgNumberOfCont</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxNumberOfCont</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBoxesGenerated</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogNodeHistory</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <class kind="struct">SAMRAI::mesh::AsyncBergerRigoutsosNode::CommonParams</class>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::mesh::AsyncBergerRigoutsosNode::CommonParams</name>
    <filename>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</filename>
    <member kind="function">
      <type></type>
      <name>CommonParams</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level_, const int tag_data_index_, const int tag_val_, const hier::IntVector&lt; DIM &gt; min_box_, const double efficiency_tol_, const double combine_tol_, const tbox::MPI::comm mpi_communicator_)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getRank</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const tbox::MPI::comm &amp;mpi_communicator_)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getProcCount</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(const tbox::MPI::comm &amp;mpi_communicator_)</arglist>
    </member>
    <member kind="variable">
      <type>tbox::JobRelauncher</type>
      <name>job_relauncher</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hier::LayerNodeSet&lt; DIM &gt;</type>
      <name>tag_node_set</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hier::LayerNodeSet&lt; DIM &gt;</type>
      <name>new_node_set</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Connectivity</type>
      <name>tag_cnect_new</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Connectivity</type>
      <name>new_cnect_tag</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IntSet</type>
      <name>edge_senders</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; int, vector&lt; int &gt; &gt;</type>
      <name>edge_messages</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt;</type>
      <name>level</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>tag_data_index</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>tag_val</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const hier::IntVector&lt; DIM &gt;</type>
      <name>min_box</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>efficiency_tol</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>combine_tol</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>compute_edges</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>max_gcw</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OwnerMode</type>
      <name>owner_mode</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_level_boxes</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tbox::MPI::comm</type>
      <name>mpi_communicator</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>rank</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>nproc</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>tag_upper_bound</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>available_mpi_tag</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tbox::Pointer&lt; tbox::Timer &gt;</type>
      <name>t_cluster</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tbox::Pointer&lt; tbox::Timer &gt;</type>
      <name>t_continue_algorithm</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tbox::Pointer&lt; tbox::Timer &gt;</type>
      <name>t_compute_new_graph_edges</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tbox::Pointer&lt; tbox::Timer &gt;</type>
      <name>t_share_new_edges</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tbox::Pointer&lt; tbox::Timer &gt;</type>
      <name>t_share_new_edges_send</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tbox::Pointer&lt; tbox::Timer &gt;</type>
      <name>t_share_new_edges_recv</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tbox::Pointer&lt; tbox::Timer &gt;</type>
      <name>t_share_new_edges_unpack</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tbox::Pointer&lt; tbox::Timer &gt;</type>
      <name>t_reduce_histogram</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tbox::Pointer&lt; tbox::Timer &gt;</type>
      <name>t_bcast_acceptability</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tbox::Pointer&lt; tbox::Timer &gt;</type>
      <name>t_gather_grouping_criteria</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tbox::Pointer&lt; tbox::Timer &gt;</type>
      <name>t_bcast_child_groups</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tbox::Pointer&lt; tbox::Timer &gt;</type>
      <name>t_bcast_to_dropouts</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>log_node_history</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_nodes_allocated</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_nodes_allocated</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_nodes_active</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_nodes_active</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_nodes_owned</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_nodes_owned</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_nodes_completed</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_generation</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_boxes_generated</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_conts_to_complete</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_conts_to_complete</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1AsyncBergerRigoutsosNode_1_1CommonParams.html</anchorfile>
      <anchor>o45</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::BergerRigoutsos</name>
    <filename>classSAMRAI_1_1mesh_1_1BergerRigoutsos.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::mesh::BoxGeneratorStrategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BergerRigoutsos</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BergerRigoutsos.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BergerRigoutsos</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BergerRigoutsos.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findBoxesContainingTags</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BergerRigoutsos.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(hier::BoxList&lt; DIM &gt; &amp;boxes, const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, const int index, const int tag_val, const hier::Box&lt; DIM &gt; &amp;bound_box, const hier::IntVector&lt; DIM &gt; &amp;min_box, const double efficiency_tol, const double combine_tol) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setClusteringOption</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BergerRigoutsos.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const string &amp;method=string())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::BoxGeneratorStrategy</name>
    <filename>classSAMRAI_1_1mesh_1_1BoxGeneratorStrategy.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>BoxGeneratorStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxGeneratorStrategy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoxGeneratorStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxGeneratorStrategy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>findBoxesContainingTags</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BoxGeneratorStrategy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(hier::BoxList&lt; DIM &gt; &amp;boxes, const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, const int index, const int tag_val, const hier::Box&lt; DIM &gt; &amp;bound_box, const hier::IntVector&lt; DIM &gt; &amp;min_box, const double efficiency_tol, const double combine_tol) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::HistogramBox</name>
    <filename>classSAMRAI_1_1mesh_1_1HistogramBox.html</filename>
    <templarg>DIM</templarg>
    <member kind="enumvalue">
      <name>ORIGINAL_MODE</name>
      <anchor>w4w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ORIG_FAST_REDUCE_MODE</name>
      <anchor>w4w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BINARY_TREE_MODE</name>
      <anchor>w4w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMMUNICATOR_MODE</name>
      <anchor>w4w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HistogramBox</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1HistogramBox.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HistogramBox</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1HistogramBox.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HistogramBox</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1HistogramBox.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findBoundBoxForTags</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1HistogramBox.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::Box&lt; DIM &gt; &amp;bound_box, const hier::IntVector&lt; DIM &gt; &amp;min_box) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>boundTagHistogram</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1HistogramBox.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int &amp;box_lo, int &amp;box_hi, const int id, const int min_size) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommunicationMode</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1HistogramBox.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int mode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCommunicator</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1HistogramBox.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(tbox::MPI::comm comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeTagHistogram</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1HistogramBox.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, const int tag_index, const int tag_val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduceTags</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1HistogramBox.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduceTags</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1HistogramBox.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int id, const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, const int tag_index, const int tag_val)</arglist>
    </member>
    <member kind="function">
      <type>const hier::Box&lt; DIM &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1HistogramBox.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Array&lt; int &gt; &amp;</type>
      <name>histogram</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1HistogramBox.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int id)</arglist>
    </member>
    <member kind="function">
      <type>const tbox::Array&lt; int &gt; &amp;</type>
      <name>histogram</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1HistogramBox.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int id) const </arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>histogramElt</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1HistogramBox.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int id, const int ic)</arglist>
    </member>
    <member kind="function">
      <type>const int &amp;</type>
      <name>histogramElt</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1HistogramBox.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int id, const int ic) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBox</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1HistogramBox.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetHistogram</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1HistogramBox.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::BaseGriddingAlgorithm</name>
    <filename>classSAMRAI_1_1mesh_1_1BaseGriddingAlgorithm.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::tbox::Serializable</base>
    <member kind="function">
      <type></type>
      <name>BaseGriddingAlgorithm</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BaseGriddingAlgorithm.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BaseGriddingAlgorithm</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BaseGriddingAlgorithm.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>makeCoarsestLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BaseGriddingAlgorithm.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const double level_time)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>makeFinerLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BaseGriddingAlgorithm.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const double level_time, const bool initial_time, const int tag_buffer, const double regrid_start_time=0.)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>regridAllFinerLevels</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BaseGriddingAlgorithm.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int level_number, const double regrid_time, const tbox::Array&lt; int &gt; &amp;tag_buffer, tbox::Array&lt; double &gt; regrid_start_time=tbox::Array&lt; double &gt;(), const bool level_is_coarsest_to_sync=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>errorEstimationUsesTimeIntegration</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BaseGriddingAlgorithm.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getErrorCoarsenRatio</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BaseGriddingAlgorithm.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>levelCanBeRefined</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BaseGriddingAlgorithm.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int level_number) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tbox::Pointer&lt; TagAndInitializeStrategy&lt; DIM &gt; &gt;</type>
      <name>getTagAndInitializeStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BaseGriddingAlgorithm.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getMaxLevels</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BaseGriddingAlgorithm.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getRatioToCoarserLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BaseGriddingAlgorithm.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int level_number) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getEfficiencyTolerance</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BaseGriddingAlgorithm.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int level_number) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getCombineEfficiency</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BaseGriddingAlgorithm.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int level_number) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getProperNestingBuffer</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BaseGriddingAlgorithm.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int level_number) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1BaseGriddingAlgorithm.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; db)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::GriddingAlgorithm</name>
    <filename>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::mesh::BaseGriddingAlgorithm</base>
    <member kind="function">
      <type></type>
      <name>GriddingAlgorithm</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, tbox::Pointer&lt; tbox::Database &gt; input_db, tbox::Pointer&lt; TagAndInitializeStrategy&lt; DIM &gt; &gt; level_strategy, tbox::Pointer&lt; BoxGeneratorStrategy&lt; DIM &gt; &gt; generator, tbox::Pointer&lt; LoadBalanceStrategy&lt; DIM &gt; &gt; balancer, bool register_for_restart=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GriddingAlgorithm</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>makeCoarsestLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const double level_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>makeFinerLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const double level_time, const bool initial_time, const int tag_buffer, const double regrid_start_time=0.)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>regridAllFinerLevels</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int level_number, const double regrid_time, const tbox::Array&lt; int &gt; &amp;tag_buffer, tbox::Array&lt; double &gt; regrid_start_time=tbox::Array&lt; double &gt;(), const bool level_is_coarsest_to_sync=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>errorEstimationUsesTimeIntegration</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getErrorCoarsenRatio</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>levelCanBeRefined</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; TagAndInitializeStrategy&lt; DIM &gt; &gt;</type>
      <name>getTagAndInitializeStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; LoadBalanceStrategy&lt; DIM &gt; &gt;</type>
      <name>getLoadBalanceStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getMaxLevels</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getRatioToCoarserLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getEfficiencyTolerance</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCombineEfficiency</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getProperNestingBuffer</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getSmallestPatchSize</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getLargestPatchSize</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int level_number) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1GriddingAlgorithm.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; db)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::StandardTagAndInitialize</name>
    <filename>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::mesh::TagAndInitializeStrategy</base>
    <member kind="function">
      <type></type>
      <name>StandardTagAndInitialize</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, StandardTagAndInitStrategy&lt; DIM &gt; *tag_strategy, tbox::Pointer&lt; tbox::Database &gt; input_db=tbox::Pointer&lt; tbox::Database &gt;((0)))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StandardTagAndInitialize</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesTimeIntegration</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getErrorCoarsenRatio</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCoarsenRatios</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const tbox::Array&lt; hier::IntVector&lt; DIM &gt; &gt; &amp;ratio_to_coarser)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeLevelData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int level_number, const double init_data_time, const bool can_be_refined, const bool initial_time, const tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt; old_level=tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt;((0)), const bool allocate_data=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetHierarchyConfiguration</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocessErrorEstimation</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int level_number, const double regrid_time, const double regrid_start_time, const bool initial_time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tagCellsForRefinement</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; level, const int level_number, const double regrid_time, const int tag_index, const bool initial_time, const bool coarsest_sync_level, const bool can_be_refined, const double regrid_start_time=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>coarsestLevelBoxesOK</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const hier::BoxArray&lt; DIM &gt; &amp;boxes) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>refineUserBoxInputOnly</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>turnOnGradientDetector</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>turnOffGradientDetector</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>turnOnRichardsonExtrapolation</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>turnOffRichardsonExtrapolation</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>turnOnRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>turnOffRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromInput</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitialize.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; db)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::StandardTagAndInitStrategy</name>
    <filename>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>StandardTagAndInitStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StandardTagAndInitStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLevelDt</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt; level, const double dt_time, const bool initial_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>advanceLevel</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt; level, const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const double current_time, const double new_time, const bool first_step, const bool last_step, const bool regrid_advance=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetTimeDependentData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt; level, const double new_time, const bool can_be_refined)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetDataToPreadvanceState</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt; level)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeLevelData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int level_number, const double init_data_time, const bool can_be_refined, const bool initial_time, const tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt; old_level=tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt;((0)), const bool allocate_data=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetHierarchyConfiguration</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level, const int finest_level)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyGradientDetector</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int level_number, const double error_data_time, const int tag_index, const bool initial_time, const bool uses_richardson_extrapolation_too)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyRichardsonExtrapolation</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, const double error_data_time, const int tag_index, const double deltat, const int error_coarsen_ratio, const bool initial_time, const bool uses_gradient_detector_too)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>coarsenDataForRichardsonExtrapolation</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1StandardTagAndInitStrategy.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int level_number, const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; coarser_level, const double coarsen_data_time, const bool before_advance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::TagAndInitializeStrategy</name>
    <filename>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>TagAndInitializeStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TagAndInitializeStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUserSuppliedRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(hier::BoxArray&lt; DIM &gt; &amp;refine_boxes, const int level_number, const double time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const hier::BoxArray&lt; DIM &gt; &amp;refine_boxes, const int level_number)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeLevelData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int level_number, const double init_data_time, const bool can_be_refined, const bool initial_time, const tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt; old_level=tbox::Pointer&lt; hier::BasePatchLevel&lt; DIM &gt; &gt;(NULL), const bool allocate_data=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>resetHierarchyConfiguration</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level, const int finest_level)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>tagCellsForRefinement</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int level_number, const double error_data_time, const int tag_index, const bool initial_time, const bool coarsest_sync_level, const bool can_be_refined=true, const double regrid_start_time=0.)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>preprocessErrorEstimation</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; hier::BasePatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int level_number, const double regrid_time, const double regrid_start_time, const bool initial_time)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>usesTimeIntegration</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>coarsestLevelBoxesOK</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const hier::BoxArray&lt; DIM &gt; &amp;boxes) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getErrorCoarsenRatio</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkCoarsenRatios</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const tbox::Array&lt; hier::IntVector&lt; DIM &gt; &gt; &amp;ratio_to_coarser)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>refineUserBoxInputOnly</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromInput</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1TagAndInitializeStrategy.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const string &amp;object_name, tbox::Pointer&lt; tbox::Database &gt; db)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::mesh::BalanceUtilities</name>
    <filename>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</filename>
    <templarg>DIM</templarg>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>binPack</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(hier::ProcessorMapping &amp;mapping, tbox::Array&lt; double &gt; &amp;weights, int nproc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>spatialBinPack</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(hier::ProcessorMapping &amp;mapping, tbox::Array&lt; double &gt; &amp;weights, hier::BoxArray&lt; DIM &gt; &amp;boxes, const int nproc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>recursiveBisectionUniform</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(hier::BoxList&lt; DIM &gt; &amp;out_boxes, tbox::List&lt; double &gt; &amp;out_workloads, const hier::BoxList&lt; DIM &gt; &amp;in_boxes, double ideal_workload, const hier::IntVector&lt; DIM &gt; &amp;min_size, const hier::IntVector&lt; DIM &gt; &amp;cut_factor, const hier::IntVector&lt; DIM &gt; &amp;bad_interval, const hier::BoxArray&lt; DIM &gt; &amp;physical_domain)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>recursiveBisectionNonuniform</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(hier::BoxList&lt; DIM &gt; &amp;out_boxes, tbox::List&lt; double &gt; &amp;out_workloads, const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; &amp;in_level, int work_id, double ideal_workload, const hier::IntVector&lt; DIM &gt; &amp;min_size, const hier::IntVector&lt; DIM &gt; &amp;cut_factor, const hier::IntVector&lt; DIM &gt; &amp;bad_interval, const hier::BoxArray&lt; DIM &gt; &amp;physical_domain)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>computeDomainDependentProcessorLayout</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>(hier::IntVector&lt; DIM &gt; &amp;proc_dist, int num_procs, const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>computeDomainIndependentProcessorLayout</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>(hier::IntVector&lt; DIM &gt; &amp;proc_dist, int num_procs, const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sortDescendingBoxWorkloads</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>(hier::BoxArray&lt; DIM &gt; &amp;boxes, tbox::Array&lt; double &gt; &amp;workload)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>computeNonUniformWorkload</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>e7</anchor>
      <arglist>(tbox::Pointer&lt; hier::Patch&lt; DIM &gt; &gt; patch, int wrk_indx, const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>computeLoadBalanceEfficiency</name>
      <anchorfile>structSAMRAI_1_1mesh_1_1BalanceUtilities.html</anchorfile>
      <anchor>e8</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; &amp;level, ostream &amp;os, int workload_data_id=-1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::LoadBalancer</name>
    <filename>classSAMRAI_1_1mesh_1_1LoadBalancer.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::mesh::LoadBalanceStrategy</base>
    <member kind="function">
      <type></type>
      <name>LoadBalancer</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1LoadBalancer.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;name, tbox::Pointer&lt; tbox::Database &gt; input_db=(tbox::Database *) NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LoadBalancer</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1LoadBalancer.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; input_db=(tbox::Database *) NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LoadBalancer</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1LoadBalancer.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxWorkloadFactor</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1LoadBalancer.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(double factor, int level_number=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorkloadPatchDataIndex</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1LoadBalancer.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int data_id, int level_number=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUniformWorkload</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1LoadBalancer.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int level_number=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBinPackMethod</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1LoadBalancer.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const string &amp;method, int level_number=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIgnoreLevelDomainIsSingleBox</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1LoadBalancer.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLoadBalanceDependsOnPatchData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1LoadBalancer.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int level_number) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadBalanceBoxes</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1LoadBalancer.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(hier::BoxArray&lt; DIM &gt; &amp;out_boxes, hier::ProcessorMapping &amp;mapping, const hier::BoxList&lt; DIM &gt; &amp;in_boxes, const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, int level_number, const hier::BoxArray&lt; DIM &gt; &amp;physical_domain, const hier::IntVector&lt; DIM &gt; &amp;ratio_to_hierarchy_level_zero, const hier::IntVector&lt; DIM &gt; &amp;min_size, const hier::IntVector&lt; DIM &gt; &amp;max_size, const hier::IntVector&lt; DIM &gt; &amp;cut_factor, const hier::IntVector&lt; DIM &gt; &amp;bad_interval) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1LoadBalancer.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::LoadBalanceStrategy</name>
    <filename>classSAMRAI_1_1mesh_1_1LoadBalanceStrategy.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>LoadBalanceStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1LoadBalanceStrategy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LoadBalanceStrategy</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1LoadBalanceStrategy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getLoadBalanceDependsOnPatchData</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1LoadBalanceStrategy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int level_number) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>loadBalanceBoxes</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1LoadBalanceStrategy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::BoxArray&lt; DIM &gt; &amp;out_boxes, hier::ProcessorMapping &amp;mapping, const hier::BoxList&lt; DIM &gt; &amp;in_boxes, const tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int level_number, const hier::BoxArray&lt; DIM &gt; &amp;physical_domain, const hier::IntVector&lt; DIM &gt; &amp;ratio_to_hierarchy_level_zero, const hier::IntVector&lt; DIM &gt; &amp;min_size, const hier::IntVector&lt; DIM &gt; &amp;max_size, const hier::IntVector&lt; DIM &gt; &amp;cut_factor, const hier::IntVector&lt; DIM &gt; &amp;bad_interval) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::mesh::SpatialKey</name>
    <filename>classSAMRAI_1_1mesh_1_1SpatialKey.html</filename>
    <member kind="function">
      <type></type>
      <name>SpatialKey</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialKey</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const unsigned int i, const unsigned int j=0, const unsigned int k=0, const unsigned int level_num=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpatialKey</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const SpatialKey &amp;spatial_key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SpatialKey</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SpatialKey &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const SpatialKey &amp;spatial_key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const SpatialKey &amp;spatial_key) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const SpatialKey &amp;spatial_key) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const SpatialKey &amp;spatial_key) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const SpatialKey &amp;spatial_key) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const SpatialKey &amp;spatial_key) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const SpatialKey &amp;spatial_key) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToZero</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKey</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const unsigned int i=0, const unsigned int j=0, const unsigned int k=0, const unsigned int level_num=0)</arglist>
    </member>
    <member kind="friend">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1mesh_1_1SpatialKey.html</anchorfile>
      <anchor>n0</anchor>
      <arglist>(ostream &amp;s, const SpatialKey &amp;spatial_key)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::pdat</name>
    <filename>namespaceSAMRAI_1_1pdat.html</filename>
    <class kind="class">SAMRAI::pdat::ArrayData</class>
    <class kind="class">SAMRAI::pdat::ArrayDataIterator</class>
    <class kind="class">SAMRAI::pdat::CellGeometry</class>
    <class kind="class">SAMRAI::pdat::CellOverlap</class>
    <class kind="class">SAMRAI::pdat::EdgeGeometry</class>
    <class kind="class">SAMRAI::pdat::EdgeOverlap</class>
    <class kind="class">SAMRAI::pdat::FaceGeometry</class>
    <class kind="class">SAMRAI::pdat::FaceOverlap</class>
    <class kind="class">SAMRAI::pdat::NodeGeometry</class>
    <class kind="class">SAMRAI::pdat::NodeOverlap</class>
    <class kind="class">SAMRAI::pdat::OuteredgeGeometry</class>
    <class kind="class">SAMRAI::pdat::OuterfaceGeometry</class>
    <class kind="class">SAMRAI::pdat::OuternodeGeometry</class>
    <class kind="class">SAMRAI::pdat::OutersideGeometry</class>
    <class kind="class">SAMRAI::pdat::SideGeometry</class>
    <class kind="class">SAMRAI::pdat::SideOverlap</class>
    <class kind="class">SAMRAI::pdat::CellData</class>
    <class kind="class">SAMRAI::pdat::CellDataFactory</class>
    <class kind="class">SAMRAI::pdat::CellIndex</class>
    <class kind="class">SAMRAI::pdat::CellIterator</class>
    <class kind="class">SAMRAI::pdat::CellVariable</class>
    <class kind="class">SAMRAI::pdat::EdgeData</class>
    <class kind="class">SAMRAI::pdat::EdgeDataFactory</class>
    <class kind="class">SAMRAI::pdat::EdgeIndex</class>
    <class kind="class">SAMRAI::pdat::EdgeIterator</class>
    <class kind="class">SAMRAI::pdat::EdgeVariable</class>
    <class kind="class">SAMRAI::pdat::FaceData</class>
    <class kind="class">SAMRAI::pdat::FaceDataFactory</class>
    <class kind="class">SAMRAI::pdat::FaceIndex</class>
    <class kind="class">SAMRAI::pdat::FaceIterator</class>
    <class kind="class">SAMRAI::pdat::FaceVariable</class>
    <class kind="class">SAMRAI::pdat::IndexData</class>
    <class kind="class">SAMRAI::pdat::IndexDataNode</class>
    <class kind="class">SAMRAI::pdat::IndexIterator</class>
    <class kind="class">SAMRAI::pdat::IndexDataFactory</class>
    <class kind="class">SAMRAI::pdat::IndexVariable</class>
    <class kind="class">SAMRAI::pdat::NodeData</class>
    <class kind="class">SAMRAI::pdat::NodeDataFactory</class>
    <class kind="class">SAMRAI::pdat::NodeIndex</class>
    <class kind="class">SAMRAI::pdat::NodeIterator</class>
    <class kind="class">SAMRAI::pdat::NodeVariable</class>
    <class kind="class">SAMRAI::pdat::CellComplexConstantRefine</class>
    <class kind="class">SAMRAI::pdat::CellDoubleConstantRefine</class>
    <class kind="class">SAMRAI::pdat::CellFloatConstantRefine</class>
    <class kind="class">SAMRAI::pdat::CellIntegerConstantRefine</class>
    <class kind="class">SAMRAI::pdat::EdgeComplexConstantRefine</class>
    <class kind="class">SAMRAI::pdat::EdgeDoubleConstantRefine</class>
    <class kind="class">SAMRAI::pdat::EdgeFloatConstantRefine</class>
    <class kind="class">SAMRAI::pdat::EdgeIntegerConstantRefine</class>
    <class kind="class">SAMRAI::pdat::FaceComplexConstantRefine</class>
    <class kind="class">SAMRAI::pdat::FaceDoubleConstantRefine</class>
    <class kind="class">SAMRAI::pdat::FaceFloatConstantRefine</class>
    <class kind="class">SAMRAI::pdat::FaceIntegerConstantRefine</class>
    <class kind="class">SAMRAI::pdat::NodeComplexConstantAverage</class>
    <class kind="class">SAMRAI::pdat::NodeDoubleConstantAverage</class>
    <class kind="class">SAMRAI::pdat::NodeFloatConstantAverage</class>
    <class kind="class">SAMRAI::pdat::NodeIntegerConstantAverage</class>
    <class kind="class">SAMRAI::pdat::OuterfaceComplexConstantRefine</class>
    <class kind="class">SAMRAI::pdat::OuterfaceDoubleConstantRefine</class>
    <class kind="class">SAMRAI::pdat::OuterfaceFloatConstantRefine</class>
    <class kind="class">SAMRAI::pdat::OuterfaceIntegerConstantRefine</class>
    <class kind="class">SAMRAI::pdat::OuternodeDoubleConstantCoarsen</class>
    <class kind="class">SAMRAI::pdat::SideComplexConstantRefine</class>
    <class kind="class">SAMRAI::pdat::SideDoubleConstantRefine</class>
    <class kind="class">SAMRAI::pdat::SideFloatConstantRefine</class>
    <class kind="class">SAMRAI::pdat::SideIntegerConstantRefine</class>
    <class kind="class">SAMRAI::pdat::CellComplexLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::CellDoubleLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::CellFloatLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::EdgeComplexLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::EdgeDoubleLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::EdgeFloatLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::FaceComplexLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::FaceDoubleLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::FaceFloatLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::NodeComplexLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::NodeDoubleLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::NodeFloatLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::OuterfaceComplexLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::OuterfaceDoubleLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::OuterfaceFloatLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::OutersideComplexLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::OutersideDoubleLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::OutersideFloatLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::SideComplexLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::SideDoubleLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::SideFloatLinearTimeInterpolateOp</class>
    <class kind="class">SAMRAI::pdat::OuteredgeData</class>
    <class kind="class">SAMRAI::pdat::OuteredgeDataFactory</class>
    <class kind="class">SAMRAI::pdat::OuteredgeVariable</class>
    <class kind="class">SAMRAI::pdat::OuterfaceData</class>
    <class kind="class">SAMRAI::pdat::OuterfaceDataFactory</class>
    <class kind="class">SAMRAI::pdat::OuterfaceVariable</class>
    <class kind="class">SAMRAI::pdat::OuternodeData</class>
    <class kind="class">SAMRAI::pdat::OuternodeDataFactory</class>
    <class kind="class">SAMRAI::pdat::OuternodeVariable</class>
    <class kind="class">SAMRAI::pdat::OutersideData</class>
    <class kind="class">SAMRAI::pdat::OutersideDataFactory</class>
    <class kind="class">SAMRAI::pdat::OutersideVariable</class>
    <class kind="class">SAMRAI::pdat::SideData</class>
    <class kind="class">SAMRAI::pdat::SideDataFactory</class>
    <class kind="class">SAMRAI::pdat::SideIndex</class>
    <class kind="class">SAMRAI::pdat::SideIterator</class>
    <class kind="class">SAMRAI::pdat::SideVariable</class>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::ArrayData</name>
    <filename>classSAMRAI_1_1pdat_1_1ArrayData.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="typedef">
      <type>ArrayDataIterator&lt; DIM &gt;</type>
      <name>Iterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth, tbox::Pointer&lt; tbox::Arena &gt; pool=tbox::Pointer&lt; tbox::Arena &gt;((0)))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const hier::Box&lt; DIM &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeArray</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth, const tbox::Pointer&lt; tbox::Arena &gt; &amp;pool)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInitialized</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>undefineData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStandardType</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const ArrayData&lt; DIM, TYPE &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const ArrayData&lt; DIM, TYPE &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box, const hier::IntVector&lt; DIM &gt; &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const ArrayData&lt; DIM, TYPE &gt; &amp;src, const hier::BoxList&lt; DIM &gt; &amp;boxes, const hier::IntVector&lt; DIM &gt; &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(int dst_depth, const ArrayData&lt; DIM, TYPE &gt; &amp;src, int src_depth, const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const hier::BoxList&lt; DIM &gt; &amp;dest_boxes, const hier::IntVector&lt; DIM &gt; &amp;source_offset) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::Box&lt; DIM &gt; &amp;dest_box, const hier::IntVector&lt; DIM &gt; &amp;source_offset) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxList&lt; DIM &gt; &amp;dest_boxes, const hier::IntVector&lt; DIM &gt; &amp;source_offset) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::Box&lt; DIM &gt; &amp;dest_box, const hier::IntVector&lt; DIM &gt; &amp;source_offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxList&lt; DIM &gt; &amp;boxes, const hier::IntVector&lt; DIM &gt; &amp;source_offset)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOffset</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int d=0) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const hier::Index&lt; DIM &gt; &amp;i, const int d)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const hier::Index&lt; DIM &gt; &amp;i, const int d) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const TYPE &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const TYPE &amp;t, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box&lt; DIM &gt; &amp;box, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database, bool data_only=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSpecializedFromDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putSpecializedToDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeOfData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayData.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::ArrayDataIterator</name>
    <filename>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>ArrayDataIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayDataIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayDataIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const ArrayDataIterator&lt; DIM &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>ArrayDataIterator&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const ArrayDataIterator&lt; DIM &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayDataIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const hier::Index&lt; DIM &gt; &amp;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Index&lt; DIM &gt; &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const void *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const ArrayDataIterator&lt; DIM &gt; &amp;iterator) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1ArrayDataIterator.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const ArrayDataIterator&lt; DIM &gt; &amp;iterator) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellGeometry</name>
    <filename>classSAMRAI_1_1pdat_1_1CellGeometry.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::BoxGeometry</base>
    <member kind="function">
      <type></type>
      <name>CellGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellGeometry.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellGeometry.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellGeometry.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::BoxGeometry&lt; DIM &gt; &amp;dst_geometry, const hier::BoxGeometry&lt; DIM &gt; &amp;src_geometry, const hier::Box&lt; DIM &gt; &amp;src_mask, const bool overwrite_interior, const hier::IntVector&lt; DIM &gt; &amp;src_offset, const bool retry) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Box&lt; DIM &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellGeometry.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getGhosts</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellGeometry.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hier::Box&lt; DIM &gt;</type>
      <name>toCellBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellGeometry.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellOverlap</name>
    <filename>classSAMRAI_1_1pdat_1_1CellOverlap.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::BoxOverlap</base>
    <member kind="function">
      <type></type>
      <name>CellOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellOverlap.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::BoxList&lt; DIM &gt; &amp;boxes, const hier::IntVector&lt; DIM &gt; &amp;src_offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellOverlap.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOverlapEmpty</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellOverlap.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::BoxList&lt; DIM &gt; &amp;</type>
      <name>getDestinationBoxList</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellOverlap.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getSourceOffset</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellOverlap.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellOverlap.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeGeometry</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::BoxGeometry</base>
    <member kind="function">
      <type></type>
      <name>EdgeGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::BoxGeometry&lt; DIM &gt; &amp;dst_geometry, const hier::BoxGeometry&lt; DIM &gt; &amp;src_geometry, const hier::Box&lt; DIM &gt; &amp;src_mask, const bool overwrite_interior, const hier::IntVector&lt; DIM &gt; &amp;src_offset, const bool retry) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Box&lt; DIM &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getGhosts</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hier::Box&lt; DIM &gt;</type>
      <name>toEdgeBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeGeometry.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int axis)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeOverlap</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeOverlap.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::BoxOverlap</base>
    <member kind="function">
      <type></type>
      <name>EdgeOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeOverlap.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::BoxList&lt; DIM &gt; boxes[DIM], const hier::IntVector&lt; DIM &gt; &amp;src_offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeOverlap.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOverlapEmpty</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeOverlap.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::BoxList&lt; DIM &gt; &amp;</type>
      <name>getDestinationBoxList</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeOverlap.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int axis) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getSourceOffset</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeOverlap.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceGeometry</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceGeometry.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::BoxGeometry</base>
    <member kind="function">
      <type></type>
      <name>FaceGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceGeometry.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceGeometry.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceGeometry.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::BoxGeometry&lt; DIM &gt; &amp;dst_geometry, const hier::BoxGeometry&lt; DIM &gt; &amp;src_geometry, const hier::Box&lt; DIM &gt; &amp;src_mask, const bool overwrite_interior, const hier::IntVector&lt; DIM &gt; &amp;src_offset, const bool retry) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Box&lt; DIM &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceGeometry.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getGhosts</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceGeometry.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hier::Box&lt; DIM &gt;</type>
      <name>toFaceBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceGeometry.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int axis)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceOverlap</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceOverlap.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::BoxOverlap</base>
    <member kind="function">
      <type></type>
      <name>FaceOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceOverlap.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::BoxList&lt; DIM &gt; boxes[DIM], const hier::IntVector&lt; DIM &gt; &amp;src_offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceOverlap.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOverlapEmpty</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceOverlap.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::BoxList&lt; DIM &gt; &amp;</type>
      <name>getDestinationBoxList</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceOverlap.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int axis) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getSourceOffset</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceOverlap.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeGeometry</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeGeometry.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::BoxGeometry</base>
    <member kind="function">
      <type></type>
      <name>NodeGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeGeometry.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeGeometry.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeGeometry.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::BoxGeometry&lt; DIM &gt; &amp;dst_geometry, const hier::BoxGeometry&lt; DIM &gt; &amp;src_geometry, const hier::Box&lt; DIM &gt; &amp;src_mask, const bool overwrite_interior, const hier::IntVector&lt; DIM &gt; &amp;src_offset, const bool retry) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Box&lt; DIM &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeGeometry.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getGhosts</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeGeometry.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hier::Box&lt; DIM &gt;</type>
      <name>toNodeBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeGeometry.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeOverlap</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeOverlap.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::BoxOverlap</base>
    <member kind="function">
      <type></type>
      <name>NodeOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeOverlap.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::BoxList&lt; DIM &gt; &amp;boxes, const hier::IntVector&lt; DIM &gt; &amp;src_offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeOverlap.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOverlapEmpty</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeOverlap.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::BoxList&lt; DIM &gt; &amp;</type>
      <name>getDestinationBoxList</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeOverlap.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getSourceOffset</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeOverlap.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuteredgeGeometry</name>
    <filename>classSAMRAI_1_1pdat_1_1OuteredgeGeometry.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::BoxGeometry</base>
    <member kind="function">
      <type></type>
      <name>OuteredgeGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeGeometry.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuteredgeGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeGeometry.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeGeometry.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::BoxGeometry&lt; DIM &gt; &amp;dst_geometry, const hier::BoxGeometry&lt; DIM &gt; &amp;src_geometry, const hier::Box&lt; DIM &gt; &amp;src_mask, const bool overwrite_interior, const hier::IntVector&lt; DIM &gt; &amp;src_offset, const bool retry) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Box&lt; DIM &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeGeometry.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getGhosts</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeGeometry.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>trimBoxes</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeGeometry.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(hier::Box&lt; DIM &gt; &amp;boxlo, hier::Box&lt; DIM &gt; &amp;boxup, const int axis, const int face_nrml)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceGeometry</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceGeometry.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::BoxGeometry</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceGeometry.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceGeometry.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceGeometry.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::BoxGeometry&lt; DIM &gt; &amp;dst_geometry, const hier::BoxGeometry&lt; DIM &gt; &amp;src_geometry, const hier::Box&lt; DIM &gt; &amp;src_mask, const bool overwrite_interior, const hier::IntVector&lt; DIM &gt; &amp;src_offset, const bool retry) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Box&lt; DIM &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceGeometry.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getGhosts</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceGeometry.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuternodeGeometry</name>
    <filename>classSAMRAI_1_1pdat_1_1OuternodeGeometry.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::BoxGeometry</base>
    <member kind="function">
      <type></type>
      <name>OuternodeGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeGeometry.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuternodeGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeGeometry.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeGeometry.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::BoxGeometry&lt; DIM &gt; &amp;dst_geometry, const hier::BoxGeometry&lt; DIM &gt; &amp;src_geometry, const hier::Box&lt; DIM &gt; &amp;src_mask, const bool overwrite_interior, const hier::IntVector&lt; DIM &gt; &amp;src_offset, const bool retry) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Box&lt; DIM &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeGeometry.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getGhosts</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeGeometry.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OutersideGeometry</name>
    <filename>classSAMRAI_1_1pdat_1_1OutersideGeometry.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::BoxGeometry</base>
    <member kind="function">
      <type></type>
      <name>OutersideGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideGeometry.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutersideGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideGeometry.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideGeometry.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::BoxGeometry&lt; DIM &gt; &amp;dst_geometry, const hier::BoxGeometry&lt; DIM &gt; &amp;src_geometry, const hier::Box&lt; DIM &gt; &amp;src_mask, const bool overwrite_interior, const hier::IntVector&lt; DIM &gt; &amp;src_offset, const bool retry) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Box&lt; DIM &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideGeometry.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getGhosts</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideGeometry.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideGeometry</name>
    <filename>classSAMRAI_1_1pdat_1_1SideGeometry.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::BoxGeometry</base>
    <member kind="function">
      <type></type>
      <name>SideGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const hier::IntVector&lt; DIM &gt; &amp;ghosts, const hier::IntVector&lt; DIM &gt; &amp;directions)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt;</type>
      <name>calculateOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::BoxGeometry&lt; DIM &gt; &amp;dst_geometry, const hier::BoxGeometry&lt; DIM &gt; &amp;src_geometry, const hier::Box&lt; DIM &gt; &amp;src_mask, const bool overwrite_interior, const hier::IntVector&lt; DIM &gt; &amp;src_offset, const bool retry) const </arglist>
    </member>
    <member kind="function">
      <type>const hier::Box&lt; DIM &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getGhosts</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getDirectionVector</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static hier::Box&lt; DIM &gt;</type>
      <name>toSideBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideGeometry.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int axis)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideOverlap</name>
    <filename>classSAMRAI_1_1pdat_1_1SideOverlap.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::BoxOverlap</base>
    <member kind="function">
      <type></type>
      <name>SideOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideOverlap.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::BoxList&lt; DIM &gt; boxes[DIM], const hier::IntVector&lt; DIM &gt; &amp;src_offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideOverlap</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideOverlap.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOverlapEmpty</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideOverlap.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::BoxList&lt; DIM &gt; &amp;</type>
      <name>getDestinationBoxList</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideOverlap.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int axis) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getSourceOffset</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideOverlap.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellData</name>
    <filename>classSAMRAI_1_1pdat_1_1CellData.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchData</base>
    <member kind="typedef">
      <type>CellIterator&lt; DIM &gt;</type>
      <name>Iterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CellData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth, const hier::IntVector&lt; DIM &gt; &amp;ghosts, tbox::Pointer&lt; tbox::Arena &gt; pool=tbox::Pointer&lt; tbox::Arena &gt;((0)))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::PatchData&lt; DIM &gt; &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::PatchData&lt; DIM &gt; &amp;src, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int dst_depth, const CellData&lt; DIM, TYPE &gt; &amp;src, int src_depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArrayData&lt; DIM, TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayData&lt; DIM, TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int d=0) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const CellIndex&lt; DIM &gt; &amp;i, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const CellIndex&lt; DIM &gt; &amp;i, const int d=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const TYPE &amp;t, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box&lt; DIM &gt; &amp;box, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const TYPE &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyOnBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const CellData&lt; DIM, TYPE &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int d, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSpecializedFromDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putSpecializedToDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeOfData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellData.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth, const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellDataFactory</name>
    <filename>classSAMRAI_1_1pdat_1_1CellDataFactory.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchDataFactory</base>
    <member kind="function">
      <type></type>
      <name>CellDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int depth, const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchDataFactory&lt; DIM &gt; &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchData&lt; DIM &gt; &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, tbox::Pointer&lt; tbox::Arena &gt; pool=tbox::Pointer&lt; tbox::Arena &gt;((0))) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::BoxGeometry&lt; DIM &gt; &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDefaultDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDataFactory.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchDataFactory&lt; DIM &gt; &gt; &amp;dst_pdf) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellIndex</name>
    <filename>classSAMRAI_1_1pdat_1_1CellIndex.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::Index</base>
    <member kind="function">
      <type></type>
      <name>CellIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CellIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const hier::Index&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CellIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const CellIndex&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CellIndex&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const CellIndex&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CellIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CellIndex&lt; DIM &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CellIndex&lt; DIM &gt;</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>CellIndex&lt; DIM &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>CellIndex&lt; DIM &gt;</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>CellIndex&lt; DIM &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CellIndex&lt; DIM &gt;</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>CellIndex&lt; DIM &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>CellIndex&lt; DIM &gt;</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>CellIndex&lt; DIM &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CellIndex&lt; DIM &gt;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>CellIndex&lt; DIM &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>CellIndex&lt; DIM &gt;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const CellIndex&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIndex.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const CellIndex&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellIterator</name>
    <filename>classSAMRAI_1_1pdat_1_1CellIterator.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>CellIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CellIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CellIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const CellIterator&lt; DIM &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>CellIterator&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const CellIterator&lt; DIM &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CellIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CellIndex&lt; DIM &gt; &amp;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CellIndex&lt; DIM &gt; &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const void *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const CellIterator&lt; DIM &gt; &amp;iterator) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIterator.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const CellIterator&lt; DIM &gt; &amp;iterator) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellVariable</name>
    <filename>classSAMRAI_1_1pdat_1_1CellVariable.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::Variable</base>
    <member kind="function">
      <type></type>
      <name>CellVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellVariable.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;name, int depth=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellVariable.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellVariable.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellVariable.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeData</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeData.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchData</base>
    <member kind="typedef">
      <type>EdgeIterator&lt; DIM &gt;</type>
      <name>Iterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth, const hier::IntVector&lt; DIM &gt; &amp;ghosts, tbox::Pointer&lt; tbox::Arena &gt; pool=tbox::Pointer&lt; tbox::Arena &gt;((0)))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::PatchData&lt; DIM &gt; &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::PatchData&lt; DIM &gt; &amp;src, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int dst_depth, const EdgeData&lt; DIM, TYPE &gt; &amp;src, int src_depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int axis, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int axis, const int d=0) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const EdgeIndex&lt; DIM &gt; &amp;i, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const EdgeIndex&lt; DIM &gt; &amp;i, const int d=0) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayData&lt; DIM, TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int axis)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayData&lt; DIM, TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int axis) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const TYPE &amp;t, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box&lt; DIM &gt; &amp;box, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const TYPE &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyOnBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const EdgeData&lt; DIM, TYPE &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int d, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const int axis, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const int axis, const hier::Box&lt; DIM &gt; &amp;box, const int d, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSpecializedFromDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putSpecializedToDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeOfData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeData.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth, const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeDataFactory</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchDataFactory</base>
    <member kind="function">
      <type></type>
      <name>EdgeDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int depth, const hier::IntVector&lt; DIM &gt; &amp;ghosts, bool fine_boundary_represents_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchDataFactory&lt; DIM &gt; &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchData&lt; DIM &gt; &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, tbox::Pointer&lt; tbox::Arena &gt; pool=tbox::Pointer&lt; tbox::Arena &gt;((0))) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::BoxGeometry&lt; DIM &gt; &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDefaultDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDataFactory.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchDataFactory&lt; DIM &gt; &gt; &amp;dst_pdf) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeIndex</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeIndex.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::Index</base>
    <member kind="enumvalue">
      <name>X</name>
      <anchor>w9w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Y</name>
      <anchor>w9w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Z</name>
      <anchor>w9w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Lower</name>
      <anchor>w9w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Upper</name>
      <anchor>w9w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LowerLeft</name>
      <anchor>w9w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LowerRight</name>
      <anchor>w9w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UpperLeft</name>
      <anchor>w9w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UpperRight</name>
      <anchor>w9w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const hier::Index&lt; DIM &gt; &amp;rhs, const int axis, const int edge)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const EdgeIndex&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const EdgeIndex&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EdgeIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int axis)</arglist>
    </member>
    <member kind="function">
      <type>hier::Index&lt; DIM &gt;</type>
      <name>toCell</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int edge) const </arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex&lt; DIM &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex&lt; DIM &gt;</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex&lt; DIM &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex&lt; DIM &gt;</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex&lt; DIM &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex&lt; DIM &gt;</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex&lt; DIM &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex&lt; DIM &gt;</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex&lt; DIM &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex&lt; DIM &gt;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex&lt; DIM &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIndex&lt; DIM &gt;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const EdgeIndex&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIndex.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const EdgeIndex&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeIterator</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeIterator.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>EdgeIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int axis)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const EdgeIterator&lt; DIM &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIterator&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const EdgeIterator&lt; DIM &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EdgeIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const EdgeIndex&lt; DIM &gt; &amp;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const EdgeIndex&lt; DIM &gt; &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const void *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const EdgeIterator&lt; DIM &gt; &amp;iterator) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIterator.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const EdgeIterator&lt; DIM &gt; &amp;iterator) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeVariable</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeVariable.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::Variable</base>
    <member kind="function">
      <type></type>
      <name>EdgeVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeVariable.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;name, int depth=1, bool fine_boundary_represents_var=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeVariable.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeVariable.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeVariable.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceData</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceData.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchData</base>
    <member kind="typedef">
      <type>FaceIterator&lt; DIM &gt;</type>
      <name>Iterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FaceData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth, const hier::IntVector&lt; DIM &gt; &amp;ghosts, tbox::Pointer&lt; tbox::Arena &gt; pool=tbox::Pointer&lt; tbox::Arena &gt;((0)))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::PatchData&lt; DIM &gt; &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::PatchData&lt; DIM &gt; &amp;src, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int dst_depth, const FaceData&lt; DIM, TYPE &gt; &amp;src, int src_depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int axis, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int axis, const int d=0) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const FaceIndex&lt; DIM &gt; &amp;i, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const FaceIndex&lt; DIM &gt; &amp;i, const int d=0) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayData&lt; DIM, TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int axis)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayData&lt; DIM, TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int axis) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const TYPE &amp;t, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box&lt; DIM &gt; &amp;box, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const TYPE &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyOnBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const FaceData&lt; DIM, TYPE &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int d, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const int axis, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const int axis, const hier::Box&lt; DIM &gt; &amp;box, const int d, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSpecializedFromDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putSpecializedToDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeOfData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceData.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth, const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceDataFactory</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchDataFactory</base>
    <member kind="function">
      <type></type>
      <name>FaceDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int depth, const hier::IntVector&lt; DIM &gt; &amp;ghosts, bool fine_boundary_represents_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchDataFactory&lt; DIM &gt; &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchData&lt; DIM &gt; &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, tbox::Pointer&lt; tbox::Arena &gt; pool=tbox::Pointer&lt; tbox::Arena &gt;((0))) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::BoxGeometry&lt; DIM &gt; &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDefaultDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDataFactory.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchDataFactory&lt; DIM &gt; &gt; &amp;dst_pdf) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceIndex</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceIndex.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::Index</base>
    <member kind="enumvalue">
      <name>X</name>
      <anchor>w5w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Y</name>
      <anchor>w5w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Z</name>
      <anchor>w5w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Lower</name>
      <anchor>w5w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Upper</name>
      <anchor>w5w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FaceIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FaceIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const hier::Index&lt; DIM &gt; &amp;rhs, const int axis, const int face)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FaceIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const FaceIndex&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>FaceIndex&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const FaceIndex&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FaceIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int axis)</arglist>
    </member>
    <member kind="function">
      <type>hier::Index&lt; DIM &gt;</type>
      <name>toCell</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int face) const </arglist>
    </member>
    <member kind="function">
      <type>FaceIndex&lt; DIM &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>FaceIndex&lt; DIM &gt;</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>FaceIndex&lt; DIM &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>FaceIndex&lt; DIM &gt;</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>FaceIndex&lt; DIM &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>FaceIndex&lt; DIM &gt;</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>FaceIndex&lt; DIM &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>FaceIndex&lt; DIM &gt;</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>FaceIndex&lt; DIM &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>FaceIndex&lt; DIM &gt;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>FaceIndex&lt; DIM &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>FaceIndex&lt; DIM &gt;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const FaceIndex&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIndex.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const FaceIndex&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceIterator</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceIterator.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>FaceIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FaceIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int axis)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FaceIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const FaceIterator&lt; DIM &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>FaceIterator&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const FaceIterator&lt; DIM &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FaceIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FaceIndex&lt; DIM &gt; &amp;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FaceIndex&lt; DIM &gt; &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const void *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const FaceIterator&lt; DIM &gt; &amp;iterator) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIterator.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const FaceIterator&lt; DIM &gt; &amp;iterator) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceVariable</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceVariable.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::Variable</base>
    <member kind="function">
      <type></type>
      <name>FaceVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceVariable.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;name, int depth=1, const bool fine_boundary_represents_var=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceVariable.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceVariable.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceVariable.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::IndexData</name>
    <filename>classSAMRAI_1_1pdat_1_1IndexData.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchData</base>
    <member kind="typedef">
      <type>IndexIterator&lt; DIM, TYPE &gt;</type>
      <name>Iterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IndexData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::PatchData&lt; DIM &gt; &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::PatchData&lt; DIM &gt; &amp;src, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendItem</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const hier::Index&lt; DIM &gt; &amp;index, const TYPE &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItem</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const hier::Index&lt; DIM &gt; &amp;index, const TYPE &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeItem</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const hier::Index&lt; DIM &gt; &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberItems</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeInsideBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeOutsideBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeGhostItems</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllItems</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isElement</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const hier::Index&lt; DIM &gt; &amp;index) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getItem</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const hier::Index&lt; DIM &gt; &amp;index) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSpecializedFromDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putSpecializedToDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>IndexIterator&lt; DIM, TYPE &gt;</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexData.html</anchorfile>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::IndexDataNode</name>
    <filename>classSAMRAI_1_1pdat_1_1IndexDataNode.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>IndexDataNode</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataNode.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IndexDataNode</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataNode.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>IndexData&lt; DIM, TYPE &gt;</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataNode.html</anchorfile>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>IndexIterator&lt; DIM, TYPE &gt;</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataNode.html</anchorfile>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::IndexIterator</name>
    <filename>classSAMRAI_1_1pdat_1_1IndexIterator.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>IndexIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(IndexData&lt; DIM, TYPE &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const IndexIterator&lt; DIM, TYPE &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>IndexIterator&lt; DIM, TYPE &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const IndexIterator&lt; DIM, TYPE &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IndexIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>getItem</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const hier::Index&lt; DIM &gt; &amp;</type>
      <name>getIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const void *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const IndexIterator&lt; DIM, TYPE &gt; &amp;iterator) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexIterator.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const IndexIterator&lt; DIM, TYPE &gt; &amp;iterator) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::IndexDataFactory</name>
    <filename>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchDataFactory</base>
    <member kind="function">
      <type></type>
      <name>IndexDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IndexDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchDataFactory&lt; DIM &gt; &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchData&lt; DIM &gt; &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, tbox::Pointer&lt; tbox::Arena &gt; pool=(tbox::Arena *)(0)) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::BoxGeometry&lt; DIM &gt; &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexDataFactory.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchDataFactory&lt; DIM &gt; &gt; &amp;dst_pdf) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::IndexVariable</name>
    <filename>classSAMRAI_1_1pdat_1_1IndexVariable.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::Variable</base>
    <member kind="function">
      <type></type>
      <name>IndexVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexVariable.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IndexVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexVariable.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexVariable.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1IndexVariable.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeData</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeData.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchData</base>
    <member kind="typedef">
      <type>NodeIterator&lt; DIM &gt;</type>
      <name>Iterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth, const hier::IntVector&lt; DIM &gt; &amp;ghosts, tbox::Pointer&lt; tbox::Arena &gt; pool=tbox::Pointer&lt; tbox::Arena &gt;((0)))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::PatchData&lt; DIM &gt; &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::PatchData&lt; DIM &gt; &amp;src, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int dst_depth, const NodeData&lt; DIM, TYPE &gt; &amp;src, int src_depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArrayData&lt; DIM, TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayData&lt; DIM, TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int d=0) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const NodeIndex&lt; DIM &gt; &amp;i, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const NodeIndex&lt; DIM &gt; &amp;i, const int d=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const TYPE &amp;t, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box&lt; DIM &gt; &amp;box, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const TYPE &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyOnBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const NodeData&lt; DIM, TYPE &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int d, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSpecializedFromDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putSpecializedToDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeOfData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeData.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth, const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeDataFactory</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchDataFactory</base>
    <member kind="function">
      <type></type>
      <name>NodeDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int depth, const hier::IntVector&lt; DIM &gt; &amp;ghosts, bool fine_boundary_represents_var)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchDataFactory&lt; DIM &gt; &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchData&lt; DIM &gt; &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, tbox::Pointer&lt; tbox::Arena &gt; pool=tbox::Pointer&lt; tbox::Arena &gt;((0))) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::BoxGeometry&lt; DIM &gt; &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDefaultDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDataFactory.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchDataFactory&lt; DIM &gt; &gt; &amp;dst_pdf) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeIndex</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeIndex.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::Index</base>
    <member kind="enumeration">
      <name>Corner</name>
      <anchor>w14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Left</name>
      <anchor>w14w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Right</name>
      <anchor>w14w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LowerLeft</name>
      <anchor>w14w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LowerRight</name>
      <anchor>w14w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UpperLeft</name>
      <anchor>w14w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UpperRight</name>
      <anchor>w14w5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LLL</name>
      <anchor>w14w6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ULL</name>
      <anchor>w14w7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LUL</name>
      <anchor>w14w8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UUL</name>
      <anchor>w14w9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LLU</name>
      <anchor>w14w10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ULU</name>
      <anchor>w14w11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LUU</name>
      <anchor>w14w12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UUU</name>
      <anchor>w14w13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const hier::Index&lt; DIM &gt; &amp;rhs, const Corner corner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::Index&lt; DIM &gt; &amp;rhs, const hier::IntVector&lt; DIM &gt; &amp;corner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const NodeIndex&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const NodeIndex&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NodeIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex&lt; DIM &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex&lt; DIM &gt;</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>NodeIndex&lt; DIM &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex&lt; DIM &gt;</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>NodeIndex&lt; DIM &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex&lt; DIM &gt;</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>NodeIndex&lt; DIM &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex&lt; DIM &gt;</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>NodeIndex&lt; DIM &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex&lt; DIM &gt;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>NodeIndex&lt; DIM &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>NodeIndex&lt; DIM &gt;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const NodeIndex&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIndex.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const NodeIndex&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeIterator</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeIterator.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>NodeIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const NodeIterator&lt; DIM &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>NodeIterator&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const NodeIterator&lt; DIM &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NodeIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeIndex&lt; DIM &gt; &amp;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NodeIndex&lt; DIM &gt; &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const void *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const NodeIterator&lt; DIM &gt; &amp;iterator) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIterator.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const NodeIterator&lt; DIM &gt; &amp;iterator) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeVariable</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeVariable.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::Variable</base>
    <member kind="function">
      <type></type>
      <name>NodeVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeVariable.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;name, int depth=1, bool fine_boundary_represents_var=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeVariable.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeVariable.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeVariable.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellComplexConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1CellComplexConstantRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CellComplexConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellComplexConstantRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellComplexConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellComplexConstantRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellComplexConstantRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellComplexConstantRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellComplexConstantRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellComplexConstantRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellComplexConstantRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellDoubleConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1CellDoubleConstantRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CellDoubleConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDoubleConstantRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellDoubleConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDoubleConstantRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDoubleConstantRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDoubleConstantRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDoubleConstantRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDoubleConstantRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDoubleConstantRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellFloatConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1CellFloatConstantRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CellFloatConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellFloatConstantRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellFloatConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellFloatConstantRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellFloatConstantRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellFloatConstantRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellFloatConstantRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellFloatConstantRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellFloatConstantRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellIntegerConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1CellIntegerConstantRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>CellIntegerConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIntegerConstantRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellIntegerConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIntegerConstantRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIntegerConstantRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIntegerConstantRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIntegerConstantRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIntegerConstantRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellIntegerConstantRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeComplexConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeComplexConstantRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>EdgeComplexConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeComplexConstantRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeComplexConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeComplexConstantRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeComplexConstantRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeComplexConstantRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeComplexConstantRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeComplexConstantRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeComplexConstantRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeDoubleConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeDoubleConstantRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>EdgeDoubleConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDoubleConstantRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeDoubleConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDoubleConstantRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDoubleConstantRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDoubleConstantRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDoubleConstantRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDoubleConstantRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDoubleConstantRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeFloatConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeFloatConstantRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>EdgeFloatConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeFloatConstantRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeFloatConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeFloatConstantRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeFloatConstantRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeFloatConstantRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeFloatConstantRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeFloatConstantRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeFloatConstantRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeIntegerConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeIntegerConstantRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>EdgeIntegerConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIntegerConstantRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeIntegerConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIntegerConstantRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIntegerConstantRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIntegerConstantRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIntegerConstantRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIntegerConstantRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeIntegerConstantRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceComplexConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceComplexConstantRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>FaceComplexConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceComplexConstantRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceComplexConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceComplexConstantRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceComplexConstantRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceComplexConstantRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceComplexConstantRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceComplexConstantRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceComplexConstantRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceDoubleConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceDoubleConstantRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>FaceDoubleConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDoubleConstantRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceDoubleConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDoubleConstantRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDoubleConstantRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDoubleConstantRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDoubleConstantRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDoubleConstantRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDoubleConstantRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceFloatConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceFloatConstantRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>FaceFloatConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceFloatConstantRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceFloatConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceFloatConstantRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceFloatConstantRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceFloatConstantRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceFloatConstantRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceFloatConstantRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceFloatConstantRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceIntegerConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceIntegerConstantRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>FaceIntegerConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIntegerConstantRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceIntegerConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIntegerConstantRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIntegerConstantRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIntegerConstantRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIntegerConstantRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIntegerConstantRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceIntegerConstantRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeComplexConstantAverage</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeComplexConstantAverage.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>NodeComplexConstantAverage</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeComplexConstantAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeComplexConstantAverage</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeComplexConstantAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeComplexConstantAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeComplexConstantAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeComplexConstantAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeComplexConstantAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeComplexConstantAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeDoubleConstantAverage</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeDoubleConstantAverage.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>NodeDoubleConstantAverage</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDoubleConstantAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeDoubleConstantAverage</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDoubleConstantAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDoubleConstantAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDoubleConstantAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDoubleConstantAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDoubleConstantAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDoubleConstantAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeFloatConstantAverage</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeFloatConstantAverage.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>NodeFloatConstantAverage</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeFloatConstantAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeFloatConstantAverage</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeFloatConstantAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeFloatConstantAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeFloatConstantAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeFloatConstantAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeFloatConstantAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeFloatConstantAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeIntegerConstantAverage</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeIntegerConstantAverage.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>NodeIntegerConstantAverage</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIntegerConstantAverage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeIntegerConstantAverage</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIntegerConstantAverage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIntegerConstantAverage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIntegerConstantAverage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIntegerConstantAverage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIntegerConstantAverage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeIntegerConstantAverage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceComplexConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceComplexConstantRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceComplexConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceComplexConstantRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceComplexConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceComplexConstantRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceComplexConstantRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceComplexConstantRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceComplexConstantRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceComplexConstantRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceComplexConstantRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceDoubleConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceDoubleConstantRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceDoubleConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDoubleConstantRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceDoubleConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDoubleConstantRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDoubleConstantRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDoubleConstantRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDoubleConstantRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDoubleConstantRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDoubleConstantRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceFloatConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceFloatConstantRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceFloatConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceFloatConstantRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceFloatConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceFloatConstantRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceFloatConstantRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceFloatConstantRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceFloatConstantRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceFloatConstantRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceFloatConstantRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceIntegerConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceIntegerConstantRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceIntegerConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceIntegerConstantRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceIntegerConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceIntegerConstantRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceIntegerConstantRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceIntegerConstantRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceIntegerConstantRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceIntegerConstantRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceIntegerConstantRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuternodeDoubleConstantCoarsen</name>
    <filename>classSAMRAI_1_1pdat_1_1OuternodeDoubleConstantCoarsen.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenOperator</base>
    <member kind="function">
      <type></type>
      <name>OuternodeDoubleConstantCoarsen</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDoubleConstantCoarsen.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuternodeDoubleConstantCoarsen</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDoubleConstantCoarsen.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDoubleConstantCoarsen.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDoubleConstantCoarsen.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDoubleConstantCoarsen.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDoubleConstantCoarsen.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDoubleConstantCoarsen.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideComplexConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1SideComplexConstantRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>SideComplexConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideComplexConstantRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideComplexConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideComplexConstantRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideComplexConstantRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideComplexConstantRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideComplexConstantRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideComplexConstantRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideComplexConstantRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideDoubleConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1SideDoubleConstantRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>SideDoubleConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDoubleConstantRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideDoubleConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDoubleConstantRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDoubleConstantRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDoubleConstantRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDoubleConstantRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDoubleConstantRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDoubleConstantRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideFloatConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1SideFloatConstantRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>SideFloatConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideFloatConstantRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideFloatConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideFloatConstantRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideFloatConstantRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideFloatConstantRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideFloatConstantRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideFloatConstantRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideFloatConstantRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideIntegerConstantRefine</name>
    <filename>classSAMRAI_1_1pdat_1_1SideIntegerConstantRefine.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineOperator</base>
    <member kind="function">
      <type></type>
      <name>SideIntegerConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIntegerConstantRefine.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideIntegerConstantRefine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIntegerConstantRefine.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIntegerConstantRefine.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIntegerConstantRefine.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIntegerConstantRefine.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIntegerConstantRefine.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIntegerConstantRefine.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellComplexLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1CellComplexLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>CellComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellDoubleLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1CellDoubleLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>CellDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::CellFloatLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1CellFloatLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>CellFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CellFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1CellFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeComplexLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeComplexLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>EdgeComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeDoubleLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeDoubleLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>EdgeDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::EdgeFloatLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1EdgeFloatLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>EdgeFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EdgeFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1EdgeFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceComplexLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceComplexLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>FaceComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceDoubleLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceDoubleLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>FaceDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::FaceFloatLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1FaceFloatLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>FaceFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FaceFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1FaceFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeComplexLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeComplexLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>NodeComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeDoubleLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeDoubleLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>NodeDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::NodeFloatLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1NodeFloatLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>NodeFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1NodeFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceComplexLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceComplexLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceDoubleLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceDoubleLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceFloatLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceFloatLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OutersideComplexLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1OutersideComplexLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>OutersideComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutersideComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OutersideDoubleLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1OutersideDoubleLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>OutersideDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutersideDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OutersideFloatLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1OutersideFloatLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>OutersideFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutersideFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideComplexLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1SideComplexLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>SideComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideComplexLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideComplexLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideDoubleLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1SideDoubleLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>SideDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideDoubleLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDoubleLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideFloatLinearTimeInterpolateOp</name>
    <filename>classSAMRAI_1_1pdat_1_1SideFloatLinearTimeInterpolateOp.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::TimeInterpolateOperator</base>
    <member kind="function">
      <type></type>
      <name>SideFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideFloatLinearTimeInterpolateOp</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideFloatLinearTimeInterpolateOp.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuteredgeData</name>
    <filename>classSAMRAI_1_1pdat_1_1OuteredgeData.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchData</base>
    <member kind="function">
      <type></type>
      <name>OuteredgeData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth, tbox::Pointer&lt; tbox::Arena &gt; pool=tbox::Pointer&lt; tbox::Arena &gt;(NULL))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuteredgeData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::PatchData&lt; DIM &gt; &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::PatchData&lt; DIM &gt; &amp;src, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int dst_depth, const EdgeData&lt; DIM, TYPE &gt; &amp;src, int src_depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataExists</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(int axis, int face_nrml) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int axis, const int face_nrml, const int s, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(int axis, int face_nrml, int s, int d=0) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayData&lt; DIM, TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(int axis, int face_nrml, int s)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayData&lt; DIM, TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(int axis, int face_nrml, int s) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const EdgeIndex&lt; DIM &gt; &amp;i, int axis, int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const EdgeIndex&lt; DIM &gt; &amp;i, int axis, int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>hier::Box&lt; DIM &gt;</type>
      <name>getDataBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(int axis, int face_nrml, int s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const TYPE &amp;t, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box&lt; DIM &gt; &amp;box, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const TYPE &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, int d, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxisSide</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(int axis, int face_nrml, int s, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxisSide</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(int axis, int face_nrml, int s, const hier::Box&lt; DIM &gt; &amp;box, int d, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSpecializedFromDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putSpecializedToDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeOfData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeData.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuteredgeDataFactory</name>
    <filename>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchDataFactory</base>
    <member kind="function">
      <type></type>
      <name>OuteredgeDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuteredgeDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchDataFactory&lt; DIM &gt; &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchData&lt; DIM &gt; &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, tbox::Pointer&lt; tbox::Arena &gt; pool=tbox::Pointer&lt; tbox::Arena &gt;((0))) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::BoxGeometry&lt; DIM &gt; &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDefaultDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeDataFactory.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchDataFactory&lt; DIM &gt; &gt; &amp;dst_pdf) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuteredgeVariable</name>
    <filename>classSAMRAI_1_1pdat_1_1OuteredgeVariable.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::Variable</base>
    <member kind="function">
      <type></type>
      <name>OuteredgeVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeVariable.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;name, int depth=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuteredgeVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeVariable.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeVariable.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuteredgeVariable.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceData</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceData.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchData</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth, tbox::Pointer&lt; tbox::Arena &gt; pool=tbox::Pointer&lt; tbox::Arena &gt;(NULL))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::PatchData&lt; DIM &gt; &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::PatchData&lt; DIM &gt; &amp;src, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int dst_depth, const FaceData&lt; DIM, TYPE &gt; &amp;src, int src_depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int axis, const int face, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int axis, const int face, const int d=0) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayData&lt; DIM, TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int axis, const int face)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayData&lt; DIM, TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int axis, const int face) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const FaceIndex&lt; DIM &gt; &amp;i, const int face, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const FaceIndex&lt; DIM &gt; &amp;i, const int face, const int d=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const TYPE &amp;t, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box&lt; DIM &gt; &amp;box, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const TYPE &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int d, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxisFace</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const int axis, const int face, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxisFace</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const int axis, const int face, const hier::Box&lt; DIM &gt; &amp;box, const int d, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSpecializedFromDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putSpecializedToDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeOfData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceData.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceDataFactory</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchDataFactory</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchDataFactory&lt; DIM &gt; &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchData&lt; DIM &gt; &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, tbox::Pointer&lt; tbox::Arena &gt; pool=tbox::Pointer&lt; tbox::Arena &gt;((0))) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::BoxGeometry&lt; DIM &gt; &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDefaultDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceDataFactory.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchDataFactory&lt; DIM &gt; &gt; &amp;dst_pdf) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuterfaceVariable</name>
    <filename>classSAMRAI_1_1pdat_1_1OuterfaceVariable.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::Variable</base>
    <member kind="function">
      <type></type>
      <name>OuterfaceVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceVariable.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;name, int depth=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuterfaceVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceVariable.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceVariable.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuterfaceVariable.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuternodeData</name>
    <filename>classSAMRAI_1_1pdat_1_1OuternodeData.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchData</base>
    <member kind="function">
      <type></type>
      <name>OuternodeData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth, tbox::Pointer&lt; tbox::Arena &gt; pool=tbox::Pointer&lt; tbox::Arena &gt;(NULL))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuternodeData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::PatchData&lt; DIM &gt; &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::PatchData&lt; DIM &gt; &amp;src, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int dst_depth, const NodeData&lt; DIM, TYPE &gt; &amp;src, int src_depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataExists</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int axis) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int axis, const int side, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int axis, const int side, const int d=0) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayData&lt; DIM, TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int axis, const int side)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayData&lt; DIM, TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const int axis, const int side) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const NodeIndex&lt; DIM &gt; &amp;i, const int depth=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const NodeIndex&lt; DIM &gt; &amp;i, const int depth=0) const </arglist>
    </member>
    <member kind="function">
      <type>hier::Box&lt; DIM &gt;</type>
      <name>getDataBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(int dim, int side)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const TYPE &amp;t, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box&lt; DIM &gt; &amp;box, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const TYPE &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int d, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxisSide</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const int axis, const int side, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxisSide</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const int axis, const int side, const hier::Box&lt; DIM &gt; &amp;box, const int d, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSpecializedFromDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putSpecializedToDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeOfData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeData.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuternodeDataFactory</name>
    <filename>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchDataFactory</base>
    <member kind="function">
      <type></type>
      <name>OuternodeDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuternodeDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchDataFactory&lt; DIM &gt; &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchData&lt; DIM &gt; &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, tbox::Pointer&lt; tbox::Arena &gt; pool=tbox::Pointer&lt; tbox::Arena &gt;((0))) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::BoxGeometry&lt; DIM &gt; &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDefaultDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeDataFactory.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchDataFactory&lt; DIM &gt; &gt; &amp;dst_pdf) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OuternodeVariable</name>
    <filename>classSAMRAI_1_1pdat_1_1OuternodeVariable.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::Variable</base>
    <member kind="function">
      <type></type>
      <name>OuternodeVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeVariable.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;name, int depth=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OuternodeVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeVariable.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeVariable.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OuternodeVariable.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OutersideData</name>
    <filename>classSAMRAI_1_1pdat_1_1OutersideData.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchData</base>
    <member kind="function">
      <type></type>
      <name>OutersideData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth, tbox::Pointer&lt; tbox::Arena &gt; pool=tbox::Pointer&lt; tbox::Arena &gt;(NULL))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutersideData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::PatchData&lt; DIM &gt; &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::PatchData&lt; DIM &gt; &amp;src, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int dst_depth, const SideData&lt; DIM, TYPE &gt; &amp;src, int src_depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const int axis, const int side, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int axis, const int side, const int d=0) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayData&lt; DIM, TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int axis, const int side)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayData&lt; DIM, TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int axis, const int side) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const SideIndex&lt; DIM &gt; &amp;i, const int side, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const SideIndex&lt; DIM &gt; &amp;i, const int side, const int d=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const TYPE &amp;t, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box&lt; DIM &gt; &amp;box, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const TYPE &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int d, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxisSide</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const int axis, const int side, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxisSide</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const int axis, const int side, const hier::Box&lt; DIM &gt; &amp;box, const int d, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSpecializedFromDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putSpecializedToDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeOfData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideData.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OutersideDataFactory</name>
    <filename>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchDataFactory</base>
    <member kind="function">
      <type></type>
      <name>OutersideDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutersideDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchDataFactory&lt; DIM &gt; &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchData&lt; DIM &gt; &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, tbox::Pointer&lt; tbox::Arena &gt; pool=tbox::Pointer&lt; tbox::Arena &gt;((0))) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::BoxGeometry&lt; DIM &gt; &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDefaultDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideDataFactory.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchDataFactory&lt; DIM &gt; &gt; &amp;dst_pdf) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::OutersideVariable</name>
    <filename>classSAMRAI_1_1pdat_1_1OutersideVariable.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::Variable</base>
    <member kind="function">
      <type></type>
      <name>OutersideVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideVariable.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;name, int depth=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutersideVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideVariable.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideVariable.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1OutersideVariable.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideData</name>
    <filename>classSAMRAI_1_1pdat_1_1SideData.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchData</base>
    <member kind="typedef">
      <type>SideIterator&lt; DIM &gt;</type>
      <name>Iterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SideData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth, const hier::IntVector&lt; DIM &gt; &amp;ghosts, const hier::IntVector&lt; DIM &gt; &amp;directions=hier::IntVector&lt; DIM &gt;(1), tbox::Pointer&lt; tbox::Arena &gt; pool=tbox::Pointer&lt; tbox::Arena &gt;((0)))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const hier::PatchData&lt; DIM &gt; &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::PatchData&lt; DIM &gt; &amp;src, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copy2</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int dst_depth, const SideData&lt; DIM, TYPE &gt; &amp;src, int src_depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateStreamSizeFromBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(tbox::AbstractStream &amp;stream, const hier::BoxOverlap&lt; DIM &gt; &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getDirectionVector</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int axis, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int axis, const int d=0) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const SideIndex&lt; DIM &gt; &amp;i, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const SideIndex&lt; DIM &gt; &amp;i, const int d=0) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayData&lt; DIM, TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int axis)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayData&lt; DIM, TYPE &gt; &amp;</type>
      <name>getArrayData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int axis) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const TYPE &amp;t, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box&lt; DIM &gt; &amp;box, const int d=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const TYPE &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillAll</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const TYPE &amp;t, const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyOnBox</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const SideData&lt; DIM, TYPE &gt; &amp;src, const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int d, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const int axis, const hier::Box&lt; DIM &gt; &amp;box, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const int axis, const hier::Box&lt; DIM &gt; &amp;box, const int d, ostream &amp;os=tbox::plog, int prec=-1) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSpecializedFromDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putSpecializedToDatabase</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>getSizeOfData</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideData.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int depth, const hier::IntVector&lt; DIM &gt; &amp;ghosts, const hier::IntVector&lt; DIM &gt; &amp;directions)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideDataFactory</name>
    <filename>classSAMRAI_1_1pdat_1_1SideDataFactory.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::PatchDataFactory</base>
    <member kind="function">
      <type></type>
      <name>SideDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(int depth, const hier::IntVector&lt; DIM &gt; &amp;ghosts, bool fine_boundary_represents_var, const hier::IntVector&lt; DIM &gt; &amp;directions=hier::IntVector&lt; DIM &gt;(1))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideDataFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchDataFactory&lt; DIM &gt; &gt;</type>
      <name>cloneFactory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::PatchData&lt; DIM &gt; &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, tbox::Pointer&lt; tbox::Arena &gt; pool=tbox::Pointer&lt; tbox::Arena &gt;((0))) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; hier::BoxGeometry&lt; DIM &gt; &gt;</type>
      <name>getBoxGeometry</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDefaultGhostCellWidth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;ghosts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDefaultDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultDepth</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int depth)</arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getDirectionVector</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getSizeOfMemory</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validCopyTo</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideDataFactory.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const tbox::Pointer&lt; hier::PatchDataFactory&lt; DIM &gt; &gt; &amp;dst_pdf) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideIndex</name>
    <filename>classSAMRAI_1_1pdat_1_1SideIndex.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::Index</base>
    <member kind="enumvalue">
      <name>X</name>
      <anchor>w5w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Y</name>
      <anchor>w5w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Z</name>
      <anchor>w5w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Lower</name>
      <anchor>w5w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Upper</name>
      <anchor>w5w4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SideIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SideIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const hier::Index&lt; DIM &gt; &amp;rhs, const int axis, const int side)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SideIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const SideIndex&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>SideIndex&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const SideIndex&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SideIndex</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAxis</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int axis)</arglist>
    </member>
    <member kind="function">
      <type>hier::Index&lt; DIM &gt;</type>
      <name>toCell</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int side) const </arglist>
    </member>
    <member kind="function">
      <type>SideIndex&lt; DIM &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>SideIndex&lt; DIM &gt;</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>SideIndex&lt; DIM &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>SideIndex&lt; DIM &gt;</type>
      <name>operator+</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>SideIndex&lt; DIM &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>SideIndex&lt; DIM &gt;</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>SideIndex&lt; DIM &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>SideIndex&lt; DIM &gt;</type>
      <name>operator-</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>SideIndex&lt; DIM &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>SideIndex&lt; DIM &gt;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const hier::IntVector&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>SideIndex&lt; DIM &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>SideIndex&lt; DIM &gt;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const int rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const SideIndex&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIndex.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const SideIndex&lt; DIM &gt; &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideIterator</name>
    <filename>classSAMRAI_1_1pdat_1_1SideIterator.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>SideIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SideIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const int axis)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SideIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const SideIterator&lt; DIM &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>SideIterator&lt; DIM &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const SideIterator&lt; DIM &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SideIterator</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SideIndex&lt; DIM &gt; &amp;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SideIndex&lt; DIM &gt; &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const void *</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const SideIterator&lt; DIM &gt; &amp;iterator) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideIterator.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const SideIterator&lt; DIM &gt; &amp;iterator) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::pdat::SideVariable</name>
    <filename>classSAMRAI_1_1pdat_1_1SideVariable.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::hier::Variable</base>
    <member kind="function">
      <type></type>
      <name>SideVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideVariable.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;name, int depth=1, bool fine_boundary_represents_var=true, int direction=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SideVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideVariable.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getDirectionVector</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideVariable.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fineBoundaryRepresentsVariable</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideVariable.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataLivesOnPatchBorder</name>
      <anchorfile>classSAMRAI_1_1pdat_1_1SideVariable.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::solv</name>
    <filename>namespaceSAMRAI_1_1solv.html</filename>
    <class kind="class">SAMRAI::solv::FACOperatorStrategy</class>
    <class kind="class">SAMRAI::solv::FACPreconditioner</class>
    <class kind="class">SAMRAI::solv::NonlinearSolverStrategy</class>
    <class kind="class">SAMRAI::solv::PETScAbstractVectorReal</class>
    <class kind="class">SAMRAI::solv::SNES_SAMRAIContext</class>
    <class kind="class">SAMRAI::solv::SNESAbstractFunctions</class>
    <class kind="class">SAMRAI::solv::KINSOL_SAMRAIContext</class>
    <class kind="class">SAMRAI::solv::KINSOLAbstractFunctions</class>
    <class kind="class">SAMRAI::solv::KINSOLSolver</class>
    <class kind="class">SAMRAI::solv::PVODEAbstractFunctions</class>
    <class kind="class">SAMRAI::solv::PVODESolver</class>
    <class kind="class">SAMRAI::solv::PVodeTrioAbstractVector</class>
    <class kind="class">SAMRAI::solv::CartesianRobinBcHelper</class>
    <class kind="class">SAMRAI::solv::CellPoissonFACOps</class>
    <class kind="class">SAMRAI::solv::CellPoissonFACSolver</class>
    <class kind="class">SAMRAI::solv::CellPoissonHypreSolver</class>
    <class kind="class">SAMRAI::solv::GhostCellRobinBcCoefs</class>
    <class kind="class">SAMRAI::solv::LocationIndexRobinBcCoefs</class>
    <class kind="class">SAMRAI::solv::PoissonSpecifications</class>
    <class kind="class">SAMRAI::solv::RobinBcCoefStrategy</class>
    <class kind="class">SAMRAI::solv::SimpleCellRobinBcCoefs</class>
    <class kind="class">SAMRAI::solv::PETSc_SAMRAIVectorReal</class>
    <class kind="class">SAMRAI::solv::PVodeTrio_SAMRAIVector</class>
    <class kind="class">SAMRAI::solv::SAMRAIVectorReal</class>
    <member kind="function">
      <type>void</type>
      <name>compfluxvardc2d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(double *xflux, double *yflux, const int *fluxgi, const int *fluxgj, const double *xdiff_coef, const double *ydiff_coef, const int *dcgi, const int *dcgj, const double *soln, const int *solngi, const int *solngj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compfluxcondc2d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(double *xflux, double *yflux, const int *fluxgi, const int *fluxgj, const double &amp;diff_coef, const double *soln, const int *solngi, const int *solngj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rbgswithfluxmaxvardcvarsf2d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const double *xflux, const double *yflux, const int *fluxgi, const int *fluxgj, const double *xdiff_coef, const double *ydiff_coef, const int *dcgi, const int *dcgj, const double *rhs, const int *rhsgi, const int *rhsgj, const double *scalar_field, const int *scalar_field_gi, const int *scalar_field_gj, double *soln, const int *solngi, const int *solngj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const double *dx, const int *offset, const double *maxres)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rbgswithfluxmaxcondcvarsf2d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const double *xflux, const double *yflux, const int *fluxgi, const int *fluxgj, const double &amp;dc, const double *rhs, const int *rhsgi, const int *rhsgj, const double *scalar_field, const int *scalar_field_gi, const int *scalar_field_gj, double *soln, const int *solngi, const int *solngj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const double *dx, const int *offset, const double *maxres)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rbgswithfluxmaxvardcconsf2d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const double *xflux, const double *yflux, const int *fluxgi, const int *fluxgj, const double *xdiff_coef, const double *ydiff_coef, const int *dcgi, const int *dcgj, const double *rhs, const int *rhsgi, const int *rhsgj, const double &amp;scalar_field, double *soln, const int *solngi, const int *solngj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const double *dx, const int *offset, const double *maxres)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rbgswithfluxmaxcondcconsf2d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const double *xflux, const double *yflux, const int *fluxgi, const int *fluxgj, const double &amp;dc, const double *rhs, const int *rhsgi, const int *rhsgj, const double &amp;scalar_field, double *soln, const int *solngi, const int *solngj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const double *dx, const int *offset, const double *maxres)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compresvarsca2d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const double *xflux, const double *yflux, const int *fluxgi, const int *fluxgj, const double *rhs, const int *rhsgi, const int *rhsgj, double *residual, const int *residualgi, const int *residualgj, const double *scalar_field, const int *scalar_field_gi, const int *scalar_field_gj, const double *soln, const int *solngi, const int *solngj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compresconsca2d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const double *xflux, const double *yflux, const int *fluxgi, const int *fluxgj, const double *rhs, const int *rhsgi, const int *rhsgj, double *residual, const int *residualgi, const int *residualgj, const double &amp;scalar_field, const double *soln, const int *solngi, const int *solngj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ewingfixfluxvardc2d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const double *xflux, const double *yflux, const int *fluxgi, const int *fluxgj, const double *xdiff_coef, const double *ydiff_coef, const int *dcgi, const int *dcgj, const double *soln, const int *solngi, const int *solngj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *location_index, const int *ratio_to_coarser, const int *blower, const int *bupper, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ewingfixfluxcondc2d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const double *xflux, const double *yflux, const int *fluxgi, const int *fluxgj, const double &amp;diff_coef, const double *soln, const int *solngi, const int *solngj, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *location_index, const int *ratio_to_coarser, const int *blower, const int *bupper, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compfluxvardc3d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(double *xflux, double *yflux, double *zflux, const int *fluxgi, const int *fluxgj, const int *fluxgk, const double *xdiff_coef, const double *ydiff_coef, const double *zdiff_coef, const int *dcgi, const int *dcgj, const int *dcgk, const double *soln, const int *solngi, const int *solngj, const int *solngk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compfluxcondc3d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(double *xflux, double *yflux, double *zflux, const int *fluxgi, const int *fluxgj, const int *fluxgk, const double &amp;diff_coef, const double *soln, const int *solngi, const int *solngj, const int *solngk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rbgswithfluxmaxvardcvarsf3d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const double *xflux, const double *yflux, const double *zflux, const int *fluxgi, const int *fluxgj, const int *fluxgk, const double *xdiff_coef, const double *ydiff_coef, const double *zdiff_coef, const int *dcgi, const int *dcgj, const int *dcgk, const double *rhs, const int *rhsgi, const int *rhsgj, const int *rhsgk, const double *scalar_field, const int *scalar_field_gi, const int *scalar_field_gj, const int *scalar_field_gk, double *soln, const int *solngi, const int *solngj, const int *solngk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const double *dx, const int *offset, const double *maxres)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rbgswithfluxmaxcondcvarsf3d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const double *xflux, const double *yflux, const double *zflux, const int *fluxgi, const int *fluxgj, const int *fluxgk, const double &amp;dc, const double *rhs, const int *rhsgi, const int *rhsgj, const int *rhsgk, const double *scalar_field, const int *scalar_field_gi, const int *scalar_field_gj, const int *scalar_field_gk, double *soln, const int *solngi, const int *solngj, const int *solngk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const double *dx, const int *offset, const double *maxres)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rbgswithfluxmaxvardcconsf3d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const double *xflux, const double *yflux, const double *zflux, const int *fluxgi, const int *fluxgj, const int *fluxgk, const double *xdiff_coef, const double *ydiff_coef, const double *zdiff_coef, const int *dcgi, const int *dcgj, const int *dcgk, const double *rhs, const int *rhsgi, const int *rhsgj, const int *rhsgk, const double &amp;scalar_field, double *soln, const int *solngi, const int *solngj, const int *solngk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const double *dx, const int *offset, const double *maxres)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rbgswithfluxmaxcondcconsf3d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const double *xflux, const double *yflux, const double *zflux, const int *fluxgi, const int *fluxgj, const int *fluxgk, const double &amp;dc, const double *rhs, const int *rhsgi, const int *rhsgj, const int *rhsgk, const double &amp;scalar_field, double *soln, const int *solngi, const int *solngj, const int *solngk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const double *dx, const int *offset, const double *maxres)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compresvarsca3d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const double *xflux, const double *yflux, const double *zflux, const int *fluxgi, const int *fluxgj, const int *fluxgk, const double *rhs, const int *rhsgi, const int *rhsgj, const int *rhsgk, double *residual, const int *residualgi, const int *residualgj, const int *residualgk, const double *scalar_field, const int *scalar_field_gi, const int *scalar_field_gj, const int *scalar_field_gk, const double *soln, const int *solngi, const int *solngj, const int *solngk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compresconsca3d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const double *xflux, const double *yflux, const double *zflux, const int *fluxgi, const int *fluxgj, const int *fluxgk, const double *rhs, const int *rhsgi, const int *rhsgj, const int *rhsgk, double *residual, const int *residualgi, const int *residualgj, const int *residualgk, const double &amp;scalar_field, const double *soln, const int *solngi, const int *solngj, const int *solngk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ewingfixfluxvardc3d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const double *xflux, const double *yflux, const double *zflux, const int *fluxgi, const int *fluxgj, const int *fluxgk, const double *xdiff_coef, const double *ydiff_coef, const double *zdiff_coef, const int *dcgi, const int *dcgj, const int *dcgk, const double *soln, const int *solngi, const int *solngj, const int *solngk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const int *location_index, const int *ratio_to_coarser, const int *blower, const int *bupper, const double *dx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ewingfixfluxcondc3d_</name>
      <anchorfile>namespaceSAMRAI_1_1solv.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const double *xflux, const double *yflux, const double *zflux, const int *fluxgi, const int *fluxgj, const int *fluxgk, const double &amp;diff_coef, const double *soln, const int *solngi, const int *solngj, const int *solngk, const int *ifirst, const int *ilast, const int *jfirst, const int *jlast, const int *kfirst, const int *klast, const int *location_index, const int *ratio_to_coarser, const int *blower, const int *bupper, const double *dx)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::FACOperatorStrategy</name>
    <filename>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>FACOperatorStrategy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FACOperatorStrategy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>restrictSolution</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const SAMRAIVectorReal&lt; DIM, double &gt; &amp;source, SAMRAIVectorReal&lt; DIM, double &gt; &amp;dest, int dest_ln)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>restrictResidual</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const SAMRAIVectorReal&lt; DIM, double &gt; &amp;source, SAMRAIVectorReal&lt; DIM, double &gt; &amp;dest, int dest_ln)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>prolongErrorAndCorrect</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const SAMRAIVectorReal&lt; DIM, double &gt; &amp;source, SAMRAIVectorReal&lt; DIM, double &gt; &amp;dest, int dest_ln)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>smoothError</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(SAMRAIVectorReal&lt; DIM, double &gt; &amp;error, const SAMRAIVectorReal&lt; DIM, double &gt; &amp;residual, int ln, int num_sweeps)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>solveCoarsestLevel</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(SAMRAIVectorReal&lt; DIM, double &gt; &amp;error, const SAMRAIVectorReal&lt; DIM, double &gt; &amp;residual, int coarsest_ln)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeCompositeResidualOnLevel</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(SAMRAIVectorReal&lt; DIM, double &gt; &amp;residual, const SAMRAIVectorReal&lt; DIM, double &gt; &amp;solution, const SAMRAIVectorReal&lt; DIM, double &gt; &amp;rhs, int ln, bool error_equation_indicator)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>computeResidualNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const SAMRAIVectorReal&lt; DIM, double &gt; &amp;residual, int fine_ln, int coarse_ln)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessOneCycle</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(int fac_cycle_num, const SAMRAIVectorReal&lt; DIM, double &gt; &amp;current_soln, const SAMRAIVectorReal&lt; DIM, double &gt; &amp;residual)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeOperatorState</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const SAMRAIVectorReal&lt; DIM, double &gt; &amp;solution, const SAMRAIVectorReal&lt; DIM, double &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocateOperatorState</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACOperatorStrategy.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::FACPreconditioner</name>
    <filename>classSAMRAI_1_1solv_1_1FACPreconditioner.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>FACPreconditioner</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;name, FACOperatorStrategy&lt; DIM &gt; &amp;user_ops, tbox::Pointer&lt; tbox::Database &gt; database=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FACPreconditioner</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveSystem</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(SAMRAIVectorReal&lt; DIM, double &gt; &amp;solution, SAMRAIVectorReal&lt; DIM, double &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeSolverState</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const SAMRAIVectorReal&lt; DIM, double &gt; &amp;solution, const SAMRAIVectorReal&lt; DIM, double &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocateSolverState</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkVectorStateCompatibility</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const SAMRAIVectorReal&lt; DIM, double &gt; &amp;solution, const SAMRAIVectorReal&lt; DIM, double &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPresmoothingSweeps</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int num_pre_sweeps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPostsmoothingSweeps</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int num_post_sweeps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxCycles</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int max_cycles)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResidualTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(double residual_tol, double relative_residual_tol=-1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlgorithmChoice</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const string &amp;choice)</arglist>
    </member>
    <member kind="function">
      <type>name Logging functions void</type>
      <name>enableLogging</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(bool enabled=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getConvergenceFactors</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(double &amp;avg_factor, double &amp;final_factor) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNetConvergenceFactor</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAvgConvergenceFactor</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFinalConvergenceFactor</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getResidualNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1FACPreconditioner.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::NonlinearSolverStrategy</name>
    <filename>classSAMRAI_1_1solv_1_1NonlinearSolverStrategy.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>NonlinearSolverStrategy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1NonlinearSolverStrategy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NonlinearSolverStrategy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1NonlinearSolverStrategy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1solv_1_1NonlinearSolverStrategy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, double &gt; &gt; solution)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>solve</name>
      <anchorfile>classSAMRAI_1_1solv_1_1NonlinearSolverStrategy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::PETScAbstractVectorReal</name>
    <filename>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>PETScAbstractVectorReal</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(bool vector_created_via_duplicate)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PETScAbstractVectorReal</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vec</type>
      <name>getPETScVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual PETScAbstractVectorReal&lt; TYPE &gt; *</type>
      <name>makeNewVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>freeVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>viewVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TYPE</type>
      <name>dotWith</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b6</anchor>
      <arglist>(const PETScAbstractVectorReal&lt; TYPE &gt; *y, bool local_only=false) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual TYPE</type>
      <name>TdotWith</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b7</anchor>
      <arglist>(const PETScAbstractVectorReal&lt; TYPE &gt; *y, bool local_only=false) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b8</anchor>
      <arglist>(bool local_only=false) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b9</anchor>
      <arglist>(bool local_only=false) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b10</anchor>
      <arglist>(bool local_only=false) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>scaleVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b11</anchor>
      <arglist>(const TYPE alpha)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>copyVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b12</anchor>
      <arglist>(const PETScAbstractVectorReal&lt; TYPE &gt; *v_src)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b13</anchor>
      <arglist>(const TYPE alpha)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>swapWith</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b14</anchor>
      <arglist>(PETScAbstractVectorReal&lt; TYPE &gt; *v_other)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setAXPY</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b15</anchor>
      <arglist>(const TYPE alpha, const PETScAbstractVectorReal&lt; TYPE &gt; *x)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setAXPBY</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b16</anchor>
      <arglist>(const TYPE alpha, const PETScAbstractVectorReal&lt; TYPE &gt; *x, const TYPE beta)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setWAXPY</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b17</anchor>
      <arglist>(const TYPE alpha, const PETScAbstractVectorReal&lt; TYPE &gt; *x, const PETScAbstractVectorReal&lt; TYPE &gt; *y)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>pointwiseMultiply</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b18</anchor>
      <arglist>(const PETScAbstractVectorReal&lt; TYPE &gt; *x, const PETScAbstractVectorReal&lt; TYPE &gt; *y)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>pointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b19</anchor>
      <arglist>(const PETScAbstractVectorReal&lt; TYPE &gt; *x, const PETScAbstractVectorReal&lt; TYPE &gt; *y)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b20</anchor>
      <arglist>(const PETScAbstractVectorReal&lt; TYPE &gt; *y)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>vecMax</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b21</anchor>
      <arglist>(int &amp;i, double &amp;max) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>vecMin</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b22</anchor>
      <arglist>(int &amp;i, double &amp;min) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b23</anchor>
      <arglist>(const TYPE width, const TYPE low)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>getDataArray</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b24</anchor>
      <arglist>(TYPE *array)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>getDataSize</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b25</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual int</type>
      <name>getLocalDataSize</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETScAbstractVectorReal.html</anchorfile>
      <anchor>b26</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::SNES_SAMRAIContext</name>
    <filename>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::solv::NonlinearSolverStrategy</base>
    <base>SAMRAI::tbox::Serializable</base>
    <member kind="function">
      <type></type>
      <name>SNES_SAMRAIContext</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, tbox::Pointer&lt; tbox::Database &gt; input_db, SNESAbstractFunctions *my_functions)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SNES_SAMRAIContext</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SNES</type>
      <name>getSNESSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SNESAbstractFunctions *</type>
      <name>getSNESFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SLES</type>
      <name>getSLESSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KSP</type>
      <name>getKrylovSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Mat</type>
      <name>getJacobianMatrix</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAbsoluteTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAbsoluteTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(double abs_tol)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRelativeTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRelativeTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(double rel_tol)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStepTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStepTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(double step_tol)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxNonlinearIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNonlinearIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(int max_nli)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxFunctionEvaluations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxFunctionEvaluations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(int max_feval)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getForcingTermStrategy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForcingTermStrategy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(string &amp;strategy)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getConstantForcingTerm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstantForcingTerm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(double fixed_eta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getInitialForcingTerm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialForcingTerm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(double initial_eta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaximumForcingTerm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumForcingTerm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(double max_eta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEWChoice2Exponent</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEWChoice2Exponent</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(double alpha)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEWChoice2SafeguardExponent</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEWChoice2SafeguardExponent</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(double beta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEWChoice2ScaleFactor</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEWChoice2ScaleFactor</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(double gamma)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEWSafeguardThreshold</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEWSafeguardThreshold</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(double threshold)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getLinearSolverType</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearSolverType</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUsesPreconditioner</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUsesPreconditioner</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(bool uses_preconditioner)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLinearSolverAbsoluteTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearSolverAbsoluteTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(double abs_tol)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getLinearSolverDivergenceTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearSolverDivergenceTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(double div_tol)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaximumLinearIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumLinearIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(int max_li)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaximumGMRESKrylovDimension</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumGMRESKrylovDimension</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getGMRESOrthogonalizationMethod</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGMRESOrthogonalizationMethod</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(string &amp;method)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUsesExplicitJacobian</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUsesExplicitJacobian</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(bool use_jac)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getDifferencingParameterMethod</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDifferencingParameterMethod</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>(string &amp;method)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFunctionEvaluationError</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunctionEvaluationError</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>(double evaluation_error)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a53</anchor>
      <arglist>(tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, double &gt; &gt; solution)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a54</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solve</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNonlinearIterationCount</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalLinearIterationCount</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reportCompletionCode</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a58</anchor>
      <arglist>(ostream &amp;os=tbox::plog) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a59</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; db)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNES__SAMRAIContext.html</anchorfile>
      <anchor>a60</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::SNESAbstractFunctions</name>
    <filename>classSAMRAI_1_1solv_1_1SNESAbstractFunctions.html</filename>
    <member kind="function">
      <type></type>
      <name>SNESAbstractFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNESAbstractFunctions.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SNESAbstractFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNESAbstractFunctions.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>evaluateNonlinearFunction</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNESAbstractFunctions.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(Vec xcur, Vec fcur)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>evaluateJacobian</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNESAbstractFunctions.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(Vec x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>jacobianTimesVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNESAbstractFunctions.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(Vec x, Vec y)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>setupPreconditioner</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNESAbstractFunctions.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(Vec xcur)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>applyPreconditioner</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SNESAbstractFunctions.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(Vec r, Vec z)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::KINSOL_SAMRAIContext</name>
    <filename>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::solv::NonlinearSolverStrategy</base>
    <base>SAMRAI::tbox::Serializable</base>
    <member kind="function">
      <type></type>
      <name>KINSOL_SAMRAIContext</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, tbox::Pointer&lt; tbox::Database &gt; input_db, KINSOLAbstractFunctions *my_functions)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KINSOL_SAMRAIContext</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, double &gt; &gt; solution)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solve</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KINSOLSolver *</type>
      <name>getKINSOLSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromInput</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; db)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::Pointer&lt; tbox::Database &gt; db)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOL__SAMRAIContext.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::KINSOLAbstractFunctions</name>
    <filename>classSAMRAI_1_1solv_1_1KINSOLAbstractFunctions.html</filename>
    <member kind="function">
      <type></type>
      <name>KINSOLAbstractFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLAbstractFunctions.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KINSOLAbstractFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLAbstractFunctions.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateNonlinearFunction</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLAbstractFunctions.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(PVodeTrioAbstractVector *soln, PVodeTrioAbstractVector *fval)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>precondSetup</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLAbstractFunctions.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(PVodeTrioAbstractVector *soln, PVodeTrioAbstractVector *soln_scale, PVodeTrioAbstractVector *fval, PVodeTrioAbstractVector *fval_scale, PVodeTrioAbstractVector *vtemp1, PVodeTrioAbstractVector *vtemp2, double mach_roundoff, int &amp;num_feval)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>precondSolve</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLAbstractFunctions.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(PVodeTrioAbstractVector *soln, PVodeTrioAbstractVector *soln_scale, PVodeTrioAbstractVector *fval, PVodeTrioAbstractVector *fval_scale, PVodeTrioAbstractVector *rhs, PVodeTrioAbstractVector *vtemp, double mach_roundoff, int &amp;num_feval)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>jacobianTimesVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLAbstractFunctions.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(PVodeTrioAbstractVector *vector, PVodeTrioAbstractVector *product, const bool soln_changed, PVodeTrioAbstractVector *soln)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::KINSOLSolver</name>
    <filename>classSAMRAI_1_1solv_1_1KINSOLSolver.html</filename>
    <member kind="function">
      <type></type>
      <name>KINSOLSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, KINSOLAbstractFunctions *my_functions, const int uses_preconditioner, const int uses_jac_times_vector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KINSOLSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(PVodeTrioAbstractVector *solution)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solve</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogFileData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const string &amp;log_fname, const int flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKINSOLFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(KINSOLAbstractFunctions *my_functions, const int uses_preconditioner, const int uses_jac_times_vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreconditioner</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int uses_preconditioner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJacobianTimesVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int uses_jac_times_vector)</arglist>
    </member>
    <member kind="function">
      <type>KINSOLAbstractFunctions *</type>
      <name>getKINSOLFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSolutionScaleVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(PVodeTrioAbstractVector *uscale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResidualScaleVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(PVodeTrioAbstractVector *fscale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstraintVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(PVodeTrioAbstractVector *constraints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResidualStoppingTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const double tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int maxits)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxKrylovDimension</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int kdim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalStrategy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int global)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxNewtonStep</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const double maxstep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonlinearStepTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const double tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRelativeFunctionError</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const double reserr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSolutionUpdateConstraint</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const double constraint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearSolverConvergenceTest</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const int conv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearSolverConstantTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const double tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEisenstatWalkerParameters</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const double alpha, const double gamma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrecondSetupFlag</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const int flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxStepsWithNoPrecondSetup</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const int maxsolv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxLinearSolveRestarts</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const int restarts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNumberOfNonlinearIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNumberOfFunctionCalls</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNumberOfBetaConditionFailures</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTotalNumberOfBacktracks</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getScaledResidualNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getNewtonStepLength</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1KINSOLSolver.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::PVODEAbstractFunctions</name>
    <filename>classSAMRAI_1_1solv_1_1PVODEAbstractFunctions.html</filename>
    <member kind="function">
      <type></type>
      <name>PVODEAbstractFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODEAbstractFunctions.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PVODEAbstractFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODEAbstractFunctions.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateRHSFunction</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODEAbstractFunctions.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(double t, PVodeTrioAbstractVector *y, PVodeTrioAbstractVector *y_dot)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>CVSpgmrPrecondSet</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODEAbstractFunctions.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int neq, double t, PVodeTrioAbstractVector *y, PVodeTrioAbstractVector *fy, int jok, int *jcurPtr, double gamma, PVodeTrioAbstractVector *ewt, double h, double mach_roundoff, long int *nfePtr, void *P_data, PVodeTrioAbstractVector *vtemp1, PVodeTrioAbstractVector *vtemp2, PVodeTrioAbstractVector *vtemp3)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>CVSpgmrPrecondSolve</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODEAbstractFunctions.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int neq, double t, PVodeTrioAbstractVector *y, PVodeTrioAbstractVector *fy, PVodeTrioAbstractVector *vtemp, double gamma, PVodeTrioAbstractVector *ewt, double delta, long int *nfePtr, PVodeTrioAbstractVector *r, int lr, void *P_data, PVodeTrioAbstractVector *z)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::PVODESolver</name>
    <filename>classSAMRAI_1_1solv_1_1PVODESolver.html</filename>
    <member kind="function">
      <type></type>
      <name>PVODESolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, PVODEAbstractFunctions *my_functions, const bool uses_preconditioner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PVODESolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(PVodeTrioAbstractVector *solution)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solve</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLogFileData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const string &amp;log_fname=string())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPVODEFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(PVODEAbstractFunctions *my_functions, const bool uses_preconditioner)</arglist>
    </member>
    <member kind="function">
      <type>PVODEAbstractFunctions *</type>
      <name>getPVODEFunctions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfEquations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int neq)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearMultistepMethod</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int linear_multistep_method)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIterationType</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(int iteration_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToleranceType</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int tolerance_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRelativeTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(double relative_tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAbsoluteTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(double absolute_tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAbsoluteTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(PVodeTrioAbstractVector *absolute_tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSteppingMethod</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(int stepping_method)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialValueOfIndependentVariable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(double t_0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinalValueOfIndependentVariable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(double t_f, bool pvode_needs_initialization)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialConditionVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(PVodeTrioAbstractVector *ic_vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumLinearMultistepMethodOrder</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(int max_order)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumNumberOfInternalSteps</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(int max_num_internal_steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumNumberOfNilStepWarnings</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(int max_num_warnings)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialStepSize</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(double init_step_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumAbsoluteStepSize</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(double max_step_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumAbsoluteStepSize</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(double min_step_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreconditioningType</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(int precondition_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGramSchmidtType</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(int gs_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxKrylovDimension</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(int max_krylov_dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCVSpgmrToleranceScaleFactor</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(double tol_scale_factor)</arglist>
    </member>
    <member kind="function">
      <type>PVodeTrioAbstractVector *</type>
      <name>getSolutionVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDkyVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(double t, int k, PVodeTrioAbstractVector *dky) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getActualFinalValueOfIndependentVariable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>turnOnPVODEStatisticsCollection</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStatistics</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printPVODEStatistics</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfInternalStepsTaken</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfRHSFunctionCalls</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfLinearSolverSetupCalls</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfNewtonIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfNonlinearConvergenceFailures</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfLocalErrorTestFailures</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOrderUsedDuringLastInternalStep</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getOrderToBeUsedDuringNextInternalStep</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPVODEMemoryUsageForDoubles</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPVODEMemoryUsageForIntegers</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStepSizeForLastInternalStep</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStepSizeForNextInternalStep</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCurrentInternalValueOfIndependentVariable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPVODESuggestedToleranceScalingFactor</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCVSpgmrStatistics</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfPreconditionerEvaluations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfLinearIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfPrecondSolveCalls</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfLinearConvergenceFailures</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCVSpgmrMemoryUsageForDoubles</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCVSpgmrMemoryUsageForIntegers</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVODESolver.html</anchorfile>
      <anchor>a55</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::PVodeTrioAbstractVector</name>
    <filename>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</filename>
    <member kind="function">
      <type></type>
      <name>PVodeTrioAbstractVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PVodeTrioAbstractVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PVodeTrioAbstractVector *</type>
      <name>makeNewVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>freeVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const double c)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scaleVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const PVodeTrioAbstractVector *x, const double c)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setLinearSum</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const double a, const PVodeTrioAbstractVector *x, const double b, const PVodeTrioAbstractVector *y)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pointwiseMultiply</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const PVodeTrioAbstractVector *x, const PVodeTrioAbstractVector *y)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const PVodeTrioAbstractVector *x, const PVodeTrioAbstractVector *y)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setAbs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const PVodeTrioAbstractVector *x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pointwiseReciprocal</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const PVodeTrioAbstractVector *x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const PVodeTrioAbstractVector *x, const double b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>dotWith</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const PVodeTrioAbstractVector *x) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const PVodeTrioAbstractVector *x) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const PVodeTrioAbstractVector *x) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>vecMin</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>constrProdPos</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const PVodeTrioAbstractVector *x) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const PVodeTrioAbstractVector *x, const double c)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const PVodeTrioAbstractVector *x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrioAbstractVector.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::CartesianRobinBcHelper</name>
    <filename>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefinePatchStrategy</base>
    <member kind="function">
      <type></type>
      <name>CartesianRobinBcHelper</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(string object_name=string(), RobinBcCoefStrategy&lt; DIM &gt; *coef_strategy=NULL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CartesianRobinBcHelper</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>name xfer::RefinePatchStrategy&lt; DIM &gt; virtual virtuals void</type>
      <name>setPhysicalBoundaryConditions</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const double fill_time, const hier::IntVector&lt; DIM &gt; &amp;ghost_width_to_fill)</arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>getRefineOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const hier::BoxList&lt; DIM &gt; &amp;fine_boxes, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessRefine</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const hier::BoxList&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessRefine</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Box&lt; DIM &gt; &amp;fine_boxes, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaryValuesInCells</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const double fill_time, const hier::IntVector&lt; DIM &gt; &amp;ghost_width_to_fill, int target_data_id, bool homogeneous_bc=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaryValuesInCells</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(hier::PatchLevel&lt; DIM &gt; &amp;level, const double fill_time, const hier::IntVector&lt; DIM &gt; &amp;ghost_width_to_fill, int target_data_id, bool homogeneous_bc=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaryValuesAtNodes</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const double fill_time, int target_data_id, bool homogeneous_bc=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoefImplementation</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const RobinBcCoefStrategy&lt; DIM &gt; *coef_strategy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetDataId</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(int target_data_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHomogeneousBc</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CartesianRobinBcHelper.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(bool homogeneous_bc)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::CellPoissonFACOps</name>
    <filename>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::solv::FACOperatorStrategy</base>
    <member kind="function">
      <type></type>
      <name>CellPoissonFACOps</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name=string(), tbox::Pointer&lt; tbox::Database &gt; database=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CellPoissonFACOps</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoissonSpecifications</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const PoissonSpecifications &amp;spec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableLogging</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(bool enable_logging)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSmoothingChoice</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const string &amp;smoothing_choice)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarsestLevelSolverChoice</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const string &amp;choice)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarsestLevelSolverTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarsestLevelSolverMaxIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int max_iterations)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarseFineDiscretization</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const string &amp;coarsefine_method)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProlongationMethod</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const string &amp;prolongation_method)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseSMG</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(bool use_smg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFluxId</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(int flux_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhysicalBcCoefObject</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const RobinBcCoefStrategy&lt; DIM &gt; *physical_bc_coef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInputPatchDataIndices</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeVectorWeights</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, int weight_id, int coarsest_ln=-1, int finest_ln=-1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreconditioner</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const FACPreconditioner&lt; DIM &gt; *preconditioner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeFluxOnPatch</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const hier::Patch&lt; DIM &gt; &amp;patch, const hier::IntVector&lt; DIM &gt; &amp;ratio_to_coarser_level, const pdat::CellData&lt; DIM, double &gt; &amp;w_data, pdat::SideData&lt; DIM, double &gt; &amp;Dgradw_data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>name FACOperatorStrategy&lt; DIM &gt; virtual virtuals void</type>
      <name>restrictSolution</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const SAMRAIVectorReal&lt; DIM, double &gt; &amp;s, SAMRAIVectorReal&lt; DIM, double &gt; &amp;d, int dest_ln)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>restrictResidual</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const SAMRAIVectorReal&lt; DIM, double &gt; &amp;s, SAMRAIVectorReal&lt; DIM, double &gt; &amp;d, int dest_ln)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>prolongErrorAndCorrect</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const SAMRAIVectorReal&lt; DIM, double &gt; &amp;s, SAMRAIVectorReal&lt; DIM, double &gt; &amp;d, int dest_ln)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>smoothError</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(SAMRAIVectorReal&lt; DIM, double &gt; &amp;error, const SAMRAIVectorReal&lt; DIM, double &gt; &amp;residual, int ln, int num_sweeps)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solveCoarsestLevel</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(SAMRAIVectorReal&lt; DIM, double &gt; &amp;error, const SAMRAIVectorReal&lt; DIM, double &gt; &amp;residual, int ln)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>computeCompositeResidualOnLevel</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(SAMRAIVectorReal&lt; DIM, double &gt; &amp;residual, const SAMRAIVectorReal&lt; DIM, double &gt; &amp;solution, const SAMRAIVectorReal&lt; DIM, double &gt; &amp;rhs, int ln, bool error_equation_indicator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>computeResidualNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const SAMRAIVectorReal&lt; DIM, double &gt; &amp;residual, int fine_ln, int coarse_ln)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeOperatorState</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const SAMRAIVectorReal&lt; DIM, double &gt; &amp;solution, const SAMRAIVectorReal&lt; DIM, double &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocateOperatorState</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessOneCycle</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACOps.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(int iteration_num, const SAMRAIVectorReal&lt; DIM, double &gt; &amp;current_soln, const SAMRAIVectorReal&lt; DIM, double &gt; &amp;residual)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::CellPoissonFACSolver</name>
    <filename>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>CellPoissonFACSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, tbox::Pointer&lt; tbox::Database &gt; database=tbox::Pointer&lt; tbox::Database &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CellPoissonFACSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableLogging</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(bool logging)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveSystem</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int solution, const int rhs, tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, int coarse_ln=-1, int fine_ln=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solveSystem</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int solution, const int rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaries</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const string &amp;boundary_type, const int fluxes=-1, const int flags=-1, int *bdry_types=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBcObject</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const RobinBcCoefStrategy&lt; DIM &gt; *bc_object)</arglist>
    </member>
    <member kind="function">
      <type>name Specifying PDE parameters void</type>
      <name>setDPatchDataId</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDConstant</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(double scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCPatchDataId</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCConstant</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(double scalar)</arglist>
    </member>
    <member kind="function">
      <type>name Functions for setting solver mathematic algorithm controls void</type>
      <name>setCoarsestLevelSolverChoice</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const string &amp;choice)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarsestLevelSolverTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarsestLevelSolverMaxIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(int max_iterations)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseSMG</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(bool use_smg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarseFineDiscretization</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const string &amp;coarsefine_method)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProlongationMethod</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const string &amp;prolongation_method)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPresmoothingSweeps</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(int num_pre_sweeps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPostsmoothingSweeps</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(int num_post_sweeps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxCycles</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(int max_cycles)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResidualTolerance</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(double residual_tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeSolverState</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const int solution, const int rhs, tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarse_level=-1, const int fine_level=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocateSolverState</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getConvergenceFactors</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(double &amp;avg_factor, double &amp;final_factor) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getResidualNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonFACSolver.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::CellPoissonHypreSolver</name>
    <filename>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>CellPoissonHypreSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, tbox::Pointer&lt; tbox::Database &gt; database=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CellPoissonHypreSolver</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeSolverState</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, int ln=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocateSolverState</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrixCoefficients</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const PoissonSpecifications &amp;spec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSolnIdDepth</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int depth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRhsIdDepth</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int depth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStoppingCriteria</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int max_iterations=10, const double relative_residual_tol=1.0e-6)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solveSystem</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int u, const int f, bool homogeneous_bc=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberIterations</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumPreRelaxSteps</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumPostRelaxSteps</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int steps)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRelativeResidualNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseSMG</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(bool use_smg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaries</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const string &amp;boundary_type, const int fluxes=-1, const int flags=-1, int *bdry_types=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhysicalBcCoefObject</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const RobinBcCoefStrategy&lt; DIM &gt; *physical_bc_coef_strategy, const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; variable=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrintSolverInfo</name>
      <anchorfile>classSAMRAI_1_1solv_1_1CellPoissonHypreSolver.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const bool print)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::GhostCellRobinBcCoefs</name>
    <filename>classSAMRAI_1_1solv_1_1GhostCellRobinBcCoefs.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::solv::RobinBcCoefStrategy</base>
    <member kind="function">
      <type></type>
      <name>GhostCellRobinBcCoefs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1GhostCellRobinBcCoefs.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(string object_name=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GhostCellRobinBcCoefs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1GhostCellRobinBcCoefs.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBcCoefs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1GhostCellRobinBcCoefs.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; pdat::ArrayData&lt; DIM, double &gt; &gt; &amp;acoef_data, tbox::Pointer&lt; pdat::ArrayData&lt; DIM, double &gt; &gt; &amp;gcoef_data, const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;variable, const hier::Patch&lt; DIM &gt; &amp;patch, const hier::BoundaryBox&lt; DIM &gt; &amp;bdry_box, double fill_time=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>numberOfExtensionsFillable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1GhostCellRobinBcCoefs.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGhostDataId</name>
      <anchorfile>classSAMRAI_1_1solv_1_1GhostCellRobinBcCoefs.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int ghost_data_id, hier::IntVector&lt; DIM &gt; extensions_fillable=hier::IntVector&lt; DIM &gt;(0))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::LocationIndexRobinBcCoefs</name>
    <filename>classSAMRAI_1_1solv_1_1LocationIndexRobinBcCoefs.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::solv::RobinBcCoefStrategy</base>
    <member kind="function">
      <type></type>
      <name>LocationIndexRobinBcCoefs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1LocationIndexRobinBcCoefs.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, tbox::Pointer&lt; tbox::Database &gt; database)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocationIndexRobinBcCoefs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1LocationIndexRobinBcCoefs.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBcCoefs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1LocationIndexRobinBcCoefs.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; pdat::ArrayData&lt; DIM, double &gt; &gt; &amp;acoef_data, tbox::Pointer&lt; pdat::ArrayData&lt; DIM, double &gt; &gt; &amp;gcoef_data, const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;variable, const hier::Patch&lt; DIM &gt; &amp;patch, const hier::BoundaryBox&lt; DIM &gt; &amp;bdry_box, double fill_time=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>numberOfExtensionsFillable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1LocationIndexRobinBcCoefs.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaryValue</name>
      <anchorfile>classSAMRAI_1_1solv_1_1LocationIndexRobinBcCoefs.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int location_index, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundarySlope</name>
      <anchorfile>classSAMRAI_1_1solv_1_1LocationIndexRobinBcCoefs.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int location_index, double slope)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRawCoefficients</name>
      <anchorfile>classSAMRAI_1_1solv_1_1LocationIndexRobinBcCoefs.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int location_index, double a, double g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoefficients</name>
      <anchorfile>classSAMRAI_1_1solv_1_1LocationIndexRobinBcCoefs.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int location_index, double &amp;a, double &amp;g) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::PoissonSpecifications</name>
    <filename>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</filename>
    <member kind="function">
      <type></type>
      <name>PoissonSpecifications</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoissonSpecifications</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const string &amp;object_name, const PoissonSpecifications &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PoissonSpecifications</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PoissonSpecifications &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const PoissonSpecifications &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDPatchDataId</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDConstant</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(double constant)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dIsVariable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dIsConstant</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDPatchDataId</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDConstant</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCPatchDataId</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCConstant</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(double constant)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCZero</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cIsVariable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cIsZero</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cIsConstant</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCPatchDataId</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCConstant</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PoissonSpecifications.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::RobinBcCoefStrategy</name>
    <filename>classSAMRAI_1_1solv_1_1RobinBcCoefStrategy.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>RobinBcCoefStrategy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1RobinBcCoefStrategy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RobinBcCoefStrategy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1RobinBcCoefStrategy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setBcCoefs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1RobinBcCoefStrategy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; pdat::ArrayData&lt; DIM, double &gt; &gt; &amp;acoef_data, tbox::Pointer&lt; pdat::ArrayData&lt; DIM, double &gt; &gt; &amp;gcoef_data, const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;variable, const hier::Patch&lt; DIM &gt; &amp;patch, const hier::BoundaryBox&lt; DIM &gt; &amp;bdry_box, double fill_time=0.0) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual hier::IntVector&lt; DIM &gt;</type>
      <name>numberOfExtensionsFillable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1RobinBcCoefStrategy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::SimpleCellRobinBcCoefs</name>
    <filename>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::solv::RobinBcCoefStrategy</base>
    <member kind="function">
      <type></type>
      <name>SimpleCellRobinBcCoefs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name=string())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleCellRobinBcCoefs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>name Inherited from RobinBcCoefStrategy&lt; DIM &gt; void</type>
      <name>setBcCoefs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; pdat::ArrayData&lt; DIM, double &gt; &gt; &amp;acoef_data, tbox::Pointer&lt; pdat::ArrayData&lt; DIM, double &gt; &gt; &amp;gcoef_data, const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;variable, const hier::Patch&lt; DIM &gt; &amp;patch, const hier::BoundaryBox&lt; DIM &gt; &amp;bdry_box, double fill_time=0.0) const </arglist>
    </member>
    <member kind="function">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>numberOfExtensionsFillable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHierarchy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;, const int ln_min=-1, const int ln_max=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBoundaries</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const string &amp;boundary_type, const int fluxes=-1, const int flags=-1, int *bdry_types=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cacheDirichletData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(int dirichlet_data_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreDirichletData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int dirichlet_data_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDiffusionCoefId</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int diffusion_coef_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDiffusionCoefConstant</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SimpleCellRobinBcCoefs.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(double diffusion_coef_value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::PETSc_SAMRAIVectorReal</name>
    <filename>classSAMRAI_1_1solv_1_1PETSc__SAMRAIVectorReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <base>SAMRAI::solv::PETScAbstractVectorReal</base>
    <member kind="function" static="yes">
      <type>static Vec</type>
      <name>createPETScVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETSc__SAMRAIVectorReal.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; samrai_vec)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyPETScVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETSc__SAMRAIVectorReal.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(Vec petsc_vec)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt;</type>
      <name>getSAMRAIVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETSc__SAMRAIVectorReal.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(Vec petsc_vec)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PETSc_SAMRAIVectorReal</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETSc__SAMRAIVectorReal.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; samrai_vector, bool vector_created_via_duplicate)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PETSc_SAMRAIVectorReal</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PETSc__SAMRAIVectorReal.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::PVodeTrio_SAMRAIVector</name>
    <filename>classSAMRAI_1_1solv_1_1PVodeTrio__SAMRAIVector.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::solv::PVodeTrioAbstractVector</base>
    <member kind="function" static="yes">
      <type>static PVodeTrioAbstractVector *</type>
      <name>createPVodeTrioVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrio__SAMRAIVector.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, double &gt; &gt; samrai_vec)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyPVodeTrioVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrio__SAMRAIVector.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(PVodeTrioAbstractVector *pvode_trio_vec)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, double &gt; &gt;</type>
      <name>getSAMRAIVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrio__SAMRAIVector.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(PVodeTrioAbstractVector *pvode_trio_vec)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PVodeTrio_SAMRAIVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrio__SAMRAIVector.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, double &gt; &gt; samrai_vector)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PVodeTrio_SAMRAIVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1PVodeTrio__SAMRAIVector.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::solv::SAMRAIVectorReal</name>
    <filename>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</filename>
    <templarg>DIM</templarg>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>SAMRAIVectorReal</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;name, tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SAMRAIVectorReal</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputStream</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ostream &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>getOutputStream</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLevels</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const int coarsest_level, const int finest_level)</arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getName</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt;</type>
      <name>getPatchHierarchy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoarsestLevelNumber</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFinestLevelNumber</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfComponents</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::PatchData&lt; DIM &gt; &gt;</type>
      <name>getComponentPatchData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int comp_id, const hier::Patch&lt; DIM &gt; &amp;patch) const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::PatchData&lt; DIM &gt; &gt;</type>
      <name>getComponentPatchData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const hier::Patch&lt; DIM &gt; &amp;patch) const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt;</type>
      <name>getComponentVariable</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const int component) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getComponentDescriptorIndex</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int component) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getControlVolumeIndex</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int component) const </arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt;</type>
      <name>cloneVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeVectorComponents</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addComponent</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const int comp_data_id, const int control_vol_id=-1, const tbox::Pointer&lt; math::HierarchyDataOpsReal&lt; DIM, TYPE &gt; &gt; vop=(tbox::Pointer&lt; math::HierarchyDataOpsReal&lt; DIM, TYPE &gt; &gt;)((0)))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateVectorData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const double timestamp=0.0, tbox::Pointer&lt; tbox::Arena &gt; pool=(0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocateVectorData</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(ostream &amp;s=tbox::plog, const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyVector</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; src_vec, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapVectors</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToScalar</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const TYPE &amp;alpha, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const TYPE &amp;alpha, const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; x, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addScalar</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; x, const TYPE &amp;alpha, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; x, const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; y, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; x, const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; y, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; x, const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; y, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>divide</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; x, const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; y, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reciprocal</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; x, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>linearSum</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(const TYPE &amp;alpha, const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; x, const TYPE &amp;beta, const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; y, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(const TYPE &amp;alpha, const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; x, const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; y, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; x, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>min</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>max</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(const bool interior_only=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomValues</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(const TYPE &amp;width, const TYPE &amp;low, const bool interior_only=true)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L1Norm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>L2Norm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedL2Norm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; wgt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>RMSNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weightedRMSNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; wgt) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxNorm</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>dot</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; x, bool local_only=false) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>computeConstrProdPos</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compareToScalar</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; x, const TYPE &amp;alpha)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>testReciprocal</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>(const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; x)</arglist>
    </member>
    <member kind="function">
      <type>TYPE</type>
      <name>maxPointwiseDivide</name>
      <anchorfile>classSAMRAI_1_1solv_1_1SAMRAIVectorReal.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(const tbox::Pointer&lt; SAMRAIVectorReal&lt; DIM, TYPE &gt; &gt; denom) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::tbox</name>
    <filename>namespaceSAMRAI_1_1tbox.html</filename>
    <class kind="struct">SAMRAI::tbox::IEEE</class>
    <class kind="class">SAMRAI::tbox::List</class>
    <class kind="class">SAMRAI::tbox::ListNode</class>
    <class kind="class">SAMRAI::tbox::ListIterator</class>
    <class kind="class">SAMRAI::tbox::MathUtilities</class>
    <class kind="class">SAMRAI::tbox::ParallelBuffer</class>
    <class kind="struct">SAMRAI::tbox::PIO</class>
    <class kind="struct">SAMRAI::tbox::SAMRAIManager</class>
    <class kind="struct">SAMRAI::tbox::ShutdownRegistryItem</class>
    <class kind="struct">SAMRAI::tbox::ShutdownRegistry</class>
    <class kind="class">SAMRAI::tbox::Tracer</class>
    <class kind="struct">SAMRAI::tbox::Utilities</class>
    <class kind="class">SAMRAI::tbox::Database</class>
    <class kind="struct">SAMRAI::tbox::DatabaseBox_POD</class>
    <class kind="class">SAMRAI::tbox::DatabaseBox</class>
    <class kind="class">SAMRAI::tbox::Serializable</class>
    <class kind="class">SAMRAI::tbox::InputDatabase</class>
    <class kind="class">SAMRAI::tbox::InputManager</class>
    <class kind="class">SAMRAI::tbox::Parser</class>
    <class kind="class">SAMRAI::tbox::Arena</class>
    <class kind="class">SAMRAI::tbox::ArenaManager</class>
    <class kind="class">SAMRAI::tbox::Array</class>
    <class kind="class">SAMRAI::tbox::ConstPointer</class>
    <class kind="class">SAMRAI::tbox::ConstPointerBase</class>
    <class kind="class">SAMRAI::tbox::FixedArena</class>
    <class kind="struct">SAMRAI::tbox::MemoryUtilities</class>
    <class kind="class">SAMRAI::tbox::Pointer</class>
    <class kind="class">SAMRAI::tbox::PointerBase</class>
    <class kind="class">SAMRAI::tbox::ReferenceCounter</class>
    <class kind="class">SAMRAI::tbox::ScratchArena</class>
    <class kind="class">SAMRAI::tbox::StandardArena</class>
    <class kind="class">SAMRAI::tbox::AsyncCommGroup</class>
    <class kind="class">SAMRAI::tbox::AsyncCommStage</class>
    <class kind="class">SAMRAI::tbox::JobRelauncher</class>
    <class kind="struct">SAMRAI::tbox::MPI</class>
    <class kind="class">SAMRAI::tbox::RelaunchableJob</class>
    <class kind="class">SAMRAI::tbox::Schedule</class>
    <class kind="class">SAMRAI::tbox::Transaction</class>
    <class kind="class">SAMRAI::tbox::HDFDatabase</class>
    <class kind="class">SAMRAI::tbox::NullDatabase</class>
    <class kind="class">SAMRAI::tbox::RestartManager</class>
    <class kind="class">SAMRAI::tbox::AbstractStream</class>
    <class kind="class">SAMRAI::tbox::FileStream</class>
    <class kind="class">SAMRAI::tbox::MessageStream</class>
    <class kind="class">SAMRAI::tbox::XDRStream</class>
    <class kind="struct">SAMRAI::tbox::Clock</class>
    <class kind="class">SAMRAI::tbox::Statistic</class>
    <class kind="class">SAMRAI::tbox::Statistician</class>
    <class kind="class">SAMRAI::tbox::StatisticRestartDatabase</class>
    <class kind="class">SAMRAI::tbox::StatTransaction</class>
    <class kind="class">SAMRAI::tbox::Timer</class>
    <class kind="class">SAMRAI::tbox::TimerManager</class>
    <member kind="typedef">
      <type>List&lt; Pointer&lt; Transaction &gt; &gt;::Iterator</type>
      <name>ITERATOR</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ostream</type>
      <name>pout</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(&amp;pout_buffer)</arglist>
    </member>
    <member kind="function">
      <type>ostream</type>
      <name>perr</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(&amp;perr_buffer)</arglist>
    </member>
    <member kind="function">
      <type>ostream</type>
      <name>plog</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(&amp;plog_buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>badnew</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ParallelBuffer</type>
      <name>pout_buffer</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ParallelBuffer</type>
      <name>perr_buffer</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ParallelBuffer</type>
      <name>plog_buffer</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ostream</type>
      <name>pout</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ostream</type>
      <name>perr</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ostream</type>
      <name>plog</name>
      <anchorfile>namespaceSAMRAI_1_1tbox.html</anchorfile>
      <anchor>a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::IEEE</name>
    <filename>structSAMRAI_1_1tbox_1_1IEEE.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setupExceptionHandlers</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getSignalingFloatNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getSignalingNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getINT_MAX</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getINT_MIN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getFLT_MAX</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getFLT_MIN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getFLT_EPSILON</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getDBL_MAX</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getDBL_MIN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getDBL_EPSILON</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e11</anchor>
      <arglist>(float &amp;f)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e12</anchor>
      <arglist>(double &amp;d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeArrayToSignalingNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e13</anchor>
      <arglist>(Array&lt; float &gt; &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeArrayToSignalingNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e14</anchor>
      <arglist>(Array&lt; double &gt; &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeArrayToINT_MAX</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e15</anchor>
      <arglist>(Array&lt; int &gt; &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeArrayToINT_MIN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e16</anchor>
      <arglist>(Array&lt; int &gt; &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeArrayToFLT_MAX</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e17</anchor>
      <arglist>(Array&lt; float &gt; &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeArrayToFLT_MIN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e18</anchor>
      <arglist>(Array&lt; float &gt; &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeArrayToDBL_MAX</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e19</anchor>
      <arglist>(Array&lt; double &gt; &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeArrayToDBL_MIN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e20</anchor>
      <arglist>(Array&lt; double &gt; &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeArrayToSignalingNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e21</anchor>
      <arglist>(float *data, const int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeArrayToSignalingNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e22</anchor>
      <arglist>(double *data, const int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeArrayToINT_MAX</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e23</anchor>
      <arglist>(int *data, const int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeArrayToINT_MIN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e24</anchor>
      <arglist>(int *data, const int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeArrayToFLT_MAX</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e25</anchor>
      <arglist>(float *data, const int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeArrayToFLT_MIN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e26</anchor>
      <arglist>(float *data, const int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeArrayToDBL_MAX</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e27</anchor>
      <arglist>(double *data, const int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initializeArrayToDBL_MIN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e28</anchor>
      <arglist>(double *data, const int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e29</anchor>
      <arglist>(const float &amp;f)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNaN</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1IEEE.html</anchorfile>
      <anchor>e30</anchor>
      <arglist>(const double &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::List</name>
    <filename>classSAMRAI_1_1tbox_1_1List.html</filename>
    <templarg>TYPE</templarg>
    <member kind="typedef">
      <type>ListIterator&lt; TYPE &gt;</type>
      <name>Iterator</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>List</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>List</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const List&lt; TYPE &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>List&lt; TYPE &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const List&lt; TYPE &gt; &amp;list)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~List</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberItems</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItem</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const TYPE &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItemBefore</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ListIterator&lt; TYPE &gt; &amp;iter, const TYPE &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addItemAfter</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ListIterator&lt; TYPE &gt; &amp;iter, const TYPE &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendItem</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const TYPE &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyItems</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const List&lt; TYPE &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>catenateItems</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(List&lt; TYPE &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>catenateItemsAtFront</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(List&lt; TYPE &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearItems</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>getFirstItem</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>getLastItem</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFirstItem</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLastItem</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeItem</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(ListIterator&lt; TYPE &gt; &amp;iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>List&lt; TYPE &gt;::Iterator</type>
      <name>listStart</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>List&lt; TYPE &gt;::Iterator</type>
      <name>listEnd</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>freeCachedListItems</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ListIterator&lt; TYPE &gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1List.html</anchorfile>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::ListNode</name>
    <filename>classSAMRAI_1_1tbox_1_1ListNode.html</filename>
    <templarg>TYPE</templarg>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ListIterator&lt; TYPE &gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListNode.html</anchorfile>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>List&lt; TYPE &gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListNode.html</anchorfile>
      <anchor>n1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::ListIterator</name>
    <filename>classSAMRAI_1_1tbox_1_1ListIterator.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>ListIterator</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListIterator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListIterator</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListIterator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const List&lt; TYPE &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListIterator</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListIterator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const ListIterator&lt; TYPE &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; TYPE &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListIterator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const ListIterator&lt; TYPE &gt; &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ListIterator</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListIterator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListIterator.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListIterator.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListIterator.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator()</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListIterator.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListIterator.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const void *</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListIterator.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListIterator.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListIterator.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator--</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListIterator.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rewindIterator</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListIterator.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fastforwardIterator</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListIterator.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListIterator.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const ListIterator&lt; TYPE &gt; &amp;iterator) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListIterator.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const ListIterator&lt; TYPE &gt; &amp;iterator) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>List&lt; TYPE &gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ListIterator.html</anchorfile>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::MathUtilities</name>
    <filename>classSAMRAI_1_1tbox_1_1MathUtilities.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const float &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const double &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>Rand</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(bool low, bool width)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>Rand</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(char low, char width)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>Rand</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int low, int width)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>Rand</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(float low, float width)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>Rand</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(double low, double width)</arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>Rand</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(dcomplex low, dcomplex width)</arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>Min</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(dcomplex a, dcomplex b)</arglist>
    </member>
    <member kind="function">
      <type>dcomplex</type>
      <name>Max</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(dcomplex a, dcomplex b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>getZero</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>getOne</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>getSignalingNaN</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNaN</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(const TYPE &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>getMax</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>getMin</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>getEpsilon</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>getUndefined</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>Min</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>e8</anchor>
      <arglist>(TYPE a, TYPE b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>Max</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>e9</anchor>
      <arglist>(TYPE a, TYPE b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TYPE</type>
      <name>Rand</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MathUtilities.html</anchorfile>
      <anchor>e10</anchor>
      <arglist>(TYPE low, TYPE width)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::ParallelBuffer</name>
    <filename>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</filename>
    <member kind="function">
      <type></type>
      <name>ParallelBuffer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParallelBuffer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActive</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(bool active)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrefixString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputStream1</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ostream *stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutputStream2</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ostream *stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>outputString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>outputString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const string &amp;text, const int length)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>sync</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>overflow</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ParallelBuffer.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(int ch)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::PIO</name>
    <filename>structSAMRAI_1_1tbox_1_1PIO.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1PIO.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>finalize</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1PIO.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>logOnlyNodeZero</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1PIO.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(const string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>logAllNodes</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1PIO.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(const string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>suspendLogging</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1PIO.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resumeLogging</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1PIO.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::SAMRAIManager</name>
    <filename>structSAMRAI_1_1tbox_1_1SAMRAIManager.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>startup</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1SAMRAIManager.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>shutdown</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1SAMRAIManager.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getMaxNumberPatchDataEntries</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1SAMRAIManager.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setMaxNumberPatchDataEntries</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1SAMRAIManager.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(int maxnum)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::ShutdownRegistryItem</name>
    <filename>structSAMRAI_1_1tbox_1_1ShutdownRegistryItem.html</filename>
    <member kind="variable">
      <type>void(*</type>
      <name>callback</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1ShutdownRegistryItem.html</anchorfile>
      <anchor>o0</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="variable">
      <type>ShutdownRegistryItem *</type>
      <name>next</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1ShutdownRegistryItem.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::ShutdownRegistry</name>
    <filename>structSAMRAI_1_1tbox_1_1ShutdownRegistry.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerShutdownRoutine</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1ShutdownRegistry.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(void(*callback)(), unsigned char priority)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>callRegisteredShutdowns</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1ShutdownRegistry.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityArenaManager</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1ShutdownRegistry.html</anchorfile>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityReferenceCounter</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1ShutdownRegistry.html</anchorfile>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityList</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1ShutdownRegistry.html</anchorfile>
      <anchor>s2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityVariableDatabase</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1ShutdownRegistry.html</anchorfile>
      <anchor>s3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityInputManager</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1ShutdownRegistry.html</anchorfile>
      <anchor>s4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityRestartManager</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1ShutdownRegistry.html</anchorfile>
      <anchor>s5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityStatistician</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1ShutdownRegistry.html</anchorfile>
      <anchor>s6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityBoundaryLookupTable</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1ShutdownRegistry.html</anchorfile>
      <anchor>s7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityHierarchyDataOpsManager</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1ShutdownRegistry.html</anchorfile>
      <anchor>s8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned char</type>
      <name>priorityTimerManger</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1ShutdownRegistry.html</anchorfile>
      <anchor>s9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Tracer</name>
    <filename>classSAMRAI_1_1tbox_1_1Tracer.html</filename>
    <member kind="function">
      <type></type>
      <name>Tracer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Tracer.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Tracer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Tracer.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTraceStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Tracer.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(ostream *stream)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::Utilities</name>
    <filename>structSAMRAI_1_1tbox_1_1Utilities.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>imin</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const int a, const int b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>imax</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(const int a, const int b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>iabs</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(const int a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>fmin</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(const float a, const float b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>fmax</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>(const float a, const float b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>fabs</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>(const float a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>feq</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>(const float a, const float b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dmin</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>e7</anchor>
      <arglist>(const double a, const double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dmax</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>e8</anchor>
      <arglist>(const double a, const double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dabs</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>e9</anchor>
      <arglist>(const double a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>deq</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>e10</anchor>
      <arglist>(const double a, const double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>ceq</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>e11</anchor>
      <arglist>(const dcomplex a, const dcomplex b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>recursiveMkdir</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>e12</anchor>
      <arglist>(const string &amp;path, mode_t mode=(S_IRUSR|S_IWUSR|S_IXUSR), bool only_node_zero_creates=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>renameFile</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>e13</anchor>
      <arglist>(const char *old_filename, const char *new_filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>abort</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>e14</anchor>
      <arglist>(const string &amp;message, const string &amp;filename, const int line)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>printWarning</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Utilities.html</anchorfile>
      <anchor>e15</anchor>
      <arglist>(const string &amp;message, const string &amp;filename, const int line)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Database</name>
    <filename>classSAMRAI_1_1tbox_1_1Database.html</filename>
    <base>tbox::DescribedClass</base>
    <member kind="function">
      <type></type>
      <name>Database</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Database</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>keyExists</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Array&lt; string &gt;</type>
      <name>getAllKeys</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getArraySize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Pointer&lt; Database &gt;</type>
      <name>putDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Pointer&lt; Database &gt;</type>
      <name>getDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const string &amp;key, const bool &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const string &amp;key, const Array&lt; bool &gt; &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const string &amp;key, const bool *const data, const int nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getBoolWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const string &amp;key, const bool &amp;defaultvalue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Array&lt; bool &gt;</type>
      <name>getBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const string &amp;key, bool *data, const int nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const string &amp;key, const DatabaseBox &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const string &amp;key, const Array&lt; DatabaseBox &gt; &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const string &amp;key, const DatabaseBox *const data, const int nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DatabaseBox</type>
      <name>getDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DatabaseBox</type>
      <name>getDatabaseBoxWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const string &amp;key, const DatabaseBox &amp;defaultvalue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Array&lt; DatabaseBox &gt;</type>
      <name>getDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const string &amp;key, DatabaseBox *data, const int nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const string &amp;key, const char &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const string &amp;key, const Array&lt; char &gt; &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const string &amp;key, const char *const data, const int nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>getChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>getCharWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const string &amp;key, const char &amp;defaultvalue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Array&lt; char &gt;</type>
      <name>getCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(const string &amp;key, char *data, const int nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(const string &amp;key, const dcomplex &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(const string &amp;key, const Array&lt; dcomplex &gt; &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(const string &amp;key, const dcomplex *const data, const int nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual dcomplex</type>
      <name>getComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual dcomplex</type>
      <name>getComplexWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(const string &amp;key, const dcomplex &amp;defaultvalue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Array&lt; dcomplex &gt;</type>
      <name>getComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(const string &amp;key, dcomplex *data, const int nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(const string &amp;key, const double &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(const string &amp;key, const Array&lt; double &gt; &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(const string &amp;key, const double *const data, const int nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getDoubleWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(const string &amp;key, const double &amp;defaultvalue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Array&lt; double &gt;</type>
      <name>getDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>(const string &amp;key, double *data, const int nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>(const string &amp;key, const float &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>(const string &amp;key, const Array&lt; float &gt; &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>(const string &amp;key, const float *const data, const int nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getFloatWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a53</anchor>
      <arglist>(const string &amp;key, const float &amp;defaultvalue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Array&lt; float &gt;</type>
      <name>getFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a54</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a55</anchor>
      <arglist>(const string &amp;key, float *data, const int nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a56</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a57</anchor>
      <arglist>(const string &amp;key, const int &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a58</anchor>
      <arglist>(const string &amp;key, const Array&lt; int &gt; &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a59</anchor>
      <arglist>(const string &amp;key, const int *const data, const int nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a60</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getIntegerWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a61</anchor>
      <arglist>(const string &amp;key, const int &amp;defaultvalue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Array&lt; int &gt;</type>
      <name>getIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a62</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a63</anchor>
      <arglist>(const string &amp;key, int *data, const int nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a64</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a65</anchor>
      <arglist>(const string &amp;key, const string &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a66</anchor>
      <arglist>(const string &amp;key, const Array&lt; string &gt; &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a67</anchor>
      <arglist>(const string &amp;key, const string *const data, const int nelements)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual string</type>
      <name>getString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a68</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual string</type>
      <name>getStringWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a69</anchor>
      <arglist>(const string &amp;key, const string &amp;defaultvalue)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Array&lt; string &gt;</type>
      <name>getStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a70</anchor>
      <arglist>(const string &amp;key)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a71</anchor>
      <arglist>(const string &amp;key, string *data, const int nelements)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a72</anchor>
      <arglist>(const string &amp;key, bool &amp;scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a73</anchor>
      <arglist>(const string &amp;key, const bool scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a74</anchor>
      <arglist>(const string &amp;key, Array&lt; bool &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a75</anchor>
      <arglist>(const string &amp;key, const Array&lt; bool &gt; array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a76</anchor>
      <arglist>(const string &amp;key, char &amp;scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a77</anchor>
      <arglist>(const string &amp;key, const char scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a78</anchor>
      <arglist>(const string &amp;key, Array&lt; char &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a79</anchor>
      <arglist>(const string &amp;key, const Array&lt; char &gt; array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a80</anchor>
      <arglist>(const string &amp;key, dcomplex &amp;scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a81</anchor>
      <arglist>(const string &amp;key, const dcomplex scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a82</anchor>
      <arglist>(const string &amp;key, Array&lt; dcomplex &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a83</anchor>
      <arglist>(const string &amp;key, const Array&lt; dcomplex &gt; array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a84</anchor>
      <arglist>(const string &amp;key, float &amp;scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a85</anchor>
      <arglist>(const string &amp;key, const float scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a86</anchor>
      <arglist>(const string &amp;key, Array&lt; float &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a87</anchor>
      <arglist>(const string &amp;key, const Array&lt; float &gt; array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a88</anchor>
      <arglist>(const string &amp;key, double &amp;scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a89</anchor>
      <arglist>(const string &amp;key, const double scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a90</anchor>
      <arglist>(const string &amp;key, Array&lt; double &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a91</anchor>
      <arglist>(const string &amp;key, const Array&lt; double &gt; array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a92</anchor>
      <arglist>(const string &amp;key, int &amp;scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putScalar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a93</anchor>
      <arglist>(const string &amp;key, const int scalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a94</anchor>
      <arglist>(const string &amp;key, Array&lt; int &gt; &amp;array)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a95</anchor>
      <arglist>(const string &amp;key, const Array&lt; int &gt; array)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Database.html</anchorfile>
      <anchor>a96</anchor>
      <arglist>(ostream &amp;os=pout)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::DatabaseBox_POD</name>
    <filename>structSAMRAI_1_1tbox_1_1DatabaseBox__POD.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>d_dimension</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1DatabaseBox__POD.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_lo</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1DatabaseBox__POD.html</anchorfile>
      <anchor>o1</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_hi</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1DatabaseBox__POD.html</anchorfile>
      <anchor>o2</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::DatabaseBox</name>
    <filename>classSAMRAI_1_1tbox_1_1DatabaseBox.html</filename>
    <member kind="function">
      <type></type>
      <name>DatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int dimension, const int *lower, const int *upper)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const DatabaseBox &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>DatabaseBox &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const DatabaseBox &amp;box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDimension</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int dimension)</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>lower</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>upper</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lower</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>upper</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const DatabaseBox &amp;box) const </arglist>
    </member>
    <member kind="variable">
      <type>DatabaseBox_POD</type>
      <name>d_data</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1DatabaseBox.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Serializable</name>
    <filename>classSAMRAI_1_1tbox_1_1Serializable.html</filename>
    <base virtualness="virtual">tbox::DescribedClass</base>
    <member kind="function">
      <type></type>
      <name>Serializable</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Serializable.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Serializable</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Serializable.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Serializable.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(Pointer&lt; Database &gt; db)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::InputDatabase</name>
    <filename>classSAMRAI_1_1tbox_1_1InputDatabase.html</filename>
    <base>SAMRAI::tbox::Database</base>
    <member kind="function">
      <type></type>
      <name>InputDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InputDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>getName</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>keyExists</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; string &gt;</type>
      <name>getAllKeys</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getArraySize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Database &gt;</type>
      <name>putDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Database &gt;</type>
      <name>getDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const string &amp;key, const bool &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const string &amp;key, const Array&lt; bool &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const string &amp;key, const bool *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBoolWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const string &amp;key, const bool &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; bool &gt;</type>
      <name>getBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const string &amp;key, bool *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const string &amp;key, const DatabaseBox &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const string &amp;key, const Array&lt; DatabaseBox &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const string &amp;key, const DatabaseBox *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DatabaseBox</type>
      <name>getDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DatabaseBox</type>
      <name>getDatabaseBoxWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const string &amp;key, const DatabaseBox &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; DatabaseBox &gt;</type>
      <name>getDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const string &amp;key, DatabaseBox *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const string &amp;key, const char &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const string &amp;key, const Array&lt; char &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const string &amp;key, const char *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getCharWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const string &amp;key, const char &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; char &gt;</type>
      <name>getCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(const string &amp;key, char *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(const string &amp;key, const dcomplex &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(const string &amp;key, const Array&lt; dcomplex &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(const string &amp;key, const dcomplex *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dcomplex</type>
      <name>getComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dcomplex</type>
      <name>getComplexWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(const string &amp;key, const dcomplex &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; dcomplex &gt;</type>
      <name>getComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(const string &amp;key, dcomplex *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(const string &amp;key, const double &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(const string &amp;key, const Array&lt; double &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(const string &amp;key, const double *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDoubleWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(const string &amp;key, const double &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; double &gt;</type>
      <name>getDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(const string &amp;key, double *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>(const string &amp;key, const float &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>(const string &amp;key, const Array&lt; float &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>(const string &amp;key, const float *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a53</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getFloatWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a54</anchor>
      <arglist>(const string &amp;key, const float &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; float &gt;</type>
      <name>getFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a55</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a56</anchor>
      <arglist>(const string &amp;key, float *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a57</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a58</anchor>
      <arglist>(const string &amp;key, const int &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a59</anchor>
      <arglist>(const string &amp;key, const Array&lt; int &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a60</anchor>
      <arglist>(const string &amp;key, const int *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a61</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getIntegerWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a62</anchor>
      <arglist>(const string &amp;key, const int &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; int &gt;</type>
      <name>getIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a63</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a64</anchor>
      <arglist>(const string &amp;key, int *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a65</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a66</anchor>
      <arglist>(const string &amp;key, const string &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a67</anchor>
      <arglist>(const string &amp;key, const Array&lt; string &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a68</anchor>
      <arglist>(const string &amp;key, const string *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>getString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a69</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>getStringWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a70</anchor>
      <arglist>(const string &amp;key, const string &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; string &gt;</type>
      <name>getStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a71</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a72</anchor>
      <arglist>(const string &amp;key, string *data, const int nelements)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>keyAccessed</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a73</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a74</anchor>
      <arglist>(ostream &amp;os=pout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printUnusedKeys</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a75</anchor>
      <arglist>(ostream &amp;os=pout) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printDefaultKeys</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputDatabase.html</anchorfile>
      <anchor>a76</anchor>
      <arglist>(ostream &amp;os=pout) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::InputManager</name>
    <filename>classSAMRAI_1_1tbox_1_1InputManager.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; InputDatabase &gt;</type>
      <name>parseInputFile</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputManager.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parseInputFile</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputManager.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const string &amp;filename, Pointer&lt; InputDatabase &gt; db)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InputManager *</type>
      <name>getManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputManager.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputManager.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(InputManager *manager)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>freeManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputManager.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>inputDatabaseExists</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputManager.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pointer&lt; Database &gt;</type>
      <name>getInputDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputManager.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InputManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputManager.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~InputManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1InputManager.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Parser</name>
    <filename>classSAMRAI_1_1tbox_1_1Parser.html</filename>
    <member kind="function">
      <type></type>
      <name>Parser</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Parser</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>parse</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const string &amp;filename, FILE *fstream, Pointer&lt; Database &gt; database)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberErrors</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberWarnings</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; Database &gt; &amp;</type>
      <name>getScope</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enterScope</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leaveScope</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; Database &gt;</type>
      <name>getDatabaseWithKey</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pushIncludeFile</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popIncludeFile</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>error</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>warning</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLine</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const string &amp;line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceLine</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int nline=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advanceCursor</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const string &amp;token)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>yyinput</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(char *buffer, const int max_size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Parser *</type>
      <name>getParser</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Parser.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Arena</name>
    <filename>classSAMRAI_1_1tbox_1_1Arena.html</filename>
    <base>tbox::DescribedClass</base>
    <member kind="function">
      <type></type>
      <name>Arena</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Arena.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Arena</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Arena.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>alloc</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Arena.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const size_t bytes)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>free</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Arena.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void *p)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>align</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Arena.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const size_t bytes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::ArenaManager</name>
    <filename>classSAMRAI_1_1tbox_1_1ArenaManager.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Arena &gt;</type>
      <name>getFixedAllocator</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ArenaManager.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const size_t bytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Arena &gt;</type>
      <name>getScratchAllocator</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ArenaManager.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Arena &gt;</type>
      <name>getStandardAllocator</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ArenaManager.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFixedAllocator</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ArenaManager.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const Pointer&lt; FixedArena &gt; &amp;arena)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScratchAllocator</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ArenaManager.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const Pointer&lt; Arena &gt; &amp;arena)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStandardAllocator</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ArenaManager.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const Pointer&lt; Arena &gt; &amp;arena)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArenaManager *</type>
      <name>getManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ArenaManager.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>freeManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ArenaManager.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ArenaManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ArenaManager.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ArenaManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ArenaManager.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerSingletonSubclassInstance</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ArenaManager.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(ArenaManager *subclass_instance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Array</name>
    <filename>classSAMRAI_1_1tbox_1_1Array.html</filename>
    <templarg>TYPE</templarg>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int n, const bool standard_type=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int n, const Pointer&lt; Arena &gt; &amp;pool, const bool standard_type=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const Array&lt; TYPE &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Array</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; TYPE &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const Array&lt; TYPE &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator[]</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNull</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNull</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const int i=0)</arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const int i=0) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Array.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const int n, const Pointer&lt; Arena &gt; &amp;pool)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::ConstPointer</name>
    <filename>classSAMRAI_1_1tbox_1_1ConstPointer.html</filename>
    <templarg>TYPE</templarg>
    <base>SAMRAI::tbox::ConstPointerBase</base>
    <member kind="function">
      <type></type>
      <name>ConstPointer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointer.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstPointer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointer.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const TYPE *ptr, const bool managed=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstPointer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointer.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const TYPE *ptr, const Pointer&lt; Arena &gt; &amp;pool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstPointer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointer.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const ConstPointer&lt; TYPE &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstPointer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointer.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const ConstPointerBase &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstPointer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointer.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstPointer&lt; TYPE &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointer.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const ConstPointer&lt; TYPE &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>ConstPointer&lt; TYPE &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointer.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const TYPE *ptr)</arglist>
    </member>
    <member kind="function">
      <type>ConstPointer&lt; TYPE &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointer.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const ConstPointerBase &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointer.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const ConstPointer&lt; TYPE &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointer.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const ConstPointer&lt; TYPE &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointer.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TYPE &amp;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointer.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const TYPE *</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointer.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointer.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNull</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointer.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointer.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointer.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNull</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointer.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReferenceCounter *</type>
      <name>getReferenceCounter</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointer.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::ConstPointerBase</name>
    <filename>classSAMRAI_1_1tbox_1_1ConstPointerBase.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstPointerBase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointerBase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConstPointerBase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointerBase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ReferenceCounter *</type>
      <name>getSubclassReferenceCounter</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointerBase.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const DescribedClass *</type>
      <name>getSubclassPointer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ConstPointerBase.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::FixedArena</name>
    <filename>classSAMRAI_1_1tbox_1_1FixedArena.html</filename>
    <base>SAMRAI::tbox::Arena</base>
    <member kind="function">
      <type></type>
      <name>FixedArena</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1FixedArena.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const size_t bytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FixedArena</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1FixedArena.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>alloc</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1FixedArena.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const size_t bytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>free</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1FixedArena.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Arena &gt;</type>
      <name>allocateArena</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1FixedArena.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const size_t bytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1FixedArena.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::MemoryUtilities</name>
    <filename>structSAMRAI_1_1tbox_1_1MemoryUtilities.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>printMemoryInfo</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MemoryUtilities.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>recordMemoryInfo</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MemoryUtilities.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(double time=0.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>printMaxMemory</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MemoryUtilities.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(ostream &amp;os)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Pointer</name>
    <filename>classSAMRAI_1_1tbox_1_1Pointer.html</filename>
    <templarg>TYPE</templarg>
    <base>SAMRAI::tbox::PointerBase</base>
    <member kind="function">
      <type></type>
      <name>Pointer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Pointer.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pointer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Pointer.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(TYPE *ptr, const bool managed=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pointer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Pointer.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(TYPE *ptr, const Pointer&lt; Arena &gt; &amp;pool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pointer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Pointer.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const Pointer&lt; TYPE &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pointer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Pointer.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const PointerBase &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Pointer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Pointer.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; TYPE &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Pointer.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const Pointer&lt; TYPE &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; TYPE &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Pointer.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(TYPE *ptr)</arglist>
    </member>
    <member kind="function">
      <type>Pointer&lt; TYPE &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Pointer.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const PointerBase &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Pointer.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const Pointer&lt; TYPE &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Pointer.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const Pointer&lt; TYPE &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>operator-&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Pointer.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE &amp;</type>
      <name>operator *</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Pointer.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator TYPE *</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Pointer.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TYPE *</type>
      <name>getPointer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Pointer.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNull</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Pointer.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Pointer.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Pointer.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNull</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Pointer.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReferenceCounter *</type>
      <name>getReferenceCounter</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Pointer.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::PointerBase</name>
    <filename>classSAMRAI_1_1tbox_1_1PointerBase.html</filename>
    <base>SAMRAI::tbox::ConstPointerBase</base>
    <member kind="function">
      <type></type>
      <name>PointerBase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1PointerBase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PointerBase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1PointerBase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ReferenceCounter *</type>
      <name>getSubclassReferenceCounter</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1PointerBase.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const DescribedClass *</type>
      <name>getSubclassPointer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1PointerBase.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::ReferenceCounter</name>
    <filename>classSAMRAI_1_1tbox_1_1ReferenceCounter.html</filename>
    <member kind="function">
      <type></type>
      <name>ReferenceCounter</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ReferenceCounter.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceCounter</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ReferenceCounter.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(Arena *newArena, ReferenceCounter *arenaCounter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReferenceCounter</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ReferenceCounter.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Arena *</type>
      <name>getArena</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ReferenceCounter.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteReference</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ReferenceCounter.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addReference</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ReferenceCounter.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ReferenceCounter.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(size_t bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ReferenceCounter.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(void *what)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>freeCachedCopies</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ReferenceCounter.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::ScratchArena</name>
    <filename>classSAMRAI_1_1tbox_1_1ScratchArena.html</filename>
    <base>SAMRAI::tbox::Arena</base>
    <member kind="function">
      <type></type>
      <name>ScratchArena</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ScratchArena.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScratchArena</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ScratchArena.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>alloc</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ScratchArena.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const size_t bytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>free</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1ScratchArena.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void *p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::StandardArena</name>
    <filename>classSAMRAI_1_1tbox_1_1StandardArena.html</filename>
    <base>SAMRAI::tbox::Arena</base>
    <member kind="function">
      <type></type>
      <name>StandardArena</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StandardArena.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StandardArena</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StandardArena.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>alloc</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StandardArena.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const size_t bytes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>free</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StandardArena.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(void *p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::AsyncCommGroup</name>
    <filename>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</filename>
    <member kind="function">
      <type></type>
      <name>AsyncCommGroup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int nchild)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AsyncCommGroup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGroupAndRootIndex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const Array&lt; int &gt; &amp;group, const int root_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGroupAndRootRank</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const Array&lt; int &gt; &amp;group, const int root_rank)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMPITag</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const int mpi_tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMPICommunicator</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(MPI::comm &amp;mpi_communicator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseBlockingSendToParent</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const bool flag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseBlockingSendToChildren</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beginBcast</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int *buffer, int size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkBcast</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beginGather</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int *buffer, int size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkGather</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beginSumReduce</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(int *buffer, int size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkSumReduce</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkOperation</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>waitOperation</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDone</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfChildren</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>logCurrentState</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommGroup.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(ostream &amp;co) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::AsyncCommStage</name>
    <filename>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</filename>
    <member kind="function">
      <type></type>
      <name>AsyncCommStage</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AsyncCommStage</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>AsyncCommGroup *</type>
      <name>allocateCommGroup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(int nchild, RelaunchableJob *handle=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RelaunchableJob *</type>
      <name>advanceAny</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>advanceSome</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(Array&lt; RelaunchableJob * &gt; &amp;completed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDone</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>numberOfOutstandingGroups</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>numberOfOutstandingRequests</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>StagedGroup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AsyncCommStage.html</anchorfile>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::JobRelauncher</name>
    <filename>classSAMRAI_1_1tbox_1_1JobRelauncher.html</filename>
    <member kind="function">
      <type></type>
      <name>JobRelauncher</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1JobRelauncher.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>runAlgorithm</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1JobRelauncher.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(RelaunchableJob *initial_job)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlgorithmAdvanceMode</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1JobRelauncher.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const string &amp;algo_advance_mode)</arglist>
    </member>
    <member kind="function">
      <type>AsyncCommStage &amp;</type>
      <name>getCommStage</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1JobRelauncher.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>List&lt; RelaunchableJob * &gt; &amp;</type>
      <name>getRelaunchQueue</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1JobRelauncher.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::MPI</name>
    <filename>structSAMRAI_1_1tbox_1_1MPI.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>comm</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>group</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>request</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>status</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setCallAbortInSerialInsteadOfExit</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(bool flag=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>abort</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(int *argc, char **argv[])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>finalize</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setCommunicator</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e5</anchor>
      <arglist>(MPI::comm communicator)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MPI::comm</type>
      <name>getCommunicator</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getRank</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNodes</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>updateOutgoingStatistics</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e9</anchor>
      <arglist>(const int messages, const int bytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>updateIncomingStatistics</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e10</anchor>
      <arglist>(const int messages, const int bytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getOutgoingMessages</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getOutgoingBytes</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getIncomingMessages</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getIncomingBytes</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getTreeDepth</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>barrier</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>sumReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e17</anchor>
      <arglist>(const double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sumReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e18</anchor>
      <arglist>(double *x, const int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>sumReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e19</anchor>
      <arglist>(const float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sumReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e20</anchor>
      <arglist>(float *x, const int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static dcomplex</type>
      <name>sumReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e21</anchor>
      <arglist>(const dcomplex x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sumReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e22</anchor>
      <arglist>(dcomplex *x, const int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sumReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e23</anchor>
      <arglist>(const int x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sumReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e24</anchor>
      <arglist>(int *x, const int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>minReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e25</anchor>
      <arglist>(const double x, int *rank_of_min=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>minReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e26</anchor>
      <arglist>(double *x, const int n=1, int *rank_of_min=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>minReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e27</anchor>
      <arglist>(const float x, int *rank_of_min=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>minReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e28</anchor>
      <arglist>(float *x, const int n=1, int *rank_of_min=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>minReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e29</anchor>
      <arglist>(const int x, int *rank_of_min=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>minReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e30</anchor>
      <arglist>(int *x, const int n=1, int *rank_of_min=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>maxReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e31</anchor>
      <arglist>(const double x, int *rank_of_max=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>maxReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e32</anchor>
      <arglist>(double *x, const int n=1, int *rank_of_max=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>maxReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e33</anchor>
      <arglist>(const float x, int *rank_of_max=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>maxReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e34</anchor>
      <arglist>(float *x, const int n=1, int *rank_of_max=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>maxReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e35</anchor>
      <arglist>(const int x, int *rank_of_max=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>maxReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e36</anchor>
      <arglist>(int *x, const int n=1, int *rank_of_max=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>allToOneSumReduction</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e37</anchor>
      <arglist>(int *x, const int n, const int root=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>bcast</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e38</anchor>
      <arglist>(const int x, const int root)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bcast</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e39</anchor>
      <arglist>(int *x, int &amp;length, const int root)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bcast</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e40</anchor>
      <arglist>(char *x, int &amp;length, const int root)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>send</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e41</anchor>
      <arglist>(const int *buf, const int length, const int receiving_proc_number, const bool send_length=true, int tag=-1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sendBytes</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e42</anchor>
      <arglist>(const void *buf, const int number_bytes, const int receiving_proc_number)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>recvBytes</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e43</anchor>
      <arglist>(void *buf, int number_bytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>recv</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e44</anchor>
      <arglist>(int *buf, int &amp;length, const int sending_proc_number, const bool get_length=true, int tag=-1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>allGather</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e45</anchor>
      <arglist>(const int *x_in, int size_in, int *x_out, int size_out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>allGather</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e46</anchor>
      <arglist>(const double *x_in, int size_in, double *x_out, int size_out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>allGather</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e47</anchor>
      <arglist>(int x_in, int *x_out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>allGather</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>e48</anchor>
      <arglist>(double x_in, double *x_out)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static comm</type>
      <name>commWorld</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>s0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static comm</type>
      <name>commNull</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1MPI.html</anchorfile>
      <anchor>s1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::RelaunchableJob</name>
    <filename>classSAMRAI_1_1tbox_1_1RelaunchableJob.html</filename>
    <member kind="enumeration">
      <name>JobState</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMMUNICATION_WAIT</name>
      <anchor>w3w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONCOMMUNICATION_WAIT</name>
      <anchor>w3w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JOB_IS_COMPLETED</name>
      <anchor>w3w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelaunchableJob</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RelaunchableJob.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RelaunchableJob</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RelaunchableJob.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>continueJob</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RelaunchableJob.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual JobState</type>
      <name>getJobState</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RelaunchableJob.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AsyncCommGroup *</type>
      <name>getCommunicationGroup</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RelaunchableJob.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Schedule</name>
    <filename>classSAMRAI_1_1tbox_1_1Schedule.html</filename>
    <base>tbox::DescribedClass</base>
    <member kind="function">
      <type></type>
      <name>Schedule</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Schedule</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTransaction</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const Pointer&lt; Transaction &gt; &amp;transaction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendTransaction</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const Pointer&lt; Transaction &gt; &amp;transaction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>communicate</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginCommunication</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalizeCommunication</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Schedule.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
    <class kind="struct">SAMRAI::tbox::Schedule::ScheduleMessageStream</class>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::Schedule::ScheduleMessageStream</name>
    <filename>structSAMRAI_1_1tbox_1_1Schedule_1_1ScheduleMessageStream.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>d_bytes_in_stream</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Schedule_1_1ScheduleMessageStream.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>d_must_communicate_byte_size</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Schedule_1_1ScheduleMessageStream.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>d_stream_in_use</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Schedule_1_1ScheduleMessageStream.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Pointer&lt; MessageStream &gt;</type>
      <name>d_stream</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Schedule_1_1ScheduleMessageStream.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Transaction</name>
    <filename>classSAMRAI_1_1tbox_1_1Transaction.html</filename>
    <base>tbox::DescribedClass</base>
    <member kind="function">
      <type></type>
      <name>Transaction</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Transaction</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>canEstimateIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>computeIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>computeOutgoingMessageSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getSourceProcessor</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getDestinationProcessor</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(AbstractStream &amp;stream)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(AbstractStream &amp;stream)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>copyLocalData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Transaction.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ostream &amp;stream) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::HDFDatabase</name>
    <filename>classSAMRAI_1_1tbox_1_1HDFDatabase.html</filename>
    <base>SAMRAI::tbox::Database</base>
    <member kind="function">
      <type></type>
      <name>HDFDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HDFDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>keyExists</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; string &gt;</type>
      <name>getAllKeys</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getArraySize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Database &gt;</type>
      <name>putDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Database &gt;</type>
      <name>getDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const string &amp;key, const bool &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const string &amp;key, const Array&lt; bool &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const string &amp;key, const bool *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBoolWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const string &amp;key, const bool &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; bool &gt;</type>
      <name>getBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const string &amp;key, bool *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const string &amp;key, const DatabaseBox &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const string &amp;key, const Array&lt; DatabaseBox &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const string &amp;key, const DatabaseBox *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DatabaseBox</type>
      <name>getDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DatabaseBox</type>
      <name>getDatabaseBoxWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const string &amp;key, const DatabaseBox &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; DatabaseBox &gt;</type>
      <name>getDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const string &amp;key, DatabaseBox *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const string &amp;key, const char &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const string &amp;key, const Array&lt; char &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const string &amp;key, const char *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getCharWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const string &amp;key, const char &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; char &gt;</type>
      <name>getCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(const string &amp;key, char *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(const string &amp;key, const dcomplex &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(const string &amp;key, const Array&lt; dcomplex &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(const string &amp;key, const dcomplex *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dcomplex</type>
      <name>getComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dcomplex</type>
      <name>getComplexWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(const string &amp;key, const dcomplex &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; dcomplex &gt;</type>
      <name>getComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(const string &amp;key, dcomplex *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(const string &amp;key, const double &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(const string &amp;key, const Array&lt; double &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(const string &amp;key, const double *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDoubleWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(const string &amp;key, const double &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; double &gt;</type>
      <name>getDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>(const string &amp;key, double *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>(const string &amp;key, const float &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>(const string &amp;key, const Array&lt; float &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>(const string &amp;key, const float *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getFloatWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a53</anchor>
      <arglist>(const string &amp;key, const float &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; float &gt;</type>
      <name>getFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a54</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a55</anchor>
      <arglist>(const string &amp;key, float *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a56</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a57</anchor>
      <arglist>(const string &amp;key, const int &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a58</anchor>
      <arglist>(const string &amp;key, const Array&lt; int &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a59</anchor>
      <arglist>(const string &amp;key, const int *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a60</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getIntegerWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a61</anchor>
      <arglist>(const string &amp;key, const int &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; int &gt;</type>
      <name>getIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a62</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a63</anchor>
      <arglist>(const string &amp;key, int *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a64</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a65</anchor>
      <arglist>(const string &amp;key, const string &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a66</anchor>
      <arglist>(const string &amp;key, const Array&lt; string &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a67</anchor>
      <arglist>(const string &amp;key, const string *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>getString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a68</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>getStringWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a69</anchor>
      <arglist>(const string &amp;key, const string &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; string &gt;</type>
      <name>getStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a70</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a71</anchor>
      <arglist>(const string &amp;key, string *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a72</anchor>
      <arglist>(ostream &amp;os=pout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>mount</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a73</anchor>
      <arglist>(const string &amp;file_name, const string &amp;flags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unmount</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>hid_t</type>
      <name>getGroupId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1HDFDatabase.html</anchorfile>
      <anchor>a75</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::NullDatabase</name>
    <filename>classSAMRAI_1_1tbox_1_1NullDatabase.html</filename>
    <base>SAMRAI::tbox::Database</base>
    <member kind="function">
      <type></type>
      <name>NullDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NullDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>keyExists</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; string &gt;</type>
      <name>getAllKeys</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getArraySize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Database &gt;</type>
      <name>putDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Database &gt;</type>
      <name>getDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const string &amp;key, const bool &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const string &amp;key, const Array&lt; bool &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const string &amp;key, const bool *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBoolWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const string &amp;key, const bool &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; bool &gt;</type>
      <name>getBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBoolArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const string &amp;key, bool *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const string &amp;key, const DatabaseBox &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const string &amp;key, const Array&lt; DatabaseBox &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(const string &amp;key, const DatabaseBox *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DatabaseBox</type>
      <name>getDatabaseBox</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DatabaseBox</type>
      <name>getDatabaseBoxWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(const string &amp;key, const DatabaseBox &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; DatabaseBox &gt;</type>
      <name>getDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getDatabaseBoxArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(const string &amp;key, DatabaseBox *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(const string &amp;key, const char &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(const string &amp;key, const Array&lt; char &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(const string &amp;key, const char *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>getCharWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(const string &amp;key, const char &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; char &gt;</type>
      <name>getCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getCharArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(const string &amp;key, char *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(const string &amp;key, const dcomplex &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(const string &amp;key, const Array&lt; dcomplex &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(const string &amp;key, const dcomplex *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dcomplex</type>
      <name>getComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dcomplex</type>
      <name>getComplexWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(const string &amp;key, const dcomplex &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; dcomplex &gt;</type>
      <name>getComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getComplexArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(const string &amp;key, dcomplex *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(const string &amp;key, const double &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(const string &amp;key, const Array&lt; double &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(const string &amp;key, const double *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDoubleWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(const string &amp;key, const double &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; double &gt;</type>
      <name>getDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getDoubleArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a47</anchor>
      <arglist>(const string &amp;key, double *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a48</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a49</anchor>
      <arglist>(const string &amp;key, const float &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a50</anchor>
      <arglist>(const string &amp;key, const Array&lt; float &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a51</anchor>
      <arglist>(const string &amp;key, const float *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a52</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>getFloatWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a53</anchor>
      <arglist>(const string &amp;key, const float &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; float &gt;</type>
      <name>getFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a54</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFloatArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a55</anchor>
      <arglist>(const string &amp;key, float *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a56</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a57</anchor>
      <arglist>(const string &amp;key, const int &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a58</anchor>
      <arglist>(const string &amp;key, const Array&lt; int &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a59</anchor>
      <arglist>(const string &amp;key, const int *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getInteger</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a60</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getIntegerWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a61</anchor>
      <arglist>(const string &amp;key, const int &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; int &gt;</type>
      <name>getIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a62</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getIntegerArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a63</anchor>
      <arglist>(const string &amp;key, int *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a64</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a65</anchor>
      <arglist>(const string &amp;key, const string &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a66</anchor>
      <arglist>(const string &amp;key, const Array&lt; string &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a67</anchor>
      <arglist>(const string &amp;key, const string *const data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>getString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a68</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual string</type>
      <name>getStringWithDefault</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a69</anchor>
      <arglist>(const string &amp;key, const string &amp;defaultvalue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Array&lt; string &gt;</type>
      <name>getStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a70</anchor>
      <arglist>(const string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getStringArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a71</anchor>
      <arglist>(const string &amp;key, string *data, const int nelements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1NullDatabase.html</anchorfile>
      <anchor>a72</anchor>
      <arglist>(ostream &amp;os=pout)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::RestartManager</name>
    <filename>classSAMRAI_1_1tbox_1_1RestartManager.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFromRestart</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>openRestartFile</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const string &amp;root_dirname, const int restore_num, const int num_nodes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>closeRestartFile</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Database &gt;</type>
      <name>getRootDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerRestartItem</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const string &amp;name, Serializable *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unregisterRestartItem</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearRestartItems</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeRestartFile</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const string &amp;root_dirname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeRestartFile</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const string &amp;root_dirname, const int restore_num)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RestartManager *</type>
      <name>getManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>freeManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RestartManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~RestartManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerSingletonSubclassInstance</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1RestartManager.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(RestartManager *subclass_instance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::AbstractStream</name>
    <filename>classSAMRAI_1_1tbox_1_1AbstractStream.html</filename>
    <base>tbox::DescribedClass</base>
    <member kind="function">
      <type></type>
      <name>AbstractStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z1_0</anchor>
      <arglist>(const bool &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z1_1</anchor>
      <arglist>(bool &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z1_2</anchor>
      <arglist>(const bool *data, const int n=1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z1_3</anchor>
      <arglist>(bool *data, const int n=1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z2_0</anchor>
      <arglist>(const char &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z2_1</anchor>
      <arglist>(char &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z2_2</anchor>
      <arglist>(const char *data, const int n=1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z2_3</anchor>
      <arglist>(char *data, const int n=1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z3_0</anchor>
      <arglist>(const dcomplex &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z3_1</anchor>
      <arglist>(dcomplex &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z3_2</anchor>
      <arglist>(const dcomplex *data, const int n=1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z3_3</anchor>
      <arglist>(dcomplex *data, const int n=1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z4_0</anchor>
      <arglist>(const double &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z4_1</anchor>
      <arglist>(double &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z4_2</anchor>
      <arglist>(const double *data, const int n=1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z4_3</anchor>
      <arglist>(double *data, const int n=1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z5_0</anchor>
      <arglist>(const float &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z5_1</anchor>
      <arglist>(float &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z5_2</anchor>
      <arglist>(const float *data, const int n=1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z5_3</anchor>
      <arglist>(float *data, const int n=1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z6_0</anchor>
      <arglist>(const int &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z6_1</anchor>
      <arglist>(int &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z6_2</anchor>
      <arglist>(const int *data, const int n=1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z6_3</anchor>
      <arglist>(int *data, const int n=1)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sizeofBool</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z0_0</anchor>
      <arglist>(const int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sizeofChar</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z0_1</anchor>
      <arglist>(const int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sizeofDoubleComplex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z0_2</anchor>
      <arglist>(const int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sizeofDouble</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z0_3</anchor>
      <arglist>(const int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sizeofFloat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z0_4</anchor>
      <arglist>(const int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>sizeofInt</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1AbstractStream.html</anchorfile>
      <anchor>z0_5</anchor>
      <arglist>(const int n=1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::FileStream</name>
    <filename>classSAMRAI_1_1tbox_1_1FileStream.html</filename>
    <base>SAMRAI::tbox::XDRStream</base>
    <member kind="enumeration">
      <name>StreamMode</name>
      <anchor>w3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Read</name>
      <anchor>w3w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Write</name>
      <anchor>w3w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Append</name>
      <anchor>w3w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1FileStream.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const char *filename, const StreamMode mode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1FileStream.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(FILE *file, const StreamMode mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1FileStream.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeFileOnExit</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1FileStream.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const bool flag)</arglist>
    </member>
    <member kind="function">
      <type>FILE *</type>
      <name>getFILE</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1FileStream.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::MessageStream</name>
    <filename>classSAMRAI_1_1tbox_1_1MessageStream.html</filename>
    <base>SAMRAI::tbox::AbstractStream</base>
    <member kind="enumeration">
      <name>StreamMode</name>
      <anchor>w2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Read</name>
      <anchor>w2w0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Write</name>
      <anchor>w2w1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const int bytes, const StreamMode mode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const int bytes, const StreamMode mode, const bool use_xdr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MessageStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getBufferStart</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCurrentIndex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentIndex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIndex</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z7_0</anchor>
      <arglist>(const bool &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z7_1</anchor>
      <arglist>(bool &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z7_2</anchor>
      <arglist>(const bool *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z7_3</anchor>
      <arglist>(bool *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z8_0</anchor>
      <arglist>(const char &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z8_1</anchor>
      <arglist>(char &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z8_2</anchor>
      <arglist>(const char *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z8_3</anchor>
      <arglist>(char *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z9_0</anchor>
      <arglist>(const dcomplex &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z9_1</anchor>
      <arglist>(dcomplex &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z9_2</anchor>
      <arglist>(const dcomplex *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z9_3</anchor>
      <arglist>(dcomplex *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z10_0</anchor>
      <arglist>(const double &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z10_1</anchor>
      <arglist>(double &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z10_2</anchor>
      <arglist>(const double *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z10_3</anchor>
      <arglist>(double *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z11_0</anchor>
      <arglist>(const float &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z11_1</anchor>
      <arglist>(float &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z11_2</anchor>
      <arglist>(const float *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z11_3</anchor>
      <arglist>(float *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z12_0</anchor>
      <arglist>(const int &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z12_1</anchor>
      <arglist>(int &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z12_2</anchor>
      <arglist>(const int *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>z12_3</anchor>
      <arglist>(int *data, const int n=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>useXDR</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1MessageStream.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const bool flag)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::XDRStream</name>
    <filename>classSAMRAI_1_1tbox_1_1XDRStream.html</filename>
    <base>SAMRAI::tbox::AbstractStream</base>
    <member kind="function">
      <type></type>
      <name>XDRStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXDRStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(XDR *xdrs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~XDRStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z13_0</anchor>
      <arglist>(const bool &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z13_1</anchor>
      <arglist>(bool &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z13_2</anchor>
      <arglist>(const bool *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z13_3</anchor>
      <arglist>(bool *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z14_0</anchor>
      <arglist>(const char &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z14_1</anchor>
      <arglist>(char &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z14_2</anchor>
      <arglist>(const char *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z14_3</anchor>
      <arglist>(char *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>writeString</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z14_4</anchor>
      <arglist>(const char *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z15_0</anchor>
      <arglist>(const dcomplex &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z15_1</anchor>
      <arglist>(dcomplex &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z15_2</anchor>
      <arglist>(const dcomplex *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z15_3</anchor>
      <arglist>(dcomplex *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z16_0</anchor>
      <arglist>(const double &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z16_1</anchor>
      <arglist>(double &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z16_2</anchor>
      <arglist>(const double *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z16_3</anchor>
      <arglist>(double *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z17_0</anchor>
      <arglist>(const float &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z17_1</anchor>
      <arglist>(float &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z17_2</anchor>
      <arglist>(const float *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z17_3</anchor>
      <arglist>(float *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z18_0</anchor>
      <arglist>(const int &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractStream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z18_1</anchor>
      <arglist>(int &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z18_2</anchor>
      <arglist>(const int *data, const int n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1XDRStream.html</anchorfile>
      <anchor>z18_3</anchor>
      <arglist>(int *data, const int n=1)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::Clock</name>
    <filename>structSAMRAI_1_1tbox_1_1Clock.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Clock.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(clock_t &amp;clock)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initialize</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Clock.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>(double &amp;clock)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>timestamp</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Clock.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(clock_t &amp;user, clock_t &amp;sys, clock_t &amp;wall)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>timestamp</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Clock.html</anchorfile>
      <anchor>e3</anchor>
      <arglist>(clock_t &amp;user, clock_t &amp;sys, double &amp;wall)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>getClockCycle</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Clock.html</anchorfile>
      <anchor>e4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Statistic</name>
    <filename>classSAMRAI_1_1tbox_1_1Statistic.html</filename>
    <base>tbox::DescribedClass</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Statistic</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getName</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>getType</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInstanceId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStatSequenceLength</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordProcStat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(double value, int seq_num=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recordPatchStat</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(int patch_num, double value, int seq_num)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canEstimateDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDataStreamSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(AbstractStream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(AbstractStream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(ostream &amp;stream, int precision=12) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(Pointer&lt; Database &gt; db)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(Pointer&lt; Database &gt; db)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Statistic</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(const string &amp;name, const string &amp;stat_type, int instance_id)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Array&lt; Statistic::ProcStat &gt; &amp;</type>
      <name>getProcStatSeqArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Array&lt; Statistic::PatchStat &gt; &amp;</type>
      <name>getPatchStatSeqArray</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Statistician</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistic.html</anchorfile>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">SAMRAI::tbox::Statistic::PatchStat</class>
    <class kind="struct">SAMRAI::tbox::Statistic::PatchStatRecord</class>
    <class kind="struct">SAMRAI::tbox::Statistic::ProcStat</class>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::Statistic::PatchStat</name>
    <filename>structSAMRAI_1_1tbox_1_1Statistic_1_1PatchStat.html</filename>
    <member kind="variable">
      <type>List&lt; Statistic::PatchStatRecord &gt;</type>
      <name>patch_records</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Statistic_1_1PatchStat.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::Statistic::PatchStatRecord</name>
    <filename>structSAMRAI_1_1tbox_1_1Statistic_1_1PatchStatRecord.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>patch_id</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Statistic_1_1PatchStatRecord.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>value</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Statistic_1_1PatchStatRecord.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::tbox::Statistic::ProcStat</name>
    <filename>structSAMRAI_1_1tbox_1_1Statistic_1_1ProcStat.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>value</name>
      <anchorfile>structSAMRAI_1_1tbox_1_1Statistic_1_1ProcStat.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Statistician</name>
    <filename>classSAMRAI_1_1tbox_1_1Statistician.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Statistic &gt;</type>
      <name>getStatistic</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;name, const string &amp;stat_type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkStatisticExists</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(Pointer&lt; Statistic &gt; &amp;stat, const string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumberProcessorStats</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumberPatchStats</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetProcessorStatistics</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetPatchStatistics</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetStatistics</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getProcStatId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getGlobalProcStatSequenceLength</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(int proc_stat_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getGlobalProcStatValue</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(int proc_stat_id, int seq_num, int proc_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getGlobalProcStatSum</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(int proc_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getGlobalProcStatMax</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(int proc_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getGlobalProcStatMaxProcessorId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(int proc_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getGlobalProcStatMin</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(int proc_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getGlobalProcStatMinProcessorId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(int proc_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printGlobalProcStatData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(int proc_stat_id, ostream &amp;os, int precision=12)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printGlobalProcStatDataFormatted</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(int proc_stat_id, ostream &amp;os, int precision=12)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printGlobalProcStatDataFormatted</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(int proc_stat_id, int proc_id, ostream &amp;os, int precision=12)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPatchStatId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>(const string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getGlobalPatchStatSequenceLength</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>(int patch_stat_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getGlobalPatchStatNumberPatches</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getGlobalPatchStatPatchMapping</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>(int patch_stat_id, int seq_num, int patch_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getGlobalPatchStatValue</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(int patch_stat_id, int seq_num, int patch_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getGlobalPatchStatSum</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getGlobalPatchStatMax</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a24</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getGlobalPatchStatMaxPatchId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a25</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getGlobalPatchStatMin</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a26</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getGlobalPatchStatMinPatchId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a27</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getGlobalPatchStatProcessorSum</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a28</anchor>
      <arglist>(int patch_stat_id, int processor_id, int seq_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getGlobalPatchStatProcessorSumMax</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a29</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getGlobalPatchStatProcessorSumMaxId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a30</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getGlobalPatchStatProcessorSumMin</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a31</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getGlobalPatchStatProcessorSumMinId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a32</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getGlobalPatchStatNumberPatchesOnProc</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a33</anchor>
      <arglist>(int patch_stat_id, int seq_num, int proc_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getGlobalPatchStatMaxPatchesPerProc</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a34</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getGlobalPatchStatMaxPatchesPerProcId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a35</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getGlobalPatchStatMinPatchesPerProc</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a36</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getGlobalPatchStatMinPatchesPerProcId</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a37</anchor>
      <arglist>(int patch_stat_id, int seq_num)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printGlobalPatchStatData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a38</anchor>
      <arglist>(int patch_stat_id, ostream &amp;os, int precision=12)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printGlobalPatchStatDataFormatted</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a39</anchor>
      <arglist>(int patch_stat_id, ostream &amp;os, int precision=12)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printLocalStatData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a41</anchor>
      <arglist>(ostream &amp;os, int precision=12) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printAllGlobalStatData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a42</anchor>
      <arglist>(ostream &amp;os, int precision=12)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printAllSummedGlobalStatData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a43</anchor>
      <arglist>(ostream &amp;os, int precision=12)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printAllSummedGlobalStatData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a44</anchor>
      <arglist>(const string &amp;filename, int precision=12)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSpreadSheetOutput</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a45</anchor>
      <arglist>(const string &amp;dirname=string(), int precision=12)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printSpreadSheetOutputForProcessor</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>a46</anchor>
      <arglist>(const int proc_id, const string &amp;dirname=string(), int precision=12)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Statistician *</type>
      <name>createStatistician</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(bool register_for_restart=true, bool read_from_restart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Statistician *</type>
      <name>getStatistician</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>freeStatistician</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Statistician</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Statistician</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerSingletonSubclassInstance</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(Statistician *subclass_instance)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkStatsForConsistency</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(Array&lt; int &gt; &amp;total_patches)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkProcStatExists</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>(Pointer&lt; Statistic &gt; &amp;stat, const string &amp;name) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkPatchStatExists</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>b5</anchor>
      <arglist>(Pointer&lt; Statistic &gt; &amp;stat, const string &amp;name) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>StatisticRestartDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Statistician.html</anchorfile>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::StatisticRestartDatabase</name>
    <filename>classSAMRAI_1_1tbox_1_1StatisticRestartDatabase.html</filename>
    <base protection="private">SAMRAI::tbox::Serializable</base>
    <member kind="function">
      <type></type>
      <name>StatisticRestartDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatisticRestartDatabase.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name, bool register_for_restart, bool read_from_restart)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StatisticRestartDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatisticRestartDatabase.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatisticRestartDatabase.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(Pointer&lt; Database &gt; db)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatisticRestartDatabase.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Statistician</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatisticRestartDatabase.html</anchorfile>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::StatTransaction</name>
    <filename>classSAMRAI_1_1tbox_1_1StatTransaction.html</filename>
    <base>SAMRAI::tbox::Transaction</base>
    <member kind="function">
      <type></type>
      <name>StatTransaction</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(Pointer&lt; Statistic &gt; stat, int src_proc_id, int dst_proc_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StatTransaction</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>computeIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>computeOutgoingMessageSize</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSourceProcessor</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDestinationProcessor</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(AbstractStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(AbstractStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyLocalData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1StatTransaction.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::Timer</name>
    <filename>classSAMRAI_1_1tbox_1_1Timer.html</filename>
    <base>tbox::DescribedClass</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Timer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const string &amp;</type>
      <name>getName</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIdentifier</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startExclusive</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopExclusive</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalSystemTime</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalUserTime</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalWallclockTime</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxWallclockTime</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getExclusiveSystemTime</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getExclusiveUserTime</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getExclusiveWallclockTime</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRunning</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConcurrentTimer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(const int id)</arglist>
    </member>
    <member kind="function">
      <type>bool *</type>
      <name>getConcurrentTimerVector</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberAccesses</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeLoadBalanceEfficiency</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeMaxWallclock</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putToDatabase</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a22</anchor>
      <arglist>(Pointer&lt; Database &gt; db)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFromRestart</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>a23</anchor>
      <arglist>(Pointer&lt; Database &gt; db)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Timer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(const string &amp;name, const int id=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setInactive</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TimerManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1Timer.html</anchorfile>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::tbox::TimerManager</name>
    <filename>classSAMRAI_1_1tbox_1_1TimerManager.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual Pointer&lt; Timer &gt;</type>
      <name>getTimer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;name, bool ignore_timer_input=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkTimerExists</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(Pointer&lt; Timer &gt; &amp;timer, const string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkTimerRunning</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetAllTimers</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ostream &amp;os=plog)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(Pointer&lt; Database &gt; input_db)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimerManager *</type>
      <name>getManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>freeManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TimerManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>b0</anchor>
      <arglist>(Pointer&lt; Database &gt; input_db)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~TimerManager</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>registerSingletonSubclassInstance</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>b2</anchor>
      <arglist>(TimerManager *subclass_instance)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>startTime</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>b3</anchor>
      <arglist>(Timer *timer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>stopTime</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>b4</anchor>
      <arglist>(Timer *timer)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Timer</name>
      <anchorfile>classSAMRAI_1_1tbox_1_1TimerManager.html</anchorfile>
      <anchor>n0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>SAMRAI::xfer</name>
    <filename>namespaceSAMRAI_1_1xfer.html</filename>
    <class kind="class">SAMRAI::xfer::LocallyActiveDataCoarsenAlgorithm</class>
    <class kind="class">SAMRAI::xfer::LocallyActiveDataCoarsenPatchStrategy</class>
    <class kind="class">SAMRAI::xfer::LocallyActiveDataCoarsenSchedule</class>
    <class kind="class">SAMRAI::xfer::LocallyActiveDataCoarsenTransactionFactory</class>
    <class kind="class">SAMRAI::xfer::LocallyActiveDataFillBox</class>
    <class kind="class">SAMRAI::xfer::LocallyActiveDataFillBoxSet</class>
    <class kind="class">SAMRAI::xfer::LocallyActiveDataRefineAlgorithm</class>
    <class kind="class">SAMRAI::xfer::LocallyActiveDataRefinePatchStrategy</class>
    <class kind="class">SAMRAI::xfer::LocallyActiveDataRefineSchedule</class>
    <class kind="class">SAMRAI::xfer::LocallyActiveDataRefineTransactionFactory</class>
    <class kind="class">SAMRAI::xfer::StandardLocallyActiveDataCoarsenTransactionFactory</class>
    <class kind="class">SAMRAI::xfer::StandardLocallyActiveDataRefineTransactionFactory</class>
    <class kind="class">SAMRAI::xfer::CoarsenAlgorithm</class>
    <class kind="class">SAMRAI::xfer::CoarsenClasses</class>
    <class kind="class">SAMRAI::xfer::CoarsenCopyTransaction</class>
    <class kind="class">SAMRAI::xfer::CoarsenPatchStrategy</class>
    <class kind="class">SAMRAI::xfer::CoarsenSchedule</class>
    <class kind="class">SAMRAI::xfer::CoarsenTransactionFactory</class>
    <class kind="class">SAMRAI::xfer::FillBoxSet</class>
    <class kind="class">SAMRAI::xfer::RefineAlgorithm</class>
    <class kind="class">SAMRAI::xfer::RefineClasses</class>
    <class kind="class">SAMRAI::xfer::RefineCopyTransaction</class>
    <class kind="class">SAMRAI::xfer::RefinePatchStrategy</class>
    <class kind="class">SAMRAI::xfer::RefineSchedule</class>
    <class kind="class">SAMRAI::xfer::RefineTimeTransaction</class>
    <class kind="class">SAMRAI::xfer::RefineTransactionFactory</class>
    <class kind="class">SAMRAI::xfer::StandardCoarsenTransactionFactory</class>
    <class kind="class">SAMRAI::xfer::StandardRefineTransactionFactory</class>
    <class kind="class">SAMRAI::xfer::CoarsenOperator</class>
    <class kind="class">SAMRAI::xfer::Geometry</class>
    <class kind="class">SAMRAI::xfer::RefineOperator</class>
    <class kind="class">SAMRAI::xfer::TimeInterpolateOperator</class>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::LocallyActiveDataCoarsenAlgorithm</name>
    <filename>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenAlgorithm.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataCoarsenAlgorithm</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenAlgorithm.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(bool fill_coarse_data=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocallyActiveDataCoarsenAlgorithm</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenAlgorithm.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCoarsen</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenAlgorithm.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int dst, const int src, const tbox::Pointer&lt; xfer::CoarsenOperator&lt; DIM &gt; &gt; opcoarsen, const hier::IntVector&lt; DIM &gt; &amp;gcw_to_coarsen=hier::IntVector&lt; DIM &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; xfer::LocallyActiveDataCoarsenSchedule&lt; DIM &gt; &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenAlgorithm.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; crse_level, tbox::Pointer&lt; hier::LocallyActiveDataPatchLevelManager&lt; DIM &gt; &gt; crse_level_mgr, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; fine_level, tbox::Pointer&lt; hier::LocallyActiveDataPatchLevelManager&lt; DIM &gt; &gt; fine_level_mgr, xfer::LocallyActiveDataCoarsenPatchStrategy&lt; DIM &gt; *patch_strategy=((xfer::LocallyActiveDataCoarsenPatchStrategy&lt; DIM &gt; *)(0)), tbox::Pointer&lt; xfer::LocallyActiveDataCoarsenTransactionFactory&lt; DIM &gt; &gt; transaction_factory=(xfer::LocallyActiveDataCoarsenTransactionFactory&lt; DIM &gt; *)(0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenAlgorithm.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::LocallyActiveDataCoarsenPatchStrategy</name>
    <filename>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenPatchStrategy.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataCoarsenPatchStrategy</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenPatchStrategy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocallyActiveDataCoarsenPatchStrategy</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenPatchStrategy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual hier::IntVector&lt; DIM &gt;</type>
      <name>getCoarsenOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenPatchStrategy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>preprocessCoarsen</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenPatchStrategy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const tbox::List&lt; int &gt; &amp;src_data_ids, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>postprocessCoarsen</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenPatchStrategy.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const tbox::List&lt; int &gt; &amp;src_data_ids, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::LocallyActiveDataCoarsenSchedule</name>
    <filename>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenSchedule.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataCoarsenSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenSchedule.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; crse_level, tbox::Pointer&lt; hier::LocallyActiveDataPatchLevelManager&lt; DIM &gt; &gt; crse_level_mgr, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; fine_level, tbox::Pointer&lt; hier::LocallyActiveDataPatchLevelManager&lt; DIM &gt; &gt; fine_level_mgr, tbox::Pointer&lt; xfer::CoarsenClasses&lt; DIM &gt; &gt; coarsen_classes, tbox::Pointer&lt; xfer::LocallyActiveDataCoarsenTransactionFactory&lt; DIM &gt; &gt; transaction_factory, xfer::LocallyActiveDataCoarsenPatchStrategy&lt; DIM &gt; *patch_strategy, bool fill_coarse_data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocallyActiveDataCoarsenSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenSchedule.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsenData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenSchedule.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenSchedule.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setScheduleGenerationMethod</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenSchedule.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const string &amp;method)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::LocallyActiveDataCoarsenTransactionFactory</name>
    <filename>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenTransactionFactory.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataCoarsenTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenTransactionFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocallyActiveDataCoarsenTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenTransactionFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCoarsenItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenTransactionFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const typename CoarsenClasses&lt; DIM &gt;::Data **coarsen_items, int num_coarsen_items)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unsetCoarsenItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenTransactionFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tbox::Pointer&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataCoarsenTransactionFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt; overlap, int dst_patch_id, int src_patch_id, int citem_id, tbox::Pointer&lt; tbox::Arena &gt; pool=(tbox::Arena *) NULL) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::LocallyActiveDataFillBox</name>
    <filename>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBox.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataFillBox</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBox.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const tbox::List&lt; const typename xfer::RefineClasses&lt; DIM &gt;::Data * &gt; &amp;var_data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataFillBox</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBox.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const tbox::List&lt; const typename xfer::CoarsenClasses&lt; DIM &gt;::Data * &gt; &amp;var_data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataFillBox</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBox.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const LocallyActiveDataFillBox&lt; DIM &gt; &amp;fill_box)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocallyActiveDataFillBox</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBox.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const hier::Box&lt; DIM &gt; &amp;</type>
      <name>getBox</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBox.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::List&lt; const typename RefineClasses&lt; DIM &gt;::Data * &gt; &amp;</type>
      <name>getActiveRefineVarData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBox.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::List&lt; const typename xfer::CoarsenClasses&lt; DIM &gt;::Data * &gt; &amp;</type>
      <name>getActiveCoarsenVarData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBox.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBox.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearLocallyActiveFillBoxData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBox.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBox.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const tbox::List&lt; const typename xfer::RefineClasses&lt; DIM &gt;::Data * &gt; &amp;var_data, ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBox.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const tbox::List&lt; const typename xfer::CoarsenClasses&lt; DIM &gt;::Data * &gt; &amp;var_data, ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::LocallyActiveDataFillBoxSet</name>
    <filename>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBoxSet.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::FillBoxSet</base>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataFillBoxSet</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBoxSet.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const LocallyActiveDataFillBoxSet&lt; DIM &gt; &amp;fill_box_set)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataFillBoxSet</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBoxSet.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocallyActiveDataFillBoxSet</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBoxSet.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTo</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBoxSet.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const LocallyActiveDataFillBoxSet&lt; DIM &gt; &amp;fill_box_set)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBoxSet.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::List&lt; xfer::LocallyActiveDataFillBox&lt; DIM &gt; &gt; &amp;</type>
      <name>getLocallyActiveDataBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBoxSet.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::List&lt; const typename xfer::RefineClasses&lt; DIM &gt;::Data * &gt; &amp;</type>
      <name>getUnionActiveRefineVarData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBoxSet.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::List&lt; const typename xfer::CoarsenClasses&lt; DIM &gt;::Data * &gt; &amp;</type>
      <name>getUnionActiveCoarsenVarData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBoxSet.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLocallyActiveFillBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBoxSet.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const tbox::List&lt; const typename xfer::RefineClasses&lt; DIM &gt;::Data * &gt; &amp;var_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetLocallyActiveFillBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBoxSet.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const tbox::List&lt; const typename xfer::CoarsenClasses&lt; DIM &gt;::Data * &gt; &amp;var_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLocallyActiveFillBox</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBoxSet.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const tbox::List&lt; const typename xfer::RefineClasses&lt; DIM &gt;::Data * &gt; &amp;var_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLocallyActiveFillBox</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBoxSet.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box, const tbox::List&lt; const typename xfer::CoarsenClasses&lt; DIM &gt;::Data * &gt; &amp;var_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersectBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBoxSet.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersectBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBoxSet.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const hier::BoxList&lt; DIM &gt; &amp;boxes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataFillBoxSet.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(ostream &amp;os=tbox::plog) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::LocallyActiveDataRefineAlgorithm</name>
    <filename>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineAlgorithm.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataRefineAlgorithm</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineAlgorithm.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocallyActiveDataRefineAlgorithm</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineAlgorithm.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerRefine</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineAlgorithm.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int dst, const int src, const int scratch, tbox::Pointer&lt; xfer::RefineOperator&lt; DIM &gt; &gt; oprefine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerRefine</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineAlgorithm.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int dst, const int src, const int src_told, const int src_tnew, const int scratch, tbox::Pointer&lt; RefineOperator&lt; DIM &gt; &gt; oprefine, tbox::Pointer&lt; TimeInterpolateOperator&lt; DIM &gt; &gt; optime)</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; xfer::LocallyActiveDataRefineSchedule&lt; DIM &gt; &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineAlgorithm.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, tbox::Pointer&lt; hier::LocallyActiveDataPatchLevelManager&lt; DIM &gt; &gt; level_mgr, xfer::LocallyActiveDataRefinePatchStrategy&lt; DIM &gt; *patch_strategy=((xfer::LocallyActiveDataRefinePatchStrategy&lt; DIM &gt; *)(0)), tbox::Pointer&lt; xfer::LocallyActiveDataRefineTransactionFactory&lt; DIM &gt; &gt; transaction_factory=(xfer::LocallyActiveDataRefineTransactionFactory&lt; DIM &gt; *)(0))</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; xfer::LocallyActiveDataRefineSchedule&lt; DIM &gt; &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineAlgorithm.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::LocallyActiveDataPatchLevelManager&lt; DIM &gt; &gt; dst_level_mgr, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::LocallyActiveDataPatchLevelManager&lt; DIM &gt; &gt; src_level_mgr, xfer::LocallyActiveDataRefinePatchStrategy&lt; DIM &gt; *patch_strategy=((xfer::LocallyActiveDataRefinePatchStrategy&lt; DIM &gt; *)(0)), bool use_time_interpolation=false, tbox::Pointer&lt; xfer::LocallyActiveDataRefineTransactionFactory&lt; DIM &gt; &gt; transaction_factory=(xfer::LocallyActiveDataRefineTransactionFactory&lt; DIM &gt; *)(0))</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; xfer::LocallyActiveDataRefineSchedule&lt; DIM &gt; &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineAlgorithm.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, tbox::Pointer&lt; hier::LocallyActiveDataPatchLevelManager&lt; DIM &gt; &gt; level_mgr, const int next_coarser_level, tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, xfer::LocallyActiveDataRefinePatchStrategy&lt; DIM &gt; *patch_strategy=((xfer::LocallyActiveDataRefinePatchStrategy&lt; DIM &gt; *)(0)), bool use_time_interpolation=false, tbox::Pointer&lt; xfer::LocallyActiveDataRefineTransactionFactory&lt; DIM &gt; &gt; transaction_factory=(xfer::LocallyActiveDataRefineTransactionFactory&lt; DIM &gt; *)(0))</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; xfer::LocallyActiveDataRefineSchedule&lt; DIM &gt; &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineAlgorithm.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::LocallyActiveDataPatchLevelManager&lt; DIM &gt; &gt; dst_level_mgr, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::LocallyActiveDataPatchLevelManager&lt; DIM &gt; &gt; src_level_mgr, const int next_coarser_level, tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, xfer::LocallyActiveDataRefinePatchStrategy&lt; DIM &gt; *patch_strategy=((xfer::LocallyActiveDataRefinePatchStrategy&lt; DIM &gt; *)(0)), bool use_time_interpolation=false, tbox::Pointer&lt; xfer::LocallyActiveDataRefineTransactionFactory&lt; DIM &gt; &gt; transaction_factory=(xfer::LocallyActiveDataRefineTransactionFactory&lt; DIM &gt; *)(0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineAlgorithm.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::LocallyActiveDataRefinePatchStrategy</name>
    <filename>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefinePatchStrategy.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataRefinePatchStrategy</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefinePatchStrategy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocallyActiveDataRefinePatchStrategy</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefinePatchStrategy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual hier::IntVector&lt; DIM &gt;</type>
      <name>getRefineOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefinePatchStrategy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPhysicalBoundaryConditions</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefinePatchStrategy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const tbox::List&lt; int &gt; &amp;scratch_data_ids, const double fill_time, const hier::IntVector&lt; DIM &gt; &amp;ghost_width_to_fill)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>preprocessRefine</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefinePatchStrategy.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const tbox::List&lt; int &gt; &amp;scratch_data_ids, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>postprocessRefine</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefinePatchStrategy.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const tbox::List&lt; int &gt; &amp;scratch_data_ids, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhysicalBoundaryConditions</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefinePatchStrategy.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const tbox::List&lt; const typename xfer::RefineClasses&lt; DIM &gt;::Data * &gt; &amp;refine_data, const double fill_time, const hier::IntVector&lt; DIM &gt; &amp;ghost_width_to_fill)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocessRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefinePatchStrategy.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const xfer::LocallyActiveDataFillBoxSet&lt; DIM &gt; &amp;fine_boxes, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocessRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefinePatchStrategy.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const xfer::LocallyActiveDataFillBoxSet&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::LocallyActiveDataRefineSchedule</name>
    <filename>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineSchedule.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataRefineSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineSchedule.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::LocallyActiveDataPatchLevelManager&lt; DIM &gt; &gt; dst_level_mgr, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::LocallyActiveDataPatchLevelManager&lt; DIM &gt; &gt; src_level_mgr, const tbox::Pointer&lt; xfer::RefineClasses&lt; DIM &gt; &gt; refine_classes, tbox::Pointer&lt; xfer::LocallyActiveDataRefineTransactionFactory&lt; DIM &gt; &gt; transaction_factory, xfer::LocallyActiveDataRefinePatchStrategy&lt; DIM &gt; *patch_strategy, bool use_time_interpolation=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataRefineSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineSchedule.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::LocallyActiveDataPatchLevelManager&lt; DIM &gt; &gt; dst_level_mgr, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::LocallyActiveDataPatchLevelManager&lt; DIM &gt; &gt; src_level_mgr, int next_coarser_level, tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const tbox::Pointer&lt; xfer::RefineClasses&lt; DIM &gt; &gt; refine_classes, tbox::Pointer&lt; xfer::LocallyActiveDataRefineTransactionFactory&lt; DIM &gt; &gt; transaction_factory, xfer::LocallyActiveDataRefinePatchStrategy&lt; DIM &gt; *patch_strategy, bool use_time_interpolation=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocallyActiveDataRefineSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineSchedule.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineSchedule.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(double time, bool do_physical_boundary_fill=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineSchedule.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setScheduleGenerationMethod</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineSchedule.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const string &amp;method)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::LocallyActiveDataRefineTransactionFactory</name>
    <filename>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineTransactionFactory.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>LocallyActiveDataRefineTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineTransactionFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocallyActiveDataRefineTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineTransactionFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRefineItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineTransactionFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const typename RefineClasses&lt; DIM &gt;::Data **refine_items, int num_refine_items)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unsetRefineItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineTransactionFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tbox::Pointer&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineTransactionFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt; overlap, int dst_patch_id, int src_patch_id, int ritem_id, const hier::Box&lt; DIM &gt; &amp;box=hier::Box&lt; DIM &gt;(), bool use_time_interpolation=false, tbox::Pointer&lt; tbox::Arena &gt; pool=(tbox::Arena *) NULL) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransactionTime</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineTransactionFactory.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(double fill_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessScratchSpace</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1LocallyActiveDataRefineTransactionFactory.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, double fill_time, const hier::LocallyActiveDataPatchLevelManager&lt; DIM &gt; &amp;preprocess_mgr) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::StandardLocallyActiveDataCoarsenTransactionFactory</name>
    <filename>classSAMRAI_1_1xfer_1_1StandardLocallyActiveDataCoarsenTransactionFactory.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::LocallyActiveDataCoarsenTransactionFactory</base>
    <member kind="function">
      <type></type>
      <name>StandardLocallyActiveDataCoarsenTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardLocallyActiveDataCoarsenTransactionFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StandardLocallyActiveDataCoarsenTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardLocallyActiveDataCoarsenTransactionFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarsenItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardLocallyActiveDataCoarsenTransactionFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const typename CoarsenClasses&lt; DIM &gt;::Data **coarsen_items, int num_coarsen_items)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetCoarsenItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardLocallyActiveDataCoarsenTransactionFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardLocallyActiveDataCoarsenTransactionFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt; overlap, int dst_patch_id, int src_patch_id, int citem_id, tbox::Pointer&lt; tbox::Arena &gt; pool=(tbox::Arena *) NULL) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::StandardLocallyActiveDataRefineTransactionFactory</name>
    <filename>classSAMRAI_1_1xfer_1_1StandardLocallyActiveDataRefineTransactionFactory.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::LocallyActiveDataRefineTransactionFactory</base>
    <member kind="function">
      <type></type>
      <name>StandardLocallyActiveDataRefineTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardLocallyActiveDataRefineTransactionFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StandardLocallyActiveDataRefineTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardLocallyActiveDataRefineTransactionFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefineItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardLocallyActiveDataRefineTransactionFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const typename RefineClasses&lt; DIM &gt;::Data **refine_items, int num_refine_items)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetRefineItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardLocallyActiveDataRefineTransactionFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransactionTime</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardLocallyActiveDataRefineTransactionFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(double fill_time)</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardLocallyActiveDataRefineTransactionFactory.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt; overlap, int dst_patch_id, int src_patch_id, int ritem_id, const hier::Box&lt; DIM &gt; &amp;box=hier::Box&lt; DIM &gt;(), bool use_time_interpolation=false, tbox::Pointer&lt; tbox::Arena &gt; pool=(tbox::Arena *) NULL) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::CoarsenAlgorithm</name>
    <filename>classSAMRAI_1_1xfer_1_1CoarsenAlgorithm.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>CoarsenAlgorithm</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenAlgorithm.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(bool fill_coarse_data=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CoarsenAlgorithm</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenAlgorithm.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerCoarsen</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenAlgorithm.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int dst, const int src, const tbox::Pointer&lt; xfer::CoarsenOperator&lt; DIM &gt; &gt; opcoarsen, const hier::IntVector&lt; DIM &gt; &amp;gcw_to_coarsen=hier::IntVector&lt; DIM &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; xfer::CoarsenSchedule&lt; DIM &gt; &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenAlgorithm.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; crse_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; fine_level, xfer::CoarsenPatchStrategy&lt; DIM &gt; *patch_strategy=((xfer::CoarsenPatchStrategy&lt; DIM &gt; *)(0)), tbox::Pointer&lt; xfer::CoarsenTransactionFactory&lt; DIM &gt; &gt; transaction_factory=(xfer::CoarsenTransactionFactory&lt; DIM &gt; *)(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkConsistency</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenAlgorithm.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; xfer::CoarsenSchedule&lt; DIM &gt; &gt; schedule) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenAlgorithm.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; xfer::CoarsenSchedule&lt; DIM &gt; &gt; schedule) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenAlgorithm.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::CoarsenClasses</name>
    <filename>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>CoarsenClasses</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(bool fill_coarse_data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CoarsenClasses</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberEquivalenceClasses</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberItemsInEquivalenceClass</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int equiv_class_id) const </arglist>
    </member>
    <member kind="function">
      <type>const CoarsenClasses&lt; DIM &gt;::Data &amp;</type>
      <name>getClassRepresentative</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int equiv_class_id) const </arglist>
    </member>
    <member kind="function">
      <type>tbox::List&lt; typename CoarsenClasses&lt; DIM &gt;::Data &gt;::Iterator</type>
      <name>getIterator</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(int equiv_class_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertEquivalenceClassItem</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const typename CoarsenClasses&lt; DIM &gt;::Data &amp;data, tbox::Pointer&lt; hier::PatchDescriptor&lt; DIM &gt; &gt; descriptor=(hier::PatchDescriptor&lt; DIM &gt; *)(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkCoarsenItem</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const typename CoarsenClasses&lt; DIM &gt;::Data &amp;data_item, tbox::Pointer&lt; hier::PatchDescriptor&lt; DIM &gt; &gt; descriptor=(hier::PatchDescriptor&lt; DIM &gt; *)(0)) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkConsistency</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(tbox::Pointer&lt; CoarsenClasses&lt; DIM &gt; &gt; test_classes, tbox::Pointer&lt; hier::PatchDescriptor&lt; DIM &gt; &gt; descriptor=(hier::PatchDescriptor&lt; DIM &gt; *)(0)) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printCoarsenItem</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenClasses.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ostream &amp;stream, const typename CoarsenClasses&lt; DIM &gt;::Data &amp;data) const </arglist>
    </member>
    <class kind="struct">SAMRAI::xfer::CoarsenClasses::Data</class>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::xfer::CoarsenClasses::Data</name>
    <filename>structSAMRAI_1_1xfer_1_1CoarsenClasses_1_1Data.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>d_dst</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1CoarsenClasses_1_1Data.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_src</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1CoarsenClasses_1_1Data.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>d_fine_bdry_reps_var</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1CoarsenClasses_1_1Data.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hier::IntVector&lt; DIM &gt;</type>
      <name>d_gcw_to_coarsen</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1CoarsenClasses_1_1Data.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tbox::Pointer&lt; xfer::CoarsenOperator&lt; DIM &gt; &gt;</type>
      <name>d_opcoarsen</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1CoarsenClasses_1_1Data.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_tag</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1CoarsenClasses_1_1Data.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::CoarsenCopyTransaction</name>
    <filename>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::tbox::Transaction</base>
    <member kind="function">
      <type></type>
      <name>CoarsenCopyTransaction</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt; overlap, int dst_patch, int src_patch, int coarsen_item_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CoarsenCopyTransaction</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>computeIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>computeOutgoingMessageSize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSourceProcessor</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDestinationProcessor</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::AbstractStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(tbox::AbstractStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyLocalData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setCoarsenItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const typename CoarsenClasses&lt; DIM &gt;::Data **coarsen_items, int num_coarsen_items)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unsetCoarsenItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenCopyTransaction.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::CoarsenPatchStrategy</name>
    <filename>classSAMRAI_1_1xfer_1_1CoarsenPatchStrategy.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>CoarsenPatchStrategy</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenPatchStrategy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CoarsenPatchStrategy</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenPatchStrategy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual hier::IntVector&lt; DIM &gt;</type>
      <name>getCoarsenOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenPatchStrategy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>preprocessCoarsen</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenPatchStrategy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>postprocessCoarsen</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenPatchStrategy.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::CoarsenSchedule</name>
    <filename>classSAMRAI_1_1xfer_1_1CoarsenSchedule.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>CoarsenSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenSchedule.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; crse_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; fine_level, const tbox::Pointer&lt; xfer::CoarsenClasses&lt; DIM &gt; &gt; coarsen_classes, tbox::Pointer&lt; xfer::CoarsenTransactionFactory&lt; DIM &gt; &gt; transaction_factory, xfer::CoarsenPatchStrategy&lt; DIM &gt; *patch_strategy, bool fill_coarse_data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CoarsenSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenSchedule.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenSchedule.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; xfer::CoarsenClasses&lt; DIM &gt; &gt; coarsen_classes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsenData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenSchedule.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; xfer::CoarsenClasses&lt; DIM &gt; &gt; &amp;</type>
      <name>getEquivalenceClasses</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenSchedule.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenSchedule.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setScheduleGenerationMethod</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenSchedule.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const string &amp;method)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::CoarsenTransactionFactory</name>
    <filename>classSAMRAI_1_1xfer_1_1CoarsenTransactionFactory.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>CoarsenTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenTransactionFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CoarsenTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenTransactionFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setCoarsenItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenTransactionFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const typename CoarsenClasses&lt; DIM &gt;::Data **coarsen_items, int num_coarsen_items)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unsetCoarsenItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenTransactionFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tbox::Pointer&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenTransactionFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt; overlap, int dst_patch_id, int src_patch_id, int citem_id, tbox::Pointer&lt; tbox::Arena &gt; pool=(tbox::Arena *)(0)) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::FillBoxSet</name>
    <filename>classSAMRAI_1_1xfer_1_1FillBoxSet.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>FillBoxSet</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1FillBoxSet.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FillBoxSet</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1FillBoxSet.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(const FillBoxSet&lt; DIM &gt; &amp;fill_box_set)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FillBoxSet</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1FillBoxSet.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FillBoxSet</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1FillBoxSet.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FillBoxSet &amp;</type>
      <name>operator=</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1FillBoxSet.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(const FillBoxSet &amp;fill_box_set)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetFillBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1FillBoxSet.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetFillBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1FillBoxSet.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const hier::BoxList&lt; DIM &gt; &amp;boxes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFillBox</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1FillBoxSet.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>const hier::Box&lt; DIM &gt; &amp;</type>
      <name>getBoundingBox</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1FillBoxSet.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const hier::BoxList&lt; DIM &gt; &amp;</type>
      <name>getBoxList</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1FillBoxSet.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>hier::BoxList&lt; DIM &gt; &amp;</type>
      <name>getBoxListToChange</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1FillBoxSet.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberOfBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1FillBoxSet.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>simplifyBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1FillBoxSet.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIntersections</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1FillBoxSet.html</anchorfile>
      <anchor>a13</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;takeaway)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIntersections</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1FillBoxSet.html</anchorfile>
      <anchor>a14</anchor>
      <arglist>(const hier::BoxList&lt; DIM &gt; &amp;takeaway)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersectBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1FillBoxSet.html</anchorfile>
      <anchor>a15</anchor>
      <arglist>(const hier::Box&lt; DIM &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersectBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1FillBoxSet.html</anchorfile>
      <anchor>a16</anchor>
      <arglist>(const hier::BoxList&lt; DIM &gt; &amp;boxes)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1FillBoxSet.html</anchorfile>
      <anchor>a17</anchor>
      <arglist>(ostream &amp;os=tbox::plog) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::RefineAlgorithm</name>
    <filename>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>RefineAlgorithm</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RefineAlgorithm</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerRefine</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const int dst, const int src, const int scratch, tbox::Pointer&lt; RefineOperator&lt; DIM &gt; &gt; oprefine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerRefine</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const int dst, const int src, const int src_told, const int src_tnew, const int scratch, tbox::Pointer&lt; RefineOperator&lt; DIM &gt; &gt; oprefine, tbox::Pointer&lt; TimeInterpolateOperator&lt; DIM &gt; &gt; optime)</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; xfer::RefineSchedule&lt; DIM &gt; &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, xfer::RefinePatchStrategy&lt; DIM &gt; *patch_strategy=((xfer::RefinePatchStrategy&lt; DIM &gt; *)(0)), tbox::Pointer&lt; xfer::RefineTransactionFactory&lt; DIM &gt; &gt; transaction_factory=(xfer::RefineTransactionFactory&lt; DIM &gt; *)(0))</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; xfer::RefineSchedule&lt; DIM &gt; &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, xfer::RefinePatchStrategy&lt; DIM &gt; *patch_strategy=((xfer::RefinePatchStrategy&lt; DIM &gt; *)(0)), bool use_time_interpolation=false, tbox::Pointer&lt; xfer::RefineTransactionFactory&lt; DIM &gt; &gt; transaction_factory=(xfer::RefineTransactionFactory&lt; DIM &gt; *)(0))</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; xfer::RefineSchedule&lt; DIM &gt; &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, const int next_coarser_level, tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, xfer::RefinePatchStrategy&lt; DIM &gt; *patch_strategy=((xfer::RefinePatchStrategy&lt; DIM &gt; *)(0)), bool use_time_interpolation=false, tbox::Pointer&lt; xfer::RefineTransactionFactory&lt; DIM &gt; &gt; transaction_factory=(xfer::RefineTransactionFactory&lt; DIM &gt; *)(0))</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; xfer::RefineSchedule&lt; DIM &gt; &gt;</type>
      <name>createSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, const int next_coarser_level, tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, xfer::RefinePatchStrategy&lt; DIM &gt; *patch_strategy=((xfer::RefinePatchStrategy&lt; DIM &gt; *)(0)), bool use_time_interpolation=false, tbox::Pointer&lt; xfer::RefineTransactionFactory&lt; DIM &gt; &gt; transaction_factory=(xfer::RefineTransactionFactory&lt; DIM &gt; *)(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkConsistency</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(tbox::Pointer&lt; xfer::RefineSchedule&lt; DIM &gt; &gt; schedule) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(tbox::Pointer&lt; xfer::RefineSchedule&lt; DIM &gt; &gt; schedule) const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; RefineClasses&lt; DIM &gt; &gt; &amp;</type>
      <name>getEquivalenceClasses</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEquivalenceClasses</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(const tbox::Pointer&lt; RefineClasses&lt; DIM &gt; &gt; refine_classes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineAlgorithm.html</anchorfile>
      <anchor>a12</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::RefineClasses</name>
    <filename>classSAMRAI_1_1xfer_1_1RefineClasses.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>RefineClasses</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RefineClasses</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumberEquivalenceClasses</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RefineClasses&lt; DIM &gt;::Data &amp;</type>
      <name>getClassRepresentative</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(int equiv_class_id) const </arglist>
    </member>
    <member kind="function">
      <type>tbox::List&lt; typename RefineClasses&lt; DIM &gt;::Data &gt;::Iterator</type>
      <name>getIterator</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(int equiv_class_id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertEquivalenceClassItem</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const typename RefineClasses&lt; DIM &gt;::Data &amp;data, tbox::Pointer&lt; hier::PatchDescriptor&lt; DIM &gt; &gt; descriptor=(hier::PatchDescriptor&lt; DIM &gt; *) NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkRefineItem</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const typename RefineClasses&lt; DIM &gt;::Data &amp;data_item, tbox::Pointer&lt; hier::PatchDescriptor&lt; DIM &gt; &gt; descriptor=(hier::PatchDescriptor&lt; DIM &gt; *) NULL) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkConsistency</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::Pointer&lt; RefineClasses&lt; DIM &gt; &gt; test_classes, tbox::Pointer&lt; hier::PatchDescriptor&lt; DIM &gt; &gt; descriptor=(hier::PatchDescriptor&lt; DIM &gt; *) NULL) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printRefineItem</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineClasses.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>(ostream &amp;stream, const typename RefineClasses&lt; DIM &gt;::Data &amp;data) const </arglist>
    </member>
    <class kind="struct">SAMRAI::xfer::RefineClasses::Data</class>
  </compound>
  <compound kind="struct">
    <name>SAMRAI::xfer::RefineClasses::Data</name>
    <filename>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>d_dst</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>o0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_src</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>o1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_src_told</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>o2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_src_tnew</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>o3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_scratch</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>o4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>d_fine_bdry_reps_var</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>o5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>d_time_interpolate</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>o6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tbox::Pointer&lt; RefineOperator&lt; DIM &gt; &gt;</type>
      <name>d_oprefine</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>o7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tbox::Pointer&lt; TimeInterpolateOperator&lt; DIM &gt; &gt;</type>
      <name>d_optime</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>o8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>d_tag</name>
      <anchorfile>structSAMRAI_1_1xfer_1_1RefineClasses_1_1Data.html</anchorfile>
      <anchor>o9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::RefineCopyTransaction</name>
    <filename>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::tbox::Transaction</base>
    <member kind="function">
      <type></type>
      <name>RefineCopyTransaction</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt; overlap, int dst_patch, int src_patch, int refine_item_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RefineCopyTransaction</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>computeIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>computeOutgoingMessageSize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSourceProcessor</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDestinationProcessor</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::AbstractStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(tbox::AbstractStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyLocalData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setRefineItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const typename RefineClasses&lt; DIM &gt;::Data **refine_items, int num_refine_items)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unsetRefineItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineCopyTransaction.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::RefinePatchStrategy</name>
    <filename>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>RefinePatchStrategy</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RefinePatchStrategy</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPhysicalBoundaryConditions</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;patch, const double fill_time, const hier::IntVector&lt; DIM &gt; &amp;ghost_width_to_fill)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual hier::IntVector&lt; DIM &gt;</type>
      <name>getRefineOpStencilWidth</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>preprocessRefine</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>postprocessRefine</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const hier::BoxList&lt; DIM &gt; &amp;fine_boxes, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocessRefineBoxes</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefinePatchStrategy.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const hier::BoxList&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::RefineSchedule</name>
    <filename>classSAMRAI_1_1xfer_1_1RefineSchedule.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>RefineSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, const tbox::Pointer&lt; xfer::RefineClasses&lt; DIM &gt; &gt; refine_classes, tbox::Pointer&lt; xfer::RefineTransactionFactory&lt; DIM &gt; &gt; transaction_factory, xfer::RefinePatchStrategy&lt; DIM &gt; *patch_strategy, bool use_time_interpolation=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RefineSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, int next_coarser_level, tbox::Pointer&lt; hier::PatchHierarchy&lt; DIM &gt; &gt; hierarchy, const tbox::Pointer&lt; xfer::RefineClasses&lt; DIM &gt; &gt; refine_classes, tbox::Pointer&lt; xfer::RefineTransactionFactory&lt; DIM &gt; &gt; transaction_factory, xfer::RefinePatchStrategy&lt; DIM &gt; *patch_strategy, bool use_time_interpolation=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RefineSchedule</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(const tbox::Pointer&lt; xfer::RefineClasses&lt; DIM &gt; &gt; refine_classes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(double fill_time, bool do_physical_boundary_fill=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeSourceVector</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(hier::ComponentSelector &amp;allocate_vector) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateDestinationSpace</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(double fill_time, hier::ComponentSelector &amp;allocate_vector) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocateScratchSpace</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, double fill_time, hier::ComponentSelector &amp;allocate_vector) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeDestinationVector</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(hier::ComponentSelector &amp;allocate_vector) const </arglist>
    </member>
    <member kind="function">
      <type>const tbox::Pointer&lt; RefineClasses&lt; DIM &gt; &gt; &amp;</type>
      <name>getEquivalenceClasses</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const hier::IntVector&lt; DIM &gt; &amp;</type>
      <name>getBoundaryFillGhostWidth</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>a11</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setScheduleGenerationMethod</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineSchedule.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const string &amp;method)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::RefineTimeTransaction</name>
    <filename>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::tbox::Transaction</base>
    <member kind="function">
      <type></type>
      <name>RefineTimeTransaction</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt; overlap, int dst_patch, int src_patch, const hier::Box&lt; DIM &gt; &amp;box, int refine_item_id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RefineTimeTransaction</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canEstimateIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>computeIncomingMessageSize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>computeOutgoingMessageSize</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSourceProcessor</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDestinationProcessor</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packStream</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(tbox::AbstractStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unpackStream</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(tbox::AbstractStream &amp;stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>copyLocalData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>a10</anchor>
      <arglist>(ostream &amp;stream) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setRefineItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>e0</anchor>
      <arglist>(const typename RefineClasses&lt; DIM &gt;::Data **refine_items, int num_refine_items)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unsetRefineItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setTransactionTime</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTimeTransaction.html</anchorfile>
      <anchor>e2</anchor>
      <arglist>(const double time)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::RefineTransactionFactory</name>
    <filename>classSAMRAI_1_1xfer_1_1RefineTransactionFactory.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>RefineTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTransactionFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RefineTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTransactionFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRefineItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTransactionFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const typename RefineClasses&lt; DIM &gt;::Data **refine_items, int num_refine_items)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unsetRefineItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTransactionFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual tbox::Pointer&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTransactionFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt; overlap, int dst_patch_id, int src_patch_id, int ritem_id, const hier::Box&lt; DIM &gt; &amp;box=hier::Box&lt; DIM &gt;(), bool use_time_interpolation=false, tbox::Pointer&lt; tbox::Arena &gt; pool=(tbox::Arena *) NULL) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransactionTime</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTransactionFactory.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(double fill_time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocessScratchSpace</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineTransactionFactory.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; level, double fill_time, const hier::ComponentSelector &amp;preprocess_vector) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::StandardCoarsenTransactionFactory</name>
    <filename>classSAMRAI_1_1xfer_1_1StandardCoarsenTransactionFactory.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::CoarsenTransactionFactory</base>
    <member kind="function">
      <type></type>
      <name>StandardCoarsenTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardCoarsenTransactionFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StandardCoarsenTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardCoarsenTransactionFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarsenItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardCoarsenTransactionFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const typename CoarsenClasses&lt; DIM &gt;::Data **coarsen_items, int num_coarsen_items)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetCoarsenItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardCoarsenTransactionFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardCoarsenTransactionFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt; overlap, int dst_patch_id, int src_patch_id, int citem_id, tbox::Pointer&lt; tbox::Arena &gt; pool=(tbox::Arena *)(0)) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::StandardRefineTransactionFactory</name>
    <filename>classSAMRAI_1_1xfer_1_1StandardRefineTransactionFactory.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::xfer::RefineTransactionFactory</base>
    <member kind="function">
      <type></type>
      <name>StandardRefineTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardRefineTransactionFactory.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StandardRefineTransactionFactory</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardRefineTransactionFactory.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefineItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardRefineTransactionFactory.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const typename RefineClasses&lt; DIM &gt;::Data **refine_items, int num_refine_items)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetRefineItems</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardRefineTransactionFactory.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransactionTime</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardRefineTransactionFactory.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(double fill_time)</arglist>
    </member>
    <member kind="function">
      <type>tbox::Pointer&lt; tbox::Transaction &gt;</type>
      <name>allocate</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1StandardRefineTransactionFactory.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; dst_level, tbox::Pointer&lt; hier::PatchLevel&lt; DIM &gt; &gt; src_level, tbox::Pointer&lt; hier::BoxOverlap&lt; DIM &gt; &gt; overlap, int dst_patch_id, int src_patch_id, int ritem_id, const hier::Box&lt; DIM &gt; &amp;box=hier::Box&lt; DIM &gt;(), bool use_time_interpolation=false, tbox::Pointer&lt; tbox::Arena &gt; pool=(tbox::Arena *) NULL) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::CoarsenOperator</name>
    <filename>classSAMRAI_1_1xfer_1_1CoarsenOperator.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>CoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenOperator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenOperator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>findCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenOperator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenOperator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenOperator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenOperator.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>coarsen</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1CoarsenOperator.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;coarse, const hier::Patch&lt; DIM &gt; &amp;fine, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;coarse_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::Geometry</name>
    <filename>classSAMRAI_1_1xfer_1_1Geometry.html</filename>
    <templarg>DIM</templarg>
    <base>SAMRAI::hier::GridGeometry</base>
    <member kind="function">
      <type></type>
      <name>Geometry</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1Geometry.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>(const string &amp;object_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Geometry</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1Geometry.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSpatialCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1Geometry.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(tbox::Pointer&lt; CoarsenOperator&lt; DIM &gt; &gt; coarsen_op)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSpatialRefineOperator</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1Geometry.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(tbox::Pointer&lt; RefineOperator&lt; DIM &gt; &gt; refine_op)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1Geometry.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>(tbox::Pointer&lt; TimeInterpolateOperator&lt; DIM &gt; &gt; time_op)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; CoarsenOperator&lt; DIM &gt; &gt;</type>
      <name>lookupCoarsenOperator</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1Geometry.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; RefineOperator&lt; DIM &gt; &gt;</type>
      <name>lookupRefineOperator</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1Geometry.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual tbox::Pointer&lt; TimeInterpolateOperator&lt; DIM &gt; &gt;</type>
      <name>lookupTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1Geometry.html</anchorfile>
      <anchor>a7</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name=&quot;STD_LINEAR_TIME_INTERPOLATE&quot;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printClassData</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1Geometry.html</anchorfile>
      <anchor>a8</anchor>
      <arglist>(ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::RefineOperator</name>
    <filename>classSAMRAI_1_1xfer_1_1RefineOperator.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>RefineOperator</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineOperator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RefineOperator</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineOperator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>findRefineOperator</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineOperator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const string &amp;</type>
      <name>getOperatorName</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineOperator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getOperatorPriority</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineOperator.html</anchorfile>
      <anchor>a4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual hier::IntVector&lt; DIM &gt;</type>
      <name>getStencilWidth</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineOperator.html</anchorfile>
      <anchor>a5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>refine</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1RefineOperator.html</anchorfile>
      <anchor>a6</anchor>
      <arglist>(hier::Patch&lt; DIM &gt; &amp;fine, const hier::Patch&lt; DIM &gt; &amp;coarse, const int dst_component, const int src_component, const hier::Box&lt; DIM &gt; &amp;fine_box, const hier::IntVector&lt; DIM &gt; &amp;ratio) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SAMRAI::xfer::TimeInterpolateOperator</name>
    <filename>classSAMRAI_1_1xfer_1_1TimeInterpolateOperator.html</filename>
    <templarg>DIM</templarg>
    <member kind="function">
      <type></type>
      <name>TimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1TimeInterpolateOperator.html</anchorfile>
      <anchor>a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1TimeInterpolateOperator.html</anchorfile>
      <anchor>a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>findTimeInterpolateOperator</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1TimeInterpolateOperator.html</anchorfile>
      <anchor>a2</anchor>
      <arglist>(const tbox::Pointer&lt; hier::Variable&lt; DIM &gt; &gt; &amp;var, const string &amp;op_name) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>timeInterpolate</name>
      <anchorfile>classSAMRAI_1_1xfer_1_1TimeInterpolateOperator.html</anchorfile>
      <anchor>a3</anchor>
      <arglist>(hier::PatchData&lt; DIM &gt; &amp;dst_data, const hier::Box&lt; DIM &gt; &amp;where, const hier::PatchData&lt; DIM &gt; &amp;src_data_old, const hier::PatchData&lt; DIM &gt; &amp;src_data_new) const =0</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>std</name>
    <filename>namespacestd.html</filename>
  </compound>
  <compound kind="namespace">
    <name>tbox</name>
    <filename>namespacetbox.html</filename>
  </compound>
</tagfile>
