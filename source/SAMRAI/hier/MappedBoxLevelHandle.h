/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright 
 * information, see COPYRIGHT and COPYING.LESSER. 
 *
 * Copyright:     (c) 1997-2010 Lawrence Livermore National Security, LLC
 * Description:   Auto-release handle to prevent using invalid Connector data. 
 *
 ************************************************************************/
#ifndef included_hier_MappedBoxLevelHandle
#define included_hier_MappedBoxLevelHandle

#include "SAMRAI/SAMRAI_config.h"

namespace SAMRAI {
namespace hier {

class MappedBoxLevel;

/*!
 * @brief A handle for Connectors to access their head and base
 * MappedBoxLevels.  A MappedBoxLevel automatically releases its
 * handle when it changes in a way that can invalidate Connector data,
 * preventing the use of inconsistent data and deallocated objects.
 *
 * Connector data can become invalid if the base or head
 * MappedBoxLevel changes in certain ways, such as being
 * re-initialized or going out of scope.  This class is a mechanism to
 * prevent inappropriately using Connectors with invalid data.
 *
 * A MappedBoxLevelHandle is generated by a MappedBoxLevel and sits
 * between the MappedBoxLevel and all Connectors referencing the
 * MappedBoxLevel.  Connectors sensing that the MappedBoxLevel has 
 * been disconnected has a chance to reset themselves to avoid using 
 * invalid data.
 *
 * @see MappedBoxLevel::getMappedBoxLevelHandle()
 */

class MappedBoxLevelHandle
{

public:

   /*!
    * @brief Destructor detaches the handle from its MappedBoxLevel,
    * if it is still attached.
    */
   ~MappedBoxLevelHandle();

   /*!
    * @brief Return the MappedBoxLevel attached to this handle.
    *
    * If there is no attached MappedBoxLevel (isAttached() returns
    * false), an assertion is thrown.
    *
    * @see isAttached()
    */
   const MappedBoxLevel&
   getMappedBoxLevel() const;

   /*!
    * @brief Whether the MappedBoxLevelHandle is still attached to its
    * MappedBoxLevel.
    */
   bool
   isAttached() const;

private:
   /*!
    * @brief Constructor to be called only by MappedBoxLevel.
    *
    * This is the only constructor and it is private.  Only the
    * MappedBoxLevel should allocate MappedBoxLevelHandles.
    *
    * @param[in] mapped_box_level The MappedBoxLevel to be attached to
    * this handle.
    */
   MappedBoxLevelHandle(
      const MappedBoxLevel* mapped_box_level);

   /*!
    * @brief Forbidden copy constructor.
    *
    * This constructor is unimplemented and forbidden.  We never want
    * multiple handles attached to the same MappedBoxLevel.
    */
   MappedBoxLevelHandle( const MappedBoxLevelHandle &other );

   /*!
    * @brief Forbidden assignment operator.
    *
    * This operation is unimplemented and forbidden.  We never want
    * multiple handles attached to the same MappedBoxLevel.
    */
   MappedBoxLevelHandle &operator=( const MappedBoxLevelHandle &other );

   /*!
    * @brief Detach the MappedBoxLevel
    *
    * To be called when the attached MappedBoxLevel changes in a way
    * that can invalidate Connector data.
    *
    * Only the MappedBoxLevel that is attached to the
    * MappedBoxLevelHandle should call this method.
    */
   void
   detachMyMappedBoxLevel();

   //@{
   /*!
    * @brief Allows MappedBoxLevel to allocate MappedBoxLevelHandles
    * and call detachMyMappedBoxLevel().
    */
   friend class MappedBoxLevel;
   //@}

   /*!
    * @brief Pointer to the MappedBoxLevel attached to this handle.
    */
   const MappedBoxLevel* d_mapped_box_level;

};

}
}

#ifndef DEBUG_NO_INLINE
// #include "SAMRAI/hier/MappedBoxLevelHandle.I"
#endif

#endif // included_hier_MappedBoxLevelHandle
