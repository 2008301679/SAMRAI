#!/usr/bin/perl
##
## File:        includes
## Package:     SAMRAI scripts
## Copyright:   (c) 1997-2005 The Regents of the University of California
## Release:     $Name$
## Modified:    $Date$
## Description: shell script to copy include files into main include directory
##

#
# Copy include information for all include files into the main include directory
#

# Make dirname the path to the scripts directory.
$_ = $0; s|[^/]+$||; s/^$/./; s|/$||; $dirname = $_;

#
# Check for "--link" flag to make links instead of copies.
#

if ( @ARGV && $ARGV[0] eq '--link' ) {
    shift;
    $link = 1;
}

$includedir="$dirname/../../include";
system( "rm -fr $includedir" );
system( "mkdir -p $includedir" );
system( "mkdir -p $includedir/tbox" );

#
# Exit if run in test or applications.
#

$pwd=`pwd`;
chop $pwd;
exit 0 if $pwd =~ m"source/test|source/applications";

#
# Get relative path to and from source directory.
#

if ( $pwd =~ m'/source' ) {
    # We are in the source directory.
    ( $fromsource = $pwd ) =~ s|(.*/source)/?||g;

    $sourcepath = $1;
    ( $tosource = $fromsource ) =~ s/[^\/]+/../g;
    ( $filterdir = $fromsource ) =~ s/^$/./;
}
elsif ( -d 'source' ) {
    # We are directly above the source directory.
    $tosource = 'source';
    $fromsource = '..';
    $sourcepath = "$pwd/source";
    $filterdir = '.';
}
else {
    # We should not be running this script from here.
    die "This script must be run from somewhere in the SAMRAI working directory."
}
print "current dir: $pwd\n";
print "source path: $sourcepath\n";
print "from source: $fromsource\n";
print "to source: $tosource\n";
print "filter dir: $filterdir\n";

#
# Get all the files we will be looking for.
# Note that paths found are relative to the top level directory.
#

print "Scanning...\n";
open COM, "cd $sourcepath && find $filterdir -name '*.[hIiC]' -print|";
@allfiles = <COM>;
print "Done scanning.\n";
for (@allfiles) { chop; s|^\./||; }
close COM;

print "Selecting files...\n";

#
# Gather common-case header files and inline files that should
# be in include.
#

@headers = grep /\.h$/, @allfiles;
@headers = grep !/(test|Euler|LinAdv)/, @headers;
@includes = grep /\.I$/, @allfiles;
@includes = grep !/(test|Euler|LinAdv)/, @includes;

#
#  Gather a few fortran include files that should be in included.
#

@fincludes = grep /\.i$/, @allfiles;
@fincludes = grep /(appu_cartbdryparams|pdat_m4arrdim)/, @fincludes;

#
# Noprefix *.C files should be in include.
#
 
@cheaders = grep /\.C$/, @allfiles;
@cheaders = grep /noprefix/, @cheaders;

# All of the *.C files of type "template <class TYPE>"
# should be in include also!

@templates = grep /\.C$/, @allfiles;
@templates = grep !/(test|Euler|LinAdv)/, @templates;
@templates = grep {
    open IFILE, "< $sourcepath/$_" || die "Cannot open $_";
    $lines = join '', <IFILE>;
    close IFILE;
    $lines =~ m/(template\s?<\s?int DIM\s?>)|(template\s?<\s?int DIM\s?,\s?class\sTYPE\s?>)|(template\s<class\sTYPE>)|(template\s<>)/;
} @templates;


print "Done selecting files...\n";
 # $, = "\n";
# open(FH, ">headers_list"); print FH @headers; close FH;
# open(FH, ">includes_list"); print FH @includes; close FH;
# open(FH, ">fincludes_list"); print FH @fincludes; close FH;
# open(FH, ">cheaders_list"); print FH @cheaders; close FH;
# open(FH, ">templates_list"); print FH @templates; close FH;
 # $, = ' ';

#
# If a file should be in include and is not, link or copy it there.
# Warn if an existing link is to the wrong file.
#

print "Copy/linking files...\n";
for $path ( @headers, @includes, @fincludes, @cheaders, @templates ) {
    # print "Checking $path\n";
    ( $file = $path ) =~ s:.*/::;	# File is the base name.
    if ( $path  =~ /.*toolbox.*/ ) {
	$inc = $includedir . "/tbox";
	$link_path = "../../source/$path";
    } else {
	$inc = $includedir;
	$link_path = "../source/$path";
    }

    # The version in include does not exist.  Create it.
    # print "$inc/$file -> ../$path\n";
    if ( $link ) {
	symlink( "$link_path", "$inc/$file" )
	    || die "Cannot create link $inc/$file -> $link_path";
    }
    else {
	&cp( "./$tosource/$path", "$inc/$file" )
	    || die "Cannot copy $path to $inc/$file";
    }
}
print "Done copy/linking files\n";


# Subroutine to check if two files are the same.
sub cmpfiles {

($ANAME,$BNAME) = @_;

open(AFILE, "$ANAME") || die "Cannot open input file $ANAME...";
open(BFILE, "$BNAME") || die "Cannot open input file $BNAME...";

while (!eof(AFILE) && !eof(BFILE)) {
   $ALINE = <AFILE>;
   $BLINE = <BFILE>;
   $_ = $ALINE;

   if (!/^(\/\/|c|C|#|##| \*)[ ]*(Release:[\t ]*\$Name|Revision:[\t ]*\$Revision|Modified:[\t ]*\$Date):[^\$]*\$/o) {
      if ($ALINE ne $BLINE) {
	  close AFILE;
	  close BFILE;
	  return 1;
      }
   }
}

if (eof(AFILE) && eof(BFILE)) {
    $rvalue = 0;
} else {
    $rvalue = 1;
}

close AFILE;
close BFILE;
return $rvalue;

}



#
# Subroutine to copy a file
#

sub cp {
    my ($fr,$to) = @_;
    open ( FR, "<$fr" ) || die "Cannot open $fr for reading";
    open ( TO, ">$to" ) || die "Cannot open $fr for writing";
    while ( $_ = <FR> ) { print TO $_; }
    close FR || die "Cannot close $fr";
    close TO || die "Cannot close $to";
    my($atime,$mtime) = (stat $fr)[8..9];
    utime $atime, $mtime, $to;
    return 1;
}
