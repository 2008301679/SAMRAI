/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright
 * information, see COPYRIGHT and COPYING.LESSER.
 *
 * Copyright:     (c) 1997-2013 Lawrence Livermore National Security, LLC
 * Description:   Load balance correctness test input file.
 *
 ************************************************************************/

// Mesh configuration: Single box

Main {
   dim = 3

   base_name = "box.3d.caplb"
   baseline_dirname = "test_inputs"
   baseline_action = "COMPARE" // "GENERATE" or "COMPARE"

   write_visit = TRUE

   log_all_nodes = TRUE

   // Domain definition
   domain_boxes = [(0,0,0),(31,31,31)]
   xlo = 0.0, 0.0, 0.0
   xhi = 1.5, 1.5, 1.5

   // Whether to enforce nesting.
   enforce_nesting = TRUE, TRUE, TRUE

   // Base nprocs for automatic scaling.
   autoscale_base_nprocs = 4

   // Box generator types: BergerRigoutsos, TileClustering
   box_generator_type = "BergerRigoutsos"

   // Balancer types: TreeLoadBalancer, ChopAndPackLoadBalancer, TilePartitioner
   load_balancer_type = "ChopAndPackLoadBalancer"

   // Whether to load balance (one value for each level).
   load_balance = TRUE, TRUE, TRUE

   efficiency_tol = 0.85
   combine_tol = 0.85

   /*
     Specify ghost-cell-width between anchor and unbalanced.
   */
   ghost_cell_width = 4, 4, 4

   /*
     Specify the min patch size for load balancer.
   */
   min_size = 4, 4, 4

   mesh_generator_name = "SphericalShellGenerator"

   SphericalShellGenerator {
      /*
        Specify unbalanced layer by tagging a set of concentric shells,
        centered at (0,0), with shell i having inner radius radii[2*i]
        and outer radius radii[(2*i)+1].  Note that making shells too thin
        can lead to discontinuous tagging.
      */
      // radii = 0.0, 0.35,    0.70, 0.75,    1.15, 1.17

      // Tag L0 by buffering and l1 by buffering.
      // buffer_distance_0 = 0.04, 0.04, 0.04
      // buffer_distance_1 = 0.00, 0.00, 0.00

      // Tag L0 by buffering and l1 by shrinking.
      shrink_distance_0 = 0.20, 0.20, 0.20
      shrink_distance_1 = 0.20, 0.20, 0.20
   }

}


TileClustering {
  box_size = 8, 8, 8
  DEV_log_cluster_summary = FALSE
  DEV_log_cluster = FALSE
}


BergerRigoutsos {
  sort_output_nodes = TRUE
  DEV_log_node_history = FALSE
  DEV_log_cluster_summary = FALSE
  DEV_log_cluster = FALSE
  // DEV_owner_mode = "SINGLE_OWNER"
  // DEV_algo_advance_mode = "SYNCHRONOUS"
}


TilePartitioner {
  box_size = 16, 16, 16

  TreeLoadBalancer {
    // Debugging options
    DEV_check_map = TRUE
    DEV_check_connectivity = FALSE
    DEV_print_steps = FALSE
    DEV_print_swap_steps = FALSE
    DEV_print_break_steps = TRUE
    DEV_print_edge_steps = FALSE
    DEV_summarize_map = TRUE
  }
}


TreeLoadBalancer {
  DEV_report_load_balance = TRUE // Reported in main
  n_root_cycles = -1
  balance_penalty_wt = 1.0
  surface_penalty_wt = 1.0
  slender_penalty_wt = 1.0
  precut_penalty_wt = 1.0

  // Debugging options
  DEV_check_map = TRUE
  DEV_check_connectivity = TRUE
  DEV_print_steps = FALSE
  DEV_print_swap_steps = FALSE
  DEV_print_break_steps = FALSE
  DEV_print_edge_steps = FALSE
  DEV_summarize_map = TRUE
}

TimerManager {
//   print_exclusive      = TRUE
   print_summed           = TRUE
   print_max              = TRUE
   print_threshold        = 0.
   timer_list             = "hier::*::*", "mesh::*::*", "apps::*::*"
}


PatchHierarchy {

   /*
     Specify number of levels (1, 2 or 3 for this test).
   */
   max_levels = 3

   largest_patch_size {
      level_0 = -1, -1, -1
      // level_0 = 20, 20, 20
      // all finer levels will use same values as level_0...
   }
   smallest_patch_size {
      level_0 = 6, 6, 6
      level_1 = 6, 6, 6
      level_2 = 6, 6, 6
      // all finer levels will use same values as level_0...
   }
   ratio_to_coarser {
      level_1            = 2, 2, 2
      level_2            = 2, 2, 2
      //  etc.
   }

   allow_patches_smaller_than_ghostwidth = TRUE
   allow_patches_smaller_than_minimum_size_to_prevent_overlaps = TRUE
   proper_nesting_buffer = 1, 1, 1
}
