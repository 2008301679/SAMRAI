/*
 * The purpose of this input file is to compare performance of different
 * RankTreeStrategy implementation.  There is no barrrier after each
 * cycle, so comparisons against MPI equivalents might be questionable.
 *
 * Processing cost is zero, since it would not diffentiate the diffeent
 * implementations.
 */

Main {

  base_name = "comparetrees"

  log_all_nodes = FALSE

}




/*
 * Define tests using databases named Test##,
 * where ## is a 2-digit integer, sequentially from 0
 */


Test00 {

  nickname = "Reduce-DFS" // Nick name of test.

  tree_name = "BalancedDepthFirstTree" // BalancedDepthFirstTree || CenteredRankTree || ...

  BalancedDepthFirstTree { // Parameters for BalancedDepthFirstTree in getTreeForTesting()
    do_left_leaf_switch = TRUE
  }

  msg_length = 1024 // Message length (units of integer)
  first_data_length = 1 // One int.  see AsyncCommPeer::limitFirstDataLength().

  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.

  repetition = 100 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.

  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().

  // Direction of message travel:
  // "UP", "DOWN": Self-explanatory
  // "UP_THEN_DOWN", "DOWN_THEN_UP": Self-explanatory
  // "TreeLB": Simulation communication of TreeLoadBalancer
  direction = "UP"
}


Test01 {

  nickname = "Reduce-CT" // Nick name of test.

  tree_name = "CenteredRankTree" // BalancedDepthFirstTree || CenteredRankTree || ...

  CenteredRankTree { // Parameters for BalancedDepthFirstTree in getTreeForTesting()
    make_first_rank_the_root = TRUE
  }

  msg_length = 1024 // Message length (units of integer)
  first_data_length = 1 // One int.  see AsyncCommPeer::limitFirstDataLength().

  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.

  repetition = 100 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.

  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().

  // Direction of message travel:
  // "UP", "DOWN": Self-explanatory
  // "UP_THEN_DOWN", "DOWN_THEN_UP": Self-explanatory
  // "TreeLB": Simulation communication of TreeLoadBalancer
  direction = "UP"
}


Test02 {

  nickname = "Broadcast-DFS" // Nick name of test.

  tree_name = "BalancedDepthFirstTree" // BalancedDepthFirstTree || CenteredRankTree || ...

  BalancedDepthFirstTree { // Parameters for BalancedDepthFirstTree in getTreeForTesting()
    do_left_leaf_switch = TRUE
  }

  msg_length = 1024 // Message length (units of integer)
  first_data_length = 1 // One int.  see AsyncCommPeer::limitFirstDataLength().

  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.

  repetition = 100 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.

  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().

  // Direction of message travel:
  // "UP", "DOWN": Self-explanatory
  // "UP_THEN_DOWN", "DOWN_THEN_UP": Self-explanatory
  // "TreeLB": Simulation communication of TreeLoadBalancer
  direction = "DOWN"
}


Test03 {

  nickname = "Broadcast-CT" // Nick name of test.

  tree_name = "CenteredRankTree" // BalancedDepthFirstTree || CenteredRankTree || ...

  CenteredRankTree { // Parameters for BalancedDepthFirstTree in getTreeForTesting()
    make_first_rank_the_root = TRUE
  }

  msg_length = 1024 // Message length (units of integer)
  first_data_length = 1 // One int.  see AsyncCommPeer::limitFirstDataLength().

  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.

  repetition = 100 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.

  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().

  // Direction of message travel:
  // "UP", "DOWN": Self-explanatory
  // "UP_THEN_DOWN", "DOWN_THEN_UP": Self-explanatory
  // "TreeLB": Simulation communication of TreeLoadBalancer
  direction = "DOWN"
}


Test04 {

  nickname = "Allreduce-DFS" // Nick name of test.

  tree_name = "BalancedDepthFirstTree" // BalancedDepthFirstTree || CenteredRankTree || ...

  BalancedDepthFirstTree { // Parameters for BalancedDepthFirstTree in getTreeForTesting()
    do_left_leaf_switch = TRUE
  }

  msg_length = 1024 // Message length (units of integer)
  first_data_length = 1 // One int.  see AsyncCommPeer::limitFirstDataLength().

  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.

  repetition = 100 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.

  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().

  // Direction of message travel:
  // "UP", "DOWN": Self-explanatory
  // "UP_THEN_DOWN", "DOWN_THEN_UP": Self-explanatory
  // "TreeLB": Simulation communication of TreeLoadBalancer
  direction = "UP_THEN_DOWN"
}


Test05 {

  nickname = "Allreduce-CT" // Nick name of test.

  tree_name = "CenteredRankTree" // BalancedDepthFirstTree || CenteredRankTree || ...

  CenteredRankTree { // Parameters for BalancedDepthFirstTree in getTreeForTesting()
    make_first_rank_the_root = TRUE
  }

  msg_length = 1024 // Message length (units of integer)
  first_data_length = 1 // One int.  see AsyncCommPeer::limitFirstDataLength().

  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.

  repetition = 100 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.

  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().

  // Direction of message travel:
  // "UP", "DOWN": Self-explanatory
  // "UP_THEN_DOWN", "DOWN_THEN_UP": Self-explanatory
  // "TreeLB": Simulation communication of TreeLoadBalancer
  direction = "UP_THEN_DOWN"
}


Test06 {

  nickname = "TreeLB-DFS" // Nick name of test.

  tree_name = "BalancedDepthFirstTree" // BalancedDepthFirstTree || CenteredRankTree || ...

  BalancedDepthFirstTree { // Parameters for BalancedDepthFirstTree in getTreeForTesting()
    do_left_leaf_switch = TRUE
  }

  msg_length = 1024 // Message length (units of integer)
  first_data_length = 1 // One int.  see AsyncCommPeer::limitFirstDataLength().

  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.

  repetition = 100 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.

  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().

  // Direction of message travel:
  // "UP", "DOWN": Self-explanatory
  // "UP_THEN_DOWN", "DOWN_THEN_UP": Self-explanatory
  // "TreeLB": Simulation communication of TreeLoadBalancer
  direction = "TreeLB"

  // Specify the dependency for the down-message, as a funcion of MPI rank:
  // 1: down message depends only on parent
  // 2: down message depends on grandparent
  // 0: there is no down message
  // First value is for rank 0, second is for rank 1, and so on.
  // The array is repeated for ranks higher than specifed.
  // (Rank r has dependency according to index r%L, where L is
  // the length of down_message_dependency.)
  down_message_dependency = 1, 2, 0, 1, 2, 0
}


Test07 {

  nickname = "TreeLB-CT" // Nick name of test.

  tree_name = "CenteredRankTree" // BalancedDepthFirstTree || CenteredRankTree || ...

  CenteredRankTree { // Parameters for BalancedDepthFirstTree in getTreeForTesting()
    make_first_rank_the_root = TRUE
  }

  msg_length = 1024 // Message length (units of integer)
  first_data_length = 1 // One int.  see AsyncCommPeer::limitFirstDataLength().

  verify_data = TRUE // Verify correctness of received data.
  processing_cost = 400, 0 // Simulated processing cost is 400 usec per message and 0 usec per item in message.

  repetition = 100 // Repetitions of communication and processing steps.
  barrier_after_each_repetition = FALSE // Whether to barrier after each rep.

  mpi_tags = 1, 2 // Array of 2 ints, see AsyncCommPeer::setMPITag().

  // Direction of message travel:
  // "UP", "DOWN": Self-explanatory
  // "UP_THEN_DOWN", "DOWN_THEN_UP": Self-explanatory
  // "TreeLB": Simulation communication of TreeLoadBalancer
  direction = "TreeLB"

  // Specify the dependency for the down-message, as a funcion of MPI rank:
  // 1: down message depends only on parent
  // 2: down message depends on grandparent
  // 0: there is no down message
  // First value is for rank 0, second is for rank 1, and so on.
  // The array is repeated for ranks higher than specifed.
  // (Rank r has dependency according to index r%L, where L is
  // the length of down_message_dependency.)
  down_message_dependency = 1, 2, 0, 1, 2, 0
}



TimerManager {
//   print_exclusive      = TRUE
   print_summed           = TRUE
   print_max              = TRUE
   print_threshold        = 0.
   timer_list             = "tbox::*::*", "apps::*::*"
}
