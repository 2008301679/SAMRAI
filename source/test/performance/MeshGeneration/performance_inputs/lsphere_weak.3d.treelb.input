/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright
 * information, see COPYRIGHT and COPYING.LESSER.
 *
 * Copyright:     (c) 1997-2013 Lawrence Livermore National Security, LLC
 * Description:   Performance input file for TreeLoadBalancer
 *
 ************************************************************************/

/*
From Luitjens and Berzins, Scalable parallel regridding algorithms
for block-structured adaptive mesh refinement, Concurrency
andComputation: Practice and Experience, 2011, 23:1522-1537.  The
problem description is at the beginning of section 3.

This is Luitjens's weak-scaling set-up.
He probably used a min box size of 1x1x1.  He didn't say.
That's unrealistic.  I'm using 3x3x3 (coarse resolution) min box size
with 4x4x4 min box size for inflection cut.
*/


Main {
   dim = 3

   base_name = "lsphere_weak.3d.treelb"
   log_all_nodes = FALSE
   write_visit = TRUE
   enforce_nesting = FALSE
   load_balance = TRUE

   // Balancer types: TreeLoadBalancer, ChopAndPackLoadBalancer
   load_balancer_type = "TreeLoadBalancer"

   // Tree type for TreeLoadBalancer: CenteredRankTree, BalancedDepthFirstTree, BreadthFirstTree
   rank_tree_type = "CenteredRankTree"

   write_comm_graph = FALSE // Whether to write communication graph of TreeLoadBalancer.

   /*
     Specify domain as a box array in the reference index space.
   */
   domain_boxes = [(0,0,0),(31,31,31)]

   /*
     Specify physical domain box.
   */
   xlo =  0.0,  0.0,  0.0
   xhi =  1.0,  1.0,  1.0

   /*
     Base nprocs for automatic scaling.
   */
   autoscale_base_nprocs = 1

   ghost_cell_width = 2, 2, 2

   efficiency_tol = 0.90
   combine_tol = 0.90

   BergerRigoutsos {
      DEV_inflection_cut_threshold_ar = 4
      DEV_min_box_size_from_cutting = 5, 5, 5
      sort_output_nodes = TRUE
      DEV_log_node_history = FALSE
      DEV_log_cluster_summary = TRUE
      DEV_log_cluster = FALSE
      // DEV_owner_mode = "SINGLE_OWNER"
      // DEV_algo_advance_mode = "SYNCHRONOUS"
   }

   mesh_generator_name = "SphericalShellGenerator"

   SphericalShellGenerator {
      /*
        Specify unbalanced layer by tagging a set of concentric shells,
        centered at (0,0,0), with shell i having inner radius radii[2*i]
        and outer radius radii[(2*i)+1].  Note that making shells too thin
        can lead to discontinuous tagging.
      */
      center = 0.5, 0.5, 0.5
      radii = 0.3, 0.4

      // Tag L0 by buffering and l1 by buffering.
      buffer_distance_0 = 0.00, 0.00, 0.00
      buffer_distance_1 = 0.00, 0.00, 0.00

      // Tag L0 by buffering and l1 by shrinking.
      // buffer_distance_0 = 0.02, 0.02
      // shrink_distance_1 = 0.06, 0.06
   }

}

TreeLoadBalancer {
  DEV_report_load_balance = FALSE // Reported in main
  max_cycle_spread_ratio = 1000000
  flexible_load_tolerance = 0.05
  min_load_fraction_per_box = 0.00

  // Debugging options
  DEV_check_map = FALSE
  DEV_check_connectivity = FALSE
  DEV_print_steps = FALSE
  DEV_print_swap_steps = FALSE
  DEV_print_break_steps = FALSE
  DEV_print_edge_steps = FALSE
}

CenteredRankTree { // Parameters for BalancedDepthFirstTree in getRankTree()
  make_first_rank_the_root = TRUE
}

BalancedDepthFirstTree { // Parameters for BalancedDepthFirstTree in getRankTree()
  do_left_leaf_switch = TRUE
}

BreadthFirstRankTree { // Parameters for CenteredRankTree in getRankTree()
  tree_degree = 2
}

ChopAndPackLoadBalancer {
  // processor_layout = 10, 10, 10
  bin_pack_method = "SPATIAL"
  max_workload_factor = 0.3333333333
  workload_tolerance = 0.0
}

TimerManager {
//   print_exclusive      = TRUE
   print_summed           = TRUE
   print_max              = TRUE
   print_threshold        = 0.
   timer_list             = "hier::*::*", "mesh::*::*", "apps::*::*"
}


PatchHierarchy {

   /*
     Specify number of levels (1, 2 or 3 for this test).
   */
   max_levels = 2

   largest_patch_size {
      level_0 = -1,-1,-1
      // level_0 = 20,20,20
      // all finer levels will use same values as level_0...
   }
   smallest_patch_size {
      level_0 = 3, 3, 3
      level_3 = 3, 3, 3
      // all finer levels will use same values as level_0...
   }
   ratio_to_coarser {
      level_1            = 1, 1, 1
      level_2            = 1, 1, 1
      level_3            = 1, 1, 1
      //  etc.
   }

   allow_patches_smaller_than_ghostwidth = TRUE
   allow_patches_smaller_than_minimum_size_to_prevent_overlaps = TRUE
   proper_nesting_buffer = 1, 1, 1
}
