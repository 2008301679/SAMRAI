/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright
 * information, see COPYRIGHT and COPYING.LESSER.
 *
 * Copyright:     (c) 1997-2013 Lawrence Livermore National Security, LLC
 * Description:   Load balance correctness test input file.
 *
 ************************************************************************/

// Mesh configuration: Sinusoidal front.

Main {
   // Dimension of problem.  No default.
   dim = 2

   // Base name for output files.
   base_name = "front.2d.treelb"

   // Whether to dump the hierarchy in a visit file.
   write_visit = TRUE

   // Whether to log all nodes.
   log_all_nodes = FALSE

   // Domain definition: box, lower and upper corners.
   domain_boxes = [(0,0),(99,49)]
   xlo = 0.0, 0.0
   xhi = 2.0, 1.0

   // Whether to enforce nesting (one value for each level, but first value is ignored).
   enforce_nesting = TRUE, TRUE, TRUE

   // Scale the domain size by number of processes divided by this value.
   autoscale_base_nprocs = 1

   // Box generator types: BergerRigoutsos or TileClustering
   box_generator_type = "BergerRigoutsos"

   // Balancer types: TreeLoadBalancer, ChopAndPackLoadBalancer or TilePartitioner
   load_balancer_type = "TreeLoadBalancer"

   // Whether to load balance (one value for each level).
   load_balance = TRUE, TRUE

   // Efficiency tolerance clustering parameter.
   efficiency_tol = 0.85
   // Combine tolerance clustering parameter.
   combine_tol = 0.85

   // Mesh generator name: SinusoidalFrontGenerator or SphericalShellGenerator.
   mesh_generator_name = "SinusoidalFrontGenerator"

   // Refer to SinusoidalFrontGenerator for input.
   SinusoidalFrontGenerator {

      init_disp = 1.0, 1.0
      period = 2.0, 4.0
      amplitude = 0.5

      // Buffer distances around the walls (one for each tag level).
      buffer_distance_0 = 0.07, 0.07
      buffer_distance_1 = 0.02, 0.02
   }

}


TileClustering {
  box_size = 10, 10
  coalesce_boxes = FALSE
  DEV_log_cluster_summary = FALSE
  DEV_log_cluster = FALSE
}


BergerRigoutsos {
  sort_output_nodes = TRUE
  DEV_log_node_history = FALSE
  DEV_log_cluster_summary = FALSE
  DEV_log_cluster = FALSE
  // DEV_owner_mode = "SINGLE_OWNER"
  // DEV_algo_advance_mode = "SYNCHRONOUS"
}


TilePartitioner {
  box_size = 10, 10

  TreeLoadBalancer {
    // Debugging options
    DEV_check_map = TRUE
    DEV_check_connectivity = FALSE
    DEV_print_steps = FALSE
    DEV_print_swap_steps = TRUE
    DEV_print_break_steps = TRUE
    DEV_print_edge_steps = FALSE
    DEV_summarize_map = TRUE
  }
}


TreeLoadBalancer {
  DEV_report_load_balance = TRUE // Reported in main
  DEV_balance_penalty_wt = 1.0
  DEV_surface_penalty_wt = 1.0
  DEV_slender_penalty_wt = 1.0
  DEV_precut_penalty_wt = 1.0

  // Debugging options
  DEV_check_map = TRUE
  DEV_check_connectivity = TRUE
  DEV_print_steps = FALSE
  DEV_print_swap_steps = FALSE
  DEV_print_break_steps = FALSE
  DEV_print_edge_steps = FALSE
  DEV_summarize_map = TRUE
}

TimerManager {
//   print_exclusive      = TRUE
   print_summed           = TRUE
   print_max              = TRUE
   print_threshold        = 0.
   timer_list             = "hier::*::*", "mesh::*::*", "apps::*::*"
}


PatchHierarchy {

   /*
     Specify number of levels (1, 2 or 3 for this test).
   */
   max_levels = 3

   largest_patch_size {
      level_0 = -1,-1
      // level_0 = 20,20
      // all finer levels will use same values as level_0...
   }
   smallest_patch_size {
      level_0 = 12, 12
      level_1 = 6, 6
      level_2 = 15, 15
      // all finer levels will use same values as level_0...
   }
   ratio_to_coarser {
      level_1            = 3, 3
      level_2            = 3, 3
      level_3            = 3, 3
      //  etc.
   }

   allow_patches_smaller_than_ghostwidth = TRUE
   allow_patches_smaller_than_minimum_size_to_prevent_overlaps = TRUE
   proper_nesting_buffer = 1, 1
}
