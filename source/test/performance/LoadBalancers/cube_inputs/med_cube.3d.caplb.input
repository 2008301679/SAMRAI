/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright 
 * information, see COPYRIGHT and COPYING.LESSER. 
 *
 * Copyright:     (c) 1997-2011 Lawrence Livermore National Security, LLC
 * Description:   Performance input file for TreeLoadBalancer 
 *
 ************************************************************************/



Main {
   dim = 3

   base_name = "med_cube.3d.caplb"
   log_all_nodes = FALSE

   // Balancer types: TreeLoadBalancer, ChopAndPackLoadBalancer
   load_balancer_type = "ChopAndPackLoadBalancer"

   /*
     Specify domain as a box array in the reference index space.
   */
   domain_boxes = [(0,0,0),(49,49,49)]

   /*
     Specify number of levels (1, 2 or 3).
   */
   max_levels = 3

   /*
     Specify L0 layer as a box array in the reference index space.
     The L0 layer will be partitioned but its partitioning is not
     used in the performance test.

     If omitted, the L0 layer is the same as the domain.
   */
   L0_boxes = [(0,0,0),(49,49,49)]
   /*
     If L0 is not contained in domain, you can use this flag
     to remove the parts that are outside the domain.
   */
   autonest_L0 = TRUE

   /*
     Specify ghost-cell-width between L0 and unbalanced.
   */
   ghost_cell_width = 2, 2, 2

   /*
     Specify the min patch size.
   */
   min_size = 2, 2, 2
   max_size = 10, 10, 10

   PrebalanceByUserBoxes {
      /*
        Specify unbalanced layer as a box array in the reference index space.

        initial_owners are the ranks of the owners of all the initial balance boxes.
        By default, processor 0 owns all the initial balance boxes.
      */
      prebalance_boxes = [(5,5,5),(44,44,44)]
      initial_owners = 0
   }

}

TreeLoadBalancer {
  report_load_balance = TRUE // Reported in main
  n_root_cycles = -1
  balance_penalty_wt = 1.0
  surface_penalty_wt = 1.0
  slender_penalty_wt = 1.0
  precut_penalty_wt = 1.0

  // Debugging options
  check_map = FALSE
  check_connectivity = FALSE
  print_steps = TRUE
  print_swap_steps = FALSE
  print_break_steps = TRUE
  print_edge_steps = FALSE
}

TimerManager {
//   print_exclusive      = TRUE
   print_summed           = TRUE
   print_max              = TRUE
   print_threshold        = 0.
   timer_list             = "hier::*::*", "mesh::*::*", "apps::*::*"
}
