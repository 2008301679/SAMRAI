*****************************************************************************
  Copyright 1997-2011
  Lawrence Livermore National Security, LLC.
  All rights reserved.
*****************************************************************************

                     Release Notes for SAMRAI v3.3.0

     (notes for previous releases may be found in /SAMRAI/docs/release)

*****************************************************************************

Please direct any questions related to these notes to the SAMRAI development
team by sending email to samrai@llnl.gov.

LLNL users can use the discussion groups on the LLNL Sourceforge site:

https://sourceforge.llnl.gov/sf/discussion/do/listForums/projects.samrai/discussion

*****************************************************************************

Where to report Bugs
--------------------

If a bug is found in the SAMRAI library, we ask that you kindly report
it to us so that we may fix it.  LLNL users may report bugs using the
LLNL Sourceforge site if you have a sourceforge account:

https://sourceforge.llnl.gov/sf/tracker/do/listTrackers/projects.samrai/tracker

Bugs found by other users should send email to samrai-bugs@llnl.gov.

*****************************************************************************

----------------------------------------------------------------------------
                Summary of what's new
-----------------------------------------------------------------------------

This section contains a summary of additions to SAMRAI.  More detailed
descriptions of items in the following list are provided below.

(1) Reduced memory usage.

(2) Better execution times.

(3) The bridge algorithm is now multi-block aware.

(4) CoarsenSchedule is multi-block aware.

(5) RefineSchedule construction performance has been improved.


-----------------------------------------------------------------------------
                Summary of what's changed
-----------------------------------------------------------------------------

This section contains a summary of changes to SAMRAI.  More detailed
descriptions of items in the following list are provided below.

(1) MappedBox has been merged into Box.

(2) BoxSet and BoxList have been merged into BoxContainer.

(3) Internal representation of Connector is now encapsulated behind an abstract
    API.


*****************************************************************************

-----------------------------------------------------------------------------
                Details about what's new
-----------------------------------------------------------------------------

(1) Reduced memory usage.

Algorithmic improvements and the use of BoxContainer in lieu of BoxSet and/or
BoxList have drastically reduced the number of Box creations and assignments
especially for multi-block.  In addition the number of Boxes in existence at
any time has also been drastically reduced especially for multi-block.

QUOTE SOME NUMBERS HERE

(2) Better execution times.

Larely due to the reduction in object creation/copying execution time has
improved.

QUOTE SOME NUMBERS HERE

(3) The bridge algorithm is now multi-block aware.

NEED SOME DETAILS

(4) CoarsenSchedule is multi-block aware.

There is no longer a MultiblockCoarsenSchedule.

(5) RefineSchedule construction performance has been improved.

NEED SOME DETAILS

-----------------------------------------------------------------------------
                Details about what's changed
-----------------------------------------------------------------------------

(1) MappedBox has been merged into Box.

There is no longer a class called MappedBox.

All Boxes now have a BoxId.

"Unmapped" Boxes have an invalid BoxId.

Names of classes have changed to reflect the fact that MappedBox is no longer
a class.  For example MappedBoxTree is now just BoxTree.  "Mapped box"
terminology still exists in variable and function argument names as no complete
attempt was made to eliminate this.

(2)  BoxSet and BoxList have been merged into BoxContainer.

The single container, BoxContainer, can act as a set or as a list depending on
the algorithmic needs.

Internally only one instance of each Box exists.

Merging these containers eliminates much of the need to copy from one
container representation to another in order to access different container
operators.

BoxTree and MultiblockBoxTree will be merged into BoxContainer in a future
release.

NEED INFO ABOUT USAGE HERE.

(3) Internal representation of Connector is now encapsulated behind an abstract
    API.

Previously, the fact that Connector used a NeighborhoodSet as its internal
representation was implicitly exported.  Client code would request the
NeighborhoodSet and explicitly manipulate it.  It is no longer possible to
obtain the NeighborhoodSet.  Instead, there is an API which allows clients to
abstractly request information from or to perform modifications on a Connector.
There are also typedefs for the different Connector iterators which should
now be used.

=============================================================================
=============================================================================
