*****************************************************************************
  Copyright 1997-2013
  Lawrence Livermore National Security, LLC.
  All rights reserved.
*****************************************************************************

                     Release Notes for SAMRAI v3.6.0

     (notes for previous releases may be found in /SAMRAI/docs/release)

*****************************************************************************

Please direct any questions related to these notes to the SAMRAI development
team by sending email to samrai@llnl.gov.

LLNL users can use the discussion groups on the LLNL Sourceforge site:

https://sourceforge.llnl.gov/sf/discussion/do/listForums/projects.samrai/discussion

*****************************************************************************

Where to report Bugs
--------------------

If a bug is found in the SAMRAI library, we ask that you kindly report
it to us so that we may fix it.  LLNL users may report bugs using the
LLNL Sourceforge site if you have a sourceforge account:

https://sourceforge.llnl.gov/sf/tracker/do/listTrackers/projects.samrai/tracker

Bugs found by other users should send email to samrai-bugs@llnl.gov.

*****************************************************************************

----------------------------------------------------------------------------
                Significant bug fixes
----------------------------------------------------------------------------

     
*****************************************************************************

----------------------------------------------------------------------------
                Summary of what's new
-----------------------------------------------------------------------------

This section contains a summary of additions to SAMRAI.  More detailed
descriptions of items in the following list are provided below.

1) The class MappingConnector which is derived from Connector has been
   introduced.  The concept of a MappingConnector which is distinct from an
   OverlapConnector has always been implied but never actually introduced.  In
   places where a Connector represents a mapping a MappingConnector is now
   used.

2) Both Connctor and MappingConnector hold pointers to their transposes.  Hence
   one Connector can now be used where 2--the Connector and its transpose--
   were previously required.

3) A new PatchLevel constructor which acquires a supplied BoxLevel has been
   introduced.  The existing constructor which copies a supplied BoxLevel is
   unchanged.

-----------------------------------------------------------------------------
                Summary of what's changed
-----------------------------------------------------------------------------

This section contains a summary of changes to SAMRAI.  More detailed
descriptions of items in the following list are provided below.

1) SAMRAI now requires PETSc 3.2.0.

2) All injection coarsening clases are now consistently named as injections.

3) Instantiation of Connectors and BoxLevels now occurs in the methods that
   know how to build them.

4) BoxIterators are now accessed through the begin and end methods on class
   Box.  The BoxIterator constructor itself is now private.

5) Cell/Edge/Face/Node/SideIterators are now accessed through the static
   begin and end methods on Cell/Edge/Face/Node/SideGeometry respectively.
   The Iterator constructors themselves are now private.

6) BoxContainerIterator (aka BoxContainer::iterator) and
   BoxContainerConstIterator (aka BoxContainer::const_iterator) are now
   accessed through the begin and end methods on class BoxContainer.  The
   constructors for each iterator are now private.

7) The restart-redistribute tool is now parallel.

*****************************************************************************

-----------------------------------------------------------------------------
                Details about what's new
-----------------------------------------------------------------------------

1) Class Connector describes Box overlaps between two BoxLevels.  It
   corresponds to the OverlapConnector concept.  Class MappingConnector is
   derived from Connector and hence it also describes Box overlaps between two
   BoxLevels.  However, it describes these overlaps in a specific context--
   when the base BoxLevel has undergone a transition resulting in the head
   BoxLevel.  Hence it describes how the Boxes in the original BoxLevel (i.e.
   the base) map onto the Boxes in the modified BoxLevel (i.e. the head).

   Previously, there was no distinction between these Connector concepts.  They
   were both embodied in class Connector and there was to way to distinguish
   one from another.  Hence there was no way to ensure that any given Connector
   was being used in the proper context.

   The library now constructs and uses MappingConnectors where connectors
   describing how BoxLevels have changed are needed.  This provides both type
   safety and added clarity as to how methods taking various Connectors are to
   be used.

2) Many interfaces have been simplified as a single Connector object can now
   be used to refer to both the Connector and its transpose.  In particular,
   there is now only 1 modify method and 3 bridge methods as the other
   overloaded versions which existed were degenerate cases.  Note that in the
   case of bridgeWithNesting() and the 2 bridge() methods which create the
   result it is now necessary to specify whether or not the tranpose bridge
   should be computed.

   Several convenience methods have been added to find/create both a Connector
   and its transpose.  These are PatchHierarchy::getConnectorWithTranspose(),
   OverlapConnectorAlgorithm::findOverlapsWithTranspose(),
   PersistentOverlapConnectors::createConnectorWithTranspose(),
   PersistentOverlapConnectors::findConnectorWithTranspose(), and
   PersistentOverlapConnectors::findOrCreateConnectorWithTranspose().

3) The BoxLevel contained in a PatchLevel may not be modified.  Therefore, the
   existing PatchLevel constructor copied the supplied BoxLevel.  However, this
   means a BoxLevel copy for each PatchLevel constructed.  It the client code
   will never modify the supplied BoxLevel, it is not necessary for the new
   PatchLevel to copy the BoxLevel.  Therefore a new PatchLevel constructor has
   been introduced so that the constructed PatchLevel acquires the supplied
   BoxLevel.  To guarantee that client code does not accidentally modify the
   now shared BoxLevel, this constructor locks it so that any subsequent call
   to a non-const method on that BoxLevel results in a run-time error.  The
   library now makes use of this new PatchLevel constructor wherever possible
   to avoid the overhead of the old constructor.

   To make use of this new constructor there is are new versions of
   PatchHierarchy::makeNewPatchLevel and PatchLevelFactory::allocate.

-----------------------------------------------------------------------------
                Details about what's changed
-----------------------------------------------------------------------------

1) SAMRAI has been converted to work with PETSc 3.2.0.

2) Class pdat::OuternodeDoubleConstantCoarsen has been changed to
   pdat::OuternodeDoubleInjection to be consistent with injections for other
   data centerings and types.

3) Previous practice was to instantiate Connectors and BoxLevels in high level
   library routines or client code and pass these objects through multiple
   levels of library methods to the method that ultimately knows how to build
   them.  However, until these Connectors and BoxLevels were finally built,
   they were in a very ill defined state.  This resulted in many ill defined
   objects exsiting in the code at any given time.

   Practice is now for the methods that know how to build Connectors and
   BoxLevels to also instantiate them.  Thus, boost::shared_ptrs to these
   objects are typically now created either in client code or high level
   library routines and passed along to the method that actaully instantiates
   and builds the objects.  The shared_ptrs are either null or point to fully
   constructed objects.  This results in a number of API changes in which
   Connector and BoxLevel references are replaced by shared_ptrs to Connectors
   and BoxLevels.

4) Use of BoxIterator now follows the well established pattern of requesting
   the iterator through begin and end methods on Box.  These methods are also
   simpler to use than the BoxIterator constructor which is now private.

5) Use of Cell/Edge/Face/Node/SideIterator now follows the well established
   pattern of requesting the iterators through begin and end methods.  These
   are static methods on Cell/Edge/Face/Node/SideGeometry respectively.  The
   begin and end methods are simpler to use that the iterator constructors
   which are now private.

6) Use of BoxContainerIterator and BoxContainerConstIterator now follows the
   well established pattern of requesting the iterators through begin and end
   methods on BoxContainer.  These methods are also simpler to use than the
   constructors for these iterators which are now private.

7) The restart-redistribute tool has been parallelized on the smaller of the
   number of input files and the number of output files.  You may run the
   tool with any number of processors up to the smaller of the number of
   input and the number output files.  Invocation of the tool is via mpirun
   or the appropriate parallel program launcher for your platform.  No
   arguments to the tool have changed.

=============================================================================
=============================================================================
