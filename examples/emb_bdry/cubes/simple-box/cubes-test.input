//
// File:        cubes-test
// Package:     SAMRAI application
// Copyright:   (c) 1997-2002 The Regents of the University of California
// Release:     $Name:  $
// Revision:    $Revision: 1.1.1.1 $
// Modified:    $Date: 2004/11/30 00:28:19 $
// Description: Input file to test SAMRAI-Cubes interface
//

Main {

   log_file_name            = "cubes-test.log"

   visit_dump_interval        = 1      
   visit_dump_dirname         = "viz_cubestest"

}

EmbeddedBoundaryGeometry {

    CubesPatchInterface {
       surface_tri_file = "box1.tri"
       max_levels       = 5
       verbose          = TRUE
    }

}

SampleApp {
   tag_growing_sphere   = FALSE
   tag_cut_cells        = TRUE

}

CartesianGeometry {
   domain_boxes  = [ (0,0,0) , (5,5,5) ]   // coarse mesh
   x_lo          = 0.31 , 0.3001, -0.36 // lower end of computational domain.
   x_up          = 2.301 , 3.043 , 2.797979 // upper end of computational domain.
}

GriddingAlgorithm {
   max_levels              = 3 // Maximum number of levels in hierarchy.

// Note: For the following regridding information, data is required for each
//       potential in the patch hierarchy; i.e., levels 0 thru max_levels-1.
//       If more data values than needed are given, only the number required
//       will be read in.  If fewer values are given, an error will result.
//
// Specify coarsening ratios for each level 1 through max_levels-1
   ratio_to_coarser {         // vector ratio to next coarser level
      level_1               = 2 , 2 , 2
      level_2               = 2 , 2 , 2
      level_3               = 2 , 2 , 2
   }

   largest_patch_size {
      level_0 = 6 , 6 , 6 
      // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 = 1 , 1 , 1
      // all finer levels will use same values as level_0...
   }

   efficiency_tolerance     = 0.70e0   // min % of tag cells in new patch level
   combine_efficiency       = 0.85e0   // chop box if sum of volumes of smaller
                                       // boxes < efficiency * vol of large box
}

StandardTagAndInitialize{
   tagging_method = "GRADIENT_DETECTOR"
//   tagging_method = "REFINE_BOXES"
//   RefineBoxes {
//      level_0  = [ (10,10) , (80,80) ]
//   }
}

TimerManager {
   timer_list = "apps::main::*"
}


UniformLoadBalance {  // for SAMRAI v1.3.1
//   processors         = 1 , 1
   use_spatial_bin_pack = TRUE
}
LoadBalancer {  // for SAMRAI v1.3.2
   use_spatial_bin_pack = TRUE
}

